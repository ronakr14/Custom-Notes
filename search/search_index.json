{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Notes","text":""},{"location":"#programming-languages","title":"Programming Languages","text":"<p>Explore various programming languages, their syntax, features, and applications. This section includes notes on languages such as Python, Java, JavaScript, and more.</p> # Concept # Concept # Concept # Concept 1. Python 2. Scala 3. Bash 4. Java 5. JavaScript 6. C 7. C++ 8. Markdown 9. HTML 10. CSS"},{"location":"ai_ml/","title":"Welcome to Artificial Intelligence notes.","text":""},{"location":"ai_ml/#contents","title":"Contents","text":"<ol> <li>Machine Learning</li> <li>Deep Learning</li> </ol>"},{"location":"ai_ml/deep_learning/","title":"Welcome to Deep Learning notes.","text":""},{"location":"ai_ml/deep_learning/#contents","title":"Contents","text":"<ol> <li>Books</li> </ol>"},{"location":"ai_ml/deep_learning/books/","title":"Awesome Deep Learning","text":""},{"location":"ai_ml/deep_learning/books/#books","title":"Books","text":"<ol> <li>Deep Learning by Yoshua Bengio, Ian Goodfellow and Aaron Courville  (05/07/2015)</li> <li>Neural Networks and Deep Learning by  Michael Nielsen (Dec 2014)</li> <li>Deep Learning by Microsoft Research (2013)</li> <li>Deep Learning Tutorial by LISA lab, University of Montreal (Jan 6 2015)</li> <li>neuraltalk by Andrej Karpathy : numpy-based RNN/LSTM implementation</li> <li>An introduction to genetic algorithms</li> <li>Artificial Intelligence: A Modern Approach</li> <li>Deep Learning in Neural Networks: An Overview</li> <li>Artificial intelligence and machine learning: Topic wise explanation</li> <li>Grokking Deep Learning for Computer Vision</li> <li>Dive into Deep Learning - numpy based interactive Deep Learning book</li> <li>Practical Deep Learning for Cloud, Mobile, and Edge - A book for optimization techniques during production.</li> <li>Math and Architectures of Deep Learning - by Krishnendu Chaudhury</li> <li>TensorFlow 2.0 in Action - by Thushan Ganegedara</li> <li>Deep Learning for Natural Language Processing - by Stephan Raaijmakers</li> <li>Deep Learning Patterns and Practices - by Andrew Ferlitsch</li> <li>Inside Deep Learning - by Edward Raff</li> <li>Deep Learning with Python, Second Edition - by Fran\u00e7ois Chollet</li> <li>Evolutionary Deep Learning - by Micheal Lanham</li> <li>Engineering Deep Learning Platforms - by Chi Wang and Donald Szeto</li> <li>Deep Learning with R, Second Edition - by Fran\u00e7ois Chollet with Tomasz Kalinowski and J. J. Allaire</li> <li>Regularization in Deep Learning - by Liu Peng</li> <li>Jax in Action - by Grigory Sapunov</li> <li>Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow by Aur\u00e9lien G\u00e9ron  | Oct 15, 2019</li> </ol>"},{"location":"ai_ml/deep_learning/books/#courses","title":"Courses","text":"<ol> <li>Machine Learning - Stanford by Andrew Ng in Coursera (2010-2014)</li> <li>Machine Learning - Caltech by Yaser Abu-Mostafa (2012-2014)</li> <li>Machine Learning - Carnegie Mellon by Tom Mitchell (Spring 2011)</li> <li>Neural Networks for Machine Learning by Geoffrey Hinton in Coursera (2012)</li> <li>Neural networks class by Hugo Larochelle from Universit\u00e9 de Sherbrooke (2013)</li> <li>Deep Learning Course by CILVR lab @ NYU (2014)</li> <li>A.I - Berkeley by Dan Klein and Pieter Abbeel (2013)</li> <li>A.I - MIT by Patrick Henry Winston (2010)</li> <li>Vision and learning - computers and brains by Shimon Ullman, Tomaso Poggio, Ethan Meyers @ MIT (2013)</li> <li>Convolutional Neural Networks for Visual Recognition - Stanford by Fei-Fei Li, Andrej Karpathy (2017)</li> <li>Deep Learning for Natural Language Processing - Stanford</li> <li>Neural Networks - usherbrooke</li> <li>Machine Learning - Oxford (2014-2015)</li> <li>Deep Learning - Nvidia (2015)</li> <li>Graduate Summer School: Deep Learning, Feature Learning by Geoffrey Hinton, Yoshua Bengio, Yann LeCun, Andrew Ng, Nando de Freitas and several others @ IPAM, UCLA (2012)</li> <li>Deep Learning - Udacity/Google by Vincent Vanhoucke and Arpan Chakraborty (2016)</li> <li>Deep Learning - UWaterloo by Prof. Ali Ghodsi at University of Waterloo (2015)</li> <li>Statistical Machine Learning - CMU by Prof. Larry Wasserman</li> <li>Deep Learning Course by Yann LeCun (2016)</li> <li>Designing, Visualizing and Understanding Deep Neural Networks-UC Berkeley</li> <li>UVA Deep Learning Course MSc in Artificial Intelligence for the University of Amsterdam.</li> <li>MIT 6.S094: Deep Learning for Self-Driving Cars</li> <li>MIT 6.S191: Introduction to Deep Learning</li> <li>Berkeley CS 294: Deep Reinforcement Learning</li> <li>Keras in Motion video course</li> <li>Practical Deep Learning For Coders by Jeremy Howard - Fast.ai</li> <li>Introduction to Deep Learning by Prof. Bhiksha Raj (2017)</li> <li>AI for Everyone by Andrew Ng (2019)</li> <li>MIT Intro to Deep Learning 7 day bootcamp - A seven day bootcamp designed in MIT to introduce deep learning methods and applications (2019)</li> <li>Deep Blueberry: Deep Learning - A free five-weekend plan to self-learners to learn the basics of deep-learning architectures like CNNs, LSTMs, RNNs, VAEs, GANs, DQN, A3C and more (2019)</li> <li>Spinning Up in Deep Reinforcement Learning - A free deep reinforcement learning course by OpenAI (2019)</li> <li>Deep Learning Specialization - Coursera - Breaking into AI with the best course from Andrew NG.</li> <li>Deep Learning - UC Berkeley | STAT-157 by Alex Smola and Mu Li (2019)</li> <li>Machine Learning for Mere Mortals video course by Nick Chase</li> <li>Machine Learning Crash Course with TensorFlow APIs -Google AI</li> <li>Deep Learning from the Foundations Jeremy Howard - Fast.ai</li> <li>Deep Reinforcement Learning (nanodegree) - Udacity a 3-6 month Udacity nanodegree, spanning multiple courses (2018)</li> <li>Grokking Deep Learning in Motion by Beau Carnes (2018)</li> <li>Face Detection with Computer Vision and Deep Learning by Hakan Cebeci</li> <li>Deep Learning Online Course list at Classpert List of Deep Learning online courses (some are free) from Classpert Online Course Search</li> <li>AWS Machine Learning Machine Learning and Deep Learning Courses from Amazon's Machine Learning university</li> <li>Intro to Deep Learning with PyTorch - A great introductory course on Deep Learning by Udacity and Facebook AI</li> <li>Deep Learning by Kaggle - Kaggle's  free course on Deep Learning</li> <li>Yann LeCun\u2019s Deep Learning Course at CDS - DS-GA 1008 \u00b7 SPRING 2021 </li> <li>Neural Networks and Deep Learning - COMP9444 19T3</li> <li>Deep Learning A.I.Shelf</li> </ol>"},{"location":"ai_ml/deep_learning/books/#videos-and-lectures","title":"Videos and Lectures","text":"<ol> <li>How To Create A Mind By Ray Kurzweil</li> <li>Deep Learning, Self-Taught Learning and Unsupervised Feature Learning By Andrew Ng</li> <li>Recent Developments in Deep Learning By Geoff Hinton</li> <li>The Unreasonable Effectiveness of Deep Learning by Yann LeCun</li> <li>Deep Learning of Representations by Yoshua bengio</li> <li>Principles of Hierarchical Temporal Memory by Jeff Hawkins</li> <li>Machine Learning Discussion Group - Deep Learning w/ Stanford AI Lab by Adam Coates</li> <li>Making Sense of the World with Deep Learning By Adam Coates</li> <li>Demystifying Unsupervised Feature Learning  By Adam Coates</li> <li>Visual Perception with Deep Learning By Yann LeCun</li> <li>The Next Generation of Neural Networks By Geoffrey Hinton at GoogleTechTalks</li> <li>The wonderful and terrifying implications of computers that can learn By Jeremy Howard at TEDxBrussels</li> <li>Unsupervised Deep Learning - Stanford by Andrew Ng in Stanford (2011)</li> <li>Natural Language Processing By Chris Manning in Stanford</li> <li>A beginners Guide to Deep Neural Networks By Natalie Hammel and Lorraine Yurshansky</li> <li>Deep Learning: Intelligence from Big Data by Steve Jurvetson (and panel) at VLAB in Stanford.</li> <li>Introduction to Artificial Neural Networks and Deep Learning by Leo Isikdogan at Motorola Mobility HQ</li> <li>NIPS 2016 lecture and workshop videos - NIPS 2016</li> <li>Deep Learning Crash Course: a series of mini-lectures by Leo Isikdogan on YouTube (2018)</li> <li>Deep Learning Crash Course By Oliver Zeigermann</li> <li>Deep Learning with R in Motion: a live video course that teaches how to apply deep learning to text and images using the powerful Keras library and its R language interface.</li> <li>Medical Imaging with Deep Learning Tutorial: This tutorial is styled as a graduate lecture about medical imaging with deep learning. This will cover the background of popular medical image domains (chest X-ray and histology) as well as methods to tackle multi-modality/view, segmentation, and counting tasks.</li> <li>Deepmind x UCL Deeplearning: 2020 version </li> <li>Deepmind x UCL Reinforcement Learning: Deep Reinforcement Learning</li> <li>CMU 11-785 Intro to Deep learning Spring 2020 Course: 11-785, Intro to Deep Learning by Bhiksha Raj </li> <li>Machine Learning CS 229 : End part focuses on deep learning By Andrew Ng</li> <li>What is Neural Structured Learning by Andrew Ferlitsch</li> <li>Deep Learning Design Patterns by Andrew Ferlitsch</li> <li>Architecture of a Modern CNN: the design pattern approach by Andrew Ferlitsch</li> <li>Metaparameters in a CNN by Andrew Ferlitsch</li> <li>Multi-task CNN: a real-world example by Andrew Ferlitsch</li> <li>A friendly introduction to deep reinforcement learning by Luis Serrano</li> <li>What are GANs and how do they work? by Edward Raff</li> <li>Coding a basic WGAN in PyTorch by Edward Raff</li> <li>Training a Reinforcement Learning Agent by Miguel Morales</li> <li>Understand what is Deep Learning</li> </ol>"},{"location":"ai_ml/deep_learning/books/#papers","title":"Papers","text":"<p>You can also find the most cited deep learning papers from here</p> <ol> <li>ImageNet Classification with Deep Convolutional Neural Networks</li> <li>Using Very Deep Autoencoders for Content Based Image Retrieval</li> <li>Learning Deep Architectures for AI</li> <li>CMU\u2019s list of papers</li> <li>Neural Networks for Named Entity Recognition zip</li> <li>Training tricks by YB</li> <li>Geoff Hinton's reading list (all papers)</li> <li>Supervised Sequence Labelling with Recurrent Neural Networks</li> <li>Statistical Language Models based on Neural Networks</li> <li>Training Recurrent Neural Networks</li> <li>Recursive Deep Learning for Natural Language Processing and Computer Vision</li> <li>Bi-directional RNN</li> <li>LSTM</li> <li>GRU - Gated Recurrent Unit</li> <li>GFRNN . .</li> <li>LSTM: A Search Space Odyssey</li> <li>A Critical Review of Recurrent Neural Networks for Sequence Learning</li> <li>Visualizing and Understanding Recurrent Networks</li> <li>Wojciech Zaremba, Ilya Sutskever, An Empirical Exploration of Recurrent Network Architectures</li> <li>Recurrent Neural Network based Language Model</li> <li>Extensions of Recurrent Neural Network Language Model</li> <li>Recurrent Neural Network based Language Modeling in Meeting Recognition</li> <li>Deep Neural Networks for Acoustic Modeling in Speech Recognition</li> <li>Speech Recognition with Deep Recurrent Neural Networks</li> <li>Reinforcement Learning Neural Turing Machines</li> <li>Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation</li> <li>Google - Sequence to Sequence  Learning with Neural Networks</li> <li>Memory Networks</li> <li>Policy Learning with Continuous Memory States for Partially Observed Robotic Control</li> <li>Microsoft - Jointly Modeling Embedding and Translation to Bridge Video and Language</li> <li>Neural Turing Machines</li> <li>Ask Me Anything: Dynamic Memory Networks for Natural Language Processing</li> <li>Mastering the Game of Go with Deep Neural Networks and Tree Search</li> <li>Batch Normalization</li> <li>Residual Learning</li> <li>Image-to-Image Translation with Conditional Adversarial Networks</li> <li>Berkeley AI Research (BAIR) Laboratory</li> <li>MobileNets by Google</li> <li>Cross Audio-Visual Recognition in the Wild Using Deep Learning</li> <li>Dynamic Routing Between Capsules</li> <li>Matrix Capsules With Em Routing</li> <li>Efficient BackProp</li> <li>Generative Adversarial Nets</li> <li>Fast R-CNN</li> <li>FaceNet: A Unified Embedding for Face Recognition and Clustering</li> <li>Siamese Neural Networks for One-shot Image Recognition</li> <li>Unsupervised Translation of Programming Languages</li> <li>Matching Networks for One Shot Learning</li> <li>VOLO: Vision Outlooker for Visual Recognition</li> <li>ViT: An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale</li> <li>Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift</li> <li>DeepFaceDrawing: Deep Generation of Face Images from Sketches</li> </ol>"},{"location":"ai_ml/deep_learning/books/#tutorials","title":"Tutorials","text":"<ol> <li>UFLDL Tutorial 1</li> <li>UFLDL Tutorial 2</li> <li>Deep Learning for NLP (without Magic)</li> <li>A Deep Learning Tutorial: From Perceptrons to Deep Networks</li> <li>Deep Learning from the Bottom up</li> <li>Theano Tutorial</li> <li>Neural Networks for Matlab</li> <li>Using convolutional neural nets to detect facial keypoints tutorial</li> <li>Torch7 Tutorials</li> <li>The Best Machine Learning Tutorials On The Web</li> <li>VGG Convolutional Neural Networks Practical</li> <li>TensorFlow tutorials</li> <li>More TensorFlow tutorials</li> <li>TensorFlow Python Notebooks</li> <li>Keras and Lasagne Deep Learning Tutorials</li> <li>Classification on raw time series in TensorFlow with a LSTM RNN</li> <li>Using convolutional neural nets to detect facial keypoints tutorial</li> <li>TensorFlow-World</li> <li>Deep Learning with Python</li> <li>Grokking Deep Learning</li> <li>Deep Learning for Search</li> <li>Keras Tutorial: Content Based Image Retrieval Using a Convolutional Denoising Autoencoder</li> <li>Pytorch Tutorial by Yunjey Choi</li> <li>Understanding deep Convolutional Neural Networks with a practical use-case in Tensorflow and Keras</li> <li>Overview and benchmark of traditional and deep learning models in text classification</li> <li>Hardware for AI: Understanding computer hardware &amp; build your own computer</li> <li>Programming Community Curated Resources</li> <li>The Illustrated Self-Supervised Learning</li> <li>Visual Paper Summary: ALBERT (A Lite BERT)</li> <li>Semi-Supervised Deep Learning with GANs for Melanoma Detection</li> <li>Named Entity Recognition using Reformers</li> <li>Deep N-Gram Models on Shakespeare\u2019s works</li> <li>Wide Residual Networks</li> <li>Fashion MNIST using Flax</li> <li>Fake News Classification (with streamlit deployment)</li> <li>Regression Analysis for Primary Biliary Cirrhosis</li> <li>Cross Matching Methods for Astronomical Catalogs</li> <li>Named Entity Recognition using BiDirectional LSTMs</li> <li>Image Recognition App using Tflite and Flutter</li> </ol>"},{"location":"ai_ml/deep_learning/books/#researchers","title":"Researchers","text":"<ol> <li>Aaron Courville</li> <li>Abdel-rahman Mohamed</li> <li>Adam Coates</li> <li>Alex Acero</li> <li> Alex Krizhevsky </li> <li> Alexander Ilin </li> <li> Amos Storkey </li> <li> Andrej Karpathy </li> <li> Andrew M. Saxe </li> <li> Andrew Ng </li> <li> Andrew W. Senior </li> <li> Andriy Mnih </li> <li> Ayse Naz Erkan </li> <li> Benjamin Schrauwen </li> <li> Bernardete Ribeiro </li> <li> Bo David Chen </li> <li> Boureau Y-Lan </li> <li> Brian Kingsbury </li> <li> Christopher Manning </li> <li> Clement Farabet </li> <li> Dan Claudiu Cire\u0219an </li> <li> David Reichert </li> <li> Derek Rose </li> <li> Dong Yu </li> <li> Drausin Wulsin </li> <li> Erik M. Schmidt </li> <li> Eugenio Culurciello </li> <li> Frank Seide </li> <li> Galen Andrew </li> <li> Geoffrey Hinton </li> <li> George Dahl </li> <li> Graham Taylor </li> <li> Gr\u00e9goire Montavon </li> <li> Guido Francisco Mont\u00fafar </li> <li> Guillaume Desjardins </li> <li> Hannes Schulz </li> <li> H\u00e9l\u00e8ne Paugam-Moisy </li> <li> Honglak Lee </li> <li> Hugo Larochelle </li> <li> Ilya Sutskever </li> <li> Itamar Arel </li> <li> James Martens </li> <li> Jason Morton </li> <li> Jason Weston </li> <li> Jeff Dean </li> <li> Jiquan Mgiam </li> <li> Joseph Turian </li> <li> Joshua Matthew Susskind </li> <li> J\u00fcrgen Schmidhuber </li> <li> Justin A. Blanco </li> <li> Koray Kavukcuoglu </li> <li> KyungHyun Cho </li> <li> Li Deng </li> <li> Lucas Theis </li> <li> Ludovic Arnold </li> <li> Marc'Aurelio Ranzato </li> <li> Martin L\u00e4ngkvist </li> <li> Misha Denil </li> <li> Mohammad Norouzi </li> <li> Nando de Freitas </li> <li> Navdeep Jaitly </li> <li> Nicolas Le Roux </li> <li> Nitish Srivastava </li> <li> Noel Lopes </li> <li> Oriol Vinyals </li> <li> Pascal Vincent </li> <li> Patrick Nguyen </li> <li> Pedro Domingos </li> <li> Peggy Series </li> <li> Pierre Sermanet </li> <li> Piotr Mirowski </li> <li> Quoc V. Le </li> <li> Reinhold Scherer </li> <li> Richard Socher </li> <li> Rob Fergus </li> <li> Robert Coop </li> <li> Robert Gens </li> <li> Roger Grosse </li> <li> Ronan Collobert </li> <li> Ruslan Salakhutdinov </li> <li> Sebastian Gerwinn </li> <li> St\u00e9phane Mallat </li> <li> Sven Behnke </li> <li> Tapani Raiko </li> <li> Tara Sainath </li> <li> Tijmen Tieleman </li> <li> Tom Karnowski </li> <li> Tom\u00e1\u0161 Mikolov </li> <li> Ueli Meier </li> <li> Vincent Vanhoucke </li> <li> Volodymyr Mnih </li> <li> Yann LeCun </li> <li> Yichuan Tang </li> <li> Yoshua Bengio </li> <li> Yotaro Kubo </li> <li> Youzhi (Will) Zou </li> <li> Fei-Fei Li </li> <li> Ian Goodfellow </li> <li> Robert Lagani\u00e8re </li> <li>Merve Ayy\u00fcce K\u0131zrak</li> </ol>"},{"location":"ai_ml/deep_learning/books/#websites","title":"Websites","text":"<ol> <li>deeplearning.net</li> <li>deeplearning.stanford.edu</li> <li>nlp.stanford.edu</li> <li>ai-junkie.com</li> <li>cs.brown.edu/research/ai</li> <li>eecs.umich.edu/ai</li> <li>cs.utexas.edu/users/ai-lab</li> <li>cs.washington.edu/research/ai</li> <li>aiai.ed.ac.uk</li> <li>www-aig.jpl.nasa.gov</li> <li>csail.mit.edu</li> <li>cgi.cse.unsw.edu.au/~aishare</li> <li>cs.rochester.edu/research/ai</li> <li>ai.sri.com</li> <li>isi.edu/AI/isd.htm</li> <li>nrl.navy.mil/itd/aic</li> <li>hips.seas.harvard.edu</li> <li>AI Weekly</li> <li>stat.ucla.edu</li> <li>deeplearning.cs.toronto.edu</li> <li>jeffdonahue.com/lrcn/</li> <li>visualqa.org</li> <li>www.mpi-inf.mpg.de/departments/computer-vision...</li> <li>Deep Learning News</li> <li>Machine Learning is Fun! Adam Geitgey's Blog</li> <li>Guide to Machine Learning</li> <li>Deep Learning for Beginners</li> <li>Machine Learning Mastery blog</li> <li>ML Compiled</li> <li>Programming Community Curated Resources</li> <li>A Beginner's Guide To Understanding Convolutional Neural Networks</li> <li>ahmedbesbes.com</li> <li>amitness.com</li> <li>AI Summer</li> <li>AI Hub - supported by AAAI, NeurIPS</li> <li>CatalyzeX: Machine Learning Hub for Builders and Makers</li> <li>The Epic Code</li> <li>all AI news</li> </ol>"},{"location":"ai_ml/deep_learning/books/#datasets","title":"Datasets","text":"<ol> <li>MNIST Handwritten digits</li> <li>Google House Numbers from street view</li> <li>CIFAR-10 and CIFAR-100</li> <li>IMAGENET</li> <li>Tiny Images 80 Million tiny images6.  </li> <li>Flickr Data 100 Million Yahoo dataset</li> <li>Berkeley Segmentation Dataset 500</li> <li>UC Irvine Machine Learning Repository</li> <li>Flickr 8k</li> <li>Flickr 30k</li> <li>Microsoft COCO</li> <li>VQA</li> <li>Image QA</li> <li>AT&amp;T Laboratories Cambridge face database</li> <li>AVHRR Pathfinder</li> <li>Air Freight - The Air Freight data set is a ray-traced image sequence along with ground truth segmentation based on textural characteristics. (455 images + GT, each 160x120 pixels). (Formats: PNG)  </li> <li>Amsterdam Library of Object Images - ALOI is a color image collection of one-thousand small objects, recorded for scientific purposes. In order to capture the sensory variation in object recordings, we systematically varied viewing angle, illumination angle, and illumination color for each object, and additionally captured wide-baseline stereo images. We recorded over a hundred images of each object, yielding a total of 110,250 images for the collection. (Formats: png)</li> <li>Annotated face, hand, cardiac &amp; meat images - Most images &amp; annotations are supplemented by various ASM/AAM analyses using the AAM-API. (Formats: bmp,asf)</li> <li>Image Analysis and Computer Graphics </li> <li>Brown University Stimuli - A variety of datasets including geons, objects, and \"greebles\". Good for testing recognition algorithms. (Formats: pict)</li> <li>CAVIAR video sequences of mall and public space behavior - 90K video frames in 90 sequences of various human activities, with XML ground truth of detection and behavior classification (Formats: MPEG2 &amp; JPEG)</li> <li>Machine Vision Unit</li> <li>CCITT Fax standard images - 8 images (Formats: gif)</li> <li>CMU PIE Database - A database of 41,368 face images of 68 people captured under 13 poses, 43 illuminations conditions, and with 4 different expressions.</li> <li>CMU VASC Image Database - Images, sequences, stereo pairs (thousands of images) (Formats: Sun Rasterimage)</li> <li>Caltech Image Database - about 20 images - mostly top-down views of small objects and toys. (Formats: GIF)</li> <li>Columbia-Utrecht Reflectance and Texture Database - Texture and reflectance measurements for over 60 samples of 3D texture, observed with over 200 different combinations of viewing and illumination directions. (Formats: bmp)</li> <li>Computational Colour Constancy Data - A dataset oriented towards computational color constancy, but useful for computer vision in general. It includes synthetic data, camera sensor data, and over 700 images. (Formats: tiff)</li> <li>Computational Vision Lab</li> <li>Content-based image retrieval database - 11 sets of color images for testing algorithms for content-based retrieval. Most sets have a description file with names of objects in each image. (Formats: jpg)</li> <li>Efficient Content-based Retrieval Group</li> <li>Densely Sampled View Spheres - Densely sampled view spheres - upper half of the view sphere of two toy objects with 2500 images each. (Formats: tiff)</li> <li>Computer Science VII (Graphical Systems)</li> <li>Digital Embryos - Digital embryos are novel objects which may be used to develop and test object recognition systems. They have an organic appearance. (Formats: various formats are available on request)</li> <li>Univerity of Minnesota Vision Lab </li> <li>El Salvador Atlas of Gastrointestinal VideoEndoscopy - Images and Videos of his-res of studies taken from Gastrointestinal Video endoscopy. (Formats: jpg, mpg, gif)</li> <li>FG-NET Facial Aging Database - Database contains 1002 face images showing subjects at different ages. (Formats: jpg)</li> <li>FVC2000 Fingerprint Databases - FVC2000 is the First International Competition for Fingerprint Verification Algorithms. Four fingerprint databases constitute the FVC2000 benchmark (3520 fingerprints in all).</li> <li>Biometric Systems Lab - University of Bologna</li> <li>Face and Gesture images and image sequences - Several image datasets of faces and gestures that are ground truth annotated for benchmarking</li> <li>German Fingerspelling Database - The database contains 35 gestures and consists of 1400 image sequences that contain gestures of 20 different persons recorded under non-uniform daylight lighting conditions. (Formats: mpg,jpg)  </li> <li>Language Processing and Pattern Recognition</li> <li>Groningen Natural Image Database - 4000+ 1536x1024 (16 bit) calibrated outdoor images (Formats: homebrew)</li> <li>ICG Testhouse sequence -  2 turntable sequences from different viewing heights, 36 images each, resolution 1000x750, color (Formats: PPM)</li> <li>Institute of Computer Graphics and Vision</li> <li>IEN Image Library - 1000+ images, mostly outdoor sequences (Formats: raw, ppm)  </li> <li>INRIA's Syntim images database - 15 color image of simple objects (Formats: gif)</li> <li>INRIA</li> <li>INRIA's Syntim stereo databases - 34 calibrated color stereo pairs (Formats: gif)</li> <li>Image Analysis Laboratory - Images obtained from a variety of imaging modalities -- raw CFA images, range images and a host of \"medical images\". (Formats: homebrew)</li> <li>Image Analysis Laboratory</li> <li>Image Database - An image database including some textures  </li> <li>JAFFE Facial Expression Image Database - The JAFFE database consists of 213 images of Japanese female subjects posing 6 basic facial expressions as well as a neutral pose. Ratings on emotion adjectives are also available, free of charge, for research purposes. (Formats: TIFF Grayscale images.)</li> <li>ATR Research, Kyoto, Japan</li> <li>JISCT Stereo Evaluation - 44 image pairs. These data have been used in an evaluation of stereo analysis, as described in the April 1993 ARPA Image Understanding Workshop paper ``The JISCT Stereo Evaluation'' by R.C.Bolles, H.H.Baker, and M.J.Hannah, 263--274 (Formats: SSI)</li> <li>MIT Vision Texture - Image archive (100+ images) (Formats: ppm)</li> <li>MIT face images and more - hundreds of images (Formats: homebrew)</li> <li>Machine Vision - Images from the textbook by Jain, Kasturi, Schunck (20+ images) (Formats: GIF TIFF)</li> <li>Mammography Image Databases - 100 or more images of mammograms with ground truth. Additional images available by request, and links to several other mammography databases are provided. (Formats: homebrew)</li> <li>ftp://ftp.cps.msu.edu/pub/prip - many images (Formats: unknown)</li> <li>Middlebury Stereo Data Sets with Ground Truth - Six multi-frame stereo data sets of scenes containing planar regions. Each data set contains 9 color images and subpixel-accuracy ground-truth data. (Formats: ppm)</li> <li>Middlebury Stereo Vision Research Page - Middlebury College</li> <li>Modis Airborne simulator, Gallery and data set - High Altitude Imagery from around the world for environmental modeling in support of NASA EOS program (Formats: JPG and HDF)</li> <li>NIST Fingerprint and handwriting - datasets - thousands of images (Formats: unknown)</li> <li>NIST Fingerprint data - compressed multipart uuencoded tar file</li> <li>NLM HyperDoc Visible Human Project - Color, CAT and MRI image samples - over 30 images (Formats: jpeg)</li> <li>National Design Repository - Over 55,000 3D CAD and solid models of (mostly) mechanical/machined engineering designs. (Formats: gif,vrml,wrl,stp,sat) </li> <li>Geometric &amp; Intelligent Computing Laboratory</li> <li>OSU (MSU) 3D Object Model Database - several sets of 3D object models collected over several years to use in object recognition research (Formats: homebrew, vrml)</li> <li>OSU (MSU/WSU) Range Image Database - Hundreds of real and synthetic images (Formats: gif, homebrew)</li> <li>OSU/SAMPL Database: Range Images, 3D Models, Stills, Motion Sequences - Over 1000 range images, 3D object models, still images and motion sequences (Formats: gif, ppm, vrml, homebrew)</li> <li>Signal Analysis and Machine Perception Laboratory</li> <li>Otago Optical Flow Evaluation Sequences - Synthetic and real sequences with machine-readable ground truth optical flow fields, plus tools to generate ground truth for new sequences. (Formats: ppm,tif,homebrew)</li> <li>Vision Research Group</li> <li>ftp://ftp.limsi.fr/pub/quenot/opflow/testdata/piv/ - Real and synthetic image sequences used for testing a Particle Image Velocimetry application. These images may be used for the test of optical flow and image matching algorithms. (Formats: pgm (raw))</li> <li>LIMSI-CNRS/CHM/IMM/vision</li> <li>LIMSI-CNRS</li> <li>Photometric 3D Surface Texture Database - This is the first 3D texture database which provides both full real surface rotations and registered photometric stereo data (30 textures, 1680 images). (Formats: TIFF)</li> <li>SEQUENCES FOR OPTICAL FLOW ANALYSIS (SOFA) - 9 synthetic sequences designed for testing motion analysis applications, including full ground truth of motion and camera parameters. (Formats: gif)</li> <li>Computer Vision Group</li> <li>Sequences for Flow Based Reconstruction - synthetic sequence for testing structure from motion algorithms (Formats: pgm)</li> <li>Stereo Images with Ground Truth Disparity and Occlusion - a small set of synthetic images of a hallway with varying amounts of noise added. Use these images to benchmark your stereo algorithm. (Formats: raw, viff (khoros), or tiff)</li> <li>Stuttgart Range Image Database - A collection of synthetic range images taken from high-resolution polygonal models available on the web (Formats: homebrew)</li> <li>Department Image Understanding</li> <li>The AR Face Database - Contains over 4,000 color images corresponding to 126 people's faces (70 men and 56 women). Frontal views with variations in facial expressions, illumination, and occlusions. (Formats: RAW (RGB 24-bit))</li> <li>Purdue Robot Vision Lab</li> <li>The MIT-CSAIL Database of Objects and Scenes - Database for testing multiclass object detection and scene recognition algorithms. Over 72,000 images with 2873 annotated frames. More than 50 annotated object classes. (Formats: jpg)</li> <li>The RVL SPEC-DB (SPECularity DataBase) - A collection of over 300 real images of 100 objects taken under three different illuminaiton conditions (Diffuse/Ambient/Directed). -- Use these images to test algorithms for detecting and compensating specular highlights in color images. (Formats: TIFF )</li> <li>Robot Vision Laboratory</li> <li>The Xm2vts database - The XM2VTSDB contains four digital recordings of 295 people taken over a period of four months. This database contains both image and video data of faces.</li> <li>Centre for Vision, Speech and Signal Processing</li> <li>Traffic Image Sequences and 'Marbled Block' Sequence - thousands of frames of digitized traffic image sequences as well as the 'Marbled Block' sequence (grayscale images) (Formats: GIF)</li> <li>IAKS/KOGS</li> <li>U Bern Face images - hundreds of images (Formats: Sun rasterfile)</li> <li>U Michigan textures (Formats: compressed raw)</li> <li>U Oulu wood and knots database - Includes classifications - 1000+ color images (Formats: ppm)</li> <li>UCID - an Uncompressed Colour Image Database - a benchmark database for image retrieval with predefined ground truth. (Formats: tiff)</li> <li>UMass Vision Image Archive - Large image database with aerial, space, stereo, medical images and more. (Formats: homebrew)</li> <li>UNC's 3D image database - many images (Formats: GIF)</li> <li>USF Range Image Data with Segmentation Ground Truth - 80 image sets (Formats: Sun rasterimage)</li> <li>University of Oulu Physics-based Face Database - contains color images of faces under different illuminants and camera calibration conditions as well as skin spectral reflectance measurements of each person.</li> <li>Machine Vision and Media Processing Unit</li> <li>University of Oulu Texture Database - Database of 320 surface textures, each captured under three illuminants, six spatial resolutions and nine rotation angles. A set of test suites is also provided so that texture segmentation, classification, and retrieval algorithms can be tested in a standard manner. (Formats: bmp, ras, xv)</li> <li>Machine Vision Group</li> <li>Usenix face database - Thousands of face images from many different sites (circa 994)</li> <li>View Sphere Database - Images of 8 objects seen from many different view points. The view sphere is sampled using a geodesic with 172 images/sphere. Two sets for training and testing are available. (Formats: ppm)</li> <li>PRIMA, GRAVIR</li> <li>Vision-list Imagery Archive - Many images, many formats</li> <li>Wiry Object Recognition Database - Thousands of images of a cart, ladder, stool, bicycle, chairs, and cluttered scenes with ground truth labelings of edges and regions. (Formats: jpg)</li> <li>3D Vision Group</li> <li>Yale Face Database -  165 images (15 individuals) with different lighting, expression, and occlusion configurations.</li> <li>Yale Face Database B - 5760 single light source images of 10 subjects each seen under 576 viewing conditions (9 poses x 64 illumination conditions). (Formats: PGM)</li> <li>Center for Computational Vision and Control</li> <li>DeepMind QA Corpus - Textual QA corpus from CNN and DailyMail. More than 300K documents in total. Paper for reference.</li> <li>YouTube-8M Dataset - YouTube-8M is a large-scale labeled video dataset that consists of 8 million YouTube video IDs and associated labels from a diverse vocabulary of 4800 visual entities.</li> <li>Open Images dataset - Open Images is a dataset of ~9 million URLs to images that have been annotated with labels spanning over 6000 categories.</li> <li>Visual Object Classes Challenge 2012 (VOC2012) - VOC2012 dataset containing 12k images with 20 annotated classes for object detection and segmentation.</li> <li>Fashion-MNIST - MNIST like fashion product dataset consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes.</li> <li>Large-scale Fashion (DeepFashion) Database - Contains over 800,000 diverse fashion images.  Each image in this dataset is labeled with 50 categories, 1,000 descriptive attributes, bounding box and clothing landmarks</li> <li>FakeNewsCorpus - Contains about 10 million news articles classified using opensources.co types</li> <li>LLVIP - 15488 visible-infrared paired images (30976 images) for low-light vision research, Project_Page</li> <li>MSDA - Over over 5 million images from 5 different domains for multi-source ocr/text recognition DA research, Project_Page</li> <li>SANAD: Single-Label Arabic News Articles Dataset for Automatic Text Categorization - SANAD Dataset is a large collection of Arabic news articles that can be used in different Arabic NLP tasks such as Text Classification and Word Embedding. The articles were collected using Python scripts written specifically for three popular news websites: AlKhaleej, AlArabiya and Akhbarona. </li> <li>Referit3D - Two large-scale and complementary visio-linguistic datasets (aka Nr3D and Sr3D) for identifying fine-grained 3D objects in ScanNet scenes. Nr3D contains 41.5K natural, free-form utterances, and Sr3d contains 83.5K template-based utterances.</li> <li>SQuAD - Stanford released ~100,000 English QA pairs and ~50,000 unanswerable questions</li> <li>FQuAD - ~25,000 French QA pairs released by Illuin Technology</li> <li>GermanQuAD and GermanDPR - deepset released ~14,000 German QA pairs</li> <li>SberQuAD - Sberbank released ~90,000 Russian QA pairs</li> <li>ArtEmis - Contains 450K affective annotations of emotional responses and linguistic explanations for 80,000 artworks of WikiArt.</li> </ol>"},{"location":"ai_ml/deep_learning/books/#conferences","title":"Conferences","text":"<ol> <li>CVPR - IEEE Conference on Computer Vision and Pattern Recognition</li> <li>AAMAS - International Joint Conference on Autonomous Agents and Multiagent Systems</li> <li>IJCAI -     International Joint Conference on Artificial Intelligence</li> <li>ICML -  International Conference on Machine Learning</li> <li>ECML - European Conference on Machine Learning</li> <li>KDD - Knowledge Discovery and Data Mining</li> <li>NIPS - Neural Information Processing Systems</li> <li>O'Reilly AI Conference -    O'Reilly Artificial Intelligence Conference</li> <li>ICDM - International Conference on Data Mining</li> <li>ICCV - International Conference on Computer Vision</li> <li>AAAI - Association for the Advancement of Artificial Intelligence</li> <li>MAIS - Montreal AI Symposium</li> </ol>"},{"location":"ai_ml/deep_learning/books/#frameworks","title":"Frameworks","text":"<ol> <li>Caffe </li> <li>Torch7</li> <li>Theano</li> <li>cuda-convnet</li> <li>convetjs</li> <li>Ccv</li> <li>NuPIC</li> <li>DeepLearning4J</li> <li>Brain</li> <li>DeepLearnToolbox</li> <li>Deepnet</li> <li>Deeppy</li> <li>JavaNN</li> <li>hebel</li> <li>Mocha.jl</li> <li>OpenDL</li> <li>cuDNN</li> <li>MGL</li> <li>Knet.jl</li> <li>Nvidia DIGITS - a web app based on Caffe</li> <li>Neon - Python based Deep Learning Framework</li> <li>Keras - Theano based Deep Learning Library</li> <li>Chainer - A flexible framework of neural networks for deep learning</li> <li>RNNLM Toolkit</li> <li>RNNLIB - A recurrent neural network library</li> <li>char-rnn</li> <li>MatConvNet: CNNs for MATLAB</li> <li>Minerva - a fast and flexible tool for deep learning on multi-GPU</li> <li>Brainstorm - Fast, flexible and fun neural networks.</li> <li>Tensorflow - Open source software library for numerical computation using data flow graphs</li> <li>DMTK - Microsoft Distributed Machine Learning Tookit</li> <li>Scikit Flow - Simplified interface for TensorFlow (mimicking Scikit Learn)</li> <li>MXnet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning framework</li> <li>Veles - Samsung Distributed machine learning platform</li> <li>Marvin - A Minimalist GPU-only N-Dimensional ConvNets Framework</li> <li>Apache SINGA - A General Distributed Deep Learning Platform</li> <li>DSSTNE - Amazon's library for building Deep Learning models</li> <li>SyntaxNet - Google's syntactic parser - A TensorFlow dependency library</li> <li>mlpack - A scalable Machine Learning library</li> <li>Torchnet - Torch based Deep Learning Library</li> <li>Paddle - PArallel Distributed Deep LEarning by Baidu</li> <li>NeuPy - Theano based Python library for ANN and Deep Learning</li> <li>Lasagne - a lightweight library to build and train neural networks in Theano</li> <li>nolearn - wrappers and abstractions around existing neural network libraries, most notably Lasagne</li> <li>Sonnet - a library for constructing neural networks by Google's DeepMind</li> <li>PyTorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration</li> <li>CNTK - Microsoft Cognitive Toolkit</li> <li>Serpent.AI - Game agent framework: Use any video game as a deep learning sandbox</li> <li>Caffe2 - A New Lightweight, Modular, and Scalable Deep Learning Framework</li> <li>deeplearn.js - Hardware-accelerated deep learning and linear algebra (NumPy) library for the web</li> <li>TVM - End to End Deep Learning Compiler Stack for CPUs, GPUs and specialized accelerators</li> <li>Coach - Reinforcement Learning Coach by Intel\u00ae AI Lab</li> <li>albumentations - A fast and framework agnostic image augmentation library</li> <li>Neuraxle - A general-purpose ML pipelining framework</li> <li>Catalyst: High-level utils for PyTorch DL &amp; RL research. It was developed with a focus on reproducibility, fast experimentation and code/ideas reusing</li> <li>garage - A toolkit for reproducible reinforcement learning research</li> <li>Detecto - Train and run object detection models with 5-10 lines of code</li> <li>Karate Club - An unsupervised machine learning library for graph structured data</li> <li>Synapses - A lightweight library for neural networks that runs anywhere</li> <li>TensorForce - A TensorFlow library for applied reinforcement learning</li> <li>Hopsworks - A Feature Store for ML and Data-Intensive AI</li> <li>Feast - A Feature Store for ML for GCP by Gojek/Google</li> <li>PyTorch Geometric Temporal - Representation learning on dynamic graphs</li> <li>lightly - A computer vision framework for self-supervised learning</li> <li>Trax \u2014 Deep Learning with Clear Code and Speed</li> <li>Flax - a neural network ecosystem for JAX that is designed for flexibility</li> <li>QuickVision</li> <li>Colossal-AI - An Integrated Large-scale Model Training System with Efficient Parallelization Techniques</li> <li>haystack: an open-source neural search framework</li> <li>Maze - Application-oriented deep reinforcement learning framework addressing real-world decision problems.</li> <li>InsNet - A neural network library for building instance-dependent NLP models with padding-free dynamic batching</li> </ol>"},{"location":"ai_ml/deep_learning/books/#tools","title":"Tools","text":"<ol> <li>Nebullvm - Easy-to-use library to boost deep learning inference leveraging multiple deep learning compilers.</li> <li>Netron - Visualizer for deep learning and machine learning models</li> <li>Jupyter Notebook - Web-based notebook environment for interactive computing</li> <li>TensorBoard - TensorFlow's Visualization Toolkit</li> <li>Visual Studio Tools for AI - Develop, debug and deploy deep learning and AI solutions</li> <li>TensorWatch - Debugging and visualization for deep learning</li> <li>ML Workspace - All-in-one web-based IDE for machine learning and data science.</li> <li>dowel - A little logger for machine learning research. Log any object to the console, CSVs, TensorBoard, text log files, and more with just one call to <code>logger.log()</code></li> <li>Neptune - Lightweight tool for experiment tracking and results visualization. </li> <li>CatalyzeX - Browser extension (Chrome and Firefox) that automatically finds and links to code implementations for ML papers anywhere online: Google, Twitter, Arxiv, Scholar, etc.</li> <li>Determined - Deep learning training platform with integrated support for distributed training, hyperparameter tuning, smart GPU scheduling, experiment tracking, and a model registry.</li> <li>DAGsHub - Community platform for Open Source ML \u2013 Manage experiments, data &amp; models and create collaborative ML projects easily.</li> <li>hub - Fastest unstructured dataset management for TensorFlow/PyTorch by activeloop.ai. Stream &amp; version-control data. Converts large data into single     numpy-like array on the cloud, accessible on any machine.</li> <li>DVC - DVC is built to make ML models shareable and reproducible. It is designed to handle large files, data sets, machine learning models, and metrics as well as code.</li> <li>CML - CML helps you bring your favorite DevOps tools to machine learning.</li> <li>MLEM - MLEM is a tool to easily package, deploy and serve Machine Learning models. It seamlessly supports a variety of scenarios like real-time serving and batch processing.</li> </ol>"},{"location":"ai_ml/deep_learning/books/#miscellaneous","title":"Miscellaneous","text":"<ol> <li>Caffe Webinar</li> <li>100 Best Github Resources in Github for DL</li> <li>Word2Vec</li> <li>Caffe DockerFile</li> <li>TorontoDeepLEarning convnet</li> <li>gfx.js</li> <li>Torch7 Cheat sheet</li> <li>Misc from MIT's 'Advanced Natural Language Processing' course</li> <li>Misc from MIT's 'Machine Learning' course</li> <li>Misc from MIT's 'Networks for Learning: Regression and Classification' course</li> <li>Misc from MIT's 'Neural Coding and Perception of Sound' course</li> <li>Implementing a Distributed Deep Learning Network over Spark</li> <li>A chess AI that learns to play chess using deep learning.</li> <li>Reproducing the results of \"Playing Atari with Deep Reinforcement Learning\" by DeepMind</li> <li>Wiki2Vec. Getting Word2vec vectors for entities and word from Wikipedia Dumps</li> <li>The original code from the DeepMind article + tweaks</li> <li>Google deepdream - Neural Network art</li> <li>An efficient, batched LSTM.</li> <li>A recurrent neural network designed to generate classical music.</li> <li>Memory Networks Implementations - Facebook</li> <li>Face recognition with Google's FaceNet deep neural network.</li> <li>Basic digit recognition neural network</li> <li>Emotion Recognition API Demo - Microsoft</li> <li>Proof of concept for loading Caffe models in TensorFlow</li> <li>YOLO: Real-Time Object Detection</li> <li>YOLO: Practical Implementation using Python</li> <li>AlphaGo - A replication of DeepMind's 2016 Nature publication, \"Mastering the game of Go with deep neural networks and tree search\"</li> <li>Machine Learning for Software Engineers</li> <li>Machine Learning is Fun!</li> <li>Siraj Raval's Deep Learning tutorials</li> <li>Dockerface - Easy to install and use deep learning Faster R-CNN face detection for images and video in a docker container.</li> <li>Awesome Deep Learning Music - Curated list of articles related to deep learning scientific research applied to music</li> <li>Awesome Graph Embedding - Curated list of articles related to deep learning scientific research on graph structured data at the graph level.</li> <li>Awesome Network Embedding - Curated list of articles related to deep learning scientific research on graph structured data at the node level.</li> <li>Microsoft Recommenders contains examples, utilities and best practices for building recommendation systems. Implementations of several state-of-the-art algorithms are provided for self-study and customization in your own applications.</li> <li>The Unreasonable Effectiveness of Recurrent Neural Networks - Andrej Karpathy blog post about using RNN for generating text.</li> <li>Ladder Network - Keras Implementation of Ladder Network for Semi-Supervised Learning </li> <li>toolbox: Curated list of ML libraries</li> <li>CNN Explainer</li> <li>AI Expert Roadmap - Roadmap to becoming an Artificial Intelligence Expert</li> <li>Awesome Drug Interactions, Synergy, and Polypharmacy Prediction</li> </ol>"},{"location":"ai_ml/machine_learning/","title":"Welcome to Machine Learning notes.","text":""},{"location":"ai_ml/machine_learning/#contents","title":"Contents","text":"<ol> <li>Frameworks</li> </ol>"},{"location":"ai_ml/machine_learning/framework/","title":"Awesome Machine Learning","text":""},{"location":"ai_ml/machine_learning/framework/#frameworks-and-libraries","title":"Frameworks and Libraries","text":"<ul> <li>Awesome Machine Learning </li> <li>Table of Contents<ul> <li>Frameworks and Libraries</li> <li>Tools</li> </ul> </li> <li>APL<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>C<ul> <li>General-Purpose Machine Learning</li> <li>Computer Vision</li> </ul> </li> <li>C++<ul> <li>Computer Vision</li> <li>General-Purpose Machine Learning</li> <li>Natural Language Processing</li> <li>Speech Recognition</li> <li>Sequence Analysis</li> <li>Gesture Detection</li> </ul> </li> <li>Common Lisp<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Clojure<ul> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Deep Learning</li> <li>Data Analysis</li> <li>Data Visualization</li> <li>Interop</li> <li>Misc</li> <li>Extra</li> </ul> </li> <li>Crystal<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Elixir<ul> <li>General-Purpose Machine Learning</li> <li>Natural Language Processing</li> </ul> </li> <li>Erlang<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Fortran<ul> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> </ul> </li> <li>Go<ul> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Spatial analysis and geometry</li> <li>Data Analysis / Data Visualization</li> <li>Computer vision</li> <li>Reinforcement learning</li> </ul> </li> <li>Haskell<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Java<ul> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Speech Recognition</li> <li>Data Analysis / Data Visualization</li> <li>Deep Learning</li> </ul> </li> <li>Javascript<ul> <li>Natural Language Processing</li> <li>Data Analysis / Data Visualization</li> <li>General-Purpose Machine Learning</li> <li>Misc</li> <li>Demos and Scripts</li> </ul> </li> <li>Julia<ul> <li>General-Purpose Machine Learning</li> <li>Natural Language Processing</li> <li>Data Analysis / Data Visualization</li> <li>Misc Stuff / Presentations</li> </ul> </li> <li>Kotlin<ul> <li>Deep Learning</li> </ul> </li> <li>Lua<ul> <li>General-Purpose Machine Learning</li> <li>Demos and Scripts</li> </ul> </li> <li>Matlab<ul> <li>Computer Vision</li> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> </ul> </li> <li>.NET<ul> <li>Computer Vision</li> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> </ul> </li> <li>Objective C<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>OCaml<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>OpenCV<ul> <li>Computer Vision</li> <li>Text-Detection</li> </ul> </li> <li>Perl<ul> <li>Data Analysis / Data Visualization</li> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Perl 6<ul> <li>Data Analysis / Data Visualization</li> <li>General-Purpose Machine Learning</li> </ul> </li> <li>PHP<ul> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Python<ul> <li>Computer Vision</li> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> <li>Misc Scripts / iPython Notebooks / Codebases</li> <li>Neural Networks</li> <li>Survival Analysis</li> <li>Federated Learning</li> <li>Kaggle Competition Source Code</li> <li>Reinforcement Learning</li> </ul> </li> <li>Ruby<ul> <li>Natural Language Processing</li> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> <li>Misc</li> </ul> </li> <li>Rust<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>R<ul> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> </ul> </li> <li>SAS<ul> <li>General-Purpose Machine Learning</li> <li>Data Analysis / Data Visualization</li> <li>Natural Language Processing</li> <li>Demos and Scripts</li> </ul> </li> <li>Scala<ul> <li>Natural Language Processing</li> <li>Data Analysis / Data Visualization</li> <li>General-Purpose Machine Learning</li> </ul> </li> <li>Scheme<ul> <li>Neural Networks</li> </ul> </li> <li>Swift<ul> <li>General-Purpose Machine Learning</li> </ul> </li> <li>TensorFlow<ul> <li>General-Purpose Machine Learning</li> </ul> </li> </ul>"},{"location":"ai_ml/machine_learning/framework/#tools","title":"Tools","text":"<ul> <li>Neural Networks</li> <li>Misc</li> </ul> <p>Credits</p> <p></p>"},{"location":"ai_ml/machine_learning/framework/#apl","title":"APL","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning","title":"General-Purpose Machine Learning","text":"<ul> <li>naive-apl - Naive Bayesian Classifier implementation in APL. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#c","title":"C","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_1","title":"General-Purpose Machine Learning","text":"<ul> <li>Darknet - Darknet is an open source neural network framework written in C and CUDA. It is fast, easy to install, and supports CPU and GPU computation.</li> <li>Recommender - A C library for product recommendations/suggestions using collaborative filtering (CF).</li> <li>Hybrid Recommender System - A hybrid recommender system based upon scikit-learn algorithms. [Deprecated]</li> <li>neonrvm - neonrvm is an open source machine learning library based on RVM technique. It's written in C programming language and comes with Python programming language bindings.</li> <li>cONNXr - An <code>ONNX</code> runtime written in pure C (99) with zero dependencies focused on small embedded devices. Run inference on your machine learning models no matter which framework you train it with. Easy to install and compiles everywhere, even in very old devices.</li> <li>libonnx - A lightweight, portable pure C99 onnx inference engine for embedded devices with hardware acceleration support.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#computer-vision","title":"Computer Vision","text":"<ul> <li>CCV - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library.</li> <li>VLFeat - VLFeat is an open and portable library of computer vision algorithms, which has a Matlab toolbox.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#c_1","title":"C++","text":""},{"location":"ai_ml/machine_learning/framework/#computer-vision_1","title":"Computer Vision","text":"<ul> <li>DLib - DLib has C++ and Python interfaces for face detection and training general object detectors.</li> <li>EBLearn - Eblearn is an object-oriented C++ library that implements various machine learning models [Deprecated]</li> <li>OpenCV - OpenCV has C++, C, Python, Java and MATLAB interfaces and supports Windows, Linux, Android and Mac OS.</li> <li>VIGRA - VIGRA is a genertic cross-platform C++ computer vision and machine learning library for volumes of arbitrary dimensionality with Python bindings.</li> <li>Openpose - A real-time multi-person keypoint detection library for body, face, hands, and foot estimation</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_2","title":"General-Purpose Machine Learning","text":"<ul> <li>Speedster -Automatically apply SOTA optimization techniques to achieve the maximum inference speed-up on your hardware. [DEEP LEARNING]</li> <li>BanditLib - A simple Multi-armed Bandit library. [Deprecated]</li> <li>Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind. [DEEP LEARNING]</li> <li>CatBoost - General purpose gradient boosting on decision trees library with categorical features support out of the box. It is easy to install, contains fast inference implementation and supports CPU and GPU (even multi-GPU) computation.</li> <li>CNTK - The Computational Network Toolkit (CNTK) by Microsoft Research, is a unified deep-learning toolkit that describes neural networks as a series of computational steps via a directed graph.</li> <li>CUDA - This is a fast C++/CUDA implementation of convolutional [DEEP LEARNING]</li> <li>DeepDetect - A machine learning API and server written in C++11. It makes state of the art machine learning easy to work with and integrate into existing applications.</li> <li>Distributed Machine learning Tool Kit (DMTK) - A distributed machine learning (parameter server) framework by Microsoft. Enables training models on large data sets across multiple machines. Current tools bundled with it include: LightLDA and Distributed (Multisense) Word Embedding.</li> <li>DLib - A suite of ML tools designed to be easy to imbed in other applications.</li> <li>DSSTNE - A software library created by Amazon for training and deploying deep neural networks using GPUs which emphasizes speed and scale over experimental flexibility.</li> <li>DyNet - A dynamic neural network library working well with networks that have dynamic structures that change for every training instance. Written in C++ with bindings in Python.</li> <li>Fido - A highly-modular C++ machine learning library for embedded electronics and robotics.</li> <li>igraph - General purpose graph library.</li> <li>Intel\u00ae oneAPI Data Analytics Library - A high performance software library developed by Intel and optimized for Intel's architectures. Library provides algorithmic building blocks for all stages of data analytics and allows to process data in batch, online and distributed modes.</li> <li>LightGBM - Microsoft's fast, distributed, high performance gradient boosting (GBDT, GBRT, GBM or MART) framework based on decision tree algorithms, used for ranking, classification and many other machine learning tasks.</li> <li>libfm - A generic approach that allows to mimic most factorization models by feature engineering.</li> <li>MLDB - The Machine Learning Database is a database designed for machine learning. Send it commands over a RESTful API to store data, explore it using SQL, then train machine learning models and expose them as APIs.</li> <li>mlpack - A scalable C++ machine learning library.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>N2D2 - CEA-List's CAD framework for designing and simulating Deep Neural Network, and building full DNN-based applications on embedded platforms</li> <li>oneDNN - An open-source cross-platform performance library for deep learning applications.</li> <li>ParaMonte - A general-purpose library with C/C++ interface for Bayesian data analysis and visualization via serial/parallel Monte Carlo and MCMC simulations. Documentation can be found here.</li> <li>proNet-core - A general-purpose network embedding framework: pair-wise representations optimization Network Edit.</li> <li>PyCaret - An open-source, low-code machine learning library in Python that automates machine learning workflows.</li> <li>PyCUDA - Python interface to CUDA</li> <li>ROOT - A modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualization and storage.</li> <li>shark - A fast, modular, feature-rich open-source C++ machine learning library.</li> <li>Shogun - The Shogun Machine Learning Toolbox.</li> <li>sofia-ml - Suite of fast incremental algorithms.</li> <li>Stan - A probabilistic programming language implementing full Bayesian statistical inference with Hamiltonian Monte Carlo sampling.</li> <li>Timbl - A software package/C++ library implementing several memory-based learning algorithms, among which IB1-IG, an implementation of k-nearest neighbor classification, and IGTree, a decision-tree approximation of IB1-IG. Commonly used for NLP.</li> <li>Vowpal Wabbit (VW) - A fast out-of-core learning system.</li> <li>Warp-CTC - A fast parallel implementation of Connectionist Temporal Classification (CTC), on both CPU and GPU.</li> <li>XGBoost - A parallelized optimized general purpose gradient boosting library.</li> <li>ThunderGBM - A fast library for GBDTs and Random Forests on GPUs.</li> <li>ThunderSVM - A fast SVM library on GPUs and CPUs.</li> <li>LKYDeepNN - A header-only C++11 Neural Network library. Low dependency, native traditional chinese document.</li> <li>xLearn - A high performance, easy-to-use, and scalable machine learning package, which can be used to solve large-scale machine learning problems. xLearn is especially useful for solving machine learning problems on large-scale sparse data, which is very common in Internet services such as online advertising and recommender systems.</li> <li>Featuretools - A library for automated feature engineering. It excels at transforming transactional and relational datasets into feature matrices for machine learning using reusable feature engineering \"primitives\".</li> <li>skynet - A library for learning neural networks, has C-interface, net set in JSON. Written in C++ with bindings in Python, C++ and C#.</li> <li>Feast - A feature store for the management, discovery, and access of machine learning features. Feast provides a consistent view of feature data for both model training and model serving.</li> <li>Hopsworks - A data-intensive platform for AI with the industry's first open-source feature store. The Hopsworks Feature Store provides both a feature warehouse for training and batch based on Apache Hive and a feature serving database, based on MySQL Cluster, for online applications.</li> <li>Polyaxon - A platform for reproducible and scalable machine learning and deep learning.</li> <li>QuestDB A relational column-oriented database designed for real-time analytics on time series and event data.</li> <li>Phoenix Uncover insights, surface problems, monitor and fine tune your generative LLM, CV and tabular models.</li> <li>XAD Comprehensive backpropagation tool for C++.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing","title":"Natural Language Processing","text":"<ul> <li>BLLIP Parser - BLLIP Natural Language Parser (also known as the Charniak-Johnson parser).</li> <li>colibri-core - C++ library, command line tools, and Python binding for extracting and working with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way.</li> <li>CRF++ - Open source implementation of Conditional Random Fields (CRFs) for segmenting/labeling sequential data &amp; other Natural Language Processing tasks. [Deprecated]</li> <li>CRFsuite - CRFsuite is an implementation of Conditional Random Fields (CRFs) for labeling sequential data. [Deprecated]</li> <li>frog - Memory-based NLP suite developed for Dutch: PoS tagger, lemmatiser, dependency parser, NER, shallow parser, morphological analyzer.</li> <li>libfolia - C++ library for the FoLiA format</li> <li>MeTA - MeTA : ModErn Text Analysis is a C++ Data Sciences Toolkit that facilitates mining big text data.</li> <li>MIT Information Extraction Toolkit - C, C++, and Python tools for named entity recognition and relation extraction</li> <li>ucto - Unicode-aware regular-expression based tokenizer for various languages. Tool and C++ library. Supports FoLiA format.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#speech-recognition","title":"Speech Recognition","text":"<ul> <li>Kaldi - Kaldi is a toolkit for speech recognition written in C++ and licensed under the Apache License v2.0. Kaldi is intended for use by speech recognition researchers.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#sequence-analysis","title":"Sequence Analysis","text":"<ul> <li>ToPS - This is an object-oriented framework that facilitates the integration of probabilistic models for sequences over a user defined alphabet. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#gesture-detection","title":"Gesture Detection","text":"<ul> <li>grt - The Gesture Recognition Toolkit (GRT) is a cross-platform, open-source, C++ machine learning library designed for real-time gesture recognition.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#common-lisp","title":"Common Lisp","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_3","title":"General-Purpose Machine Learning","text":"<ul> <li>mgl - Neural networks (boltzmann machines, feed-forward and recurrent nets), Gaussian Processes.</li> <li>mgl-gpr - Evolutionary algorithms. [Deprecated]</li> <li>cl-libsvm - Wrapper for the libsvm support vector machine library. [Deprecated]</li> <li>cl-online-learning - Online learning algorithms (Perceptron, AROW, SCW, Logistic Regression).</li> <li>cl-random-forest - Implementation of Random Forest in Common Lisp.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#clojure","title":"Clojure","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_1","title":"Natural Language Processing","text":"<ul> <li>Clojure-openNLP - Natural Language Processing in Clojure (opennlp).</li> <li>Infections-clj - Rails-like inflection library for Clojure and ClojureScript.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_4","title":"General-Purpose Machine Learning","text":"<ul> <li>scicloj.ml -  A idiomatic Clojure machine learning library based on tech.ml.dataset with a unique approach for immutable data processing pipelines.</li> <li>clj-ml - A machine learning library for Clojure built on top of Weka and friends.</li> <li>clj-boost - Wrapper for XGBoost</li> <li>Touchstone - Clojure A/B testing library.</li> <li>Clojush - The Push programming language and the PushGP genetic programming system implemented in Clojure.</li> <li>lambda-ml - Simple, concise implementations of machine learning techniques and utilities in Clojure.</li> <li>Infer - Inference and machine learning in Clojure. [Deprecated]</li> <li>Encog - Clojure wrapper for Encog (v3) (Machine-Learning framework that specializes in neural-nets). [Deprecated]</li> <li>Fungp - A genetic programming library for Clojure. [Deprecated]</li> <li>Statistiker - Basic Machine Learning algorithms in Clojure. [Deprecated]</li> <li>clortex - General Machine Learning library using Numenta\u2019s Cortical Learning Algorithm. [Deprecated]</li> <li>comportex - Functionally composable Machine Learning library using Numenta\u2019s Cortical Learning Algorithm. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#deep-learning","title":"Deep Learning","text":"<ul> <li>MXNet - Bindings to Apache MXNet - part of the MXNet project</li> <li>Deep Diamond - A fast Clojure Tensor &amp; Deep Learning library</li> <li>jutsu.ai - Clojure wrapper for deeplearning4j with some added syntactic sugar.</li> <li>cortex - Neural networks, regression and feature learning in Clojure.</li> <li>Flare - Dynamic Tensor Graph library in Clojure (think PyTorch, DynNet, etc.)</li> <li>dl4clj - Clojure wrapper for Deeplearning4j.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis","title":"Data Analysis","text":"<ul> <li>tech.ml.dataset - Clojure dataframe library and pipeline for data processing and machine learning</li> <li>Tablecloth - A dataframe grammar wrapping tech.ml.dataset, inspired by several R libraries</li> <li>Panthera - Clojure API wrapping Python's Pandas library</li> <li>Incanter - Incanter is a Clojure-based, R-like platform for statistical computing and graphics.</li> <li>PigPen - Map-Reduce for Clojure.</li> <li>Geni - a Clojure dataframe library that runs on Apache Spark</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-visualization","title":"Data Visualization","text":"<ul> <li>Hanami : Clojure(Script) library and framework for creating interactive visualization applications based in Vega-Lite (VGL) and/or Vega (VG) specifications. Automatic framing and layouts along with a powerful templating system for abstracting visualization specs</li> <li>Saite -  Clojure(Script) client/server application for dynamic interactive explorations and the creation of live shareable documents capturing them using Vega/Vega-Lite, CodeMirror, markdown, and LaTeX</li> <li>Oz - Data visualisation using Vega/Vega-Lite and Hiccup, and a live-reload platform for literate-programming</li> <li>Envision - Clojure Data Visualisation library, based on Statistiker and D3.</li> <li>Pink Gorilla Notebook - A Clojure/Clojurescript notebook application/-library based on Gorilla-REPL</li> <li>clojupyter -  A Jupyter kernel for Clojure - run Clojure code in Jupyter Lab, Notebook and Console.</li> <li>notespace - Notebook experience in your Clojure namespace</li> <li>Delight - A listener that streams your spark events logs to delight, a free and improved spark UI</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#interop","title":"Interop","text":"<ul> <li>Java Interop - Clojure has Native Java Interop from which Java's ML ecosystem can be accessed</li> <li>JavaScript Interop - ClojureScript has Native JavaScript Interop from which JavaScript's ML ecosystem can be accessed</li> <li>Libpython-clj - Interop with Python</li> <li>ClojisR - Interop with R and Renjin (R on the JVM)</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc","title":"Misc","text":"<ul> <li>Neanderthal - Fast Clojure Matrix Library (native CPU, GPU, OpenCL, CUDA)</li> <li>kixistats - A library of statistical distribution sampling and transducing functions</li> <li>fastmath - A collection of functions for mathematical and statistical computing, macine learning, etc., wrapping several JVM libraries</li> <li>matlib - a Clojure library of optimisation and control theory tools and convenience functions based on Neanderthal.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#extra","title":"Extra","text":"<ul> <li>Scicloj - Curated list of ML related resources for Clojure.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#crystal","title":"Crystal","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_5","title":"General-Purpose Machine Learning","text":"<ul> <li>machine - Simple machine learning algorithm.</li> <li>crystal-fann - FANN (Fast Artificial Neural Network) binding.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#elixir","title":"Elixir","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_6","title":"General-Purpose Machine Learning","text":"<ul> <li>Simple Bayes - A Simple Bayes / Naive Bayes implementation in Elixir.</li> <li>emel - A simple and functional machine learning library written in Elixir.</li> <li>Tensorflex - Tensorflow bindings for the Elixir programming language.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_2","title":"Natural Language Processing","text":"<ul> <li>Stemmer - An English (Porter2) stemming implementation in Elixir.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#erlang","title":"Erlang","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_7","title":"General-Purpose Machine Learning","text":"<ul> <li>Disco - Map Reduce in Erlang. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#fortran","title":"Fortran","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_8","title":"General-Purpose Machine Learning","text":"<ul> <li>neural-fortran - A parallel neural net microframework. Read the paper here.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization","title":"Data Analysis / Data Visualization","text":"<ul> <li>ParaMonte - A general-purpose Fortran library for Bayesian data analysis and visualization via serial/parallel Monte Carlo and MCMC simulations. Documentation can be found here.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#go","title":"Go","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_3","title":"Natural Language Processing","text":"<ul> <li>Cybertron - Cybertron: the home planet of the Transformers in Go.</li> <li>snowball - Snowball Stemmer for Go.</li> <li>word-embedding - Word Embeddings: the full implementation of word2vec, GloVe in Go.</li> <li>sentences - Golang implementation of Punkt sentence tokenizer.</li> <li>go-ngram - In-memory n-gram index with compression. [Deprecated]</li> <li>paicehusk - Golang implementation of the Paice/Husk Stemming Algorithm. [Deprecated]</li> <li>go-porterstemmer - A native Go clean room implementation of the Porter Stemming algorithm. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_9","title":"General-Purpose Machine Learning","text":"<ul> <li>Spago - Self-contained Machine Learning and Natural Language Processing library in Go.</li> <li>birdland - A recommendation library in Go.</li> <li>eaopt - An evolutionary optimization library.</li> <li>leaves - A pure Go implementation of the prediction part of GBRTs, including XGBoost and LightGBM.</li> <li>gobrain - Neural Networks written in Go.</li> <li>go-featureprocessing - Fast and convenient feature processing for low latency machine learning in Go.</li> <li>go-mxnet-predictor - Go binding for MXNet c_predict_api to do inference with a pre-trained model.</li> <li>go-ml-benchmarks \u2014 benchmarks of machine learning inference for Go.</li> <li>go-ml-transpiler - An open source Go transpiler for machine learning models.</li> <li>golearn - Machine learning for Go.</li> <li>goml - Machine learning library written in pure Go.</li> <li>gorgonia - Deep learning in Go.</li> <li>goro - A high-level machine learning library in the vein of Keras.</li> <li>gorse - An offline recommender system backend based on collaborative filtering written in Go.</li> <li>therfoo - An embedded deep learning library for Go.</li> <li>neat - Plug-and-play, parallel Go framework for NeuroEvolution of Augmenting Topologies (NEAT). [Deprecated]</li> <li>go-pr - Pattern recognition package in Go lang. [Deprecated]</li> <li>go-ml - Linear / Logistic regression, Neural Networks, Collaborative Filtering and Gaussian Multivariate Distribution. [Deprecated]</li> <li>GoNN - GoNN is an implementation of Neural Network in Go Language, which includes BPNN, RBF, PCN. [Deprecated]</li> <li>bayesian - Naive Bayesian Classification for Golang. [Deprecated]</li> <li>go-galib - Genetic Algorithms library written in Go / Golang. [Deprecated]</li> <li>Cloudforest - Ensembles of decision trees in Go/Golang. [Deprecated]</li> <li>go-dnn - Deep Neural Networks for Golang (powered by MXNet)</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#spatial-analysis-and-geometry","title":"Spatial analysis and geometry","text":"<ul> <li>go-geom - Go library to handle geometries.</li> <li>gogeo - Spherical geometry in Go.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_1","title":"Data Analysis / Data Visualization","text":"<ul> <li>dataframe-go - Dataframes for machine-learning and statistics (similar to pandas).</li> <li>gota - Dataframes.</li> <li>gonum/mat - A linear algebra package for Go.</li> <li>gonum/optimize - Implementations of optimization algorithms.</li> <li>gonum/plot - A plotting library.</li> <li>gonum/stat - A statistics library.</li> <li>SVGo - The Go Language library for SVG generation.</li> <li>glot - Glot is a plotting library for Golang built on top of gnuplot.</li> <li>globe - Globe wireframe visualization.</li> <li>gonum/graph - General-purpose graph library.</li> <li>go-graph - Graph library for Go/Golang language. [Deprecated]</li> <li>RF - Random forests implementation in Go. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#computer-vision_2","title":"Computer vision","text":"<ul> <li>GoCV - Package for computer vision using OpenCV 4 and beyond.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#reinforcement-learning","title":"Reinforcement learning","text":"<ul> <li>gold - A reinforcement learning library.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#haskell","title":"Haskell","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_10","title":"General-Purpose Machine Learning","text":"<ul> <li>haskell-ml - Haskell implementations of various ML algorithms. [Deprecated]</li> <li>HLearn - a suite of libraries for interpreting machine learning models according to their algebraic structure. [Deprecated]</li> <li>hnn - Haskell Neural Network library.</li> <li>hopfield-networks - Hopfield Networks for unsupervised learning in Haskell. [Deprecated]</li> <li>DNNGraph - A DSL for deep neural networks. [Deprecated]</li> <li>LambdaNet - Configurable Neural Networks in Haskell. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#java","title":"Java","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_4","title":"Natural Language Processing","text":"<ul> <li>Cortical.io - Retina: an API performing complex NLP operations (disambiguation, classification, streaming text filtering, etc...) as quickly and intuitively as the brain.</li> <li>IRIS - Cortical.io's FREE NLP, Retina API Analysis Tool (written in JavaFX!) - See the Tutorial Video.</li> <li>CoreNLP - Stanford CoreNLP provides a set of natural language analysis tools which can take raw English language text input and give the base forms of words.</li> <li>Stanford Parser - A natural language parser is a program that works out the grammatical structure of sentences.</li> <li>Stanford POS Tagger - A Part-Of-Speech Tagger (POS Tagger).</li> <li>Stanford Name Entity Recognizer - Stanford NER is a Java implementation of a Named Entity Recognizer.</li> <li>Stanford Word Segmenter - Tokenization of raw text is a standard pre-processing step for many NLP tasks.</li> <li>Tregex, Tsurgeon and Semgrex - Tregex is a utility for matching patterns in trees, based on tree relationships and regular expression matches on nodes (the name is short for \"tree regular expressions\").</li> <li>Stanford Phrasal: A Phrase-Based Translation System</li> <li>Stanford English Tokenizer - Stanford Phrasal is a state-of-the-art statistical phrase-based machine translation system, written in Java.</li> <li>Stanford Tokens Regex - A tokenizer divides text into a sequence of tokens, which roughly correspond to \"words\".</li> <li>Stanford Temporal Tagger - SUTime is a library for recognizing and normalizing time expressions.</li> <li>Stanford SPIED - Learning entities from unlabeled text starting with seed sets using patterns in an iterative fashion.</li> <li>Twitter Text Java - A Java implementation of Twitter's text processing library.</li> <li>MALLET - A Java-based package for statistical natural language processing, document classification, clustering, topic modelling, information extraction, and other machine learning applications to text.</li> <li>OpenNLP - a machine learning based toolkit for the processing of natural language text.</li> <li>LingPipe - A tool kit for processing text using computational linguistics.</li> <li>ClearTK - ClearTK provides a framework for developing statistical natural language processing (NLP) components in Java and is built on top of Apache UIMA. [Deprecated]</li> <li>Apache cTAKES - Apache Clinical Text Analysis and Knowledge Extraction System (cTAKES) is an open-source natural language processing system for information extraction from electronic medical record clinical free-text.</li> <li>NLP4J - The NLP4J project provides software and resources for natural language processing. The project started at the Center for Computational Language and EducAtion Research, and is currently developed by the Center for Language and Information Research at Emory University. [Deprecated]</li> <li>CogcompNLP - This project collects a number of core libraries for Natural Language Processing (NLP) developed in the University of Illinois' Cognitive Computation Group, for example <code>illinois-core-utilities</code> which provides a set of NLP-friendly data structures and a number of NLP-related utilities that support writing NLP applications, running experiments, etc, <code>illinois-edison</code> a library for feature extraction from illinois-core-utilities data structures and many other packages.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_11","title":"General-Purpose Machine Learning","text":"<ul> <li>aerosolve - A machine learning library by Airbnb designed from the ground up to be human friendly.</li> <li>AMIDST Toolbox - A Java Toolbox for Scalable Probabilistic Machine Learning.</li> <li>Chips-n-Salsa - A Java library for genetic algorithms, evolutionary computation, and stochastic local search, with a focus on self-adaptation / self-tuning, as well as parallel execution.</li> <li>Datumbox - Machine Learning framework for rapid development of Machine Learning and Statistical applications.</li> <li>ELKI - Java toolkit for data mining. (unsupervised: clustering, outlier detection etc.)</li> <li>Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trainings using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks.</li> <li>FlinkML in Apache Flink - Distributed machine learning library in Flink.</li> <li>H2O - ML engine that supports distributed learning on Hadoop, Spark or your laptop via APIs in R, Python, Scala, REST/JSON.</li> <li>htm.java - General Machine Learning library using Numenta\u2019s Cortical Learning Algorithm.</li> <li>liblinear-java - Java version of liblinear.</li> <li>Mahout - Distributed machine learning.</li> <li>Meka - An open source implementation of methods for multi-label classification and evaluation (extension to Weka).</li> <li>MLlib in Apache Spark - Distributed machine learning library in Spark.</li> <li>Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services.</li> <li>Neuroph - Neuroph is lightweight Java neural network framework.</li> <li>ORYX - Lambda Architecture Framework using Apache Spark and Apache Kafka with a specialization for real-time large-scale machine learning.</li> <li>Samoa SAMOA is a framework that includes distributed machine learning for data streams with an interface to plug-in different stream processing platforms.</li> <li>RankLib - RankLib is a library of learning to rank algorithms. [Deprecated]</li> <li>rapaio - statistics, data mining and machine learning toolbox in Java.</li> <li>RapidMiner - RapidMiner integration into Java code.</li> <li>Stanford Classifier - A classifier is a machine learning tool that will take data items and place them into one of k classes.</li> <li>Smile - Statistical Machine Intelligence &amp; Learning Engine.</li> <li>SystemML - flexible, scalable machine learning (ML) language.</li> <li>Tribou - a machine learning library written in Java by Oracle.</li> <li>Weka - Weka is a collection of machine learning algorithms for data mining tasks.</li> <li>LBJava - Learning Based Java is a modelling language for the rapid development of software systems, offers a convenient, declarative syntax for classifier and constraint definition directly in terms of the objects in the programmer's application.</li> <li>knn-java-library - Just a simple implementation of K-Nearest Neighbors algorithm using with a bunch of similarity measures.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#speech-recognition_1","title":"Speech Recognition","text":"<ul> <li>CMU Sphinx - Open Source Toolkit For Speech Recognition purely based on Java speech recognition library.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_2","title":"Data Analysis / Data Visualization","text":"<ul> <li>Flink - Open source platform for distributed stream and batch data processing.</li> <li>Hadoop - Hadoop/HDFS.</li> <li>Onyx - Distributed, masterless, high performance, fault tolerant data processing. Written entirely in Clojure.</li> <li>Spark - Spark is a fast and general engine for large-scale data processing.</li> <li>Storm - Storm is a distributed realtime computation system.</li> <li>Impala - Real-time Query for Hadoop.</li> <li>DataMelt - Mathematics software for numeric computation, statistics, symbolic calculations, data analysis and data visualization.</li> <li>Dr. Michael Thomas Flanagan's Java Scientific Library. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#deep-learning_1","title":"Deep Learning","text":"<ul> <li>Deeplearning4j - Scalable deep learning for industry with parallel GPUs.</li> <li>Keras Beginner Tutorial - Friendly guide on using Keras to implement a simple Neural Network in Python.</li> <li>deepjavalibrary/djl - Deep Java Library (DJL) is an open-source, high-level, engine-agnostic Java framework for deep learning, designed to be easy to get started with and simple to use for Java developers.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#javascript","title":"JavaScript","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_5","title":"Natural Language Processing","text":"<ul> <li>Twitter-text - A JavaScript implementation of Twitter's text processing library.</li> <li>natural - General natural language facilities for node.</li> <li>Knwl.js - A Natural Language Processor in JS.</li> <li>Retext - Extensible system for analyzing and manipulating natural language.</li> <li>NLP Compromise - Natural Language processing in the browser.</li> <li>nlp.js - An NLP library built in node over Natural, with entity extraction, sentiment analysis, automatic language identify, and so more.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_3","title":"Data Analysis / Data Visualization","text":"<ul> <li>D3.js</li> <li>High Charts</li> <li>NVD3.js</li> <li>dc.js</li> <li>chartjs</li> <li>dimple</li> <li>amCharts</li> <li>D3xter - Straight forward plotting built on D3. [Deprecated]</li> <li>statkit - Statistics kit for JavaScript. [Deprecated]</li> <li>datakit - A lightweight framework for data analysis in JavaScript</li> <li>science.js - Scientific and statistical computing in JavaScript. [Deprecated]</li> <li>Z3d - Easily make interactive 3d plots built on Three.js [Deprecated]</li> <li>Sigma.js - JavaScript library dedicated to graph drawing.</li> <li>C3.js - customizable library based on D3.js for easy chart drawing.</li> <li>Datamaps - Customizable SVG map/geo visualizations using D3.js. [Deprecated]</li> <li>ZingChart - library written on Vanilla JS for big data visualization.</li> <li>cheminfo - Platform for data visualization and analysis, using the visualizer project.</li> <li>Learn JS Data</li> <li>AnyChart</li> <li>FusionCharts</li> <li>Nivo - built on top of the awesome d3 and Reactjs libraries</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_12","title":"General-Purpose Machine Learning","text":"<ul> <li>Auto ML - Automated machine learning, data formatting, ensembling, and hyperparameter optimization for competitions and exploration- just give it a .csv file! [Deprecated]</li> <li>Convnet.js - ConvNetJS is a JavaScript library for training Deep Learning models[DEEP LEARNING] [Deprecated]</li> <li>Clusterfck - Agglomerative hierarchical clustering implemented in JavaScript for Node.js and the browser. [Deprecated]</li> <li>Clustering.js - Clustering algorithms implemented in JavaScript for Node.js and the browser. [Deprecated]</li> <li>Decision Trees - NodeJS Implementation of Decision Tree using ID3 Algorithm. [Deprecated]</li> <li>DN2A - Digital Neural Networks Architecture. [Deprecated]</li> <li>figue - K-means, fuzzy c-means and agglomerative clustering.</li> <li>Gaussian Mixture Model - Unsupervised machine learning with multivariate Gaussian mixture model.</li> <li>Node-fann - FANN (Fast Artificial Neural Network Library) bindings for Node.js [Deprecated]</li> <li>Keras.js - Run Keras models in the browser, with GPU support provided by WebGL 2.</li> <li>Kmeans.js - Simple JavaScript implementation of the k-means algorithm, for node.js and the browser. [Deprecated]</li> <li>LDA.js - LDA topic modelling for Node.js</li> <li>Learning.js - JavaScript implementation of logistic regression/c4.5 decision tree [Deprecated]</li> <li>machinelearn.js - Machine Learning library for the web, Node.js and developers</li> <li>mil-tokyo - List of several machine learning libraries.</li> <li>Node-SVM - Support Vector Machine for Node.js</li> <li>Brain - Neural networks in JavaScript [Deprecated]</li> <li>Brain.js - Neural networks in JavaScript - continued community fork of Brain.</li> <li>Bayesian-Bandit - Bayesian bandit implementation for Node and the browser. [Deprecated]</li> <li>Synaptic - Architecture-free neural network library for Node.js and the browser.</li> <li>kNear - JavaScript implementation of the k nearest neighbors algorithm for supervised learning.</li> <li>NeuralN - C++ Neural Network library for Node.js. It has advantage on large dataset and multi-threaded training. [Deprecated]</li> <li>kalman - Kalman filter for JavaScript. [Deprecated]</li> <li>shaman - Node.js library with support for both simple and multiple linear regression. [Deprecated]</li> <li>ml.js - Machine learning and numerical analysis tools for Node.js and the Browser!</li> <li>ml5 - Friendly machine learning for the web!</li> <li>Pavlov.js - Reinforcement learning using Markov Decision Processes.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>TensorFlow.js - A WebGL accelerated, browser based JavaScript library for training and deploying ML models.</li> <li>JSMLT - Machine learning toolkit with classification and clustering for Node.js; supports visualization (see visualml.io).</li> <li>xgboost-node - Run XGBoost model and make predictions in Node.js.</li> <li>Netron - Visualizer for machine learning models.</li> <li>tensor-js - A deep learning library for the browser, accelerated by WebGL and WebAssembly.</li> <li>WebDNN - Fast Deep Neural Network JavaScript Framework. WebDNN uses next generation JavaScript API, WebGPU for GPU execution, and WebAssembly for CPU execution.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc_1","title":"Misc","text":"<ul> <li>stdlib - A standard library for JavaScript and Node.js, with an emphasis on numeric computing. The library provides a collection of robust, high performance libraries for mathematics, statistics, streams, utilities, and more.</li> <li>sylvester - Vector and Matrix math for JavaScript. [Deprecated]</li> <li>simple-statistics - A JavaScript implementation of descriptive, regression, and inference statistics. Implemented in literate JavaScript with no dependencies, designed to work in all modern browsers (including IE) as well as in Node.js.</li> <li>regression-js - A javascript library containing a collection of least squares fitting methods for finding a trend in a set of data.</li> <li>Lyric - Linear Regression library. [Deprecated]</li> <li>GreatCircle - Library for calculating great circle distance.</li> <li>MLPleaseHelp - MLPleaseHelp is a simple ML resource search engine. You can use this search engine right now at https://jgreenemi.github.io/MLPleaseHelp/, provided via GitHub Pages.</li> <li>Pipcook - A JavaScript application framework for machine learning and its engineering.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#demos-and-scripts","title":"Demos and Scripts","text":"<ul> <li>The Bot - Example of how the neural network learns to predict the angle between two points created with Synaptic.</li> <li>Half Beer - Beer glass classifier created with Synaptic.</li> <li>NSFWJS - Indecent content checker with TensorFlow.js</li> <li>Rock Paper Scissors - Rock Paper Scissors trained in the browser with TensorFlow.js</li> <li>Heroes Wear Masks - A fun TensorFlow.js-based oracle that tells, whether one wears a face mask or not. It can even tell when one wears the mask incorrectly.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#julia","title":"Julia","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_13","title":"General-Purpose Machine Learning","text":"<ul> <li>MachineLearning - Julia Machine Learning library. [Deprecated]</li> <li>MLBase - A set of functions to support the development of machine learning algorithms.</li> <li>PGM - A Julia framework for probabilistic graphical models.</li> <li>DA - Julia package for Regularized Discriminant Analysis.</li> <li>Regression - Algorithms for regression analysis (e.g. linear regression and logistic regression). [Deprecated]</li> <li>Local Regression - Local regression, so smooooth!</li> <li>Naive Bayes - Simple Naive Bayes implementation in Julia. [Deprecated]</li> <li>Mixed Models - A Julia package for fitting (statistical) mixed-effects models.</li> <li>Simple MCMC - basic MCMC sampler implemented in Julia. [Deprecated]</li> <li>Distances - Julia module for Distance evaluation.</li> <li>Decision Tree - Decision Tree Classifier and Regressor.</li> <li>Neural - A neural network in Julia.</li> <li>MCMC - MCMC tools for Julia. [Deprecated]</li> <li>Mamba - Markov chain Monte Carlo (MCMC) for Bayesian analysis in Julia.</li> <li>GLM - Generalized linear models in Julia.</li> <li>Gaussian Processes - Julia package for Gaussian processes.</li> <li>Online Learning [Deprecated]</li> <li>GLMNet - Julia wrapper for fitting Lasso/ElasticNet GLM models using glmnet.</li> <li>Clustering - Basic functions for clustering data: k-means, dp-means, etc.</li> <li>SVM - SVM for Julia. [Deprecated]</li> <li>Kernel Density - Kernel density estimators for Julia.</li> <li>MultivariateStats - Methods for dimensionality reduction.</li> <li>NMF - A Julia package for non-negative matrix factorization.</li> <li>ANN - Julia artificial neural networks. [Deprecated]</li> <li>Mocha - Deep Learning framework for Julia inspired by Caffe. [Deprecated]</li> <li>XGBoost - eXtreme Gradient Boosting Package in Julia.</li> <li>ManifoldLearning - A Julia package for manifold learning and nonlinear dimensionality reduction.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>Merlin - Flexible Deep Learning Framework in Julia.</li> <li>ROCAnalysis - Receiver Operating Characteristics and functions for evaluation probabilistic binary classifiers.</li> <li>GaussianMixtures - Large scale Gaussian Mixture Models.</li> <li>ScikitLearn - Julia implementation of the scikit-learn API.</li> <li>Knet - Ko\u00e7 University Deep Learning Framework.</li> <li>Flux - Relax! Flux is the ML library that doesn't make you tensor</li> <li>MLJ - A Julia machine learning framework.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_6","title":"Natural Language Processing","text":"<ul> <li>Topic Models - TopicModels for Julia. [Deprecated]</li> <li>Text Analysis - Julia package for text analysis.</li> <li>Word Tokenizers - Tokenizers for Natural Language Processing in Julia</li> <li>Corpus Loaders - A Julia package providing a variety of loaders for various NLP corpora.</li> <li>Embeddings - Functions and data dependencies for loading various word embeddings</li> <li>Languages - Julia package for working with various human languages</li> <li>WordNet - A Julia package for Princeton's WordNet</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_4","title":"Data Analysis / Data Visualization","text":"<ul> <li>Graph Layout - Graph layout algorithms in pure Julia.</li> <li>LightGraphs - Graph modelling and analysis.</li> <li>Data Frames Meta - Metaprogramming tools for DataFrames.</li> <li>Julia Data - library for working with tabular data in Julia. [Deprecated]</li> <li>Data Read - Read files from Stata, SAS, and SPSS.</li> <li>Hypothesis Tests - Hypothesis tests for Julia.</li> <li>Gadfly - Crafty statistical graphics for Julia.</li> <li>Stats - Statistical tests for Julia.</li> <li>RDataSets - Julia package for loading many of the data sets available in R.</li> <li>DataFrames - library for working with tabular data in Julia.</li> <li>Distributions - A Julia package for probability distributions and associated functions.</li> <li>Data Arrays - Data structures that allow missing values. [Deprecated]</li> <li>Time Series - Time series toolkit for Julia.</li> <li>Sampling - Basic sampling algorithms for Julia.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc-stuff-presentations","title":"Misc Stuff / Presentations","text":"<ul> <li>DSP - Digital Signal Processing (filtering, periodograms, spectrograms, window functions).</li> <li>JuliaCon Presentations - Presentations for JuliaCon.</li> <li>SignalProcessing - Signal Processing tools for Julia.</li> <li>Images - An image library for Julia.</li> <li>DataDeps - Reproducible data setup for reproducible science.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#kotlin","title":"Kotlin","text":""},{"location":"ai_ml/machine_learning/framework/#deep-learning_2","title":"Deep Learning","text":"<ul> <li>KotlinDL - Deep learning framework written in Kotlin.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#lua","title":"Lua","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_14","title":"General-Purpose Machine Learning","text":"<ul> <li>Torch7</li> <li>cephes - Cephes mathematical functions library, wrapped for Torch. Provides and wraps the 180+ special mathematical functions from the Cephes mathematical library, developed by Stephen L. Moshier. It is used, among many other places, at the heart of SciPy. [Deprecated]</li> <li>autograd - Autograd automatically differentiates native Torch code. Inspired by the original Python version.</li> <li>graph - Graph package for Torch. [Deprecated]</li> <li>randomkit - Numpy's randomkit, wrapped for Torch. [Deprecated]</li> <li>signal - A signal processing toolbox for Torch-7. FFT, DCT, Hilbert, cepstrums, stft.</li> <li>nn - Neural Network package for Torch.</li> <li>torchnet - framework for torch which provides a set of abstractions aiming at encouraging code re-use as well as encouraging modular programming.</li> <li>nngraph - This package provides graphical computation for nn library in Torch7.</li> <li>nnx - A completely unstable and experimental package that extends Torch's builtin nn library.</li> <li>rnn - A Recurrent Neural Network library that extends Torch's nn. RNNs, LSTMs, GRUs, BRNNs, BLSTMs, etc.</li> <li>dpnn - Many useful features that aren't part of the main nn package.</li> <li>dp - A deep learning library designed for streamlining research and development using the Torch7 distribution. It emphasizes flexibility through the elegant use of object-oriented design patterns. [Deprecated]</li> <li>optim - An optimization library for Torch. SGD, Adagrad, Conjugate-Gradient, LBFGS, RProp and more.</li> <li>unsup - A package for unsupervised learning in Torch. Provides modules that are compatible with nn (LinearPsd, ConvPsd, AutoEncoder, ...), and self-contained algorithms (k-means, PCA). [Deprecated]</li> <li>manifold - A package to manipulate manifolds.</li> <li>svm - Torch-SVM library. [Deprecated]</li> <li>lbfgs - FFI Wrapper for liblbfgs. [Deprecated]</li> <li>vowpalwabbit - An old vowpalwabbit interface to torch. [Deprecated]</li> <li>OpenGM - OpenGM is a C++ library for graphical modelling, and inference. The Lua bindings provide a simple way of describing graphs, from Lua, and then optimizing them with OpenGM. [Deprecated]</li> <li>spaghetti - Spaghetti (sparse linear) module for torch7 by @MichaelMathieu [Deprecated]</li> <li>LuaSHKit - A Lua wrapper around the Locality sensitive hashing library SHKit [Deprecated]</li> <li>kernel smoothing - KNN, kernel-weighted average, local linear regression smoothers. [Deprecated]</li> <li>cutorch - Torch CUDA Implementation.</li> <li>cunn - Torch CUDA Neural Network Implementation.</li> <li>imgraph - An image/graph library for Torch. This package provides routines to construct graphs on images, segment them, build trees out of them, and convert them back to images. [Deprecated]</li> <li>videograph - A video/graph library for Torch. This package provides routines to construct graphs on videos, segment them, build trees out of them, and convert them back to videos. [Deprecated]</li> <li>saliency - code and tools around integral images. A library for finding interest points based on fast integral histograms. [Deprecated]</li> <li>stitch - allows us to use hugin to stitch images and apply same stitching to a video sequence. [Deprecated]</li> <li>sfm - A bundle adjustment/structure from motion package. [Deprecated]</li> <li>fex - A package for feature extraction in Torch. Provides SIFT and dSIFT modules. [Deprecated]</li> <li>OverFeat - A state-of-the-art generic dense feature extractor. [Deprecated]</li> <li>wav2letter - a simple and efficient end-to-end Automatic Speech Recognition (ASR) system from Facebook AI Research.</li> <li>Numeric Lua</li> <li>Lunatic Python</li> <li>SciLua</li> <li>Lua - Numerical Algorithms [Deprecated]</li> <li>Lunum [Deprecated]</li> <li>Keras GPT Copilot - A python package that integrates an LLM copilot inside the keras model development workflow.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#demos-and-scripts_1","title":"Demos and Scripts","text":"<ul> <li>Core torch7 demos repository.</li> <li>linear-regression, logistic-regression</li> <li>face detector (training and detection as separate demos)</li> <li>mst-based-segmenter</li> <li>train-a-digit-classifier</li> <li>train-autoencoder</li> <li>optical flow demo</li> <li>train-on-housenumbers</li> <li>train-on-cifar</li> <li>tracking with deep nets</li> <li>kinect demo</li> <li>filter-bank visualization</li> <li>saliency-networks</li> <li>Training a Convnet for the Galaxy-Zoo Kaggle challenge(CUDA demo)</li> <li>torch-datasets - Scripts to load several popular datasets including:</li> <li>BSR 500</li> <li>CIFAR-10</li> <li>COIL</li> <li>Street View House Numbers</li> <li>MNIST</li> <li>NORB</li> <li>Atari2600 - Scripts to generate a dataset with static frames from the Arcade Learning Environment.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#matlab","title":"Matlab","text":""},{"location":"ai_ml/machine_learning/framework/#computer-vision_3","title":"Computer Vision","text":"<ul> <li>Contourlets - MATLAB source code that implements the contourlet transform and its utility functions.</li> <li>Shearlets - MATLAB code for shearlet transform.</li> <li>Curvelets - The Curvelet transform is a higher dimensional generalization of the Wavelet transform designed to represent images at different scales and different angles.</li> <li>Bandlets - MATLAB code for bandlet transform.</li> <li>mexopencv - Collection and a development kit of MATLAB mex functions for OpenCV library.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_7","title":"Natural Language Processing","text":"<ul> <li>NLP - A NLP library for Matlab.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_15","title":"General-Purpose Machine Learning","text":"<ul> <li>Training a deep autoencoder or a classifier on MNIST digits - Training a deep autoencoder or a classifier on MNIST digits[DEEP LEARNING].</li> <li>Convolutional-Recursive Deep Learning for 3D Object Classification - Convolutional-Recursive Deep Learning for 3D Object Classification[DEEP LEARNING].</li> <li>Spider - The spider is intended to be a complete object orientated environment for machine learning in Matlab.</li> <li>LibSVM - A Library for Support Vector Machines.</li> <li>ThunderSVM - An Open-Source SVM Library on GPUs and CPUs</li> <li>LibLinear - A Library for Large Linear Classification.</li> <li>Machine Learning Module - Class on machine w/ PDF, lectures, code</li> <li>Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind.</li> <li>Pattern Recognition Toolbox - A complete object-oriented environment for machine learning in Matlab.</li> <li>Pattern Recognition and Machine Learning - This package contains the matlab implementation of the algorithms described in the book Pattern Recognition and Machine Learning by C. Bishop.</li> <li>Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly with MATLAB.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>Machine Learning in MatLab/Octave - examples of popular machine learning algorithms (neural networks, linear/logistic regressions, K-Means, etc.) with code examples and mathematics behind them being explained.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_5","title":"Data Analysis / Data Visualization","text":"<ul> <li>ParaMonte - A general-purpose MATLAB library for Bayesian data analysis and visualization via serial/parallel Monte Carlo and MCMC simulations. Documentation can be found here.</li> <li>matlab_bgl - MatlabBGL is a Matlab package for working with graphs.</li> <li>gaimc - Efficient pure-Matlab implementations of graph algorithms to complement MatlabBGL's mex functions.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#net","title":".NET","text":""},{"location":"ai_ml/machine_learning/framework/#computer-vision_4","title":"Computer Vision","text":"<ul> <li>OpenCVDotNet - A wrapper for the OpenCV project to be used with .NET applications.</li> <li>Emgu CV - Cross platform wrapper of OpenCV which can be compiled in Mono to be run on Windows, Linus, Mac OS X, iOS, and Android.</li> <li>AForge.NET - Open source C# framework for developers and researchers in the fields of Computer Vision and Artificial Intelligence. Development has now shifted to GitHub.</li> <li>Accord.NET - Together with AForge.NET, this library can provide image processing and computer vision algorithms to Windows, Windows RT and Windows Phone. Some components are also available for Java and Android.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_8","title":"Natural Language Processing","text":"<ul> <li>Stanford.NLP for .NET - A full port of Stanford NLP packages to .NET and also available precompiled as a NuGet package.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_16","title":"General-Purpose Machine Learning","text":"<ul> <li>Accord-Framework -The Accord.NET Framework is a complete framework for building machine learning, computer vision, computer audition, signal processing and statistical applications.</li> <li>Accord.MachineLearning - Support Vector Machines, Decision Trees, Naive Bayesian models, K-means, Gaussian Mixture models and general algorithms such as Ransac, Cross-validation and Grid-Search for machine-learning applications. This package is part of the Accord.NET Framework.</li> <li>DiffSharp - An automatic differentiation (AD) library providing exact and efficient derivatives (gradients, Hessians, Jacobians, directional derivatives, and matrix-free Hessian- and Jacobian-vector products) for machine learning and optimization applications. Operations can be nested to any level, meaning that you can compute exact higher-order derivatives and differentiate functions that are internally making use of differentiation, for applications such as hyperparameter optimization.</li> <li>Encog - An advanced neural network and machine learning framework. Encog contains classes to create a wide variety of networks, as well as support classes to normalize and process data for these neural networks. Encog trains using multithreaded resilient propagation. Encog can also make use of a GPU to further speed processing time. A GUI based workbench is also provided to help model and train neural networks.</li> <li>GeneticSharp - Multi-platform genetic algorithm library for .NET Core and .NET Framework. The library has several implementations of GA operators, like: selection, crossover, mutation, reinsertion and termination.</li> <li>Infer.NET - Infer.NET is a framework for running Bayesian inference in graphical models. One can use Infer.NET to solve many different kinds of machine learning problems, from standard problems like classification, recommendation or clustering through to customized solutions to domain-specific problems. Infer.NET has been used in a wide variety of domains including information retrieval, bioinformatics, epidemiology, vision, and many others.</li> <li>ML.NET - ML.NET is a cross-platform open-source machine learning framework which makes machine learning accessible to .NET developers. ML.NET was originally developed in Microsoft Research and evolved into a significant framework over the last decade and is used across many product groups in Microsoft like Windows, Bing, PowerPoint, Excel and more.</li> <li>Neural Network Designer - DBMS management system and designer for neural networks. The designer application is developed using WPF, and is a user interface which allows you to design your neural network, query the network, create and configure chat bots that are capable of asking questions and learning from your feedback. The chat bots can even scrape the internet for information to return in their output as well as to use for learning.</li> <li>Synapses - Neural network library in F#.</li> <li>Vulpes - Deep belief and deep learning implementation written in F# and leverages CUDA GPU execution with Alea.cuBase.</li> <li>MxNet.Sharp - .NET Standard bindings for Apache MxNet with Imperative, Symbolic and Gluon Interface for developing, training and deploying Machine Learning models in C#. https://mxnet.tech-quantum.com/</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_6","title":"Data Analysis / Data Visualization","text":"<ul> <li>numl - numl is a machine learning library intended to ease the use of using standard modelling techniques for both prediction and clustering.</li> <li>Math.NET Numerics - Numerical foundation of the Math.NET project, aiming to provide methods and algorithms for numerical computations in science, engineering and everyday use. Supports .Net 4.0, .Net 3.5 and Mono on Windows, Linux and Mac; Silverlight 5, WindowsPhone/SL 8, WindowsPhone 8.1 and Windows 8 with PCL Portable Profiles 47 and 344; Android/iOS with Xamarin.</li> <li>Sho - Sho is an interactive environment for data analysis and scientific computing that lets you seamlessly connect scripts (in IronPython) with compiled code (in .NET) to enable fast and flexible prototyping. The environment includes powerful and efficient libraries for linear algebra as well as data visualization that can be used from any .NET language, as well as a feature-rich interactive shell for rapid development.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#objective-c","title":"Objective C","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_17","title":"General-Purpose Machine Learning","text":"<ul> <li>YCML - A Machine Learning framework for Objective-C and Swift (OS X / iOS).</li> <li>MLPNeuralNet - Fast multilayer perceptron neural network library for iOS and Mac OS X. MLPNeuralNet predicts new examples by trained neural networks. It is built on top of the Apple's Accelerate Framework, using vectorized operations and hardware acceleration if available. [Deprecated]</li> <li>MAChineLearning - An Objective-C multilayer perceptron library, with full support for training through backpropagation. Implemented using vDSP and vecLib, it's 20 times faster than its Java equivalent. Includes sample code for use from Swift.</li> <li>BPN-NeuralNetwork - It implemented 3 layers of neural networks ( Input Layer, Hidden Layer and Output Layer ) and it was named Back Propagation Neural Networks (BPN). This network can be used in products recommendation, user behavior analysis, data mining and data analysis. [Deprecated]</li> <li>Multi-Perceptron-NeuralNetwork - it implemented multi-perceptrons neural network (\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af) based on Back Propagation Neural Networks (BPN) and designed unlimited-hidden-layers.</li> <li>KRHebbian-Algorithm - It is a non-supervisor and self-learning algorithm (adjust the weights) in the neural network of Machine Learning. [Deprecated]</li> <li>KRKmeans-Algorithm - It implemented K-Means  clustering and classification algorithm. It could be used in data mining and image compression. [Deprecated]</li> <li>KRFuzzyCMeans-Algorithm - It implemented Fuzzy C-Means (FCM) the fuzzy clustering / classification algorithm on Machine Learning. It could be used in data mining and image compression. [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#ocaml","title":"OCaml","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_18","title":"General-Purpose Machine Learning","text":"<ul> <li>Oml - A general statistics and machine learning library.</li> <li>GPR - Efficient Gaussian Process Regression in OCaml.</li> <li>Libra-Tk - Algorithms for learning and inference with discrete probabilistic models.</li> <li>TensorFlow - OCaml bindings for TensorFlow.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#opencv","title":"OpenCV","text":""},{"location":"ai_ml/machine_learning/framework/#opensource-computer-vision","title":"OpenSource-Computer-Vision","text":"<ul> <li>OpenCV - A OpenSource Computer Vision Library</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#perl","title":"Perl","text":""},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_7","title":"Data Analysis / Data Visualization","text":"<ul> <li>Perl Data Language, a pluggable architecture for data and image processing, which can be used for machine learning.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_19","title":"General-Purpose Machine Learning","text":"<ul> <li>MXnet for Deep Learning, in Perl, also released in CPAN.</li> <li>Perl Data Language, using AWS machine learning platform from Perl.</li> <li>Algorithm::SVMLight,   implementation of Support Vector Machines with SVMLight under it. [Deprecated]</li> <li>Several machine learning and artificial intelligence models are   included in the <code>AI</code>   namespace. For instance, you can   find Na\u00efve Bayes.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#perl-6","title":"Perl 6","text":"<ul> <li>Support Vector Machines</li> <li>Na\u00efve Bayes</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_8","title":"Data Analysis / Data Visualization","text":"<ul> <li>Perl Data Language, a pluggable architecture for data and image processing, which can be used for machine learning.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_20","title":"General-Purpose Machine Learning","text":""},{"location":"ai_ml/machine_learning/framework/#php","title":"PHP","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_9","title":"Natural Language Processing","text":"<ul> <li>jieba-php - Chinese Words Segmentation Utilities.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_21","title":"General-Purpose Machine Learning","text":"<ul> <li>PHP-ML - Machine Learning library for PHP. Algorithms, Cross Validation, Neural Network, Preprocessing, Feature Extraction and much more in one library.</li> <li>PredictionBuilder - A library for machine learning that builds predictions using a linear regression.</li> <li>Rubix ML - A high-level machine learning (ML) library that lets you build programs that learn from data using the PHP language.</li> <li>19 Questions - A machine learning / bayesian inference assigning attributes to objects.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#python","title":"Python","text":""},{"location":"ai_ml/machine_learning/framework/#computer-vision_5","title":"Computer Vision","text":"<ul> <li>Scikit-Image - A collection of algorithms for image processing in Python.</li> <li>Scikit-Opt - Swarm Intelligence in Python (Genetic Algorithm, Particle Swarm Optimization, Simulated Annealing, Ant Colony Algorithm, Immune Algorithm, Artificial Fish Swarm Algorithm in Python)</li> <li>SimpleCV - An open source computer vision framework that gives access to several high-powered computer vision libraries, such as OpenCV. Written on Python and runs on Mac, Windows, and Ubuntu Linux.</li> <li>Vigranumpy - Python bindings for the VIGRA C++ computer vision library.</li> <li>OpenFace - Free and open source face recognition with deep neural networks.</li> <li>PCV - Open source Python module for computer vision. [Deprecated]</li> <li>face_recognition - Face recognition library that recognizes and manipulates faces from Python or from the command line.</li> <li>deepface - A lightweight face recognition and facial attribute analysis (age, gender, emotion and race) framework for Python covering cutting-edge models such as VGG-Face, FaceNet, OpenFace, DeepFace, DeepID, Dlib and ArcFace.</li> <li>retinaface - deep learning based cutting-edge facial detector for Python coming with facial landmarks</li> <li>dockerface - Easy to install and use deep learning Faster R-CNN face detection for images and video in a docker container. [Deprecated]</li> <li>Detectron - FAIR's software system that implements state-of-the-art object detection algorithms, including Mask R-CNN. It is written in Python and powered by the Caffe2 deep learning framework. [Deprecated]</li> <li>detectron2 - FAIR's next-generation research platform for object detection and segmentation. It is a ground-up rewrite of the previous version, Detectron, and is powered by the PyTorch deep learning framework.</li> <li>albumentations - \u0410 fast and framework agnostic image augmentation library that implements a diverse set of augmentation techniques. Supports classification, segmentation, detection out of the box. Was used to win a number of Deep Learning competitions at Kaggle, Topcoder and those that were a part of the CVPR workshops.</li> <li>pytessarct - Python-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and \"read\" the text embedded in images. Python-tesseract is a wrapper for Google's Tesseract-OCR Engine.</li> <li>imutils - A library containing Convenience functions to make basic image processing operations such as translation, rotation, resizing, skeletonization, and displaying Matplotlib images easier with OpenCV and Python.</li> <li>PyTorchCV - A PyTorch-Based Framework for Deep Learning in Computer Vision.</li> <li>joliGEN - Generative AI Image Toolset with GANs and Diffusion for Real-World Applications.</li> <li>Self-supervised learning</li> <li>neural-style-pt - A PyTorch implementation of Justin Johnson's neural-style (neural style transfer).</li> <li>Detecto - Train and run a computer vision model with 5-10 lines of code.</li> <li>neural-dream - A PyTorch implementation of DeepDream.</li> <li>Openpose - A real-time multi-person keypoint detection library for body, face, hands, and foot estimation</li> <li>Deep High-Resolution-Net - A PyTorch implementation of CVPR2019 paper \"Deep High-Resolution Representation Learning for Human Pose Estimation\"</li> <li>TF-GAN - TF-GAN is a lightweight library for training and evaluating Generative Adversarial Networks (GANs).</li> <li>dream-creator - A PyTorch implementation of DeepDream. Allows individuals to quickly and easily train their own custom GoogleNet models with custom datasets for DeepDream.</li> <li>Lucent - Tensorflow and OpenAI Clarity's Lucid adapted for PyTorch.</li> <li>lightly - Lightly is a computer vision framework for self-supervised learning.</li> <li>Learnergy - Energy-based machine learning models built upon PyTorch.</li> <li>OpenVisionAPI - Open source computer vision API based on open source models.</li> <li>IoT Owl - Light face detection and recognition system with huge possibilities, based on Microsoft Face API and TensorFlow made for small IoT devices like raspberry pi.</li> <li>Exadel CompreFace - face recognition system that can be easily integrated into any system without prior machine learning skills. CompreFace provides REST API for face recognition, face verification, face detection, face mask detection, landmark detection, age, and gender recognition and is easily deployed with docker.</li> <li>computer-vision-in-action - as known as <code>L0CV</code>, is a new generation of computer vision open source online learning media, a cross-platform interactive learning framework integrating graphics, source code and HTML. the L0CV ecosystem \u2014 Notebook, Datasets, Source Code, and from Diving-in to Advanced \u2014 as well as the L0CV Hub.</li> <li>timm - PyTorch image models, scripts, pretrained weights -- ResNet, ResNeXT, EfficientNet, EfficientNetV2, NFNet, Vision Transformer, MixNet, MobileNet-V3/V2, RegNet, DPN, CSPNet, and more.</li> <li>segmentation_models.pytorch - A PyTorch-based toolkit that offers pre-trained segmentation models for computer vision tasks. It simplifies the development of image segmentation applications by providing a collection of popular architecture implementations, such as UNet and PSPNet, along with pre-trained weights, making it easier for researchers and developers to achieve high-quality pixel-level object segmentation in images.</li> <li>segmentation_models - A TensorFlow Keras-based toolkit that offers pre-trained segmentation models for computer vision tasks. It simplifies the development of image segmentation applications by providing a collection of popular architecture implementations, such as UNet and PSPNet, along with pre-trained weights, making it easier for researchers and developers to achieve high-quality pixel-level object segmentation in images.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_10","title":"Natural Language Processing","text":"<ul> <li>pkuseg-python - A better version of Jieba, developed by Peking University.</li> <li>NLTK - A leading platform for building Python programs to work with human language data.</li> <li>Pattern - A web mining module for the Python programming language. It has tools for natural language processing, machine learning, among others.</li> <li>Quepy - A python framework to transform natural language questions to queries in a database query language.</li> <li>TextBlob - Providing a consistent API for diving into common natural language processing (NLP) tasks. Stands on the giant shoulders of NLTK and Pattern, and plays nicely with both.</li> <li>YAlign - A sentence aligner, a friendly tool for extracting parallel sentences from comparable corpora. [Deprecated]</li> <li>jieba - Chinese Words Segmentation Utilities.</li> <li>SnowNLP - A library for processing Chinese text.</li> <li>spammy - A library for email Spam filtering built on top of NLTK</li> <li>loso - Another Chinese segmentation library. [Deprecated]</li> <li>genius - A Chinese segment based on Conditional Random Field.</li> <li>KoNLPy - A Python package for Korean natural language processing.</li> <li>nut - Natural language Understanding Toolkit. [Deprecated]</li> <li>Rosetta - Text processing tools and wrappers (e.g. Vowpal Wabbit)</li> <li>BLLIP Parser - Python bindings for the BLLIP Natural Language Parser (also known as the Charniak-Johnson parser). [Deprecated]</li> <li>PyNLPl - Python Natural Language Processing Library. General purpose NLP library for Python. Also contains some specific modules for parsing common NLP formats, most notably for FoLiA, but also ARPA language models, Moses phrasetables, GIZA++ alignments.</li> <li>PySS3 - Python package that implements a novel white-box machine learning model for text classification, called SS3. Since SS3 has the ability to visually explain its rationale, this package also comes with easy-to-use interactive visualizations tools (online demos).</li> <li>python-ucto - Python binding to ucto (a unicode-aware rule-based tokenizer for various languages).</li> <li>python-frog - Python binding to Frog, an NLP suite for Dutch. (pos tagging, lemmatisation, dependency parsing, NER)</li> <li>python-zpar - Python bindings for ZPar, a statistical part-of-speech-tagger, constituency parser, and dependency parser for English.</li> <li>colibri-core - Python binding to C++ library for extracting and working with basic linguistic constructions such as n-grams and skipgrams in a quick and memory-efficient way.</li> <li>spaCy - Industrial strength NLP with Python and Cython.</li> <li>PyStanfordDependencies - Python interface for converting Penn Treebank trees to Stanford Dependencies.</li> <li>Distance - Levenshtein and Hamming distance computation. [Deprecated]</li> <li>Fuzzy Wuzzy - Fuzzy String Matching in Python.</li> <li>Neofuzz - Blazing fast, lightweight and customizable fuzzy and semantic text search in Python with fuzzywuzzy/thefuzz compatible API.</li> <li>jellyfish - a python library for doing approximate and phonetic matching of strings.</li> <li>editdistance - fast implementation of edit distance.</li> <li>textacy - higher-level NLP built on Spacy.</li> <li>stanford-corenlp-python - Python wrapper for Stanford CoreNLP [Deprecated]</li> <li>CLTK - The Classical Language Toolkit.</li> <li>Rasa - A \"machine learning framework to automate text-and voice-based conversations.\"</li> <li>yase - Transcode sentence (or other sequence) to list of word vector .</li> <li>Polyglot - Multilingual text (NLP) processing toolkit.</li> <li>DrQA - Reading Wikipedia to answer open-domain questions.</li> <li>Dedupe - A python library for accurate and scalable fuzzy matching, record deduplication and entity-resolution.</li> <li>Snips NLU - Natural Language Understanding library for intent classification and entity extraction</li> <li>NeuroNER - Named-entity recognition using neural networks providing state-of-the-art-results</li> <li>DeepPavlov - conversational AI library with many pre-trained Russian NLP models.</li> <li>BigARTM - topic modelling platform.</li> <li>NALP - A Natural Adversarial Language Processing framework built over Tensorflow.</li> <li>DL Translate - A deep learning-based translation library between 50 languages, built with <code>transformers</code>.</li> <li>Haystack - A framework for building industrial-strength applications with Transformer models and LLMs.</li> <li>CometLLM - Track, log, visualize and evaluate your LLM prompts and prompt chains.</li> <li>Transformers - A deep learning library containing thousands of pre-trained models on different tasks. The goto place for anything related to Large Language Models.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_22","title":"General-Purpose Machine Learning","text":"<ul> <li>Aim -&gt; An easy-to-use &amp; supercharged open-source AI metadata tracker.</li> <li>RexMex -&gt; A general purpose recommender metrics library for fair evaluation.</li> <li>ChemicalX -&gt; A PyTorch based deep learning library for drug pair scoring</li> <li>Microsoft ML for Apache Spark -&gt; A distributed machine learning framework Apache Spark</li> <li>Shapley -&gt; A data-driven framework to quantify the value of classifiers in a machine learning ensemble.</li> <li>igel -&gt; A delightful machine learning tool that allows you to train/fit, test and use models without writing code</li> <li>ML Model building -&gt; A Repository Containing Classification, Clustering, Regression, Recommender Notebooks with illustration to make them.</li> <li>ML/DL project template</li> <li>PyTorch Geometric Temporal -&gt; A temporal extension of PyTorch Geometric for dynamic graph representation learning.</li> <li>Little Ball of Fur -&gt; A graph sampling extension library for NetworkX with a Scikit-Learn like API.</li> <li>Karate Club -&gt; An unsupervised machine learning extension library for NetworkX with a Scikit-Learn like API.</li> <li>Auto_ViML -&gt; Automatically Build Variant Interpretable ML models fast! Auto_ViML is pronounced \"auto vimal\", is a comprehensive and scalable Python AutoML toolkit with imbalanced handling, ensembling, stacking and built-in feature selection. Featured in Medium article.</li> <li>PyOD -&gt; Python Outlier Detection, comprehensive and scalable Python toolkit for detecting outlying objects in multivariate data. Featured for Advanced models, including Neural Networks/Deep Learning and Outlier Ensembles.</li> <li>steppy -&gt; Lightweight, Python library for fast and reproducible machine learning experimentation. Introduces a very simple interface that enables clean machine learning pipeline design.</li> <li>steppy-toolkit -&gt; Curated collection of the neural networks, transformers and models that make your machine learning work faster and more effective.</li> <li>CNTK - Microsoft Cognitive Toolkit (CNTK), an open source deep-learning toolkit. Documentation can be found here.</li> <li>Couler - Unified interface for constructing and managing machine learning workflows on different workflow engines, such as Argo Workflows, Tekton Pipelines, and Apache Airflow.</li> <li>auto_ml - Automated machine learning for production and analytics. Lets you focus on the fun parts of ML, while outputting production-ready code, and detailed analytics of your dataset and results. Includes support for NLP, XGBoost, CatBoost, LightGBM, and soon, deep learning.</li> <li>dtaidistance - High performance library for time series distances (DTW) and time series clustering.</li> <li>einops - Deep learning operations reinvented (for pytorch, tensorflow, jax and others).</li> <li>machine learning - automated build consisting of a web-interface, and set of programmatic-interface API, for support vector machines. Corresponding dataset(s) are stored into a SQL database, then generated model(s) used for prediction(s), are stored into a NoSQL datastore.</li> <li>XGBoost - Python bindings for eXtreme Gradient Boosting (Tree) Library.</li> <li>ChefBoost - a lightweight decision tree framework for Python with categorical feature support covering regular decision tree algorithms such as ID3, C4.5, CART, CHAID and regression tree; also some advanved bagging and boosting techniques such as gradient boosting, random forest and adaboost.</li> <li>Apache SINGA - An Apache Incubating project for developing an open source machine learning library.</li> <li>Bayesian Methods for Hackers - Book/iPython notebooks on Probabilistic Programming in Python.</li> <li>Featureforge A set of tools for creating and testing machine learning features, with a scikit-learn compatible API.</li> <li>MLlib in Apache Spark - Distributed machine learning library in Spark</li> <li>Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services.</li> <li>Towhee - A Python module that encode unstructured data into embeddings.</li> <li>scikit-learn - A Python module for machine learning built on top of SciPy.</li> <li>metric-learn - A Python module for metric learning.</li> <li>OpenMetricLearning - A PyTorch-based framework to train and validate the models producing high-quality embeddings.</li> <li>Intel(R) Extension for Scikit-learn - A seamless way to speed up your Scikit-learn applications with no accuracy loss and code changes.</li> <li>SimpleAI Python implementation of many of the artificial intelligence algorithms described in the book \"Artificial Intelligence, a Modern Approach\". It focuses on providing an easy to use, well documented and tested library.</li> <li>astroML - Machine Learning and Data Mining for Astronomy.</li> <li>graphlab-create - A library with various machine learning models (regression, clustering, recommender systems, graph analytics, etc.) implemented on top of a disk-backed DataFrame.</li> <li>BigML - A library that contacts external servers.</li> <li>pattern - Web mining module for Python.</li> <li>NuPIC - Numenta Platform for Intelligent Computing.</li> <li>Pylearn2 - A Machine Learning library based on Theano. [Deprecated]</li> <li>keras - High-level neural networks frontend for TensorFlow, CNTK and Theano.</li> <li>Lasagne - Lightweight library to build and train neural networks in Theano.</li> <li>hebel - GPU-Accelerated Deep Learning Library in Python. [Deprecated]</li> <li>Chainer - Flexible neural network framework.</li> <li>prophet - Fast and automated time series forecasting framework by Facebook.</li> <li>gensim - Topic Modelling for Humans.</li> <li>tweetopic - Blazing fast short-text-topic-modelling for Python.</li> <li>topicwizard - Interactive topic model visualization/interpretation framework.</li> <li>topik - Topic modelling toolkit. [Deprecated]</li> <li>PyBrain - Another Python Machine Learning Library.</li> <li>Brainstorm - Fast, flexible and fun neural networks. This is the successor of PyBrain.</li> <li>Surprise - A scikit for building and analyzing recommender systems.</li> <li>implicit - Fast Python Collaborative Filtering for Implicit Datasets.</li> <li>LightFM -  A Python implementation of a number of popular recommendation algorithms for both implicit and explicit feedback.</li> <li>Crab - A flexible, fast recommender engine. [Deprecated]</li> <li>python-recsys - A Python library for implementing a Recommender System.</li> <li>thinking bayes - Book on Bayesian Analysis.</li> <li>Image-to-Image Translation with Conditional Adversarial Networks - Implementation of image to image (pix2pix) translation from the paper by isola et al.[DEEP LEARNING]</li> <li>Restricted Boltzmann Machines -Restricted Boltzmann Machines in Python. [DEEP LEARNING]</li> <li>Bolt - Bolt Online Learning Toolbox. [Deprecated]</li> <li>CoverTree - Python implementation of cover trees, near-drop-in replacement for scipy.spatial.kdtree [Deprecated]</li> <li>nilearn - Machine learning for NeuroImaging in Python.</li> <li>neuropredict - Aimed at novice machine learners and non-expert programmers, this package offers easy (no coding needed) and comprehensive machine learning (evaluation and full report of predictive performance WITHOUT requiring you to code) in Python for NeuroImaging and any other type of features. This is aimed at absorbing much of the ML workflow, unlike other packages like nilearn and pymvpa, which require you to learn their API and code to produce anything useful.</li> <li>imbalanced-learn - Python module to perform under sampling and oversampling with various techniques.</li> <li>imbalanced-ensemble - Python toolbox for quick implementation, modification, evaluation, and visualization of ensemble learning algorithms for class-imbalanced data. Supports out-of-the-box multi-class imbalanced (long-tailed) classification.</li> <li>Shogun - The Shogun Machine Learning Toolbox.</li> <li>Pyevolve - Genetic algorithm framework. [Deprecated]</li> <li>Caffe - A deep learning framework developed with cleanliness, readability, and speed in mind.</li> <li>breze - Theano based library for deep and recurrent neural networks.</li> <li>Cortex - Open source platform for deploying machine learning models in production.</li> <li>pyhsmm - library for approximate unsupervised inference in Bayesian Hidden Markov Models (HMMs) and explicit-duration Hidden semi-Markov Models (HSMMs), focusing on the Bayesian Nonparametric extensions, the HDP-HMM and HDP-HSMM, mostly with weak-limit approximations.</li> <li>SKLL - A wrapper around scikit-learn that makes it simpler to conduct experiments.</li> <li>neurolab</li> <li>Spearmint - Spearmint is a package to perform Bayesian optimization according to the algorithms outlined in the paper: Practical Bayesian Optimization of Machine Learning Algorithms. Jasper Snoek, Hugo Larochelle and Ryan P. Adams. Advances in Neural Information Processing Systems, 2012. [Deprecated]</li> <li>Pebl - Python Environment for Bayesian Learning. [Deprecated]</li> <li>Theano - Optimizing GPU-meta-programming code generating array oriented optimizing math compiler in Python.</li> <li>TensorFlow - Open source software library for numerical computation using data flow graphs.</li> <li>pomegranate - Hidden Markov Models for Python, implemented in Cython for speed and efficiency.</li> <li>python-timbl - A Python extension module wrapping the full TiMBL C++ programming interface. Timbl is an elaborate k-Nearest Neighbours machine learning toolkit.</li> <li>deap - Evolutionary algorithm framework.</li> <li>pydeep - Deep Learning In Python. [Deprecated]</li> <li>mlxtend - A library consisting of useful tools for data science and machine learning tasks.</li> <li>neon - Nervana's high-performance Python-based Deep Learning framework [DEEP LEARNING]. [Deprecated]</li> <li>Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search.</li> <li>Neural Networks and Deep Learning - Code samples for my book \"Neural Networks and Deep Learning\" [DEEP LEARNING].</li> <li>Annoy - Approximate nearest neighbours implementation.</li> <li>TPOT - Tool that automatically creates and optimizes machine learning pipelines using genetic programming. Consider it your personal data science assistant, automating a tedious part of machine learning.</li> <li>pgmpy A python library for working with Probabilistic Graphical Models.</li> <li>DIGITS - The Deep Learning GPU Training System (DIGITS) is a web application for training deep learning models.</li> <li>Orange - Open source data visualization and data analysis for novices and experts.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>milk - Machine learning toolkit focused on supervised classification. [Deprecated]</li> <li>TFLearn - Deep learning library featuring a higher-level API for TensorFlow.</li> <li>REP - an IPython-based environment for conducting data-driven research in a consistent and reproducible way. REP is not trying to substitute scikit-learn, but extends it and provides better user experience. [Deprecated]</li> <li>rgf_python - Python bindings for Regularized Greedy Forest (Tree) Library.</li> <li>skbayes - Python package for Bayesian Machine Learning with scikit-learn API.</li> <li>fuku-ml - Simple machine learning library, including Perceptron, Regression, Support Vector Machine, Decision Tree and more, it's easy to use and easy to learn for beginners.</li> <li>Xcessiv - A web-based application for quick, scalable, and automated hyperparameter tuning and stacked ensembling.</li> <li>PyTorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration</li> <li>PyTorch Lightning - The lightweight PyTorch wrapper for high-performance AI research.</li> <li>PyTorch Lightning Bolts - Toolbox of models, callbacks, and datasets for AI/ML researchers.</li> <li>skorch - A scikit-learn compatible neural network library that wraps PyTorch.</li> <li>ML-From-Scratch - Implementations of Machine Learning models from scratch in Python with a focus on transparency. Aims to showcase the nuts and bolts of ML in an accessible way.</li> <li>Edward - A library for probabilistic modelling, inference, and criticism. Built on top of TensorFlow.</li> <li>xRBM - A library for Restricted Boltzmann Machine (RBM) and its conditional variants in Tensorflow.</li> <li>CatBoost - General purpose gradient boosting on decision trees library with categorical features support out of the box. It is easy to install, well documented and supports CPU and GPU (even multi-GPU) computation.</li> <li>stacked_generalization - Implementation of machine learning stacking technique as a handy library in Python.</li> <li>modAL - A modular active learning framework for Python, built on top of scikit-learn.</li> <li>Cogitare: A Modern, Fast, and Modular Deep Learning and Machine Learning framework for Python.</li> <li>Parris - Parris, the automated infrastructure setup tool for machine learning algorithms.</li> <li>neonrvm - neonrvm is an open source machine learning library based on RVM technique. It's written in C programming language and comes with Python programming language bindings.</li> <li>Turi Create - Machine learning from Apple. Turi Create simplifies the development of custom machine learning models. You don't have to be a machine learning expert to add recommendations, object detection, image classification, image similarity or activity classification to your app.</li> <li>xLearn - A high performance, easy-to-use, and scalable machine learning package, which can be used to solve large-scale machine learning problems. xLearn is especially useful for solving machine learning problems on large-scale sparse data, which is very common in Internet services such as online advertisement and recommender systems.</li> <li>mlens - A high performance, memory efficient, maximally parallelized ensemble learning, integrated with scikit-learn.</li> <li>Thampi - Machine Learning Prediction System on AWS Lambda</li> <li>MindsDB - Open Source framework to streamline use of neural networks.</li> <li>Microsoft Recommenders: Examples and best practices for building recommendation systems, provided as Jupyter notebooks. The repo contains some of the latest state of the art algorithms from Microsoft Research as well as from other companies and institutions.</li> <li>StellarGraph: Machine Learning on Graphs, a Python library for machine learning on graph-structured (network-structured) data.</li> <li>BentoML: Toolkit for package and deploy machine learning models for serving in production</li> <li>MiraiML: An asynchronous engine for continuous &amp; autonomous machine learning, built for real-time usage.</li> <li>numpy-ML: Reference implementations of ML models written in numpy</li> <li>Neuraxle: A framework providing the right abstractions to ease research, development, and deployment of your ML pipelines.</li> <li>Cornac - A comparative framework for multimodal recommender systems with a focus on models leveraging auxiliary data.</li> <li>JAX - JAX is Autograd and XLA, brought together for high-performance machine learning research.</li> <li>Catalyst - High-level utils for PyTorch DL &amp; RL research. It was developed with a focus on reproducibility, fast experimentation and code/ideas reusing. Being able to research/develop something new, rather than write another regular train loop.</li> <li>Fastai - High-level wrapper built on the top of Pytorch which supports vision, text, tabular data and collaborative filtering.</li> <li>scikit-multiflow - A machine learning framework for multi-output/multi-label and stream data.</li> <li>Lightwood - A Pytorch based framework that breaks down machine learning problems into smaller blocks that can be glued together seamlessly with objective to build predictive models with one line of code.</li> <li>bayeso - A simple, but essential Bayesian optimization package, written in Python.</li> <li>mljar-supervised - An Automated Machine Learning (AutoML) python package for tabular data. It can handle: Binary Classification, MultiClass Classification and Regression. It provides explanations and markdown reports.</li> <li>evostra - A fast Evolution Strategy implementation in Python.</li> <li>Determined - Scalable deep learning training platform, including integrated support for distributed training, hyperparameter tuning, experiment tracking, and model management.</li> <li>PySyft - A Python library for secure and private Deep Learning built on PyTorch and TensorFlow.</li> <li>PyGrid - Peer-to-peer network of data owners and data scientists who can collectively train AI models using PySyft</li> <li>sktime - A unified framework for machine learning with time series</li> <li>OPFython - A Python-inspired implementation of the Optimum-Path Forest classifier.</li> <li>Opytimizer - Python-based meta-heuristic optimization techniques.</li> <li>Gradio - A Python library for quickly creating and sharing demos of models. Debug models interactively in your browser, get feedback from collaborators, and generate public links without deploying anything.</li> <li>Hub - Fastest unstructured dataset management for TensorFlow/PyTorch. Stream &amp; version-control data. Store even petabyte-scale data in a single numpy-like array on the cloud accessible on any machine. Visit activeloop.ai for more info.</li> <li>Synthia - Multidimensional synthetic data generation in Python.</li> <li>ByteHub - An easy-to-use, Python-based feature store. Optimized for time-series data.</li> <li>Backprop - Backprop makes it simple to use, finetune, and deploy state-of-the-art ML models.</li> <li>River: A framework for general purpose online machine learning.</li> <li>FEDOT: An AutoML framework for the automated design of composite modelling pipelines. It can handle classification, regression, and time series forecasting tasks on different types of data (including multi-modal datasets).</li> <li>Sklearn-genetic-opt: An AutoML package for hyperparameters tuning using evolutionary algorithms, with built-in callbacks, plotting, remote logging and more.</li> <li>Evidently: Interactive reports to analyze machine learning models during validation or production monitoring.</li> <li>Streamlit: Streamlit is an framework to create beautiful data apps in hours, not weeks.</li> <li>Optuna: Optuna is an automatic hyperparameter optimization software framework, particularly designed for machine learning.</li> <li>Deepchecks: Validation &amp; testing of machine learning models and data during model development, deployment, and production. This includes checks and suites related to various types of issues, such as model performance, data integrity, distribution mismatches, and more.</li> <li>Shapash : Shapash is a Python library that provides several types of visualization that display explicit labels that everyone can understand.</li> <li>Eurybia: Eurybia monitors data and model drift over time and securizes model deployment with data validation.</li> <li>Colossal-AI: An open-source deep learning system for large-scale model training and inference with high efficiency and low cost.</li> <li>dirty_cat - facilitates machine-learning on dirty, non-curated categories. It provides transformers and encoders robust to morphological variants, such as typos.</li> <li>Upgini: Free automated data &amp; feature enrichment library for machine learning - automatically searches through thousands of ready-to-use features from public and community shared data sources and enriches your training dataset with only the accuracy improving features.</li> <li>AutoML-Implementation-for-Static-and-Dynamic-Data-Analytics: A tutorial to help machine learning researchers to automatically obtain optimized machine learning models with the optimal learning performance on any specific task.</li> <li>SKBEL: A Python library for Bayesian Evidential Learning (BEL) in order to estimate the uncertainty of a prediction.</li> <li>NannyML: Python library capable of fully capturing the impact of data drift on performance. Allows estimation of post-deployment model performance without access to targets.</li> <li>cleanlab: The standard data-centric AI package for data quality and machine learning with messy, real-world data and labels.</li> <li>AutoGluon: AutoML for Image, Text, Tabular, Time-Series, and MultiModal Data.</li> <li>PyBroker - Algorithmic Trading with Machine Learning.</li> <li>Frouros: Frouros is an open source Python library for drift detection in machine learning systems.</li> <li>CometML: The best-in-class MLOps platform with experiment tracking, model production monitoring, a model registry, and data lineage from training straight through to production.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_9","title":"Data Analysis / Data Visualization","text":"<ul> <li>DataVisualization - A GitHub Repository Where you can Learn Datavisualizatoin Basics to Intermediate level.</li> <li>Cartopy - Cartopy is a Python package designed for geospatial data processing in order to produce maps and other geospatial data analyses.</li> <li>SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li> <li>NumPy - A fundamental package for scientific computing with Python.</li> <li>AutoViz AutoViz performs automatic visualization of any dataset with a single line of Python code. Give it any input file (CSV, txt or JSON) of any size and AutoViz will visualize it. See Medium article.</li> <li>Numba - Python JIT (just in time) compiler to LLVM aimed at scientific Python by the developers of Cython and NumPy.</li> <li>Mars - A tensor-based framework for large-scale data computation which is often regarded as a parallel and distributed version of NumPy.</li> <li>NetworkX - A high-productivity software for complex networks.</li> <li>igraph - binding to igraph library - General purpose graph library.</li> <li>Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools.</li> <li>ParaMonte - A general-purpose Python library for Bayesian data analysis and visualization via serial/parallel Monte Carlo and MCMC simulations. Documentation can be found here.</li> <li>Vaex - A high performance Python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. Documentation can be found here.</li> <li>Open Mining - Business Intelligence (BI) in Python (Pandas web interface) [Deprecated]</li> <li>PyMC - Markov Chain Monte Carlo sampling toolkit.</li> <li>zipline - A Pythonic algorithmic trading library.</li> <li>PyDy - Short for Python Dynamics, used to assist with workflow in the modelling of dynamic motion based around NumPy, SciPy, IPython, and matplotlib.</li> <li>SymPy - A Python library for symbolic mathematics.</li> <li>statsmodels - Statistical modelling and econometrics in Python.</li> <li>astropy - A community Python library for Astronomy.</li> <li>matplotlib - A Python 2D plotting library.</li> <li>bokeh - Interactive Web Plotting for Python.</li> <li>plotly - Collaborative web plotting for Python and matplotlib.</li> <li>altair - A Python to Vega translator.</li> <li>d3py - A plotting library for Python, based on D3.js.</li> <li>PyDexter - Simple plotting for Python. Wrapper for D3xterjs; easily render charts in-browser.</li> <li>ggplot - Same API as ggplot2 for R. [Deprecated]</li> <li>ggfortify - Unified interface to ggplot2 popular R packages.</li> <li>Kartograph.py - Rendering beautiful SVG maps in Python.</li> <li>pygal - A Python SVG Charts Creator.</li> <li>PyQtGraph - A pure-python graphics and GUI library built on PyQt4 / PySide and NumPy.</li> <li>pycascading [Deprecated]</li> <li>Petrel - Tools for writing, submitting, debugging, and monitoring Storm topologies in pure Python.</li> <li>Blaze - NumPy and Pandas interface to Big Data.</li> <li>emcee - The Python ensemble sampling toolkit for affine-invariant MCMC.</li> <li>windML - A Python Framework for Wind Energy Analysis and Prediction.</li> <li>vispy - GPU-based high-performance interactive OpenGL 2D/3D data visualization library.</li> <li>cerebro2 A web-based visualization and debugging platform for NuPIC. [Deprecated]</li> <li>NuPIC Studio An all-in-one NuPIC Hierarchical Temporal Memory visualization and debugging super-tool! [Deprecated]</li> <li>SparklingPandas Pandas on PySpark (POPS).</li> <li>Seaborn - A python visualization library based on matplotlib.</li> <li>ipychart - The power of Chart.js in Jupyter Notebook.</li> <li>bqplot - An API for plotting in Jupyter (IPython).</li> <li>pastalog - Simple, realtime visualization of neural network training performance.</li> <li>Superset - A data exploration platform designed to be visual, intuitive, and interactive.</li> <li>Dora - Tools for exploratory data analysis in Python.</li> <li>Ruffus - Computation Pipeline library for python.</li> <li>SOMPY - Self Organizing Map written in Python (Uses neural networks for data analysis).</li> <li>somoclu Massively parallel self-organizing maps: accelerate training on multicore CPUs, GPUs, and clusters, has python API.</li> <li>HDBScan - implementation of the hdbscan algorithm in Python - used for clustering</li> <li>visualize_ML - A python package for data exploration and data analysis. [Deprecated]</li> <li>scikit-plot - A visualization library for quick and easy generation of common plots in data analysis and machine learning.</li> <li>Bowtie - A dashboard library for interactive visualizations using flask socketio and react.</li> <li>lime - Lime is about explaining what machine learning classifiers (or models) are doing. It is able to explain any black box classifier, with two or more classes.</li> <li>PyCM - PyCM is a multi-class confusion matrix library written in Python that supports both input data vectors and direct matrix, and a proper tool for post-classification model evaluation that supports most classes and overall statistics parameters</li> <li>Dash - A framework for creating analytical web applications built on top of Plotly.js, React, and Flask</li> <li>Lambdo - A workflow engine for solving machine learning problems by combining in one analysis pipeline (i) feature engineering and machine learning (ii) model training and prediction (iii) table population and column evaluation via user-defined (Python) functions.</li> <li>TensorWatch - Debugging and visualization tool for machine learning and data science. It extensively leverages Jupyter Notebook to show real-time visualizations of data in running processes such as machine learning training.</li> <li>dowel - A little logger for machine learning research. Output any object to the terminal, CSV, TensorBoard, text logs on disk, and more with just one call to <code>logger.log()</code>.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc-scripts-ipython-notebooks-codebases","title":"Misc Scripts / iPython Notebooks / Codebases","text":"<ul> <li>MiniGrad \u2013 A minimal, educational, Pythonic implementation of autograd (~100 loc).</li> <li>Map/Reduce implementations of common ML algorithms: Jupyter notebooks that cover how to implement from scratch different ML algorithms (ordinary least squares, gradient descent, k-means, alternating least squares), using Python NumPy, and how to then make these implementations scalable using Map/Reduce and Spark.</li> <li>BioPy - Biologically-Inspired and Machine Learning Algorithms in Python. [Deprecated]</li> <li>CAEs for Data Assimilation - Convolutional autoencoders for 3D image/field compression applied to reduced order Data Assimilation.</li> <li>handsonml - Fundamentals of machine learning in python.</li> <li>SVM Explorer - Interactive SVM Explorer, using Dash and scikit-learn</li> <li>pattern_classification</li> <li>thinking stats 2</li> <li>hyperopt</li> <li>numpic</li> <li>2012-paper-diginorm</li> <li>A gallery of interesting IPython notebooks</li> <li>ipython-notebooks</li> <li>data-science-ipython-notebooks - Continually updated Data Science Python Notebooks: Spark, Hadoop MapReduce, HDFS, AWS, Kaggle, scikit-learn, matplotlib, pandas, NumPy, SciPy, and various command lines.</li> <li>decision-weights</li> <li>Sarah Palin LDA - Topic Modelling the Sarah Palin emails.</li> <li>Diffusion Segmentation - A collection of image segmentation algorithms based on diffusion methods.</li> <li>Scipy Tutorials - SciPy tutorials. This is outdated, check out scipy-lecture-notes.</li> <li>Crab - A recommendation engine library for Python.</li> <li>BayesPy - Bayesian Inference Tools in Python.</li> <li>scikit-learn tutorials - Series of notebooks for learning scikit-learn.</li> <li>sentiment-analyzer - Tweets Sentiment Analyzer</li> <li>sentiment_classifier - Sentiment classifier using word sense disambiguation.</li> <li>group-lasso - Some experiments with the coordinate descent algorithm used in the (Sparse) Group Lasso model.</li> <li>jProcessing - Kanji / Hiragana / Katakana to Romaji Converter. Edict Dictionary &amp; parallel sentences Search. Sentence Similarity between two JP Sentences. Sentiment Analysis of Japanese Text. Run Cabocha(ISO--8859-1 configured) in Python.</li> <li>mne-python-notebooks - IPython notebooks for EEG/MEG data processing using mne-python.</li> <li>Neon Course - IPython notebooks for a complete course around understanding Nervana's Neon.</li> <li>pandas cookbook - Recipes for using Python's pandas library.</li> <li>climin - Optimization library focused on machine learning, pythonic implementations of gradient descent, LBFGS, rmsprop, adadelta and others.</li> <li>Allen Downey\u2019s Data Science Course - Code for Data Science at Olin College, Spring 2014.</li> <li>Allen Downey\u2019s Think Bayes Code - Code repository for Think Bayes.</li> <li>Allen Downey\u2019s Think Complexity Code - Code for Allen Downey's book Think Complexity.</li> <li>Allen Downey\u2019s Think OS Code - Text and supporting code for Think OS: A Brief Introduction to Operating Systems.</li> <li>Python Programming for the Humanities - Course for Python programming for the Humanities, assuming no prior knowledge. Heavy focus on text processing / NLP.</li> <li>GreatCircle - Library for calculating great circle distance.</li> <li>Optunity examples - Examples demonstrating how to use Optunity in synergy with machine learning libraries.</li> <li>Dive into Machine Learning  with Python Jupyter notebook and scikit-learn - \"I learned Python by hacking first, and getting serious later. I wanted to do this with Machine Learning. If this is your style, join me in getting a bit ahead of yourself.\"</li> <li>TDB - TensorDebugger (TDB) is a visual debugger for deep learning. It features interactive, node-by-node debugging and visualization for TensorFlow.</li> <li>Suiron - Machine Learning for RC Cars.</li> <li>Introduction to machine learning with scikit-learn - IPython notebooks from Data School's video tutorials on scikit-learn.</li> <li>Practical XGBoost in Python - comprehensive online course about using XGBoost in Python.</li> <li>Introduction to Machine Learning with Python - Notebooks and code for the book \"Introduction to Machine Learning with Python\"</li> <li>Pydata book - Materials and IPython notebooks for \"Python for Data Analysis\" by Wes McKinney, published by O'Reilly Media</li> <li>Homemade Machine Learning - Python examples of popular machine learning algorithms with interactive Jupyter demos and math being explained</li> <li>Prodmodel - Build tool for data science pipelines.</li> <li>the-elements-of-statistical-learning - This repository contains Jupyter notebooks implementing the algorithms found in the book and summary of the textbook.</li> <li>Hyperparameter-Optimization-of-Machine-Learning-Algorithms - Code for hyperparameter tuning/optimization of machine learning and deep learning algorithms.</li> <li>Heart_Disease-Prediction - Given clinical parameters about a patient, can we predict whether or not they have heart disease?</li> <li>Flight Fare Prediction - This basically to gauge the understanding of Machine Learning Workflow and Regression technique in specific.</li> <li>Keras Tuner - An easy-to-use, scalable hyperparameter optimization framework that solves the pain points of hyperparameter search.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#neural-networks","title":"Neural Networks","text":"<ul> <li>nn_builder - nn_builder is a python package that lets you build neural networks in 1 line</li> <li>NeuralTalk - NeuralTalk is a Python+numpy project for learning Multimodal Recurrent Neural Networks that describe images with sentences.</li> <li> <p>Neuron - Neuron is simple class for time series predictions. It's utilize LNU (Linear Neural Unit), QNU (Quadratic Neural Unit), RBF (Radial Basis Function), MLP (Multi Layer Perceptron), MLP-ELM (Multi Layer Perceptron - Extreme Learning Machine) neural networks learned with Gradient descent or LeLevenberg\u2013Marquardt algorithm.</p> </li> <li> <p>NeuralTalk - NeuralTalk is a Python+numpy project for learning Multimodal Recurrent Neural Networks that describe images with sentences. [Deprecated]</p> </li> <li>Neuron - Neuron is simple class for time series predictions. It's utilize LNU (Linear Neural Unit), QNU (Quadratic Neural Unit), RBF (Radial Basis Function), MLP (Multi Layer Perceptron), MLP-ELM (Multi Layer Perceptron - Extreme Learning Machine) neural networks learned with Gradient descent or LeLevenberg\u2013Marquardt algorithm. [Deprecated]</li> <li>Data Driven Code - Very simple implementation of neural networks for dummies in python without using any libraries, with detailed comments.</li> <li>Machine Learning, Data Science and Deep Learning with Python - LiveVideo course that covers machine learning, Tensorflow, artificial intelligence, and neural networks.</li> <li>TResNet: High Performance GPU-Dedicated Architecture - TResNet models were designed and optimized to give the best speed-accuracy tradeoff out there on GPUs.</li> <li>TResNet: Simple and powerful neural network library for python - Variety of supported types of Artificial Neural Network and learning algorithms.</li> <li>Jina AI An easier way to build neural search in the cloud. Compatible with Jupyter Notebooks.</li> <li>sequitur PyTorch library for creating and training sequence autoencoders in just two lines of code</li> </ul> <p></p>"},{"location":"ai_ml/machine_learning/framework/#spiking-neural-networks","title":"Spiking Neural Networks","text":"<ul> <li>Rockpool - A machine learning library for spiking neural networks. Supports training with both torch and jax pipelines, and deployment to neuromorphic hardware.</li> <li>Sinabs - A deep learning library for spiking neural networks which is based on PyTorch, focuses on fast training and supports inference on neuromorphic hardware.</li> <li>Tonic - A library that makes downloading publicly available neuromorphic datasets a breeze and provides event-based data transformation/augmentation pipelines.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#python-survival-analysis","title":"Python Survival Analysis","text":"<ul> <li>lifelines - lifelines is a complete survival analysis library, written in pure Python</li> <li>Scikit-Survival - scikit-survival is a Python module for survival analysis built on top of scikit-learn. It allows doing survival analysis while utilizing the power of scikit-learn, e.g., for pre-processing or doing cross-validation.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#federated-learning","title":"Federated Learning","text":"<ul> <li>Flower - A unified approach to federated learning, analytics, and evaluation. Federate any workload, any ML framework, and any programming language.</li> <li>PySyft - A Python library for secure and private Deep Learning.</li> <li>Tensorflow-Federated A federated learning framework for machine learning and other computations on decentralized data.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#kaggle-competition-source-code","title":"Kaggle Competition Source Code","text":"<ul> <li>open-solution-home-credit -&gt; source code and experiments results for Home Credit Default Risk.</li> <li>open-solution-googleai-object-detection -&gt; source code and experiments results for Google AI Open Images - Object Detection Track.</li> <li>open-solution-salt-identification -&gt; source code and experiments results for TGS Salt Identification Challenge.</li> <li>open-solution-ship-detection -&gt; source code and experiments results for Airbus Ship Detection Challenge.</li> <li>open-solution-data-science-bowl-2018 -&gt; source code and experiments results for 2018 Data Science Bowl.</li> <li>open-solution-value-prediction -&gt; source code and experiments results for Santander Value Prediction Challenge.</li> <li>open-solution-toxic-comments -&gt; source code for Toxic Comment Classification Challenge.</li> <li>wiki challenge - An implementation of Dell Zhang's solution to Wikipedia's Participation Challenge on Kaggle.</li> <li>kaggle insults - Kaggle Submission for \"Detecting Insults in Social Commentary\".</li> <li>kaggle_acquire-valued-shoppers-challenge - Code for the Kaggle acquire valued shoppers challenge.</li> <li>kaggle-cifar - Code for the CIFAR-10 competition at Kaggle, uses cuda-convnet.</li> <li>kaggle-blackbox - Deep learning made easy.</li> <li>kaggle-accelerometer - Code for Accelerometer Biometric Competition at Kaggle.</li> <li>kaggle-advertised-salaries - Predicting job salaries from ads - a Kaggle competition.</li> <li>kaggle amazon - Amazon access control challenge.</li> <li>kaggle-bestbuy_big - Code for the Best Buy competition at Kaggle.</li> <li>kaggle-bestbuy_small</li> <li>Kaggle Dogs vs. Cats - Code for Kaggle Dogs vs. Cats competition.</li> <li>Kaggle Galaxy Challenge - Winning solution for the Galaxy Challenge on Kaggle.</li> <li>Kaggle Gender - A Kaggle competition: discriminate gender based on handwriting.</li> <li>Kaggle Merck - Merck challenge at Kaggle.</li> <li>Kaggle Stackoverflow - Predicting closed questions on Stack Overflow.</li> <li>kaggle_acquire-valued-shoppers-challenge - Code for the Kaggle acquire valued shoppers challenge.</li> <li>wine-quality - Predicting wine quality.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#reinforcement-learning_1","title":"Reinforcement Learning","text":"<ul> <li>DeepMind Lab - DeepMind Lab is a 3D learning environment based on id Software's Quake III Arena via ioquake3 and other open source software. Its primary purpose is to act as a testbed for research in artificial intelligence, especially deep reinforcement learning.</li> <li>Gymnasium - A library for developing and comparing reinforcement learning algorithms (successor of gym.</li> <li>Serpent.AI - Serpent.AI is a game agent framework that allows you to turn any video game you own into a sandbox to develop AI and machine learning experiments. For both researchers and hobbyists.</li> <li>ViZDoom - ViZDoom allows developing AI bots that play Doom using only the visual information (the screen buffer). It is primarily intended for research in machine visual learning, and deep reinforcement learning, in particular.</li> <li>Roboschool - Open-source software for robot simulation, integrated with OpenAI Gym.</li> <li>Retro - Retro Games in Gym</li> <li>SLM Lab - Modular Deep Reinforcement Learning framework in PyTorch.</li> <li>Coach - Reinforcement Learning Coach by Intel\u00ae AI Lab enables easy experimentation with state of the art Reinforcement Learning algorithms</li> <li>garage - A toolkit for reproducible reinforcement learning research</li> <li>metaworld - An open source robotics benchmark for meta- and multi-task reinforcement learning</li> <li>acme - An Open Source Distributed Framework for Reinforcement Learning that makes build and train your agents easily.</li> <li>Spinning Up - An educational resource designed to let anyone learn to become a skilled practitioner in deep reinforcement learning</li> <li>Maze - Application-oriented deep reinforcement learning framework addressing real-world decision problems.</li> <li>RLlib - RLlib is an industry level, highly scalable RL library for tf and torch, based on Ray. It's used by companies like Amazon and Microsoft to solve real-world decision making problems at scale.</li> <li>DI-engine - DI-engine is a generalized Decision Intelligence engine. It supports most basic deep reinforcement learning (DRL) algorithms, such as DQN, PPO, SAC, and domain-specific algorithms like QMIX in multi-agent RL, GAIL in inverse RL, and RND in exploration problems.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#ruby","title":"Ruby","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_11","title":"Natural Language Processing","text":"<ul> <li>Awesome NLP with Ruby - Curated link list for practical natural language processing in Ruby.</li> <li>Treat - Text Retrieval and Annotation Toolkit, definitely the most comprehensive toolkit I\u2019ve encountered so far for Ruby.</li> <li>Stemmer - Expose libstemmer_c to Ruby. [Deprecated]</li> <li>Raspell - raspell is an interface binding for ruby. [Deprecated]</li> <li>UEA Stemmer - Ruby port of UEALite Stemmer - a conservative stemmer for search and indexing.</li> <li>Twitter-text-rb - A library that does auto linking and extraction of usernames, lists and hashtags in tweets.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_23","title":"General-Purpose Machine Learning","text":"<ul> <li>Awesome Machine Learning with Ruby - Curated list of ML related resources for Ruby.</li> <li>Ruby Machine Learning - Some Machine Learning algorithms, implemented in Ruby. [Deprecated]</li> <li>Machine Learning Ruby [Deprecated]</li> <li>jRuby Mahout - JRuby Mahout is a gem that unleashes the power of Apache Mahout in the world of JRuby. [Deprecated]</li> <li>CardMagic-Classifier - A general classifier module to allow Bayesian and other types of classifications.</li> <li>rb-libsvm - Ruby language bindings for LIBSVM which is a Library for Support Vector Machines.</li> <li>Scoruby - Creates Random Forest classifiers from PMML files.</li> <li>rumale - Rumale is a machine learning library in Ruby</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_10","title":"Data Analysis / Data Visualization","text":"<ul> <li>rsruby - Ruby - R bridge.</li> <li>data-visualization-ruby - Source code and supporting content for my Ruby Manor presentation on Data Visualisation with Ruby. [Deprecated]</li> <li>ruby-plot - gnuplot wrapper for Ruby, especially for plotting ROC curves into SVG files. [Deprecated]</li> <li>plot-rb - A plotting library in Ruby built on top of Vega and D3. [Deprecated]</li> <li>scruffy - A beautiful graphing toolkit for Ruby.</li> <li>SciRuby</li> <li>Glean - A data management tool for humans. [Deprecated]</li> <li>Bioruby</li> <li>Arel [Deprecated]</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc_2","title":"Misc","text":"<ul> <li>Big Data For Chimps</li> <li>Listof - Community based data collection, packed in gem. Get list of pretty much anything (stop words, countries, non words) in txt, JSON or hash. Demo/Search for a list</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#rust","title":"Rust","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_24","title":"General-Purpose Machine Learning","text":"<ul> <li>smartcore - \"The Most Advanced Machine Learning Library In Rust.\"</li> <li>linfa - a comprehensive toolkit to build Machine Learning applications with Rust</li> <li>deeplearn-rs - deeplearn-rs provides simple networks that use matrix multiplication, addition, and ReLU under the MIT license.</li> <li>rustlearn - a machine learning framework featuring logistic regression, support vector machines, decision trees and random forests.</li> <li>rusty-machine - a pure-rust machine learning library.</li> <li>leaf - open source framework for machine intelligence, sharing concepts from TensorFlow and Caffe. Available under the MIT license. [Deprecated]</li> <li>RustNN - RustNN is a feedforward neural network library. [Deprecated]</li> <li>RusticSOM - A Rust library for Self Organising Maps (SOM).</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#r","title":"R","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_25","title":"General-Purpose Machine Learning","text":"<ul> <li>ahaz - ahaz: Regularization for semiparametric additive hazards regression. [Deprecated]</li> <li>arules - arules: Mining Association Rules and Frequent Itemsets</li> <li>biglasso - biglasso: Extending Lasso Model Fitting to Big Data in R.</li> <li>bmrm - bmrm: Bundle Methods for Regularized Risk Minimization Package.</li> <li>Boruta - Boruta: A wrapper algorithm for all-relevant feature selection.</li> <li>bst - bst: Gradient Boosting.</li> <li>C50 - C50: C5.0 Decision Trees and Rule-Based Models.</li> <li>caret - Classification and Regression Training: Unified interface to ~150 ML algorithms in R.</li> <li>caretEnsemble - caretEnsemble: Framework for fitting multiple caret models as well as creating ensembles of such models. [Deprecated]</li> <li>CatBoost - General purpose gradient boosting on decision trees library with categorical features support out of the box for R.</li> <li>Clever Algorithms For Machine Learning</li> <li>CORElearn - CORElearn: Classification, regression, feature evaluation and ordinal evaluation. - CoxBoost - CoxBoost: Cox models by likelihood based boosting for a single survival endpoint or competing risks [Deprecated]*</li> <li>Cubist - Cubist: Rule- and Instance-Based Regression Modelling.</li> <li>e1071 - e1071: Misc Functions of the Department of Statistics (e1071), TU Wien</li> <li>earth - earth: Multivariate Adaptive Regression Spline Models</li> <li>elasticnet - elasticnet: Elastic-Net for Sparse Estimation and Sparse PCA.</li> <li>ElemStatLearn - ElemStatLearn: Data sets, functions and examples from the book: \"The Elements of Statistical Learning, Data Mining, Inference, and Prediction\" by Trevor Hastie, Robert Tibshirani and Jerome Friedman Prediction\" by Trevor Hastie, Robert Tibshirani and Jerome Friedman.</li> <li>evtree - evtree: Evolutionary Learning of Globally Optimal Trees.</li> <li>forecast - forecast: Timeseries forecasting using ARIMA, ETS, STLM, TBATS, and neural network models.</li> <li>forecastHybrid - forecastHybrid: Automatic ensemble and cross validation of ARIMA, ETS, STLM, TBATS, and neural network models from the \"forecast\" package.</li> <li>fpc - fpc: Flexible procedures for clustering.</li> <li>frbs - frbs: Fuzzy Rule-based Systems for Classification and Regression Tasks. [Deprecated]</li> <li>GAMBoost - GAMBoost: Generalized linear and additive models by likelihood based boosting. [Deprecated]</li> <li>gamboostLSS - gamboostLSS: Boosting Methods for GAMLSS.</li> <li>gbm - gbm: Generalized Boosted Regression Models.</li> <li>glmnet - glmnet: Lasso and elastic-net regularized generalized linear models.</li> <li>glmpath - glmpath: L1 Regularization Path for Generalized Linear Models and Cox Proportional Hazards Model.</li> <li>GMMBoost - GMMBoost: Likelihood-based Boosting for Generalized mixed models. [Deprecated]</li> <li>grplasso - grplasso: Fitting user specified models with Group Lasso penalty.</li> <li>grpreg - grpreg: Regularization paths for regression models with grouped covariates.</li> <li>h2o - A framework for fast, parallel, and distributed machine learning algorithms at scale -- Deeplearning, Random forests, GBM, KMeans, PCA, GLM.</li> <li>hda - hda: Heteroscedastic Discriminant Analysis. [Deprecated]</li> <li>Introduction to Statistical Learning</li> <li>ipred - ipred: Improved Predictors.</li> <li>kernlab - kernlab: Kernel-based Machine Learning Lab.</li> <li>klaR - klaR: Classification and visualization.</li> <li>L0Learn - L0Learn: Fast algorithms for best subset selection.</li> <li>lars - lars: Least Angle Regression, Lasso and Forward Stagewise. [Deprecated]</li> <li>lasso2 - lasso2: L1 constrained estimation aka \u2018lasso\u2019.</li> <li>LiblineaR - LiblineaR: Linear Predictive Models Based On The Liblinear C/C++ Library.</li> <li>LogicReg - LogicReg: Logic Regression.</li> <li>Machine Learning For Hackers</li> <li>maptree - maptree: Mapping, pruning, and graphing tree models. [Deprecated]</li> <li>mboost - mboost: Model-Based Boosting.</li> <li>medley - medley: Blending regression models, using a greedy stepwise approach.</li> <li>mlr - mlr: Machine Learning in R.</li> <li>ncvreg - ncvreg: Regularization paths for SCAD- and MCP-penalized regression models.</li> <li>nnet - nnet: Feed-forward Neural Networks and Multinomial Log-Linear Models. [Deprecated]</li> <li>pamr - pamr: Pam: prediction analysis for microarrays. [Deprecated]</li> <li>party - party: A Laboratory for Recursive Partitioning</li> <li>partykit - partykit: A Toolkit for Recursive Partitioning.</li> <li>penalized - penalized: L1 (lasso and fused lasso) and L2 (ridge) penalized estimation in GLMs and in the Cox model.</li> <li>penalizedLDA - penalizedLDA: Penalized classification using Fisher's linear discriminant. [Deprecated]</li> <li>penalizedSVM - penalizedSVM: Feature Selection SVM using penalty functions.</li> <li>quantregForest - quantregForest: Quantile Regression Forests.</li> <li>randomForest - randomForest: Breiman and Cutler's random forests for classification and regression.</li> <li>randomForestSRC - randomForestSRC: Random Forests for Survival, Regression and Classification (RF-SRC).</li> <li>rattle - rattle: Graphical user interface for data mining in R.</li> <li>rda - rda: Shrunken Centroids Regularized Discriminant Analysis.</li> <li>rdetools - rdetools: Relevant Dimension Estimation (RDE) in Feature Spaces. [Deprecated]</li> <li>REEMtree - REEMtree: Regression Trees with Random Effects for Longitudinal (Panel) Data. [Deprecated]</li> <li>relaxo - relaxo: Relaxed Lasso. [Deprecated]</li> <li>rgenoud - rgenoud: R version of GENetic Optimization Using Derivatives</li> <li>Rmalschains - Rmalschains: Continuous Optimization using Memetic Algorithms with Local Search Chains (MA-LS-Chains) in R.</li> <li>rminer - rminer: Simpler use of data mining methods (e.g. NN and SVM) in classification and regression. [Deprecated]</li> <li>ROCR - ROCR: Visualizing the performance of scoring classifiers. [Deprecated]</li> <li>RoughSets - RoughSets: Data Analysis Using Rough Set and Fuzzy Rough Set Theories. [Deprecated]</li> <li>rpart - rpart: Recursive Partitioning and Regression Trees.</li> <li>RPMM - RPMM: Recursively Partitioned Mixture Model.</li> <li>RSNNS - RSNNS: Neural Networks in R using the Stuttgart Neural Network Simulator (SNNS).</li> <li>RWeka - RWeka: R/Weka interface.</li> <li>RXshrink - RXshrink: Maximum Likelihood Shrinkage via Generalized Ridge or Least Angle Regression.</li> <li>sda - sda: Shrinkage Discriminant Analysis and CAT Score Variable Selection. [Deprecated]</li> <li>spectralGraphTopology - spectralGraphTopology: Learning Graphs from Data via Spectral Constraints.</li> <li>SuperLearner - Multi-algorithm ensemble learning packages.</li> <li>svmpath - svmpath: svmpath: the SVM Path algorithm. [Deprecated]</li> <li>tgp - tgp: Bayesian treed Gaussian process models. [Deprecated]</li> <li>tree - tree: Classification and regression trees.</li> <li>varSelRF - varSelRF: Variable selection using random forests.</li> <li>XGBoost.R - R binding for eXtreme Gradient Boosting (Tree) Library.</li> <li>Optunity - A library dedicated to automated hyperparameter optimization with a simple, lightweight API to facilitate drop-in replacement of grid search. Optunity is written in Python but interfaces seamlessly to R.</li> <li>igraph - binding to igraph library - General purpose graph library.</li> <li>MXNet - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Go, JavaScript and more.</li> <li>TDSP-Utilities - Two data science utilities in R from Microsoft: 1) Interactive Data Exploration, Analysis, and Reporting (IDEAR) ; 2) Automated Modelling and Reporting (AMR).</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-manipulation-data-analysis-data-visualization","title":"Data Manipulation | Data Analysis | Data Visualization","text":"<ul> <li>dplyr - A data manipulation package that helps to solve the most common data manipulation problems.</li> <li>ggplot2 - A data visualization package based on the grammar of graphics.</li> <li>tmap for visualizing geospatial data with static maps and leaflet for interactive maps</li> <li>tm and quanteda are the main packages for managing,  analyzing, and visualizing textual data.</li> <li>shiny is the basis for truly interactive displays and dashboards in R. However, some measure of interactivity can be achieved with htmlwidgets bringing javascript libraries to R. These include, plotly, dygraphs, highcharter, and several others.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#sas","title":"SAS","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_26","title":"General-Purpose Machine Learning","text":"<ul> <li>Visual Data Mining and Machine Learning - Interactive, automated, and programmatic modelling with the latest machine learning algorithms in and end-to-end analytics environment, from data prep to deployment. Free trial available.</li> <li>Enterprise Miner - Data mining and machine learning that creates deployable models using a GUI or code.</li> <li>Factory Miner - Automatically creates deployable machine learning models across numerous market or customer segments using a GUI.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_11","title":"Data Analysis / Data Visualization","text":"<ul> <li>SAS/STAT - For conducting advanced statistical analysis.</li> <li>University Edition - FREE! Includes all SAS packages necessary for data analysis and visualization, and includes online SAS courses.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_12","title":"Natural Language Processing","text":"<ul> <li>Contextual Analysis - Add structure to unstructured text using a GUI.</li> <li>Sentiment Analysis - Extract sentiment from text using a GUI.</li> <li>Text Miner - Text mining using a GUI or code.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#demos-and-scripts_2","title":"Demos and Scripts","text":"<ul> <li>ML_Tables - Concise cheat sheets containing machine learning best practices.</li> <li>enlighten-apply - Example code and materials that illustrate applications of SAS machine learning techniques.</li> <li>enlighten-integration - Example code and materials that illustrate techniques for integrating SAS with other analytics technologies in Java, PMML, Python and R.</li> <li>enlighten-deep - Example code and materials that illustrate using neural networks with several hidden layers in SAS.</li> <li>dm-flow - Library of SAS Enterprise Miner process flow diagrams to help you learn by example about specific data mining topics.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#scala","title":"Scala","text":""},{"location":"ai_ml/machine_learning/framework/#natural-language-processing_13","title":"Natural Language Processing","text":"<ul> <li>ScalaNLP - ScalaNLP is a suite of machine learning and numerical computing libraries.</li> <li>Breeze - Breeze is a numerical processing library for Scala.</li> <li>Chalk - Chalk is a natural language processing library. [Deprecated]</li> <li>FACTORIE - FACTORIE is a toolkit for deployable probabilistic modelling, implemented as a software library in Scala. It provides its users with a succinct language for creating relational factor graphs, estimating parameters and performing inference.</li> <li>Montague - Montague is a semantic parsing library for Scala with an easy-to-use DSL.</li> <li>Spark NLP - Natural language processing library built on top of Apache Spark ML to provide simple, performant, and accurate NLP annotations for machine learning pipelines, that scale easily in a distributed environment.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#data-analysis-data-visualization_12","title":"Data Analysis / Data Visualization","text":"<ul> <li>NDScala - N-dimensional arrays in Scala 3. Think NumPy ndarray, but with compile-time type-checking/inference over shapes, tensor/axis labels &amp; numeric data types</li> <li>MLlib in Apache Spark - Distributed machine learning library in Spark</li> <li>Hydrosphere Mist - a service for deployment Apache Spark MLLib machine learning models as realtime, batch or reactive web services.</li> <li>Scalding - A Scala API for Cascading.</li> <li>Summing Bird - Streaming MapReduce with Scalding and Storm.</li> <li>Algebird - Abstract Algebra for Scala.</li> <li>xerial - Data management utilities for Scala. [Deprecated]</li> <li>PredictionIO - PredictionIO, a machine learning server for software developers and data engineers.</li> <li>BIDMat - CPU and GPU-accelerated matrix library intended to support large-scale exploratory data analysis.</li> <li>Flink - Open source platform for distributed stream and batch data processing.</li> <li>Spark Notebook - Interactive and Reactive Data Science using Scala and Spark.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_27","title":"General-Purpose Machine Learning","text":"<ul> <li>Microsoft ML for Apache Spark -&gt; A distributed machine learning framework Apache Spark</li> <li>ONNX-Scala - An ONNX (Open Neural Network eXchange) API and backend for typeful, functional deep learning in Scala (3).</li> <li>DeepLearning.scala - Creating statically typed dynamic neural networks from object-oriented &amp; functional programming constructs.</li> <li>Conjecture - Scalable Machine Learning in Scalding.</li> <li>brushfire - Distributed decision tree ensemble learning in Scala.</li> <li>ganitha - Scalding powered machine learning. [Deprecated]</li> <li>adam - A genomics processing engine and specialized file format built using Apache Avro, Apache Spark and Parquet. Apache 2 licensed.</li> <li>bioscala - Bioinformatics for the Scala programming language</li> <li>BIDMach - CPU and GPU-accelerated Machine Learning Library.</li> <li>Figaro - a Scala library for constructing probabilistic models.</li> <li>H2O Sparkling Water - H2O and Spark interoperability.</li> <li>FlinkML in Apache Flink - Distributed machine learning library in Flink.</li> <li>DynaML - Scala Library/REPL for Machine Learning Research.</li> <li>Saul - Flexible Declarative Learning-Based Programming.</li> <li>SwiftLearner - Simply written algorithms to help study ML or write your own implementations.</li> <li>Smile - Statistical Machine Intelligence and Learning Engine.</li> <li>doddle-model - An in-memory machine learning library built on top of Breeze. It provides immutable objects and exposes its functionality through a scikit-learn-like API.</li> <li>TensorFlow Scala -   Strongly-typed Scala API for TensorFlow.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#scheme","title":"Scheme","text":""},{"location":"ai_ml/machine_learning/framework/#neural-networks_1","title":"Neural Networks","text":"<ul> <li>layer - Neural network inference from the command line, implemented in CHICKEN Scheme.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#swift","title":"Swift","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_28","title":"General-Purpose Machine Learning","text":"<ul> <li>Bender - Fast Neural Networks framework built on top of Metal. Supports TensorFlow models.</li> <li>Swift AI - Highly optimized artificial intelligence and machine learning library written in Swift.</li> <li>Swift for Tensorflow - a next-generation platform for machine learning, incorporating the latest research across machine learning, compilers, differentiable programming, systems design, and beyond.</li> <li>BrainCore - The iOS and OS X neural network framework.</li> <li>swix - A bare bones library that includes a general matrix language and wraps some OpenCV for iOS development. [Deprecated]</li> <li>AIToolbox - A toolbox framework of AI modules written in Swift: Graphs/Trees, Linear Regression, Support Vector Machines, Neural Networks, PCA, KMeans, Genetic Algorithms, MDP, Mixture of Gaussians.</li> <li>MLKit - A simple Machine Learning Framework written in Swift. Currently features Simple Linear Regression, Polynomial Regression, and Ridge Regression.</li> <li>Swift Brain - The first neural network / machine learning library written in Swift. This is a project for AI algorithms in Swift for iOS and OS X development. This project includes algorithms focused on Bayes theorem, neural networks, SVMs, Matrices, etc...</li> <li>Perfect TensorFlow - Swift Language Bindings of TensorFlow. Using native TensorFlow models on both macOS / Linux.</li> <li>PredictionBuilder - A library for machine learning that builds predictions using a linear regression.</li> <li>Awesome CoreML - A curated list of pretrained CoreML models.</li> <li>Awesome Core ML Models - A curated list of machine learning models in CoreML format.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#tensorflow","title":"TensorFlow","text":""},{"location":"ai_ml/machine_learning/framework/#general-purpose-machine-learning_29","title":"General-Purpose Machine Learning","text":"<ul> <li>Awesome Keras - A curated list of awesome Keras projects, libraries and resources.</li> <li>Awesome TensorFlow - A list of all things related to TensorFlow.</li> <li>Golden TensorFlow - A page of content on TensorFlow, including academic papers and links to related topics.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#tools_1","title":"Tools","text":""},{"location":"ai_ml/machine_learning/framework/#neural-networks_2","title":"Neural Networks","text":"<ul> <li>layer - Neural network inference from the command line</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#misc_3","title":"Misc","text":"<ul> <li>Synthical - AI-powered collaborative research environment. You can use it to get recommendations of articles based on reading history, simplify papers, find out what articles are trending, search articles by meaning (not just keywords), create and share folders of articles, see lists of articles from specific companies and universities, and add highlights.</li> <li>Humanloop \u2013 Humanloop is a platform for prompt experimentation, finetuning models for better performance, cost optimization, and collecting model generated data and user feedback.</li> <li>Qdrant \u2013 Qdrant is open source vector similarity search engine with extended filtering support, written in Rust.</li> <li>milvus \u2013 Milvus is open source vector database for production AI, written in Go and C++, scalable and blazing fast for billions of embedding vectors.</li> <li>Weaviate \u2013 Weaviate is an open source vector search engine and vector database. Weaviate uses machine learning to vectorize and store data, and to find answers to natural language queries. With Weaviate you can also bring your custom ML models to production scale.</li> <li>txtai - Build semantic search applications and workflows.</li> <li>MLReef - MLReef is an end-to-end development platform using the power of git to give structure and deep collaboration possibilities to the ML development process.</li> <li>Pinecone - Vector database for applications that require real-time, scalable vector embedding and similarity search.</li> <li>CatalyzeX - Browser extension (Chrome and Firefox) that automatically finds and shows code implementations for machine learning papers anywhere: Google, Twitter, Arxiv, Scholar, etc.</li> <li>ML Workspace - All-in-one web-based IDE for machine learning and data science. The workspace is deployed as a docker container and is preloaded with a variety of popular data science libraries (e.g., Tensorflow, PyTorch) and dev tools (e.g., Jupyter, VS Code).</li> <li>Notebooks - A starter kit for Jupyter notebooks and machine learning. Companion docker images consist of all combinations of python versions, machine learning frameworks (Keras, PyTorch and Tensorflow) and CPU/CUDA versions.</li> <li>DVC - Data Science Version Control is an open-source version control system for machine learning projects with pipelines support. It makes ML projects reproducible and shareable.</li> <li>DVClive - Python library for experiment metrics logging into simply formatted local files.</li> <li>VDP - open source visual data ETL to streamline the end-to-end visual data processing pipeline: extract unstructured visual data from pre-built data sources, transform it into analysable structured insights by Vision AI models imported from various ML platforms, and load the insights into warehouses or applications.</li> <li>Kedro - Kedro is a data and development workflow framework that implements best practices for data pipelines with an eye towards productionizing machine learning models.</li> <li>guild.ai - Tool to log, analyze, compare and \"optimize\" experiments. It's cross-platform and framework independent, and provided integrated visualizers such as tensorboard.</li> <li>Sacred - Python tool to help  you configure, organize, log and reproduce experiments. Like a notebook lab in the context of Chemistry/Biology. The community has built multiple add-ons leveraging the proposed standard.</li> <li>Comet -  ML platform for tracking experiments, hyper-parameters, artifacts and more. It's deeply integrated with over 15+ deep learning frameworks and orchestration tools. Users can also use the platform to monitor their models in production.</li> <li>MLFlow - platform to manage the ML lifecycle, including experimentation, reproducibility and deployment. Framework and language agnostic, take a look at all the built-in integrations.</li> <li>Weights &amp; Biases - Machine learning experiment tracking, dataset versioning, hyperparameter search, visualization, and collaboration</li> <li>More tools to improve the ML lifecycle: Catalyst, PachydermIO. The following are GitHub-alike and targeting teams Weights &amp; Biases, Neptune.ai, Comet.ml, Valohai.ai, DAGsHub.</li> <li>Arize AI - Model validaiton and performance monitoring, drift detection, explainability, visualization across structured and unstructured data</li> <li>MachineLearningWithTensorFlow2ed - a book on general purpose machine learning techniques regression, classification, unsupervised clustering, reinforcement learning, auto encoders, convolutional neural networks, RNNs, LSTMs, using TensorFlow 1.14.1.</li> <li>m2cgen - A tool that allows the conversion of ML models into native code (Java, C, Python, Go, JavaScript, Visual Basic, C#, R, PowerShell, PHP, Dart) with zero dependencies.</li> <li>CML - A library for doing continuous integration with ML projects. Use GitHub Actions &amp; GitLab CI to train and evaluate models in production like environments and automatically generate visual reports with metrics and graphs in pull/merge requests. Framework &amp; language agnostic.</li> <li>Pythonizr - An online tool to generate boilerplate machine learning code that uses scikit-learn.</li> <li>Flyte - Flyte makes it easy to create concurrent, scalable, and maintainable workflows for machine learning and data processing.</li> <li>Chaos Genius - ML powered analytics engine for outlier/anomaly detection and root cause analysis.</li> <li>MLEM - Version and deploy your ML models following GitOps principles</li> <li>DockerDL - Ready to use deeplearning docker images.</li> <li>Aqueduct - Aqueduct enables you to easily define, run, and manage AI &amp; ML tasks on any cloud infrastructure.</li> <li>Ambrosia - Ambrosia helps you clean up your LLM datasets using other LLMs.</li> </ul>"},{"location":"ai_ml/machine_learning/framework/#books","title":"Books","text":"<ul> <li>Distributed Machine Learning Patterns  - This book teaches you how to take machine learning models from your personal laptop to large distributed clusters. You\u2019ll explore key concepts and patterns behind successful distributed machine learning systems, and learn technologies like TensorFlow, Kubernetes, Kubeflow, and Argo Workflows directly from a key maintainer and contributor, with real-world scenarios and hands-on projects.</li> <li>Grokking Machine Learning - Grokking Machine Learning teaches you how to apply ML to your projects using only standard Python code and high school-level math.</li> <li>Machine Learning Bookcamp - Learn the essentials of machine learning by completing a carefully designed set of real-world projects.</li> <li>Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow - Through a recent series of breakthroughs, deep learning has boosted the entire field of machine learning. Now, even programmers who know close to nothing about this technology can use simple, efficient tools to implement programs capable of learning from data. This bestselling book uses concrete examples, minimal theory, and production-ready Python frameworks (Scikit-Learn, Keras, and TensorFlow) to help you gain an intuitive understanding of the concepts and tools for building intelligent systems.</li> </ul>"},{"location":"api/","title":"Welcome to API notes.","text":""},{"location":"api/#contents","title":"Contents","text":"<ol> <li>AMQP</li> <li>EDA</li> <li>EDI</li> <li>GPRC</li> <li>GraphQL</li> <li>MQTT</li> <li>REST</li> <li>SOAP</li> <li>WebHooks</li> <li>WebSockets</li> </ol>"},{"location":"api/graphql/","title":"Graphql","text":"<p>query language for fe</p>"},{"location":"api/webhooks/","title":"Webhooks","text":"<p>real time communication for event triggered actions</p>"},{"location":"cloud_ecosystems/","title":"Welcome to Cloud Technology Notes","text":"<ol> <li> <p>Amazon Web Services: Explore AWS, a comprehensive cloud computing platform provided by Amazon. This section covers a wide range of services, from computing power to storage solutions and advanced analytics.</p> </li> <li> <p>Google Cloud Platform: Dive into Google Cloud Platform (GCP), known for its powerful tools and infrastructure. Learn about GCP\u2019s offerings including compute services, machine learning, and data storage.</p> </li> <li> <p>Microsoft Azure: Discover Microsoft Azure, a cloud computing service from Microsoft. This section provides insights into Azure\u2019s diverse services, including virtual machines, databases, and cloud services for developers.</p> </li> </ol> <p>Feel free to explore each section to gain a thorough understanding of cloud technologies and their practical applications!</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/","title":"Welcome to Amazon Web Service Notes","text":"<p>Welcome to the AWS notes, your go-to resource for understanding Amazon Web Services. For detailed and official documentation, visit the Amazon Web Service Documentation Page.</p> <ol> <li>Quick Guide: Get started with a concise guide to AWS services and features. This section will provide an overview of key concepts and practical tips to help you navigate AWS effectively.</li> </ol> <p>Explore the guide to gain insights into AWS and make the most of its cloud offerings!</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/","title":"Amazon Web Services (AWS) Tutorial","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#overview","title":"Overview","text":"<p>Amazon Web Services (AWS) is a comprehensive cloud computing platform provided by Amazon. It offers a broad range of cloud services including computing power, storage options, and networking capabilities. AWS is widely used for scalable applications, data processing, and enterprise solutions.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction to AWS</li> <li>AWS Services</li> <li>Amazon EC2</li> <li>Amazon S3</li> <li>Amazon RDS</li> <li>AWS Lambda</li> <li>Amazon ECS</li> <li>Amazon CloudWatch</li> <li>AWS CLI</li> </ol>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#introduction-to-aws","title":"Introduction to AWS","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#what-is-amazon-web-services","title":"What is Amazon Web Services?","text":"<p>Amazon Web Services is a cloud platform offering a variety of services including computing power, storage, and databases. It enables users to build, deploy, and manage applications through Amazon's global network of data centers.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#key-features","title":"Key Features","text":"<ul> <li>Scalability: Easily scale resources up or down based on demand.</li> <li>Global Reach: Data centers around the world ensure low-latency access.</li> <li>Security: Advanced security features and compliance certifications.</li> <li>Flexibility: Support for various programming languages, frameworks, and tools.</li> </ul>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#aws-services","title":"AWS Services","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#compute-services","title":"Compute Services","text":"<ul> <li>Amazon EC2: Scalable virtual servers in the cloud.</li> <li>AWS Lambda: Serverless computing service for running code without provisioning servers.</li> <li>Amazon ECS: Managed container service for running Docker containers.</li> </ul>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#storage-services","title":"Storage Services","text":"<ul> <li>Amazon S3: Object storage for scalable storage of unstructured data.</li> <li>Amazon EBS: Block storage for Amazon EC2 instances.</li> <li>Amazon Glacier: Low-cost archival storage for long-term data backup.</li> </ul>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#database-services","title":"Database Services","text":"<ul> <li>Amazon RDS: Managed relational database service for SQL databases.</li> <li>Amazon DynamoDB: Managed NoSQL database service.</li> <li>Amazon Aurora: High-performance relational database compatible with MySQL and PostgreSQL.</li> </ul>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#monitoring-and-management","title":"Monitoring and Management","text":"<ul> <li>Amazon CloudWatch: Monitoring service for AWS resources and applications.</li> <li>AWS CloudTrail: Service that enables governance, compliance, and operational auditing.</li> </ul>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#amazon-ec2","title":"Amazon EC2","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#launching-an-ec2-instance","title":"Launching an EC2 Instance","text":"<p>Amazon EC2 allows you to create and manage virtual servers in the cloud.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-launching-a-new-ec2-instance-using-aws-cli","title":"Example: Launching a New EC2 Instance using AWS CLI","text":"<pre><code>aws ec2 run-instances \\\n  --image-id ami-0abcdef1234567890 \\\n  --count 1 \\\n  --instance-type t2.micro \\\n  --key-name my-key-pair \\\n  --security-group-ids sg-0123456789abcdef0 \\\n  --subnet-id subnet-0123456789abcdef0\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#amazon-s3","title":"Amazon S3","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#storing-and-retrieving-data","title":"Storing and Retrieving Data","text":"<p>Amazon S3 provides scalable object storage for unstructured data.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-uploading-a-file-to-s3","title":"Example: Uploading a File to S3","text":"<pre><code>aws s3 cp local-file.txt s3://my-bucket/\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-downloading-a-file-from-s3","title":"Example: Downloading a File from S3","text":"<pre><code>aws s3 cp s3://my-bucket/remote-file.txt local-directory/\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#amazon-rds","title":"Amazon RDS","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#managing-relational-databases","title":"Managing Relational Databases","text":"<p>Amazon RDS is a managed relational database service for various SQL databases.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-creating-an-rds-instance","title":"Example: Creating an RDS Instance","text":"<pre><code>aws rds create-db-instance \\\n  --db-instance-identifier mydbinstance \\\n  --db-instance-class db.t2.micro \\\n  --engine mysql \\\n  --master-username admin \\\n  --master-user-password password \\\n  --allocated-storage 20\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-connecting-to-an-rds-database","title":"Example: Connecting to an RDS Database","text":"<pre><code>mysql -h mydbinstance.c9akciq32.rds.amazonaws.com -u admin -p\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#aws-lambda","title":"AWS Lambda","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#creating-serverless-functions","title":"Creating Serverless Functions","text":"<p>AWS Lambda allows you to run code in response to events without managing servers.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-creating-a-lambda-function","title":"Example: Creating a Lambda Function","text":"<pre><code>aws lambda create-function \\\n  --function-name my-function \\\n  --runtime python3.8 \\\n  --role arn:aws:iam::123456789012:role/service-role/my-role \\\n  --handler lambda_function.lambda_handler \\\n  --zip-file fileb://function.zip\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-lambda-function-code-python","title":"Example: Lambda Function Code (Python)","text":"<pre><code>def lambda_handler(event, context):\n    return {\n        'statusCode': 200,\n        'body': 'Hello, world!'\n    }\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#amazon-ecs","title":"Amazon ECS","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#managing-docker-containers","title":"Managing Docker Containers","text":"<p>Amazon ECS is a managed container service for running Docker containers.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-creating-an-ecs-cluster","title":"Example: Creating an ECS Cluster","text":"<pre><code>aws ecs create-cluster --cluster-name my-cluster\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-running-a-task","title":"Example: Running a Task","text":"<pre><code>aws ecs run-task \\\n  --cluster my-cluster \\\n  --task-definition my-task-definition\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#amazon-cloudwatch","title":"Amazon CloudWatch","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#monitoring-aws-resources","title":"Monitoring AWS Resources","text":"<p>Amazon CloudWatch provides monitoring and logging for AWS resources and applications.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-creating-a-cloudwatch-alarm","title":"Example: Creating a CloudWatch Alarm","text":"<pre><code>aws cloudwatch put-metric-alarm \\\n  --alarm-name my-alarm \\\n  --metric-name CPUUtilization \\\n  --namespace AWS/EC2 \\\n  --statistic Average \\\n  --period 300 \\\n  --threshold 80 \\\n  --comparison-operator GreaterThanOrEqualToThreshold \\\n  --evaluation-periods 1 \\\n  --alarm-actions arn:aws:sns:us-east-1:123456789012:my-topic\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#aws-cli","title":"AWS CLI","text":""},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#using-the-aws-command-line-interface","title":"Using the AWS Command Line Interface","text":"<p>The AWS CLI is a tool to manage AWS services from the command line.</p>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-installing-aws-cli","title":"Example: Installing AWS CLI","text":"<pre><code>curl \"https://d1uj6qtbmh3dt5.cloudfront.net/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-configuring-aws-cli","title":"Example: Configuring AWS CLI","text":"<pre><code>aws configure\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#example-listing-ec2-instances","title":"Example: Listing EC2 Instances","text":"<pre><code>aws ec2 describe-instances\n</code></pre>"},{"location":"cloud_ecosystems/Amazon-Web-Service/quick_guide/#summary","title":"Summary","text":"<p>This document provides an overview of Amazon Web Services (AWS), including key services such as Amazon EC2, S3, RDS, Lambda, ECS, and CloudWatch. It includes examples for common tasks and commands to help you get started with AWS.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/","title":"Welcome to Google Cloud Platform Notes","text":"<p>Welcome to the Google Cloud Platform (GCP) notes, your resource for exploring GCP services and features. For comprehensive and official documentation, visit the Google Cloud Platform Documentation Page.</p> <ol> <li>Quick Guide: Begin with a concise guide to GCP's key services and functionalities. This section offers an overview of essential concepts and practical tips to help you efficiently use Google Cloud Platform.</li> </ol> <p>Explore the guide to get acquainted with GCP and leverage its cloud capabilities!</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/","title":"Google Cloud Platform (GCP) Tutorial","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#overview","title":"Overview","text":"<p>Google Cloud Platform (GCP) is a suite of cloud computing services provided by Google. It includes a range of services for computing, storage, databases, machine learning, and networking. GCP enables businesses to scale and innovate using Google's infrastructure.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#introduction-to-gcp","title":"Introduction to GCP","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#what-is-google-cloud-platform","title":"What is Google Cloud Platform?","text":"<p>Google Cloud Platform is a suite of cloud computing services offered by Google. It provides a range of services including computing power, storage, and big data analytics, all of which are hosted on Google's infrastructure.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#key-features","title":"Key Features","text":"<ul> <li>Scalability: Automatically scales resources based on demand.</li> <li>Global Reach: Data centers around the world for low-latency access.</li> <li>Security: Robust security features and compliance certifications.</li> <li>Integration: Easy integration with other Google services and third-party tools.</li> </ul>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#gcp-services","title":"GCP Services","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#compute-services","title":"Compute Services","text":"<ul> <li>Google Compute Engine: Scalable virtual machines running in Google\u2019s data centers.</li> <li>Google App Engine: Platform-as-a-Service (PaaS) for building and deploying applications.</li> <li>Google Kubernetes Engine (GKE): Managed Kubernetes service for container orchestration.</li> </ul>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#storage-services","title":"Storage Services","text":"<ul> <li>Google Cloud Storage: Object storage for unstructured data.</li> <li>Google Cloud Filestore: Managed file storage for applications.</li> <li>Google Persistent Disk: Block storage for Google Compute Engine.</li> </ul>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#database-services","title":"Database Services","text":"<ul> <li>Google Cloud SQL: Managed relational database service.</li> <li>Google Cloud Firestore: NoSQL document database for web and mobile apps.</li> <li>Google Bigtable: Managed NoSQL database for large analytical and operational workloads.</li> </ul>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#networking-services","title":"Networking Services","text":"<ul> <li>Google Cloud VPC: Virtual Private Cloud for network management.</li> <li>Google Cloud Load Balancing: Distributes traffic across multiple instances.</li> <li>Google Cloud CDN: Content Delivery Network for low-latency content delivery.</li> </ul>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-compute-engine","title":"Google Compute Engine","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#creating-a-virtual-machine","title":"Creating a Virtual Machine","text":"<p>Google Compute Engine allows you to create and manage virtual machines in the cloud.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-vm-using-gcloud-cli","title":"Example: Creating a VM using gcloud CLI","text":"<pre><code>gcloud compute instances create my-instance \\\n  --zone=us-central1-a \\\n  --image-family=debian-9 \\\n  --image-project=debian-cloud \\\n  --machine-type=n1-standard-1\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-storage","title":"Google Cloud Storage","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#storing-and-retrieving-data","title":"Storing and Retrieving Data","text":"<p>Google Cloud Storage provides scalable object storage for unstructured data.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-uploading-a-file","title":"Example: Uploading a File","text":"<pre><code>gsutil cp local-file.txt gs://my-bucket/\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-downloading-a-file","title":"Example: Downloading a File","text":"<pre><code>gsutil cp gs://my-bucket/remote-file.txt local-directory/\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-sql","title":"Google Cloud SQL","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#managing-a-relational-database","title":"Managing a Relational Database","text":"<p>Google Cloud SQL is a managed database service for SQL databases.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-connecting-to-cloud-sql","title":"Example: Connecting to Cloud SQL","text":"<pre><code>gcloud sql connect my-instance --user=root\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-database","title":"Example: Creating a Database","text":"<pre><code>CREATE DATABASE mydatabase;\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-functions","title":"Google Cloud Functions","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#creating-serverless-functions","title":"Creating Serverless Functions","text":"<p>Google Cloud Functions allows you to run code in response to events without managing servers.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-deploying-a-function","title":"Example: Deploying a Function","text":"<pre><code>gcloud functions deploy my-function \\\n  --runtime python39 \\\n  --trigger-http \\\n  --allow-unauthenticated\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-function-code-python","title":"Example: Function Code (Python)","text":"<pre><code>def hello_world(request):\n    return \"Hello, World!\"\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-kubernetes-engine-gke","title":"Google Kubernetes Engine (GKE)","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#managing-kubernetes-clusters","title":"Managing Kubernetes Clusters","text":"<p>Google Kubernetes Engine provides a managed Kubernetes service.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-gke-cluster","title":"Example: Creating a GKE Cluster","text":"<pre><code>gcloud container clusters create my-cluster \\\n  --zone us-central1-a\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-deploying-an-application","title":"Example: Deploying an Application","text":"<pre><code>kubectl create deployment my-app --image=gcr.io/my-project/my-app\nkubectl expose deployment my-app --type=LoadBalancer --port 80\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-pubsub","title":"Google Cloud Pub/Sub","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#messaging-and-event-handling","title":"Messaging and Event Handling","text":"<p>Google Cloud Pub/Sub is a messaging service for building event-driven systems.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-topic","title":"Example: Creating a Topic","text":"<pre><code>gcloud pubsub topics create my-topic\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-publishing-a-message","title":"Example: Publishing a Message","text":"<pre><code>gcloud pubsub topics publish my-topic --message \"Hello, Pub/Sub!\"\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-networking","title":"Google Cloud Networking","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#managing-virtual-networks","title":"Managing Virtual Networks","text":"<p>Google Cloud Networking services help manage network resources.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-vpc-network","title":"Example: Creating a VPC Network","text":"<pre><code>gcloud compute networks create my-network \\\n  --subnet-mode=auto\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-creating-a-firewall-rule","title":"Example: Creating a Firewall Rule","text":"<pre><code>gcloud compute firewall-rules create allow-ssh \\\n  --network my-network \\\n  --allow tcp:22\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#google-cloud-sdk","title":"Google Cloud SDK","text":""},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#using-the-cloud-sdk","title":"Using the Cloud SDK","text":"<p>The Google Cloud SDK provides command-line tools for managing GCP resources.</p>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-installing-cloud-sdk","title":"Example: Installing Cloud SDK","text":"<pre><code>curl https://sdk.cloud.google.com | bash\nexec -l $SHELL\ngcloud init\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#example-listing-projects","title":"Example: Listing Projects","text":"<pre><code>gcloud projects list\n</code></pre>"},{"location":"cloud_ecosystems/Google-Cloud-Platform/quick_guide/#summary","title":"Summary","text":"<p>This document provides an overview of Google Cloud Platform, including key services such as Google Compute Engine, Cloud Storage, Cloud SQL, Cloud Functions, GKE, Pub/Sub, and Networking. It includes examples for common tasks and commands to help you get started with GCP.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/","title":"Welcome to Microsoft Azure Notes","text":"<p>Welcome to the Azure notes, a comprehensive resource for exploring Microsoft Azure. For in-depth and official documentation, visit the Microsoft Azure Documentation Page.</p> <ol> <li>Quick Guide: Start with a streamlined guide to Azure\u2019s core services and features. This section provides a snapshot of essential concepts and practical insights to help you get up to speed with Azure.</li> </ol> <p>Dive into the guide to familiarize yourself with Azure and its cloud capabilities!</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/","title":"Microsoft Azure Tutorial","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#overview","title":"Overview","text":"<p>Microsoft Azure is a cloud computing platform and service created by Microsoft. It offers a range of cloud services, including those for computing, analytics, storage, and networking. Users can choose and configure these services to meet their specific needs.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#introduction-to-azure","title":"Introduction to Azure","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#what-is-microsoft-azure","title":"What is Microsoft Azure?","text":"<p>Microsoft Azure is a comprehensive cloud platform offering a wide range of services for building, deploying, and managing applications through Microsoft-managed data centers. It supports various programming languages, frameworks, and tools.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#key-features","title":"Key Features","text":"<ul> <li>Scalability: Scale resources up or down based on demand.</li> <li>Flexibility: Choose from a wide range of services to fit specific needs.</li> <li>Security: Built-in security features and compliance certifications.</li> <li>Global Reach: Data centers around the world for low-latency access.</li> </ul>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-services","title":"Azure Services","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#compute-services","title":"Compute Services","text":"<ul> <li>Azure Virtual Machines (VMs): Provides scalable virtual servers in the cloud.</li> <li>Azure App Services: Platform-as-a-Service (PaaS) for building web apps and APIs.</li> <li>Azure Kubernetes Service (AKS): Managed Kubernetes cluster for container orchestration.</li> </ul>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#storage-services","title":"Storage Services","text":"<ul> <li>Azure Blob Storage: Object storage for unstructured data.</li> <li>Azure Table Storage: NoSQL store for large amounts of structured data.</li> <li>Azure File Storage: Managed file shares accessible via the Server Message Block (SMB) protocol.</li> </ul>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#database-services","title":"Database Services","text":"<ul> <li>Azure SQL Database: Managed relational database service.</li> <li>Azure Cosmos DB: Globally distributed, multi-model database service.</li> </ul>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#networking-services","title":"Networking Services","text":"<ul> <li>Azure Virtual Network: Enables secure communication between Azure resources.</li> <li>Azure Load Balancer: Distributes network traffic across multiple VMs.</li> </ul>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-storage","title":"Azure Storage","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#blob-storage","title":"Blob Storage","text":"<p>Azure Blob Storage is used for storing large amounts of unstructured data, such as text or binary data.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-uploading-a-file-to-blob-storage","title":"Example: Uploading a File to Blob Storage","text":"<pre><code>from azure.storage.blob import BlobServiceClient\n\n# Connect to Azure Blob Storage\nblob_service_client = BlobServiceClient.from_connection_string('your_connection_string')\n\n# Create a container\ncontainer_client = blob_service_client.create_container('mycontainer')\n\n# Upload a file\nblob_client = container_client.get_blob_client('myfile.txt')\nwith open('myfile.txt', 'rb') as data:\n    blob_client.upload_blob(data)\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#table-storage","title":"Table Storage","text":"<p>Azure Table Storage is used for storing large amounts of structured data in a NoSQL store.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-inserting-an-entity-into-table-storage","title":"Example: Inserting an Entity into Table Storage","text":"<pre><code>from azure.data.tables import TableServiceClient, TableClient\n\n# Connect to Azure Table Storage\ntable_service_client = TableServiceClient.from_connection_string('your_connection_string')\n\n# Create a table\ntable_client = table_service_client.create_table_if_not_exists('mytable')\n\n# Insert an entity\nentity = {\n    'PartitionKey': 'partition1',\n    'RowKey': 'row1',\n    'Name': 'John Doe',\n    'Age': 30\n}\ntable_client.upsert_entity(entity)\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-virtual-machines","title":"Azure Virtual Machines","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#creating-a-virtual-machine","title":"Creating a Virtual Machine","text":"<p>You can create and manage virtual machines (VMs) through the Azure Portal, Azure CLI, or Azure PowerShell.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-creating-a-vm-using-azure-cli","title":"Example: Creating a VM using Azure CLI","text":"<pre><code>az vm create \\\n  --resource-group myResourceGroup \\\n  --name myVM \\\n  --image UbuntuLTS \\\n  --admin-username azureuser \\\n  --generate-ssh-keys\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-app-services","title":"Azure App Services","text":"<p>Azure App Services allows you to build and host web applications in the programming language of your choice without managing infrastructure.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#deploying-a-web-app","title":"Deploying a Web App","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-deploying-an-app-using-azure-cli","title":"Example: Deploying an App Using Azure CLI","text":"<pre><code>az webapp create \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --name my-webapp \\\n  --runtime \"PYTHON|3.8\"\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-sql-database","title":"Azure SQL Database","text":"<p>Azure SQL Database is a managed relational database service.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#connecting-to-azure-sql-database","title":"Connecting to Azure SQL Database","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-connecting-using-python","title":"Example: Connecting Using Python","text":"<pre><code>import pyodbc\n\n# Connect to Azure SQL Database\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=myserver.database.windows.net;DATABASE=mydatabase;UID=myuser;PWD=mypassword')\n\n# Execute a query\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM mytable\")\n\nfor row in cursor.fetchall():\n    print(row)\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-functions","title":"Azure Functions","text":"<p>Azure Functions allows you to run small pieces of code without managing servers.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#creating-a-function","title":"Creating a Function","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-creating-an-http-triggered-function","title":"Example: Creating an HTTP-triggered Function","text":"<pre><code>import logging\nimport azure.functions as func\n\ndef main(req: func.HttpRequest) -&gt; func.HttpResponse:\n    logging.info('Python HTTP trigger function processed a request.')\n\n    name = req.params.get('name')\n    if not name:\n        try:\n            req_body = req.get_json()\n        except ValueError:\n            pass\n        else:\n            name = req_body.get('name')\n\n    if name:\n        return func.HttpResponse(f\"Hello, {name}!\")\n    else:\n        return func.HttpResponse(\n             \"Please pass a name on the query string or in the request body\",\n             status_code=400\n        )\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-devops","title":"Azure DevOps","text":"<p>Azure DevOps provides tools for DevOps and CI/CD pipelines.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#creating-a-pipeline","title":"Creating a Pipeline","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-yaml-pipeline-configuration","title":"Example: YAML Pipeline Configuration","text":"<pre><code>trigger:\n- main\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: UsePythonVersion@0\n  inputs:\n    versionSpec: '3.x'\n  name: InstallPython\n\n- script: |\n    python -m pip install --upgrade pip\n    pip install -r requirements.txt\n  displayName: 'Install dependencies'\n\n- script: |\n    python -m unittest discover\n  displayName: 'Run tests'\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-networking","title":"Azure Networking","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#virtual-network","title":"Virtual Network","text":"<p>Azure Virtual Network enables you to create isolated network environments in the cloud.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-creating-a-virtual-network","title":"Example: Creating a Virtual Network","text":"<pre><code>az network vnet create \\\n  --resource-group myResourceGroup \\\n  --name myVNet \\\n  --address-prefix 10.0.0.0/16\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#azure-cli","title":"Azure CLI","text":"<p>The Azure CLI is a command-line tool for managing Azure resources.</p>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#basic-commands","title":"Basic Commands","text":""},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-listing-resource-groups","title":"Example: Listing Resource Groups","text":"<pre><code>az group list --output table\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#example-deleting-a-resource-group","title":"Example: Deleting a Resource Group","text":"<pre><code>az group delete --name myResourceGroup --yes --no-wait\n</code></pre>"},{"location":"cloud_ecosystems/Microsoft-Azure/quick_guide/#summary","title":"Summary","text":"<p>This document provides an overview of Microsoft Azure, covering key services such as Azure Storage, Virtual Machines, App Services, SQL Database, Functions, DevOps, and Networking. It includes examples for common tasks and commands to help you get started with Azure.</p>"},{"location":"container/","title":"Welcome to Container Notes","text":"<p>Welcome to the Container notes, a resource designed to help you understand and work with containerization technologies. Explore the following sections to get a comprehensive overview of leading container tools:</p> <ol> <li> <p>Docker: Dive into Docker, the popular platform for developing, shipping, and running applications in containers. This section covers Docker\u2019s core concepts, commands, and best practices.</p> </li> <li> <p>Kubernetes: Learn about Kubernetes, the open-source system for automating the deployment, scaling, and management of containerized applications. This section provides insights into Kubernetes architecture, components, and how to manage containers effectively.</p> </li> <li> <p>Podman: Explore Podman, an alternative to Docker that focuses on managing containers and pods. This section details Podman's features, usage, and how it compares to other container tools.</p> </li> </ol> <p>Feel free to navigate through these sections to enhance your understanding of containerization and its practical applications!</p>"},{"location":"container/Docker/","title":"Welcome to Docker Notes","text":"<p>Welcome to the Docker notes, a resource for understanding and working with Docker. For complete and official documentation, visit the Docker Documentation Page.</p> <ol> <li> <p>Quick Guide: Get started with Docker through a concise guide covering essential concepts and basic usage.</p> </li> <li> <p>Commands: Explore a comprehensive list of Docker commands and their functionalities to efficiently manage containers and images.</p> </li> <li> <p>Sample Docker Compose File: View a sample Docker Compose file to understand how to define and run multi-container Docker applications.</p> </li> <li> <p>Database Using Docker Compose File: Access a Docker Compose file specifically for setting up and managing databases within Docker containers.</p> </li> </ol> <p>Dive into each section to enhance your Docker skills and streamline your containerization processes!</p>"},{"location":"container/Docker/commands/","title":"Docker Commands","text":""},{"location":"container/Docker/commands/#docker-basic-commands","title":"Docker Basic Commands","text":"<p>check docker version</p> <pre><code>docker --version or docker -v\n</code></pre> <p>display system wide information about docker</p> <pre><code>docker info\n</code></pre> <p>download an image from Docker Hub</p> <pre><code>docker pull &lt;image name&gt;\n</code></pre> <p>list local docker images</p> <pre><code>docker images or docker image ls\n</code></pre> <p>list running containers</p> <pre><code>docker ps or docker container ls\n</code></pre> <p>list all containers including stopped ones</p> <pre><code>docker ps -a or docker container ls -a\n</code></pre> <p>create and start a new container from an image</p> <pre><code>docker run &lt;options&gt; &lt;image name&gt;\n</code></pre>"},{"location":"container/Docker/commands/#docker-container-lifecycle","title":"Docker Container Lifecycle","text":"<p>start a stopped container</p> <pre><code>docker start &lt;container name/ id&gt;\n</code></pre> <p>stop a running container gracefully</p> <pre><code>docker stop &lt;container name/ id&gt;\n</code></pre> <p>forcefully stop a running container</p> <pre><code>docker kill &lt;container name/ id&gt;\n</code></pre> <p>restart a container</p> <pre><code>docker restart &lt;container name/ id&gt;\n</code></pre> <p>remove a stopped container</p> <pre><code>docker rm &lt;container name/ id&gt;\n</code></pre>"},{"location":"container/Docker/commands/#images","title":"Images","text":"<p>Build a Docker image from a dockerfile</p> <pre><code>docker build -t &lt;image name&gt; &lt;path to dockerfile&gt;\n</code></pre> <p>remove an image</p> <pre><code>docker rmi &lt;image name&gt;\n</code></pre> <p>remove all unused images</p> <pre><code>docker image prune\n</code></pre>"},{"location":"container/Docker/commands/#docker-compose","title":"docker compose","text":"<p>start services defined in a docker compose file</p> <pre><code>docker-compose up\n</code></pre> <p>stop and remove services defined in a docker compose file</p> <pre><code>docker-compose down\n</code></pre> <p>list services in a compose file and their status</p> <pre><code>docker-compose ps\n</code></pre> <p>view logs for a specific service</p> <pre><code>docker-compose logs &lt;service_name&gt;\n</code></pre> <p>run a command in a running service container</p> <pre><code>docker-compose exec &lt;service_name&gt; &lt;command&gt;\n</code></pre>"},{"location":"container/Docker/commands/#volumes","title":"Volumes","text":"<p>create a named volume</p> <pre><code>docker volume create &lt;volume name&gt;\n</code></pre> <p>mount a volume to a container</p> <pre><code>docker run -v &lt;volumn name&gt;:&lt;container path&gt;\n</code></pre> <p>list volumes</p> <pre><code>docker volume ls\n</code></pre> <p>remove a volume</p> <pre><code>docker volume rm &lt;volumn name&gt;\n</code></pre>"},{"location":"container/Docker/commands/#docker-registry-and-hub","title":"Docker Registry and Hub","text":"<p>login to docker registry</p> <pre><code>docker login\n</code></pre> <p>push an image to the registry</p> <pre><code>docker push &lt;image name&gt;\n</code></pre> <p>pull an image from the registry</p> <pre><code>docker pull &lt;image name&gt;\n</code></pre>"},{"location":"container/Docker/commands/#networks","title":"Networks","text":"<p>create a user-defined network</p> <pre><code>docker network create &lt;network name&gt;\n</code></pre> <p>list networks</p> <pre><code>docker network ls\n</code></pre> <p>connect a container to a network</p> <pre><code>docker network connect &lt;network name&gt; &lt;container name/ id&gt;\n</code></pre> <p>disconnect a container from a network</p> <pre><code>docker network disconnect &lt;network name&gt; &lt;container name/ id&gt;\n</code></pre> <p>inspect a network</p> <pre><code>docker network inspect &lt;network name&gt;\n</code></pre>"},{"location":"container/Docker/commands/#logs-and-debugging","title":"Logs and Debugging","text":"<p>view container logs</p> <pre><code>docker logs &lt;container name/ id&gt;\n</code></pre> <p>start an interactive shell in a running container</p> <pre><code>docker exec -it &lt;container name/ id&gt;\n</code></pre> <p>display real-time container resource usage.</p> <pre><code>docker stats &lt;container name/ id&gt;\n</code></pre> <p>get results from container</p> <pre><code>docker exec &lt;conainer name/ id&gt; &lt;command to execute&gt;\n</code></pre>"},{"location":"container/Docker/commands/#cleanup","title":"Cleanup","text":"<p>remove all stopped containers, unused networks, and images</p> <pre><code>docker system prune\n</code></pre> <p>remove all stopped containers</p> <pre><code>docker container prune\n</code></pre> <p>remove all unused images</p> <pre><code>docker image prune\n</code></pre> <p>remove all unused volumes</p> <pre><code>docker volumn prune\n</code></pre>"},{"location":"container/Docker/quick_guide/","title":"Docker Tutorial","text":""},{"location":"container/Docker/quick_guide/#overview","title":"Overview","text":"<p>Docker is an open-source platform that automates the deployment, scaling, and management of applications using containerization. Containers are lightweight, portable, and ensure consistency across different environments.</p>"},{"location":"container/Docker/quick_guide/#installing-docker","title":"Installing Docker","text":""},{"location":"container/Docker/quick_guide/#on-linux","title":"On Linux","text":"<p>To install Docker on a Linux system, follow these steps:</p> <pre><code>sudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\n</code></pre>"},{"location":"container/Docker/quick_guide/#on-macos","title":"On macOS","text":"<ol> <li>Download Docker Desktop for Mac from the Docker website.</li> <li>Open the downloaded <code>.dmg</code> file and drag Docker to your Applications folder.</li> <li>Open Docker from your Applications folder.</li> </ol>"},{"location":"container/Docker/quick_guide/#on-windows","title":"On Windows","text":"<ol> <li>Download Docker Desktop for Windows from the Docker website.</li> <li>Run the installer and follow the installation instructions.</li> <li>Start Docker Desktop from your Start menu.</li> </ol>"},{"location":"container/Docker/quick_guide/#basic-docker-commands","title":"Basic Docker Commands","text":""},{"location":"container/Docker/quick_guide/#1-docker-version","title":"1. <code>docker --version</code>","text":"<p>Check the installed Docker version.</p> <pre><code>docker --version\n</code></pre>"},{"location":"container/Docker/quick_guide/#example","title":"Example","text":"<pre><code>Docker version 20.10.8, build 3967b7d\n</code></pre>"},{"location":"container/Docker/quick_guide/#2-docker-pull","title":"2. <code>docker pull</code>","text":"<p>Download an image from Docker Hub.</p> <pre><code>docker pull image_name\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_1","title":"Example","text":"<pre><code>docker pull nginx\n</code></pre>"},{"location":"container/Docker/quick_guide/#3-docker-images","title":"3. <code>docker images</code>","text":"<p>List all available Docker images on your system.</p> <pre><code>docker images\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_2","title":"Example","text":"<pre><code>REPOSITORY          TAG       IMAGE ID       CREATED       SIZE\nnginx               latest    f6b22f3dfc8f   2 weeks ago   133MB\n</code></pre>"},{"location":"container/Docker/quick_guide/#4-docker-rmi","title":"4. <code>docker rmi</code>","text":"<p>Remove a Docker image.</p> <pre><code>docker rmi image_name\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_3","title":"Example","text":"<pre><code>docker rmi nginx\n</code></pre>"},{"location":"container/Docker/quick_guide/#5-docker-run","title":"5. <code>docker run</code>","text":"<p>Run a Docker container from an image.</p> <pre><code>docker run [OPTIONS] image_name\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_4","title":"Example","text":"<pre><code>docker run -d -p 80:80 nginx\n</code></pre>"},{"location":"container/Docker/quick_guide/#6-docker-ps","title":"6. <code>docker ps</code>","text":"<p>List running Docker containers.</p> <pre><code>docker ps\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_5","title":"Example","text":"<pre><code>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                NAMES\nabcd1234efgh   nginx     \"nginx -g 'daemon of\u2026\"   10 minutes ago  Up 10 minutes  0.0.0.0:80-&gt;80/tcp   quizzical_hermann\n</code></pre>"},{"location":"container/Docker/quick_guide/#7-docker-stop","title":"7. <code>docker stop</code>","text":"<p>Stop a running Docker container.</p> <pre><code>docker stop container_id\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_6","title":"Example","text":"<pre><code>docker stop abcd1234efgh\n</code></pre>"},{"location":"container/Docker/quick_guide/#8-docker-rm","title":"8. <code>docker rm</code>","text":"<p>Remove a stopped Docker container.</p> <pre><code>docker rm container_id\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_7","title":"Example","text":"<pre><code>docker rm abcd1234efgh\n</code></pre>"},{"location":"container/Docker/quick_guide/#9-docker-exec","title":"9. <code>docker exec</code>","text":"<p>Execute a command inside a running container.</p> <pre><code>docker exec -it container_id command\n</code></pre>"},{"location":"container/Docker/quick_guide/#example_8","title":"Example","text":"<pre><code>docker exec -it abcd1234efgh /bin/bash\n</code></pre>"},{"location":"container/Docker/quick_guide/#10-docker-compose","title":"10. <code>docker-compose</code>","text":"<p><code>docker-compose</code> is a tool for defining and running multi-container Docker applications.</p>"},{"location":"container/Docker/quick_guide/#example-docker-composeyml","title":"Example <code>docker-compose.yml</code>","text":"<pre><code>version: '3'\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_DB: exampledb\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre>"},{"location":"container/Docker/quick_guide/#commands","title":"Commands","text":"<ul> <li>Start Services: <code>docker-compose up</code></li> <li>Stop Services: <code>docker-compose down</code></li> <li>View Logs: <code>docker-compose logs</code></li> </ul>"},{"location":"container/Docker/quick_guide/#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a script that contains a series of instructions to create a Docker image.</p>"},{"location":"container/Docker/quick_guide/#example-dockerfile","title":"Example Dockerfile","text":"<pre><code># Use an official Python runtime as a parent image\nFROM python:3.8-slim\n\n# Set the working directory in the container\nWORKDIR /usr/src/app\n\n# Copy the current directory contents into the container at /usr/src/app\nCOPY . .\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV NAME World\n\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"container/Docker/quick_guide/#build-image","title":"Build Image","text":"<pre><code>docker build -t my-python-app .\n</code></pre>"},{"location":"container/Docker/quick_guide/#run-container","title":"Run Container","text":"<pre><code>docker run -p 4000:80 my-python-app\n</code></pre>"},{"location":"container/Docker/quick_guide/#summary","title":"Summary","text":"<p>Docker simplifies application deployment by using containers that package code and dependencies together. Understanding these basic commands will help you get started with Docker and manage your containerized applications effectively. For more detailed information, refer to the official Docker documentation.</p>"},{"location":"container/Kubernetes/","title":"Welcome to Kubernetes Notes","text":"<p>Welcome to the Kubernetes notes, your guide to understanding and managing Kubernetes. For comprehensive and official documentation, visit the Kubernetes Documentation Page.</p> <ol> <li>Quick Guide: Begin with a streamlined guide to Kubernetes\u2019 core concepts, architecture, and basic operations. This section provides an overview to help you get started with Kubernetes.</li> </ol> <p>Explore the guide to become familiar with Kubernetes and its powerful container orchestration capabilities!</p>"},{"location":"container/Kubernetes/quick_guide/","title":"Kubernetes Tutorial","text":""},{"location":"container/Kubernetes/quick_guide/#overview","title":"Overview","text":"<p>Kubernetes is an open-source platform designed to automate deploying, scaling, and operating application containers. It orchestrates containerized applications across a cluster of machines, providing tools for managing containerized applications.</p>"},{"location":"container/Kubernetes/quick_guide/#key-concepts","title":"Key Concepts","text":""},{"location":"container/Kubernetes/quick_guide/#1-cluster","title":"1. Cluster","text":"<p>A Kubernetes cluster consists of a set of nodes that run containerized applications. Each cluster has a master node and worker nodes.</p>"},{"location":"container/Kubernetes/quick_guide/#2-pod","title":"2. Pod","text":"<p>A Pod is the smallest deployable unit in Kubernetes. It can contain one or more containers that share the same network namespace and storage.</p>"},{"location":"container/Kubernetes/quick_guide/#3-deployment","title":"3. Deployment","text":"<p>A Deployment manages a set of identical Pods, ensuring that the specified number of Pods are running and available.</p>"},{"location":"container/Kubernetes/quick_guide/#4-service","title":"4. Service","text":"<p>A Service exposes a set of Pods as a network service. It provides load balancing and service discovery.</p>"},{"location":"container/Kubernetes/quick_guide/#5-namespace","title":"5. Namespace","text":"<p>Namespaces provide a mechanism for isolating groups of resources within a single cluster.</p>"},{"location":"container/Kubernetes/quick_guide/#basic-commands","title":"Basic Commands","text":""},{"location":"container/Kubernetes/quick_guide/#1-kubectl-version","title":"1. <code>kubectl version</code>","text":"<p>Check the version of <code>kubectl</code> and the Kubernetes cluster.</p> <pre><code>kubectl version\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#2-kubectl-get-nodes","title":"2. <code>kubectl get nodes</code>","text":"<p>List all nodes in the cluster.</p> <pre><code>kubectl get nodes\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example","title":"Example","text":"<pre><code>NAME          STATUS   ROLES    AGE   VERSION\nnode1          Ready    master   10d   v1.21.0\nnode2          Ready    &lt;none&gt;   10d   v1.21.0\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#3-kubectl-get-pods","title":"3. <code>kubectl get pods</code>","text":"<p>List all Pods in the current namespace.</p> <pre><code>kubectl get pods\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_1","title":"Example","text":"<pre><code>NAME                     READY   STATUS    RESTARTS   AGE\nnginx-deployment-7fb8d6b9b-8qj7g   1/1     Running   0          5m\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#4-kubectl-create","title":"4. <code>kubectl create</code>","text":"<p>Create a resource from a file or from stdin.</p> <pre><code>kubectl create -f resource.yaml\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_2","title":"Example","text":"<p>Create a Pod from a YAML file:</p> <pre><code>kubectl create -f pod.yaml\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#5-kubectl-apply","title":"5. <code>kubectl apply</code>","text":"<p>Apply a configuration change to a resource.</p> <pre><code>kubectl apply -f resource.yaml\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_3","title":"Example","text":"<p>Update a Deployment with a new configuration:</p> <pre><code>kubectl apply -f deployment.yaml\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#6-kubectl-delete","title":"6. <code>kubectl delete</code>","text":"<p>Delete a resource.</p> <pre><code>kubectl delete -f resource.yaml\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_4","title":"Example","text":"<p>Delete a Pod:</p> <pre><code>kubectl delete pod nginx-deployment-7fb8d6b9b-8qj7g\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#7-kubectl-describe","title":"7. <code>kubectl describe</code>","text":"<p>Show detailed information about a resource.</p> <pre><code>kubectl describe pod pod_name\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_5","title":"Example","text":"<pre><code>kubectl describe pod nginx-deployment-7fb8d6b9b-8qj7g\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#8-kubectl-logs","title":"8. <code>kubectl logs</code>","text":"<p>Print the logs for a container in a Pod.</p> <pre><code>kubectl logs pod_name\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example_6","title":"Example","text":"<pre><code>kubectl logs nginx-deployment-7fb8d6b9b-8qj7g\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#example-yaml-files","title":"Example YAML Files","text":""},{"location":"container/Kubernetes/quick_guide/#pod-definition","title":"Pod Definition","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx\n    ports:\n    - containerPort: 80\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#deployment-definition","title":"Deployment Definition","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#service-definition","title":"Service Definition","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: LoadBalancer\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#namespaces","title":"Namespaces","text":"<p>Namespaces help you organize resources in a cluster.</p>"},{"location":"container/Kubernetes/quick_guide/#create-a-namespace","title":"Create a Namespace","text":"<pre><code>kubectl create namespace my-namespace\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#list-namespaces","title":"List Namespaces","text":"<pre><code>kubectl get namespaces\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#use-a-namespace","title":"Use a Namespace","text":"<pre><code>kubectl config set-context --current --namespace=my-namespace\n</code></pre>"},{"location":"container/Kubernetes/quick_guide/#summary","title":"Summary","text":"<p>This tutorial introduces fundamental Kubernetes concepts and commands. Kubernetes simplifies container orchestration and management, making it easier to deploy and scale applications. For more detailed information, refer to the official Kubernetes documentation.</p>"},{"location":"container/Podman/","title":"Welcome to Podman Notes","text":"<p>Welcome to the Podman notes, your resource for learning about Podman. For complete and official documentation, visit the Podman Documentation Page.</p> <ol> <li>Quick Guide: Start with a concise guide to understanding Podman\u2019s features, commands, and usage. This section offers an overview to help you get up to speed with Podman\u2019s container management capabilities.</li> </ol> <p>Explore the guide to get a grasp of Podman and how it can be used as an alternative to other container tools!</p>"},{"location":"container/Podman/quick_guide/","title":"Podman Tutorial","text":""},{"location":"container/Podman/quick_guide/#overview","title":"Overview","text":"<p>Podman is an open-source container management tool designed to be a drop-in replacement for Docker. It allows you to manage containers and pods without requiring a daemon.</p>"},{"location":"container/Podman/quick_guide/#installing-podman","title":"Installing Podman","text":""},{"location":"container/Podman/quick_guide/#on-linux","title":"On Linux","text":"<p>To install Podman on a Linux system, use the package manager specific to your distribution:</p>"},{"location":"container/Podman/quick_guide/#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code>sudo apt update\nsudo apt install -y podman\n</code></pre>"},{"location":"container/Podman/quick_guide/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install -y podman\n</code></pre>"},{"location":"container/Podman/quick_guide/#centosrhel","title":"CentOS/RHEL","text":"<pre><code>sudo yum install -y podman\n</code></pre>"},{"location":"container/Podman/quick_guide/#on-macos","title":"On macOS","text":"<p>To install Podman on macOS, you can use Homebrew:</p> <pre><code>brew install podman\n</code></pre>"},{"location":"container/Podman/quick_guide/#on-windows","title":"On Windows","text":"<p>To install Podman on Windows, you can use the Podman Windows installer available from the Podman releases page.</p>"},{"location":"container/Podman/quick_guide/#basic-podman-commands","title":"Basic Podman Commands","text":""},{"location":"container/Podman/quick_guide/#1-podman-version","title":"1. <code>podman --version</code>","text":"<p>Check the installed Podman version.</p> <pre><code>podman --version\n</code></pre>"},{"location":"container/Podman/quick_guide/#example","title":"Example","text":"<pre><code>podman version 4.0.0\n</code></pre>"},{"location":"container/Podman/quick_guide/#2-podman-pull","title":"2. <code>podman pull</code>","text":"<p>Download a container image from a registry.</p> <pre><code>podman pull image_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_1","title":"Example","text":"<pre><code>podman pull nginx\n</code></pre>"},{"location":"container/Podman/quick_guide/#3-podman-images","title":"3. <code>podman images</code>","text":"<p>List all available container images on your system.</p> <pre><code>podman images\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_2","title":"Example","text":"<pre><code>REPOSITORY          TAG       IMAGE ID       CREATED       SIZE\nnginx               latest    f6b22f3dfc8f   2 weeks ago   133MB\n</code></pre>"},{"location":"container/Podman/quick_guide/#4-podman-rmi","title":"4. <code>podman rmi</code>","text":"<p>Remove a container image.</p> <pre><code>podman rmi image_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_3","title":"Example","text":"<pre><code>podman rmi nginx\n</code></pre>"},{"location":"container/Podman/quick_guide/#5-podman-run","title":"5. <code>podman run</code>","text":"<p>Run a container from an image.</p> <pre><code>podman run [OPTIONS] image_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_4","title":"Example","text":"<pre><code>podman run -d -p 80:80 nginx\n</code></pre>"},{"location":"container/Podman/quick_guide/#6-podman-ps","title":"6. <code>podman ps</code>","text":"<p>List running containers.</p> <pre><code>podman ps\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_5","title":"Example","text":"<pre><code>CONTAINER ID  IMAGE     COMMAND                  CREATED         STATUS         PORTS                NAMES\nabcd1234efgh  nginx     \"nginx -g 'daemon of\u2026\"   10 minutes ago  Up 10 minutes  0.0.0.0:80-&gt;80/tcp   quizzical_hermann\n</code></pre>"},{"location":"container/Podman/quick_guide/#7-podman-stop","title":"7. <code>podman stop</code>","text":"<p>Stop a running container.</p> <pre><code>podman stop container_id\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_6","title":"Example","text":"<pre><code>podman stop abcd1234efgh\n</code></pre>"},{"location":"container/Podman/quick_guide/#8-podman-rm","title":"8. <code>podman rm</code>","text":"<p>Remove a stopped container.</p> <pre><code>podman rm container_id\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_7","title":"Example","text":"<pre><code>podman rm abcd1234efgh\n</code></pre>"},{"location":"container/Podman/quick_guide/#9-podman-exec","title":"9. <code>podman exec</code>","text":"<p>Execute a command inside a running container.</p> <pre><code>podman exec -it container_id command\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_8","title":"Example","text":"<pre><code>podman exec -it abcd1234efgh /bin/bash\n</code></pre>"},{"location":"container/Podman/quick_guide/#working-with-pods","title":"Working with Pods","text":"<p>A Pod is a group of one or more containers that share the same network namespace.</p>"},{"location":"container/Podman/quick_guide/#1-podman-pod-create","title":"1. <code>podman pod create</code>","text":"<p>Create a new pod.</p> <pre><code>podman pod create --name pod_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_9","title":"Example","text":"<pre><code>podman pod create --name my-pod\n</code></pre>"},{"location":"container/Podman/quick_guide/#2-podman-pod-ps","title":"2. <code>podman pod ps</code>","text":"<p>List all pods.</p> <pre><code>podman pod ps\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_10","title":"Example","text":"<pre><code>POD ID        NAME    STATUS    CREATED         INFRA ID\nabcd1234efgh  my-pod  Running   10 minutes ago  efgh5678ijkl\n</code></pre>"},{"location":"container/Podman/quick_guide/#3-podman-pod-stop","title":"3. <code>podman pod stop</code>","text":"<p>Stop a running pod.</p> <pre><code>podman pod stop pod_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_11","title":"Example","text":"<pre><code>podman pod stop my-pod\n</code></pre>"},{"location":"container/Podman/quick_guide/#4-podman-pod-rm","title":"4. <code>podman pod rm</code>","text":"<p>Remove a pod.</p> <pre><code>podman pod rm pod_name\n</code></pre>"},{"location":"container/Podman/quick_guide/#example_12","title":"Example","text":"<pre><code>podman pod rm my-pod\n</code></pre>"},{"location":"container/Podman/quick_guide/#example-yaml-files","title":"Example YAML Files","text":""},{"location":"container/Podman/quick_guide/#container-definition","title":"Container Definition","text":"<p>Podman does not use YAML files natively for container definitions. Instead, you use <code>podman run</code> commands or create Podman-compatible configuration files manually.</p>"},{"location":"container/Podman/quick_guide/#pod-definition","title":"Pod Definition","text":"<p>Podman supports Kubernetes YAML files for defining pods.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx\n    ports:\n    - containerPort: 80\n</code></pre> <p>To apply the YAML configuration, use:</p> <pre><code>podman play kube pod.yaml\n</code></pre>"},{"location":"container/Podman/quick_guide/#summary","title":"Summary","text":"<p>This tutorial introduces fundamental Podman commands and concepts. Podman provides a powerful and flexible way to manage containers and pods without a central daemon. For more detailed information, refer to the official Podman documentation.</p>"},{"location":"data_architecture/","title":"Welcome to Database and Data Warehouse notes.","text":""},{"location":"data_architecture/#contents","title":"Contents","text":"<ol> <li>Data Warehouse</li> <li>Database Management Systems</li> <li>SQL</li> <li>No SQL</li> </ol>"},{"location":"data_architecture/database/","title":"Welcome to Database Management Systems notes.","text":""},{"location":"data_architecture/database/#contents","title":"Contents","text":"<ol> <li>Basics</li> </ol>"},{"location":"data_architecture/database/basics/","title":"Database Management Systems (DBMS) Tutorial","text":""},{"location":"data_architecture/database/basics/#overview","title":"Overview","text":"<p>A Database Management System (DBMS) is software that facilitates the creation, manipulation, and management of databases. It provides an interface for interacting with the data stored in databases, ensuring data integrity, security, and efficient retrieval.</p>"},{"location":"data_architecture/database/basics/#database-basics","title":"Database Basics","text":""},{"location":"data_architecture/database/basics/#what-is-a-database","title":"What is a Database?","text":"<p>A database is an organized collection of data, typically stored and accessed electronically from a computer system. Databases are managed by Database Management Systems (DBMS), which provide tools for storing, querying, and manipulating data.</p>"},{"location":"data_architecture/database/basics/#types-of-databases","title":"Types of Databases","text":"<ul> <li>Relational Databases: Store data in tables with rows and columns. Examples: MySQL, PostgreSQL, Oracle.</li> <li>NoSQL Databases: Designed for unstructured data and can be document-based, key-value pairs, wide-column stores, or graph databases. Examples: MongoDB, Redis, Cassandra.</li> </ul>"},{"location":"data_architecture/database/basics/#relational-databases","title":"Relational Databases","text":""},{"location":"data_architecture/database/basics/#tables","title":"Tables","text":"<p>In a relational database, data is organized into tables. Each table consists of rows and columns.</p>"},{"location":"data_architecture/database/basics/#example","title":"Example","text":"<p>Table: Employees</p> EmployeeID FirstName LastName Department 1 John Doe HR 2 Jane Smith IT"},{"location":"data_architecture/database/basics/#relationships","title":"Relationships","text":"<p>Tables can have relationships with other tables using keys:</p> <ul> <li>Primary Key: A unique identifier for each row in a table.</li> <li>Foreign Key: A key used to link two tables together.</li> </ul>"},{"location":"data_architecture/database/basics/#example_1","title":"Example","text":"<p>Table: Departments</p> DepartmentID DepartmentName 1 HR 2 IT <p>Table: Employees</p> EmployeeID FirstName LastName DepartmentID 1 John Doe 1 2 Jane Smith 2 <p>In this example, <code>DepartmentID</code> in the <code>Employees</code> table is a foreign key referencing the <code>Departments</code> table.</p>"},{"location":"data_architecture/database/basics/#nosql-databases","title":"NoSQL Databases","text":""},{"location":"data_architecture/database/basics/#document-based-databases","title":"Document-Based Databases","text":"<p>Store data in JSON-like documents.</p>"},{"location":"data_architecture/database/basics/#example-mongodb","title":"Example (MongoDB)","text":"<pre><code>{\n  \"EmployeeID\": 1,\n  \"FirstName\": \"John\",\n  \"LastName\": \"Doe\",\n  \"Department\": \"HR\"\n}\n</code></pre>"},{"location":"data_architecture/database/basics/#key-value-stores","title":"Key-Value Stores","text":"<p>Store data as key-value pairs.</p>"},{"location":"data_architecture/database/basics/#example-redis","title":"Example (Redis)","text":"<pre><code>SET Employee:1 \"John Doe, HR\"\nGET Employee:1\n</code></pre>"},{"location":"data_architecture/database/basics/#column-family-stores","title":"Column-Family Stores","text":"<p>Store data in columns rather than rows.</p>"},{"location":"data_architecture/database/basics/#example-cassandra","title":"Example (Cassandra)","text":"<pre><code>CREATE TABLE employees (\n  employee_id UUID PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  department TEXT\n);\n</code></pre>"},{"location":"data_architecture/database/basics/#graph-databases","title":"Graph Databases","text":"<p>Store data as nodes and edges.</p>"},{"location":"data_architecture/database/basics/#example-neo4j","title":"Example (Neo4j)","text":"<pre><code>CREATE (john:Person {name: \"John Doe\", department: \"HR\"})\nCREATE (jane:Person {name: \"Jane Smith\", department: \"IT\"})\nCREATE (john)-[:WORKS_IN]-&gt;(hr:Department {name: \"HR\"})\nCREATE (jane)-[:WORKS_IN]-&gt;(it:Department {name: \"IT\"})\n</code></pre>"},{"location":"data_architecture/database/basics/#normalization","title":"Normalization","text":"<p>Normalization is the process of organizing data to reduce redundancy and improve data integrity. It involves dividing a database into two or more tables and defining relationships between them.</p>"},{"location":"data_architecture/database/basics/#normal-forms","title":"Normal Forms","text":"<ul> <li>First Normal Form (1NF): Ensure that each column contains atomic values and each row is unique.</li> <li>Second Normal Form (2NF): Ensure that all non-key attributes are fully functionally dependent on the primary key.</li> <li>Third Normal Form (3NF): Ensure that all the attributes are functionally dependent only on the primary key.</li> </ul>"},{"location":"data_architecture/database/basics/#indexes","title":"Indexes","text":"<p>Indexes are used to speed up the retrieval of rows by creating a quick lookup for columns.</p>"},{"location":"data_architecture/database/basics/#example_2","title":"Example","text":"<pre><code>CREATE INDEX idx_lastname ON Employees (LastName);\n</code></pre>"},{"location":"data_architecture/database/basics/#transactions","title":"Transactions","text":"<p>A transaction is a sequence of operations performed as a single logical unit of work. Transactions ensure data integrity and consistency.</p>"},{"location":"data_architecture/database/basics/#acid-properties","title":"ACID Properties","text":"<ul> <li>Atomicity: All operations in a transaction are completed; otherwise, the transaction is aborted.</li> <li>Consistency: A transaction brings the database from one valid state to another.</li> <li>Isolation: Transactions are isolated from each other.</li> <li>Durability: Once a transaction is committed, it remains so, even in the case of a system failure.</li> </ul>"},{"location":"data_architecture/database/basics/#example_3","title":"Example","text":"<pre><code>START TRANSACTION;\n\nUPDATE Accounts SET balance = balance - 100 WHERE account_id = 1;\nUPDATE Accounts SET balance = balance + 100 WHERE account_id = 2;\n\nCOMMIT;\n</code></pre>"},{"location":"data_architecture/database/basics/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Regular backups are crucial for protecting data from loss. Recovery involves restoring data from backups.</p>"},{"location":"data_architecture/database/basics/#backup-example","title":"Backup Example","text":"<pre><code>mysqldump -u username -p database_name &gt; backup.sql\n</code></pre>"},{"location":"data_architecture/database/basics/#recovery-example","title":"Recovery Example","text":"<pre><code>mysql -u username -p database_name &lt; backup.sql\n</code></pre>"},{"location":"data_architecture/database/basics/#summary","title":"Summary","text":"<p>This document provides an overview of essential database concepts, including relational and NoSQL databases, SQL commands, normalization, indexing, transactions, and backup and recovery. For more detailed information, refer to the documentation of specific database systems or additional resources.</p>"},{"location":"data_architecture/datawarehouse/","title":"Welcome to Data Warehouse notes.","text":""},{"location":"data_architecture/datawarehouse/#contents","title":"Contents","text":"<ol> <li>Basics</li> </ol>"},{"location":"data_architecture/datawarehouse/basics/","title":"Data Warehouse Tutorial","text":""},{"location":"data_architecture/datawarehouse/basics/#overview","title":"Overview","text":"<p>A data warehouse is a centralized repository designed for storing, analyzing, and querying large volumes of data. It is optimized for complex queries and reporting and often integrates data from multiple sources. Data warehousing is a critical component in business intelligence and data analytics.</p>"},{"location":"data_architecture/datawarehouse/basics/#introduction-to-data-warehousing","title":"Introduction to Data Warehousing","text":""},{"location":"data_architecture/datawarehouse/basics/#what-is-a-data-warehouse","title":"What is a Data Warehouse?","text":"<p>A data warehouse is a system used for reporting and data analysis. It centralizes data from various sources into a single repository, allowing for efficient querying and analysis.</p>"},{"location":"data_architecture/datawarehouse/basics/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Subject-Oriented: Organized around major subjects (e.g., sales, finance).</li> <li>Integrated: Data is consolidated from multiple sources.</li> <li>Time-Variant: Historical data is maintained for analysis over time.</li> <li>Non-Volatile: Data is stable and not changed frequently.</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#architecture","title":"Architecture","text":""},{"location":"data_architecture/datawarehouse/basics/#components","title":"Components","text":"<ol> <li>Data Source Layer: Systems where raw data is collected (e.g., operational databases, external data sources).</li> <li>ETL Layer: Extract, Transform, Load processes that move data from source systems to the data warehouse.</li> <li>Data Warehouse Layer: The central repository where data is stored and organized.</li> <li>Presentation Layer: Tools and applications used for reporting and analysis.</li> </ol>"},{"location":"data_architecture/datawarehouse/basics/#example-diagram","title":"Example Diagram","text":"<pre><code>+------------------+       +--------------+       +-------------------+\n| Data Source 1    |       |              |       |                   |\n| Data Source 2    | ----&gt; | ETL Process   | ----&gt; | Data Warehouse    |\n| Data Source N    |       |              |       |                   |\n+------------------+       +--------------+       +-------------------+\n                                             |\n                                             |\n                                +-------------------------+\n                                | Reporting and Analysis  |\n                                | Tools (e.g., BI tools)  |\n                                +-------------------------+\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#etl-process","title":"ETL Process","text":""},{"location":"data_architecture/datawarehouse/basics/#extract","title":"Extract","text":"<p>Data is collected from various source systems.</p>"},{"location":"data_architecture/datawarehouse/basics/#example","title":"Example","text":"<pre><code>-- Extract data from a source database\nSELECT * FROM source_table;\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#transform","title":"Transform","text":"<p>Data is cleaned, enriched, and transformed into the desired format.</p>"},{"location":"data_architecture/datawarehouse/basics/#example_1","title":"Example","text":"<pre><code>-- Transform data (e.g., date format conversion)\nSELECT\n    employee_id,\n    first_name,\n    last_name,\n    TO_DATE(hire_date, 'MM/DD/YYYY') AS hire_date\nFROM source_table;\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#load","title":"Load","text":"<p>Transformed data is loaded into the data warehouse.</p>"},{"location":"data_architecture/datawarehouse/basics/#example_2","title":"Example","text":"<pre><code>-- Load data into the data warehouse\nINSERT INTO target_table (employee_id, first_name, last_name, hire_date)\nSELECT employee_id, first_name, last_name, hire_date\nFROM transformed_data;\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#data-modeling","title":"Data Modeling","text":""},{"location":"data_architecture/datawarehouse/basics/#fact-and-dimension-tables","title":"Fact and Dimension Tables","text":"<ul> <li>Fact Table: Contains quantitative data for analysis (e.g., sales figures).</li> <li>Dimension Table: Contains descriptive attributes related to facts (e.g., product details).</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#example_3","title":"Example","text":"<p>Fact Table: Sales</p> SaleID ProductID Quantity TotalAmount 1 101 5 100.00 2 102 3 75.00 <p>Dimension Table: Products</p> ProductID ProductName Category 101 Widget A Gadgets 102 Widget B Gizmos"},{"location":"data_architecture/datawarehouse/basics/#star-schema","title":"Star Schema","text":""},{"location":"data_architecture/datawarehouse/basics/#definition","title":"Definition","text":"<p>The star schema is a data modeling technique that organizes data into fact tables and dimension tables. It resembles a star with the fact table at the center and dimension tables surrounding it.</p>"},{"location":"data_architecture/datawarehouse/basics/#example-diagram_1","title":"Example Diagram","text":"<pre><code>              +-------------+\n              |  Product    |\n              | Dimension   |\n              +-------------+\n                    |\n                    |\n+-------------+     +-------------+     +-------------+\n|  Sales      |     |  Customer   |     |  Date       |\n|  Fact Table |     | Dimension   |     | Dimension   |\n+-------------+     +-------------+     +-------------+\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#snowflake-schema","title":"Snowflake Schema","text":""},{"location":"data_architecture/datawarehouse/basics/#definition_1","title":"Definition","text":"<p>The snowflake schema is a more normalized form of the star schema. Dimension tables are split into multiple related tables, creating a structure that resembles a snowflake.</p>"},{"location":"data_architecture/datawarehouse/basics/#example-diagram_2","title":"Example Diagram","text":"<pre><code>                +-------------+\n                |  Product    |\n                | Dimension   |\n                +-------------+\n                      |\n                      |\n        +-------------+-------------+\n        |                           |\n+-------------+                +-------------+\n|  Category   |                |  Subcategory|\n|  Dimension  |                |  Dimension  |\n+-------------+                +-------------+\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#data-warehouse-tools","title":"Data Warehouse Tools","text":""},{"location":"data_architecture/datawarehouse/basics/#popular-tools","title":"Popular Tools","text":"<ul> <li>Amazon Redshift: A fully managed data warehouse service in the cloud.</li> <li>Google BigQuery: A serverless, highly scalable data warehouse service.</li> <li>Snowflake: A cloud-based data warehouse platform.</li> <li>Microsoft Azure Synapse Analytics: A cloud-based integrated analytics service.</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#example_4","title":"Example","text":"<p>Query using Amazon Redshift</p> <pre><code>-- Query to retrieve sales data from Amazon Redshift\nSELECT\n    product_name,\n    SUM(quantity) AS total_quantity,\n    SUM(total_amount) AS total_sales\nFROM sales_fact\nJOIN product_dimension ON sales_fact.product_id = product_dimension.product_id\nGROUP BY product_name;\n</code></pre>"},{"location":"data_architecture/datawarehouse/basics/#best-practices","title":"Best Practices","text":""},{"location":"data_architecture/datawarehouse/basics/#data-quality","title":"Data Quality","text":"<ul> <li>Ensure Data Accuracy: Regularly validate and clean data.</li> <li>Implement Data Governance: Define and enforce data policies.</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Indexing: Create indexes on frequently queried columns.</li> <li>Partitioning: Divide large tables into smaller partitions for faster queries.</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#scalability","title":"Scalability","text":"<ul> <li>Choose Scalable Solutions: Use cloud-based data warehouses that can scale with your needs.</li> <li>Monitor Performance: Regularly monitor and optimize performance.</li> </ul>"},{"location":"data_architecture/datawarehouse/basics/#summary","title":"Summary","text":"<p>This document provides an overview of data warehousing concepts, including architecture, ETL processes, data modeling, schema design, popular tools, and best practices. Data warehousing is crucial for integrating and analyzing large volumes of data to support business intelligence and decision-making.</p>"},{"location":"data_architecture/nosql/","title":"Welcome to No SQL notes.","text":""},{"location":"data_architecture/nosql/#contents","title":"Contents","text":"<ol> <li>Basics</li> </ol>"},{"location":"data_architecture/nosql/basics/","title":"NoSQL Databases Tutorial","text":""},{"location":"data_architecture/nosql/basics/#overview","title":"Overview","text":"<p>NoSQL databases are designed to handle unstructured or semi-structured data and provide flexible schemas. They are optimized for specific data models and are often used for large-scale data storage and real-time applications. NoSQL databases include key-value stores, document stores, column-family stores, and graph databases.</p>"},{"location":"data_architecture/nosql/basics/#introduction-to-nosql","title":"Introduction to NoSQL","text":""},{"location":"data_architecture/nosql/basics/#what-is-nosql","title":"What is NoSQL?","text":"<p>NoSQL stands for \"Not Only SQL\" and refers to a variety of database technologies that do not use SQL as their primary interface. NoSQL databases are designed for specific use cases where traditional relational databases may not be as effective, particularly for handling large volumes of diverse data types and high-velocity data.</p>"},{"location":"data_architecture/nosql/basics/#key-features","title":"Key Features","text":"<ul> <li>Scalability: Designed to scale out by distributing data across multiple servers.</li> <li>Flexible Schema: Allows for a more dynamic schema design compared to relational databases.</li> <li>High Performance: Optimized for fast read and write operations.</li> </ul>"},{"location":"data_architecture/nosql/basics/#types-of-nosql-databases","title":"Types of NoSQL Databases","text":""},{"location":"data_architecture/nosql/basics/#key-value-stores","title":"Key-Value Stores","text":"<p>Stores data as key-value pairs. Each key is unique, and its associated value can be anything from a simple string to a complex data structure.</p>"},{"location":"data_architecture/nosql/basics/#examples","title":"Examples","text":"<ul> <li>Redis: An in-memory key-value store known for its performance.</li> <li>Riak: A distributed key-value store with high availability.</li> </ul>"},{"location":"data_architecture/nosql/basics/#example-usage","title":"Example Usage","text":"<pre><code>import redis\n\n# Connect to Redis server\nr = redis.Redis(host='localhost', port=6379, db=0)\n\n# Set a key-value pair\nr.set('name', 'Alice')\n\n# Get the value by key\nname = r.get('name')\nprint(name)  # Output: b'Alice'\n</code></pre>"},{"location":"data_architecture/nosql/basics/#document-stores","title":"Document Stores","text":"<p>Stores data in documents (typically JSON or BSON) that can contain nested fields. This format is useful for handling hierarchical data.</p>"},{"location":"data_architecture/nosql/basics/#examples_1","title":"Examples","text":"<ul> <li>MongoDB: A popular document store that uses JSON-like documents.</li> <li>CouchDB: Stores data in JSON format and provides a RESTful HTTP API.</li> </ul>"},{"location":"data_architecture/nosql/basics/#example-usage_1","title":"Example Usage","text":"<pre><code>from pymongo import MongoClient\n\n# Connect to MongoDB\nclient = MongoClient('localhost', 27017)\ndb = client['mydatabase']\ncollection = db['mycollection']\n\n# Insert a document\ncollection.insert_one({'name': 'Alice', 'age': 30})\n\n# Query a document\ndocument = collection.find_one({'name': 'Alice'})\nprint(document)  # Output: {'_id': ObjectId(...), 'name': 'Alice', 'age': 30}\n</code></pre>"},{"location":"data_architecture/nosql/basics/#column-family-stores","title":"Column-Family Stores","text":"<p>Organizes data into columns rather than rows. Each column family can store rows with a different set of columns.</p>"},{"location":"data_architecture/nosql/basics/#examples_2","title":"Examples","text":"<ul> <li>Apache Cassandra: Designed for high availability and scalability.</li> <li>HBase: Built on top of the Hadoop filesystem and designed for large-scale data storage.</li> </ul>"},{"location":"data_architecture/nosql/basics/#example-usage_2","title":"Example Usage","text":"<pre><code># Inserting data into HBase\necho 'put \"mytable\", \"row1\", \"cf:column\", \"value\"' | hbase shell\n\n# Querying data from HBase\necho 'get \"mytable\", \"row1\"' | hbase shell\n</code></pre>"},{"location":"data_architecture/nosql/basics/#graph-databases","title":"Graph Databases","text":"<p>Optimized for handling data with complex relationships. Stores data as nodes and edges, which are used to represent entities and their relationships.</p>"},{"location":"data_architecture/nosql/basics/#examples_3","title":"Examples","text":"<ul> <li>Neo4j: A popular graph database that supports complex queries on graph data.</li> <li>ArangoDB: A multi-model database with graph capabilities.</li> </ul>"},{"location":"data_architecture/nosql/basics/#example-usage_3","title":"Example Usage","text":"<pre><code>// Neo4j Cypher query to create a node\nCREATE (n:Person {name: 'Alice', age: 30})\n\n// Query to find a node\nMATCH (n:Person {name: 'Alice'}) RETURN n\n</code></pre>"},{"location":"data_architecture/nosql/basics/#use-cases","title":"Use Cases","text":"<ul> <li>Real-Time Analytics: High-speed processing of data streams and real-time analytics.</li> <li>Content Management: Flexible data models for handling diverse content types.</li> <li>Recommendation Engines: Graph databases for managing and querying complex relationships.</li> <li>IoT Data Storage: Handling large volumes of data from Internet of Things (IoT) devices.</li> </ul>"},{"location":"data_architecture/nosql/basics/#comparison-with-sql-databases","title":"Comparison with SQL Databases","text":""},{"location":"data_architecture/nosql/basics/#advantages-of-nosql","title":"Advantages of NoSQL","text":"<ul> <li>Flexibility: Schema-less design allows for more flexible data models.</li> <li>Scalability: Easily scales horizontally by adding more servers.</li> <li>Performance: Optimized for specific use cases and workloads.</li> </ul>"},{"location":"data_architecture/nosql/basics/#disadvantages-of-nosql","title":"Disadvantages of NoSQL","text":"<ul> <li>Consistency: May sacrifice consistency for availability and partition tolerance (CAP theorem).</li> <li>Complexity: Can introduce complexity in managing and querying data.</li> </ul>"},{"location":"data_architecture/nosql/basics/#when-to-use","title":"When to Use","text":"<ul> <li>NoSQL: When dealing with large-scale data, requiring high performance, or when your data model is not well-suited for a relational database.</li> <li>SQL: When data consistency is critical and the data model fits well into a tabular schema.</li> </ul>"},{"location":"data_architecture/nosql/basics/#summary","title":"Summary","text":"<p>This document provides an overview of NoSQL databases, including types (key-value stores, document stores, column-family stores, and graph databases), use cases, and a comparison with SQL databases. NoSQL databases offer flexible schema designs and high performance for specific applications and workloads.</p>"},{"location":"data_architecture/sql/","title":"Welcome to SQL notes.","text":""},{"location":"data_architecture/sql/#contents","title":"Contents","text":"<ol> <li>SQL Basics</li> <li>Important</li> </ol>"},{"location":"data_architecture/sql/basics/","title":"SQL Tutorial","text":""},{"location":"data_architecture/sql/basics/#overview","title":"Overview","text":"<p>SQL (Structured Query Language) is a standard language for managing and manipulating relational databases. This document provides an introduction to SQL commands with examples.</p>"},{"location":"data_architecture/sql/basics/#basic-sql-commands","title":"Basic SQL Commands","text":""},{"location":"data_architecture/sql/basics/#1-select","title":"1. SELECT","text":"<p>The <code>SELECT</code> statement retrieves data from a database.</p> <pre><code>SELECT column1, column2\nFROM table_name;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example","title":"Example","text":"<pre><code>SELECT first_name, last_name\nFROM employees;\n</code></pre>"},{"location":"data_architecture/sql/basics/#2-where","title":"2. WHERE","text":"<p>The <code>WHERE</code> clause filters records based on specific conditions.</p> <pre><code>SELECT column1, column2\nFROM table_name\nWHERE condition;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_1","title":"Example","text":"<pre><code>SELECT first_name, last_name\nFROM employees\nWHERE department = 'Sales';\n</code></pre>"},{"location":"data_architecture/sql/basics/#3-insert-into","title":"3. INSERT INTO","text":"<p>The <code>INSERT INTO</code> statement adds new rows to a table.</p> <pre><code>INSERT INTO table_name (column1, column2)\nVALUES (value1, value2);\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_2","title":"Example","text":"<pre><code>INSERT INTO employees (first_name, last_name, department)\nVALUES ('John', 'Doe', 'Marketing');\n</code></pre>"},{"location":"data_architecture/sql/basics/#4-update","title":"4. UPDATE","text":"<p>The <code>UPDATE</code> statement modifies existing records.</p> <pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2\nWHERE condition;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_3","title":"Example","text":"<pre><code>UPDATE employees\nSET department = 'HR'\nWHERE last_name = 'Doe';\n</code></pre>"},{"location":"data_architecture/sql/basics/#5-delete","title":"5. DELETE","text":"<p>The <code>DELETE</code> statement removes rows from a table.</p> <pre><code>DELETE FROM table_name\nWHERE condition;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_4","title":"Example","text":"<pre><code>DELETE FROM employees\nWHERE last_name = 'Doe';\n</code></pre>"},{"location":"data_architecture/sql/basics/#6-create-table","title":"6. CREATE TABLE","text":"<p>The <code>CREATE TABLE</code> statement creates a new table.</p> <pre><code>CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    ...\n);\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_5","title":"Example","text":"<pre><code>CREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    department VARCHAR(50)\n);\n</code></pre>"},{"location":"data_architecture/sql/basics/#7-alter-table","title":"7. ALTER TABLE","text":"<p>The <code>ALTER TABLE</code> statement modifies an existing table structure.</p> <pre><code>ALTER TABLE table_name\nADD column_name datatype;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_6","title":"Example","text":"<pre><code>ALTER TABLE employees\nADD hire_date DATE;\n</code></pre>"},{"location":"data_architecture/sql/basics/#8-drop-table","title":"8. DROP TABLE","text":"<p>The <code>DROP TABLE</code> statement deletes an entire table.</p> <pre><code>DROP TABLE table_name;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_7","title":"Example","text":"<pre><code>DROP TABLE employees;\n</code></pre>"},{"location":"data_architecture/sql/basics/#9-join","title":"9. JOIN","text":"<p>The <code>JOIN</code> clause combines rows from two or more tables based on a related column.</p>"},{"location":"data_architecture/sql/basics/#inner-join","title":"INNER JOIN","text":"<pre><code>SELECT columns\nFROM table1\nINNER JOIN table2\nON table1.common_column = table2.common_column;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_8","title":"Example","text":"<pre><code>SELECT employees.first_name, departments.department_name\nFROM employees\nINNER JOIN departments\nON employees.department_id = departments.department_id;\n</code></pre>"},{"location":"data_architecture/sql/basics/#left-join","title":"LEFT JOIN","text":"<pre><code>SELECT columns\nFROM table1\nLEFT JOIN table2\nON table1.common_column = table2.common_column;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_9","title":"Example","text":"<pre><code>SELECT employees.first_name, departments.department_name\nFROM employees\nLEFT JOIN departments\nON employees.department_id = departments.department_id;\n</code></pre>"},{"location":"data_architecture/sql/basics/#advanced-sql-commands","title":"Advanced SQL Commands","text":""},{"location":"data_architecture/sql/basics/#1-group-by","title":"1. GROUP BY","text":"<p>The <code>GROUP BY</code> statement groups rows sharing a property.</p> <pre><code>SELECT column1, COUNT(*)\nFROM table_name\nGROUP BY column1;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_10","title":"Example","text":"<pre><code>SELECT department, COUNT(*)\nFROM employees\nGROUP BY department;\n</code></pre>"},{"location":"data_architecture/sql/basics/#2-having","title":"2. HAVING","text":"<p>The <code>HAVING</code> clause filters groups based on conditions.</p> <pre><code>SELECT column1, COUNT(*)\nFROM table_name\nGROUP BY column1\nHAVING COUNT(*) &gt; value;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_11","title":"Example","text":"<pre><code>SELECT department, COUNT(*)\nFROM employees\nGROUP BY department\nHAVING COUNT(*) &gt; 5;\n</code></pre>"},{"location":"data_architecture/sql/basics/#3-order-by","title":"3. ORDER BY","text":"<p>The <code>ORDER BY</code> clause sorts the result set.</p> <pre><code>SELECT column1, column2\nFROM table_name\nORDER BY column1 [ASC|DESC];\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_12","title":"Example","text":"<pre><code>SELECT first_name, last_name\nFROM employees\nORDER BY last_name ASC;\n</code></pre>"},{"location":"data_architecture/sql/basics/#4-distinct","title":"4. DISTINCT","text":"<p>The <code>DISTINCT</code> keyword removes duplicate values.</p> <pre><code>SELECT DISTINCT column1\nFROM table_name;\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_13","title":"Example","text":"<pre><code>SELECT DISTINCT department\nFROM employees;\n</code></pre>"},{"location":"data_architecture/sql/basics/#5-subqueries","title":"5. Subqueries","text":"<p>A subquery is a query within another query.</p> <pre><code>SELECT column1\nFROM table_name\nWHERE column2 = (SELECT column2 FROM table2 WHERE condition);\n</code></pre>"},{"location":"data_architecture/sql/basics/#example_14","title":"Example","text":"<pre><code>SELECT first_name\nFROM employees\nWHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Marketing');\n</code></pre>"},{"location":"data_architecture/sql/basics/#summary","title":"Summary","text":"<p>This tutorial introduces fundamental SQL commands used to interact with relational databases. Understanding these commands will enable you to effectively query and manipulate data. For more advanced features and detailed information, refer to the official SQL documentation.</p>"},{"location":"data_architecture/sql/important/","title":"Order of execution","text":"<pre><code>from -&gt; join -&gt; on -&gt; where -&gt; group by -&gt; having -&gt; select -&gt; order by -&gt;limit\n</code></pre>"},{"location":"languages/","title":"Welcome to Programming Languages notes.","text":"# Concept # Concept # Concept # Concept 1. Python 2. Scala 3. Bash 4. Java 5. JavaScript 6. C 7. C++ 8. Markdown 9. HTML 10. CSS"},{"location":"languages/bash/","title":"Welcome to Shell Scripting notes.","text":""},{"location":"languages/bash/#contents","title":"Contents","text":"<ol> <li>Shell Scripts</li> </ol>"},{"location":"languages/bash/shell_scripting/","title":"Linux Shell Scripting","text":""},{"location":"languages/bash/shell_scripting/#overview","title":"Overview","text":"<p>Shell scripting in Linux allows you to automate tasks and execute commands in a sequence. Shell scripts are written in various shell languages, such as Bash, and can simplify repetitive tasks and system administration.</p>"},{"location":"languages/bash/shell_scripting/#basic-concepts","title":"Basic Concepts","text":""},{"location":"languages/bash/shell_scripting/#shebang","title":"Shebang","text":"<p>The shebang (<code>#!</code>) specifies the interpreter for the script.</p> <pre><code>#!/bin/bash\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example","title":"Example","text":"<pre><code>#!/bin/bash\n# This line tells the system to use the Bash shell to interpret the script\n</code></pre>"},{"location":"languages/bash/shell_scripting/#making-a-script-executable","title":"Making a Script Executable","text":"<p>To make a script executable, use the <code>chmod</code> command:</p> <pre><code>chmod +x &lt;script_name&gt;\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_1","title":"Example","text":"<pre><code>chmod +x myscript.sh\n# Makes 'myscript.sh' executable\n</code></pre>"},{"location":"languages/bash/shell_scripting/#running-a-script","title":"Running a Script","text":"<p>To run a script, specify its path:</p> <pre><code>./&lt;script_name&gt;\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_2","title":"Example","text":"<pre><code>./myscript.sh\n# Executes 'myscript.sh'\n</code></pre>"},{"location":"languages/bash/shell_scripting/#basic-script-elements","title":"Basic Script Elements","text":""},{"location":"languages/bash/shell_scripting/#variables","title":"Variables","text":"<p>Variables store data and can be used throughout the script.</p> <pre><code>variable_name=value\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_3","title":"Example","text":"<pre><code>#!/bin/bash\nname=\"Alice\"\necho \"Hello, $name\"\n# Output: Hello, Alice\n</code></pre>"},{"location":"languages/bash/shell_scripting/#comments","title":"Comments","text":"<p>Comments are added with the <code>#</code> symbol and are ignored by the shell.</p> <pre><code># This is a comment\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_4","title":"Example","text":"<pre><code>#!/bin/bash\n# This script displays a message\necho \"Hello, World!\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#control-structures","title":"Control Structures","text":""},{"location":"languages/bash/shell_scripting/#conditional-statements","title":"Conditional Statements","text":"<p>Use <code>if</code>, <code>then</code>, <code>elif</code>, and <code>else</code> for conditional execution.</p> <pre><code>if [ condition ]; then\n    commands\nelif [ other_condition ]; then\n    other_commands\nelse\n    else_commands\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_5","title":"Example","text":"<pre><code>#!/bin/bash\nif [ -f \"file.txt\" ]; then\n    echo \"file.txt exists.\"\nelse\n    echo \"file.txt does not exist.\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#loops","title":"Loops","text":"<p>Loops iterate over a set of commands.</p>"},{"location":"languages/bash/shell_scripting/#for-loop","title":"<code>for</code> Loop","text":"<pre><code>for variable in list; do\n    commands\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_6","title":"Example","text":"<pre><code>#!/bin/bash\nfor i in 1 2 3 4 5; do\n    echo \"Number $i\"\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#while-loop","title":"<code>while</code> Loop","text":"<pre><code>while [ condition ]; do\n    commands\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_7","title":"Example","text":"<pre><code>#!/bin/bash\ncount=1\nwhile [ $count -le 5 ]; do\n    echo \"Count $count\"\n    ((count++))\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#functions","title":"Functions","text":"<p>Functions group commands and can be called multiple times.</p> <pre><code>function_name() {\n    commands\n}\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_8","title":"Example","text":"<pre><code>#!/bin/bash\ngreet() {\n    echo \"Hello, $1\"\n}\n\ngreet \"Alice\"\n# Output: Hello, Alice\n</code></pre>"},{"location":"languages/bash/shell_scripting/#advanced-topics","title":"Advanced Topics","text":""},{"location":"languages/bash/shell_scripting/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Access arguments passed to the script using <code>$1</code>, <code>$2</code>, etc.</p> <pre><code>#!/bin/bash\necho \"First argument: $1\"\necho \"Second argument: $2\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_9","title":"Example","text":"<pre><code>./myscript.sh arg1 arg2\n# Output:\n# First argument: arg1\n# Second argument: arg2\n</code></pre>"},{"location":"languages/bash/shell_scripting/#redirection-and-pipes","title":"Redirection and Pipes","text":"<ul> <li>Redirection: <code>&gt;</code> to write output to a file, <code>&lt;</code> to read from a file.</li> </ul> <pre><code>echo \"Hello\" &gt; file.txt\ncat &lt; file.txt\n</code></pre> <ul> <li>Pipes: <code>|</code> to pass the output of one command as input to another.</li> </ul> <pre><code>ls | grep \"pattern\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_10","title":"Example","text":"<pre><code>#!/bin/bash\nps aux | grep \"bash\"\n# Lists all processes and filters those with \"bash\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#error-handling","title":"Error Handling","text":"<p>Check the exit status of commands using <code>$?</code>.</p> <pre><code>command\nif [ $? -ne 0 ]; then\n    echo \"Command failed\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_11","title":"Example","text":"<pre><code>#!/bin/bash\nmkdir mydir\nif [ $? -ne 0 ]; then\n    echo \"Failed to create directory\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#summary","title":"Summary","text":"<p>Shell scripting is a powerful way to automate tasks and manage system operations. Understanding variables, control structures, loops, functions, and handling input/output will enable you to write effective scripts. For more detailed information, refer to the Bash manual or other shell scripting resources.</p>"},{"location":"languages/c/","title":"Welcome to C Programming Language Notes","text":"<p>Welcome to the C Programming Language Notes! This resource is designed to guide you through the fundamental and advanced concepts of C, one of the most influential and widely used programming languages in history. Whether you're a beginner or an experienced programmer, these notes aim to provide you with clear explanations, practical examples, and insights into how C is used in various domains like systems programming, embedded systems, and application development.</p>"},{"location":"languages/c/#contents","title":"Contents","text":"<ol> <li>Tutorial    The tutorial section will walk you through every essential aspect of C programming. Starting from the basics like syntax, variables, and control structures, it progresses to more advanced topics such as pointers, memory management, and file I/O. Each topic is supplemented with code examples and exercises to help you practice and reinforce your understanding.</li> </ol>"},{"location":"languages/c/tutorial/","title":"Welcome to C Tutorials","text":"<p>Welcome to the C Tutorials, your comprehensive guide to learning the C programming language. C is a foundational language in the world of programming, renowned for its efficiency, flexibility, and performance in system-level and application development. These tutorials are designed to take you from the basics to more advanced topics, helping you become proficient in C programming and understand its core principles.</p>"},{"location":"languages/c/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    This section covers the essential building blocks of C programming. Learn about variables, data types, operators, control flow, and basic input/output operations. These foundational topics will give you a clear understanding of how C works, preparing you for more complex programming challenges down the road.</li> </ol>"},{"location":"languages/c/tutorial/basics/","title":"C Programming Language Tutorial","text":""},{"location":"languages/c/tutorial/basics/#overview","title":"Overview","text":"<p>C is a powerful, low-level programming language that is widely used for system programming and application development. It provides a good balance between high-level constructs and low-level operations, making it suitable for a wide range of programming tasks.</p>"},{"location":"languages/c/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/c/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple program to print \"Hello, World!\" to the console.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/c/tutorial/basics/#data-types","title":"Data Types","text":""},{"location":"languages/c/tutorial/basics/#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>int: Integer type</li> <li>float: Floating-point type</li> <li>double: Double precision floating-point type</li> <li>char: Character type</li> </ul>"},{"location":"languages/c/tutorial/basics/#example","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int age = 25;\n    float height = 5.9;\n    char initial = 'A';\n\n    printf(\"Age: %d\\n\", age);\n    printf(\"Height: %.1f\\n\", height);\n    printf(\"Initial: %c\\n\", initial);\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/c/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int number = 10;\n\n    if (number &gt; 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (number &lt; 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is zero.\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#switch-statement","title":"Switch Statement","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int day = 3;\n\n    switch (day) {\n        case 1:\n            printf(\"Monday\\n\");\n            break;\n        case 2:\n            printf(\"Tuesday\\n\");\n            break;\n        case 3:\n            printf(\"Wednesday\\n\");\n            break;\n        default:\n            printf(\"Invalid day\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#functions","title":"Functions","text":""},{"location":"languages/c/tutorial/basics/#function-declaration-and-definition","title":"Function Declaration and Definition","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid greet() {\n    printf(\"Hello, welcome to C programming!\\n\");\n}\n\nint main() {\n    greet();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#function-with-parameters","title":"Function with Parameters","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(5, 7);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#arrays","title":"Arrays","text":""},{"location":"languages/c/tutorial/basics/#array-declaration-and-initialization","title":"Array Declaration and Initialization","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int numbers[5] = {1, 2, 3, 4, 5};\n\n    for (int i = 0; i &lt; 5; i++) {\n        printf(\"Number[%d]: %d\\n\", i, numbers[i]);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#pointers","title":"Pointers","text":""},{"location":"languages/c/tutorial/basics/#pointer-basics","title":"Pointer Basics","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int num = 10;\n    int *ptr = &amp;num;\n\n    printf(\"Value of num: %d\\n\", num);\n    printf(\"Address of num: %p\\n\", (void *)ptr);\n    printf(\"Value at address ptr: %d\\n\", *ptr);\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#structures","title":"Structures","text":""},{"location":"languages/c/tutorial/basics/#defining-and-using-structures","title":"Defining and Using Structures","text":"<pre><code>#include &lt;stdio.h&gt;\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nint main() {\n    struct Person person1;\n\n    // Assign values\n    strcpy(person1.name, \"Alice\");\n    person1.age = 30;\n\n    // Print values\n    printf(\"Name: %s\\n\", person1.name);\n    printf(\"Age: %d\\n\", person1.age);\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#file-io","title":"File I/O","text":""},{"location":"languages/c/tutorial/basics/#reading-from-a-file","title":"Reading from a File","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    FILE *file = fopen(\"example.txt\", \"r\");\n    char buffer[100];\n\n    if (file == NULL) {\n        printf(\"Error opening file.\\n\");\n        return 1;\n    }\n\n    while (fgets(buffer, sizeof(buffer), file)) {\n        printf(\"%s\", buffer);\n    }\n\n    fclose(file);\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#writing-to-a-file","title":"Writing to a File","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    FILE *file = fopen(\"output.txt\", \"w\");\n\n    if (file == NULL) {\n        printf(\"Error opening file.\\n\");\n        return 1;\n    }\n\n    fprintf(file, \"This is a test file.\\n\");\n    fclose(file);\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of C programming. C is a versatile language that is foundational for understanding many other programming languages. For further learning, refer to The C Programming Language by Kernighan and Ritchie.</p>"},{"location":"languages/c%2B%2B/","title":"Welcome to C++ Programming Language Notes","text":"<p>Welcome to the comprehensive guide for mastering C++, a powerful, high-performance programming language widely used for developing software in domains like game development, real-time simulations, system software, and more. Whether you're a beginner just starting or an experienced developer looking to sharpen your skills, these notes are designed to help you gain a deep understanding of C++ and its core concepts.</p>"},{"location":"languages/c%2B%2B/#contents","title":"Contents","text":"<ol> <li>Tutorial    This section serves as your step-by-step guide to learning C++. It covers everything from basic syntax and data types to advanced topics like memory management, object-oriented programming, and template metaprogramming. Dive into practical examples and exercises that will solidify your knowledge and prepare you for real-world C++ development.</li> </ol>"},{"location":"languages/c%2B%2B/tutorial/","title":"Welcome to C++ Tutorials","text":"<p>Welcome to the C++ Tutorials, your go-to resource for learning the foundational and advanced aspects of C++. Whether you\u2019re a beginner or looking to enhance your C++ knowledge, these tutorials are crafted to guide you through the language's intricacies. You\u2019ll find detailed explanations, practical examples, and best practices to help you grasp the core concepts of C++ programming.</p>"},{"location":"languages/c%2B%2B/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    Start here to build a strong foundation in C++. This section introduces the fundamental concepts, including variables, data types, control structures, functions, and basic input/output. Perfect for those new to programming or looking for a refresher, these lessons will give you a solid starting point for mastering C++.</li> </ol>"},{"location":"languages/c%2B%2B/tutorial/basics/","title":"C++ Programming Language Tutorial","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#overview","title":"Overview","text":"<p>C++ is a high-level programming language that includes object-oriented, procedural, and generic programming features. It is widely used for system/software development, game development, and performance-critical applications.</p>"},{"location":"languages/c%2B%2B/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple program to print \"Hello, World!\" to the console.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/c%2B%2B/tutorial/basics/#data-types","title":"Data Types","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>int: Integer type</li> <li>float: Floating-point type</li> <li>double: Double precision floating-point type</li> <li>char: Character type</li> <li>bool: Boolean type</li> </ul>"},{"location":"languages/c%2B%2B/tutorial/basics/#example","title":"Example","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int age = 25;\n    float height = 5.9f;\n    double weight = 70.5;\n    char initial = 'A';\n    bool isStudent = true;\n\n    std::cout &lt;&lt; \"Age: \" &lt;&lt; age &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Height: \" &lt;&lt; height &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Weight: \" &lt;&lt; weight &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Initial: \" &lt;&lt; initial &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Is Student: \" &lt;&lt; isStudent &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int number = 10;\n\n    if (number &gt; 0) {\n        std::cout &lt;&lt; \"The number is positive.\" &lt;&lt; std::endl;\n    } else if (number &lt; 0) {\n        std::cout &lt;&lt; \"The number is negative.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"The number is zero.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#switch-statement","title":"Switch Statement","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int day = 3;\n\n    switch (day) {\n        case 1:\n            std::cout &lt;&lt; \"Monday\" &lt;&lt; std::endl;\n            break;\n        case 2:\n            std::cout &lt;&lt; \"Tuesday\" &lt;&lt; std::endl;\n            break;\n        case 3:\n            std::cout &lt;&lt; \"Wednesday\" &lt;&lt; std::endl;\n            break;\n        default:\n            std::cout &lt;&lt; \"Invalid day\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#functions","title":"Functions","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#function-declaration-and-definition","title":"Function Declaration and Definition","text":"<pre><code>#include &lt;iostream&gt;\n\nvoid greet() {\n    std::cout &lt;&lt; \"Hello, welcome to C++ programming!\" &lt;&lt; std::endl;\n}\n\nint main() {\n    greet();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#function-with-parameters","title":"Function with Parameters","text":"<pre><code>#include &lt;iostream&gt;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(5, 7);\n    std::cout &lt;&lt; \"Sum: \" &lt;&lt; sum &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#defining-a-class","title":"Defining a Class","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    void introduce() {\n        std::cout &lt;&lt; \"Hi, my name is \" &lt;&lt; name &lt;&lt; \" and I am \" &lt;&lt; age &lt;&lt; \" years old.\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Person person1;\n    person1.name = \"Alice\";\n    person1.age = 30;\n\n    person1.introduce();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#inheritance-and-polymorphism","title":"Inheritance and Polymorphism","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#inheritance-example","title":"Inheritance Example","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Animal {\npublic:\n    void speak() {\n        std::cout &lt;&lt; \"Animal makes a sound.\" &lt;&lt; std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() {\n        std::cout &lt;&lt; \"Dog barks.\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Dog myDog;\n    myDog.speak();  // Calls the Dog's speak method\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#polymorphism-example","title":"Polymorphism Example","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Base {\npublic:\n    virtual void show() {\n        std::cout &lt;&lt; \"Base class\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    void show() override {\n        std::cout &lt;&lt; \"Derived class\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Base* ptr;\n    Derived derivedObj;\n    ptr = &amp;derivedObj;\n\n    ptr-&gt;show();  // Calls Derived's show method\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#templates","title":"Templates","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#function-templates","title":"Function Templates","text":"<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nT max(T a, T b) {\n    return (a &gt; b) ? a : b;\n}\n\nint main() {\n    std::cout &lt;&lt; \"Max of 3 and 7 is \" &lt;&lt; max(3, 7) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Max of 3.5 and 2.1 is \" &lt;&lt; max(3.5, 2.1) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#class-templates","title":"Class Templates","text":"<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nclass MyArray {\nprivate:\n    T* arr;\n    int size;\n\npublic:\n    MyArray(int s) : size(s) {\n        arr = new T[size];\n    }\n\n    void setValue(int index, T value) {\n        if (index &lt; size) {\n            arr[index] = value;\n        }\n    }\n\n    T getValue(int index) {\n        if (index &lt; size) {\n            return arr[index];\n        }\n        return T();\n    }\n\n    ~MyArray() {\n        delete[] arr;\n    }\n};\n\nint main() {\n    MyArray&lt;int&gt; intArray(5);\n    intArray.setValue(0, 10);\n    std::cout &lt;&lt; \"Value at index 0: \" &lt;&lt; intArray.getValue(0) &lt;&lt; std::endl;\n\n    MyArray&lt;std::string&gt; strArray(3);\n    strArray.setValue(0, \"Hello\");\n    std::cout &lt;&lt; \"Value at index 0: \" &lt;&lt; strArray.getValue(0) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#file-io","title":"File I/O","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#reading-from-a-file","title":"Reading from a File","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nint main() {\n    std::ifstream infile(\"example.txt\");\n    std::string line;\n\n    if (!infile) {\n        std::cerr &lt;&lt; \"Error opening file.\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    while (std::getline(infile, line)) {\n        std::cout &lt;&lt; line &lt;&lt; std::endl;\n    }\n\n    infile.close();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#writing-to-a-file","title":"Writing to a File","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream outfile(\"output.txt\");\n\n    if (!outfile) {\n        std::cerr &lt;&lt; \"Error opening file.\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    outfile &lt;&lt; \"This is a test file.\" &lt;&lt; std::endl;\n    outfile.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#standard-template-library-stl","title":"Standard Template Library (STL)","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#using-vector","title":"Using <code>vector</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n\n    for (int num : numbers) {\n        std::cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#using-map","title":"Using <code>map</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n    std::map&lt;std::string, int&gt; ageMap;\n\n    ageMap[\"Alice\"] = 30;\n    ageMap[\"Bob\"] = 25;\n\n    for (const auto&amp; pair : ageMap) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \" is \" &lt;&lt; pair.second &lt;&lt; \" years old.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of C++ programming. C++ is a versatile language that supports multiple programming paradigms and is widely used in various domains. For further learning, refer to The C++ Programming Language by Bjarne Stroustrup.</p>"},{"location":"languages/html/","title":"Welcome to HTML Language Notes","text":"<p>Welcome to the HTML Language Notes! HTML (Hypertext Markup Language) is the backbone of the web, used for creating and structuring web pages and web applications. This guide is tailored for beginners and those looking to deepen their understanding of HTML. It covers everything from basic tags and structure to more advanced concepts like forms, multimedia integration, and semantic HTML, helping you build a solid foundation in web development.</p>"},{"location":"languages/html/#contents","title":"Contents","text":"<ol> <li>Tutorial    The tutorial section takes you step-by-step through HTML, starting from the basic structure of a webpage, including elements like headings, paragraphs, and links. As you progress, you\u2019ll explore tables, forms, multimedia elements, and best practices for writing clean, semantic HTML. Each tutorial comes with examples and exercises to help you practice and master HTML.</li> </ol>"},{"location":"languages/html/tutorial/","title":"Welcome to HTML Tutorials","text":"<p>Welcome to the HTML Tutorials, your comprehensive guide to learning the fundamentals of HTML (Hypertext Markup Language). Whether you\u2019re new to web development or looking to solidify your understanding of HTML, these tutorials will guide you through the essentials and help you build well-structured, accessible web pages.</p>"},{"location":"languages/html/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    Start here to learn the core building blocks of HTML. This section covers the essential elements of a webpage, including how to create headings, paragraphs, links, and lists. You'll also explore the structure of an HTML document, best practices for using semantic tags, and how to ensure your webpages are accessible and SEO-friendly.</li> </ol>"},{"location":"languages/html/tutorial/basics/","title":"HTML Programming Language Tutorial","text":""},{"location":"languages/html/tutorial/basics/#overview","title":"Overview","text":"<p>HTML (Hypertext Markup Language) is the standard language used to create and design web pages. It structures content on the web by using a series of elements and tags.</p>"},{"location":"languages/html/tutorial/basics/#basic-structure","title":"Basic Structure","text":"<p>The basic structure of an HTML document includes the <code>&lt;!DOCTYPE html&gt;</code>, <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#headings-and-paragraphs","title":"Headings and Paragraphs","text":""},{"location":"languages/html/tutorial/basics/#headings","title":"Headings","text":"<p>HTML provides six levels of headings, from <code>&lt;h1&gt;</code> (largest) to <code>&lt;h6&gt;</code> (smallest).</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Headings Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;This is a heading level 1&lt;/h1&gt;\n    &lt;h2&gt;This is a heading level 2&lt;/h2&gt;\n    &lt;h3&gt;This is a heading level 3&lt;/h3&gt;\n    &lt;h4&gt;This is a heading level 4&lt;/h4&gt;\n    &lt;h5&gt;This is a heading level 5&lt;/h5&gt;\n    &lt;h6&gt;This is a heading level 6&lt;/h6&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#paragraphs","title":"Paragraphs","text":"<p>Paragraphs are defined using the <code>&lt;p&gt;</code> tag.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Paragraph Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;This is a paragraph of text.&lt;/p&gt;\n    &lt;p&gt;Another paragraph with more text.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#links","title":"Links","text":"<p>Links are created using the <code>&lt;a&gt;</code> tag.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Links Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=\"https://www.example.com\"&gt;Visit Example.com&lt;/a&gt;\n    &lt;a href=\"mailto:someone@example.com\"&gt;Send an Email&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#images","title":"Images","text":"<p>Images are included using the <code>&lt;img&gt;</code> tag.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Images Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"image.jpg\" alt=\"Description of Image\" width=\"300\" height=\"200\"&gt;\n    &lt;p&gt;Image above is an example of HTML image tag usage.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#lists","title":"Lists","text":""},{"location":"languages/html/tutorial/basics/#unordered-lists","title":"Unordered Lists","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Unordered List Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Item 1&lt;/li&gt;\n        &lt;li&gt;Item 2&lt;/li&gt;\n        &lt;li&gt;Item 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#ordered-lists","title":"Ordered Lists","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ordered List Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ol&gt;\n        &lt;li&gt;First item&lt;/li&gt;\n        &lt;li&gt;Second item&lt;/li&gt;\n        &lt;li&gt;Third item&lt;/li&gt;\n    &lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#tables","title":"Tables","text":"<p>Tables are defined using the <code>&lt;table&gt;</code> tag, with <code>&lt;tr&gt;</code> for rows, <code>&lt;th&gt;</code> for header cells, and <code>&lt;td&gt;</code> for data cells.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Table Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Header 1&lt;/th&gt;\n            &lt;th&gt;Header 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Row 1, Cell 1&lt;/td&gt;\n            &lt;td&gt;Row 1, Cell 2&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Row 2, Cell 1&lt;/td&gt;\n            &lt;td&gt;Row 2, Cell 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#forms","title":"Forms","text":"<p>Forms are used to collect user input. The <code>&lt;form&gt;</code> tag is used to create a form, with various input elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Form Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"/submit_form\" method=\"post\"&gt;\n        &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;&lt;br&gt;&lt;br&gt;\n        &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;&lt;br&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"Submit\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#html5-features","title":"HTML5 Features","text":"<p>HTML5 introduces new elements and attributes for better web development.</p>"},{"location":"languages/html/tutorial/basics/#new-elements","title":"New Elements","text":"<ul> <li><code>&lt;header&gt;</code>: Represents introductory content or a set of navigational links.</li> <li><code>&lt;footer&gt;</code>: Represents a footer for a document or section.</li> <li><code>&lt;article&gt;</code>: Represents a self-contained composition in a document.</li> <li><code>&lt;section&gt;</code>: Represents a generic section of a document.</li> </ul>"},{"location":"languages/html/tutorial/basics/#example","title":"Example","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;HTML5 Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;Welcome to My Website&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;article&gt;\n        &lt;h2&gt;About Us&lt;/h2&gt;\n        &lt;p&gt;This is an article section.&lt;/p&gt;\n    &lt;/article&gt;\n    &lt;section&gt;\n        &lt;h2&gt;Our Services&lt;/h2&gt;\n        &lt;p&gt;Details about our services.&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;footer&gt;\n        &lt;p&gt;Contact us at contact@example.com&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"languages/html/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of HTML. HTML is the backbone of web development and is essential for creating structured web pages. For further learning, refer to the MDN Web Docs for HTML.</p>"},{"location":"languages/java/","title":"Welcome to Java Programming Language Notes","text":"<p>Welcome to the Java Programming Language Notes! Java is a robust, platform-independent programming language widely used for building everything from desktop applications to large-scale enterprise systems and Android apps. These notes will provide you with a solid understanding of Java's core concepts, guiding you through both fundamental and advanced topics in an easy-to-follow manner.</p>"},{"location":"languages/java/#contents","title":"Contents","text":"<ol> <li>Tutorial    This section serves as your in-depth guide to learning Java. Starting with the basics like syntax, data types, and control structures, it progresses into more advanced topics such as object-oriented programming (OOP), exception handling, file I/O, and multithreading. With each lesson, you\u2019ll find code examples, exercises, and explanations to help reinforce your knowledge and application of Java in real-world projects.</li> </ol>"},{"location":"languages/java/tutorial/","title":"Welcome to Java Tutorials","text":"<p>Welcome to the Java Tutorials, your gateway to mastering Java, one of the most popular and versatile programming languages in the world. Java is widely used in various applications, from web development to mobile apps and enterprise software. These tutorials are designed to help you understand the language's key features and guide you through both beginner and advanced topics, ensuring you gain a deep understanding of Java programming.</p>"},{"location":"languages/java/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    This section introduces the foundational concepts of Java programming. You'll learn about the structure of a Java program, variables, data types, operators, control flow, and basic input/output. These tutorials will set you on the right path for working with Java, laying a strong foundation for more complex topics like object-oriented programming, exception handling, and multi-threading.</li> </ol>"},{"location":"languages/java/tutorial/basics/","title":"Java Programming Language Tutorial","text":""},{"location":"languages/java/tutorial/basics/#overview","title":"Overview","text":"<p>Java is a high-level, object-oriented programming language known for its portability across platforms, robustness, and ease of use. It is widely used for building enterprise-scale applications, Android apps, and web applications.</p>"},{"location":"languages/java/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/java/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple program to print \"Hello, World!\" to the console.</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/java/tutorial/basics/#data-types","title":"Data Types","text":""},{"location":"languages/java/tutorial/basics/#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>int: Integer type</li> <li>float: Floating-point type</li> <li>double: Double precision floating-point type</li> <li>char: Character type</li> <li>boolean: Boolean type</li> </ul>"},{"location":"languages/java/tutorial/basics/#example","title":"Example","text":"<pre><code>public class DataTypes {\n    public static void main(String[] args) {\n        int age = 25;\n        float height = 5.9f;\n        double weight = 70.5;\n        char initial = 'A';\n        boolean isStudent = true;\n\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Height: \" + height);\n        System.out.println(\"Weight: \" + weight);\n        System.out.println(\"Initial: \" + initial);\n        System.out.println(\"Is Student: \" + isStudent);\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/java/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>public class IfElseExample {\n    public static void main(String[] args) {\n        int number = 10;\n\n        if (number &gt; 0) {\n            System.out.println(\"The number is positive.\");\n        } else if (number &lt; 0) {\n            System.out.println(\"The number is negative.\");\n        } else {\n            System.out.println(\"The number is zero.\");\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#switch-statement","title":"Switch Statement","text":"<pre><code>public class SwitchExample {\n    public static void main(String[] args) {\n        int day = 3;\n\n        switch (day) {\n            case 1:\n                System.out.println(\"Monday\");\n                break;\n            case 2:\n                System.out.println(\"Tuesday\");\n                break;\n            case 3:\n                System.out.println(\"Wednesday\");\n                break;\n            default:\n                System.out.println(\"Invalid day\");\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#methods","title":"Methods","text":""},{"location":"languages/java/tutorial/basics/#method-declaration-and-definition","title":"Method Declaration and Definition","text":"<pre><code>public class MethodsExample {\n    public static void greet() {\n        System.out.println(\"Hello, welcome to Java programming!\");\n    }\n\n    public static void main(String[] args) {\n        greet();\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#method-with-parameters","title":"Method with Parameters","text":"<pre><code>public class AddExample {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int sum = add(5, 7);\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"languages/java/tutorial/basics/#defining-a-class","title":"Defining a Class","text":"<pre><code>public class Person {\n    String name;\n    int age;\n\n    void introduce() {\n        System.out.println(\"Hi, my name is \" + name + \" and I am \" + age + \" years old.\");\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person();\n        person1.name = \"Alice\";\n        person1.age = 30;\n\n        person1.introduce();\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#inheritance-and-polymorphism","title":"Inheritance and Polymorphism","text":""},{"location":"languages/java/tutorial/basics/#inheritance-example","title":"Inheritance Example","text":"<pre><code>public class Animal {\n    public void speak() {\n        System.out.println(\"Animal makes a sound.\");\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void speak() {\n        System.out.println(\"Dog barks.\");\n    }\n\n    public static void main(String[] args) {\n        Dog myDog = new Dog();\n        myDog.speak();  // Calls the Dog's speak method\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#polymorphism-example","title":"Polymorphism Example","text":"<pre><code>public class Base {\n    public void show() {\n        System.out.println(\"Base class\");\n    }\n}\n\npublic class Derived extends Base {\n    @Override\n    public void show() {\n        System.out.println(\"Derived class\");\n    }\n\n    public static void main(String[] args) {\n        Base obj = new Derived();\n        obj.show();  // Calls Derived's show method\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#interfaces-and-abstract-classes","title":"Interfaces and Abstract Classes","text":""},{"location":"languages/java/tutorial/basics/#interface-example","title":"Interface Example","text":"<pre><code>interface Drawable {\n    void draw();\n}\n\npublic class Circle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a circle.\");\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle();\n        circle.draw();\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#abstract-class-example","title":"Abstract Class Example","text":"<pre><code>abstract class Animal {\n    abstract void makeSound();\n\n    void sleep() {\n        System.out.println(\"This animal sleeps.\");\n    }\n}\n\npublic class Cat extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Meow\");\n    }\n\n    public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.makeSound();\n        cat.sleep();\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#exception-handling","title":"Exception Handling","text":""},{"location":"languages/java/tutorial/basics/#try-catch-block","title":"Try-Catch Block","text":"<pre><code>public class ExceptionHandlingExample {\n    public static void main(String[] args) {\n        try {\n            int[] numbers = {1, 2, 3};\n            System.out.println(numbers[5]); // This will throw an ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        } finally {\n            System.out.println(\"This block is always executed.\");\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#file-io","title":"File I/O","text":""},{"location":"languages/java/tutorial/basics/#reading-from-a-file","title":"Reading from a File","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileReadExample {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"example.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#writing-to-a-file","title":"Writing to a File","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FileWriteExample {\n    public static void main(String[] args) {\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"output.txt\"))) {\n            bw.write(\"This is a test file.\");\n        } catch (IOException e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#java-collections-framework","title":"Java Collections Framework","text":""},{"location":"languages/java/tutorial/basics/#using-arraylist","title":"Using <code>ArrayList</code>","text":"<pre><code>import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        list.add(\"Cherry\");\n\n        for (String fruit : list) {\n            System.out.println(fruit);\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#using-hashmap","title":"Using <code>HashMap</code>","text":"<pre><code>import java.util.HashMap;\n\npublic class HashMapExample {\n    public static void main(String[] args) {\n        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(\"Alice\", 30);\n        map.put(\"Bob\", 25);\n\n        for (String key : map.keySet()) {\n            System.out.println(key + \" is \" + map.get(key) + \" years old.\");\n        }\n    }\n}\n</code></pre>"},{"location":"languages/java/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of Java programming. Java is a versatile language that supports object-oriented principles and provides a rich set of libraries for various applications. For further learning, refer to the Java Tutorials by Oracle.</p>"},{"location":"languages/javascript/","title":"Welcome to JavaScript Programming Language Notes","text":"<p>Welcome to the JavaScript Programming Language Notes! JavaScript is the core technology behind interactive and dynamic web content, making it a vital tool for any web developer. These notes are designed to give you a deep understanding of JavaScript, from its foundational concepts to advanced features, helping you write clean, efficient, and powerful code for modern web applications.</p>"},{"location":"languages/javascript/#contents","title":"Contents","text":"<ol> <li>Tutorial    The tutorial section covers JavaScript in detail, starting from the basics like variables, functions, and control flow, then advancing to more complex topics such as DOM manipulation, event handling, asynchronous programming with promises and async/await, and working with APIs. With real-world examples and coding exercises, you\u2019ll learn how to apply JavaScript effectively to create dynamic, responsive websites.</li> </ol>"},{"location":"languages/javascript/tutorial/","title":"Welcome to JavaScript Tutorials","text":"<p>Welcome to the JavaScript Tutorials, your comprehensive guide to mastering JavaScript, the programming language of the web. JavaScript is essential for creating interactive and dynamic web pages, making it a must-learn for any aspiring web developer. These tutorials are designed to help you get started with JavaScript and gradually advance to more complex topics, enabling you to build modern, feature-rich web applications.</p>"},{"location":"languages/javascript/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    This section introduces you to the fundamentals of JavaScript, covering topics like variables, data types, operators, functions, and control structures. You\u2019ll also learn how JavaScript interacts with HTML and CSS to create dynamic web pages. These tutorials provide plenty of examples and exercises to help you apply JavaScript concepts effectively in your projects.</li> </ol>"},{"location":"languages/javascript/tutorial/basics/","title":"JavaScript Programming Language Tutorial","text":""},{"location":"languages/javascript/tutorial/basics/#overview","title":"Overview","text":"<p>JavaScript is a high-level, interpreted scripting language primarily used to create interactive effects within web browsers. It is a core technology of the World Wide Web, alongside HTML and CSS.</p>"},{"location":"languages/javascript/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/javascript/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple JavaScript code to display \"Hello, World!\" in the browser console.</p> <pre><code>console.log(\"Hello, World!\");\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/javascript/tutorial/basics/#variables-and-data-types","title":"Variables and Data Types","text":""},{"location":"languages/javascript/tutorial/basics/#variables","title":"Variables","text":"<p>JavaScript uses <code>var</code>, <code>let</code>, and <code>const</code> to declare variables.</p> <pre><code>let name = \"John\";\nconst age = 30;\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#data-types","title":"Data Types","text":"<p>JavaScript supports several data types:</p> <ul> <li>String: <code>\"Hello\"</code></li> <li>Number: <code>42</code></li> <li>Boolean: <code>true</code> or <code>false</code></li> <li>Object: <code>{ key: \"value\" }</code></li> <li>Array: <code>[1, 2, 3]</code></li> <li>Null: <code>null</code></li> <li>Undefined: <code>undefined</code></li> </ul>"},{"location":"languages/javascript/tutorial/basics/#example","title":"Example","text":"<pre><code>let name = \"Alice\";\nlet age = 25;\nlet isStudent = true;\nlet address = { city: \"New York\", zip: \"10001\" };\nlet numbers = [1, 2, 3, 4, 5];\n\nconsole.log(\"Name:\", name);\nconsole.log(\"Age:\", age);\nconsole.log(\"Is Student:\", isStudent);\nconsole.log(\"Address:\", address);\nconsole.log(\"Numbers:\", numbers);\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#operators","title":"Operators","text":""},{"location":"languages/javascript/tutorial/basics/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>let a = 10;\nlet b = 5;\n\nconsole.log(\"Addition:\", a + b);\nconsole.log(\"Subtraction:\", a - b);\nconsole.log(\"Multiplication:\", a * b);\nconsole.log(\"Division:\", a / b);\nconsole.log(\"Modulus:\", a % b);\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#comparison-operators","title":"Comparison Operators","text":"<pre><code>let x = 10;\nlet y = 20;\n\nconsole.log(\"Equal:\", x === y);\nconsole.log(\"Not Equal:\", x !== y);\nconsole.log(\"Greater Than:\", x &gt; y);\nconsole.log(\"Less Than:\", x &lt; y);\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/javascript/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>let score = 85;\n\nif (score &gt;= 90) {\n    console.log(\"Grade: A\");\n} else if (score &gt;= 80) {\n    console.log(\"Grade: B\");\n} else {\n    console.log(\"Grade: C\");\n}\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#switch-statement","title":"Switch Statement","text":"<pre><code>let day = 3;\n\nswitch (day) {\n    case 1:\n        console.log(\"Monday\");\n        break;\n    case 2:\n        console.log(\"Tuesday\");\n        break;\n    case 3:\n        console.log(\"Wednesday\");\n        break;\n    default:\n        console.log(\"Invalid day\");\n}\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#functions","title":"Functions","text":""},{"location":"languages/javascript/tutorial/basics/#function-declaration","title":"Function Declaration","text":"<pre><code>function greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"Alice\"));\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#function-expression","title":"Function Expression","text":"<pre><code>const square = function(x) {\n    return x * x;\n};\n\nconsole.log(square(5));\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#arrow-functions","title":"Arrow Functions","text":"<pre><code>const add = (a, b) =&gt; a + b;\n\nconsole.log(add(10, 15));\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#objects-and-arrays","title":"Objects and Arrays","text":""},{"location":"languages/javascript/tutorial/basics/#objects","title":"Objects","text":"<pre><code>const person = {\n    name: \"John\",\n    age: 30,\n    greet() {\n        console.log(\"Hello, my name is \" + this.name);\n    }\n};\n\nperson.greet();\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#arrays","title":"Arrays","text":"<pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\nfruits.forEach(fruit =&gt; {\n    console.log(fruit);\n});\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#dom-manipulation","title":"DOM Manipulation","text":""},{"location":"languages/javascript/tutorial/basics/#selecting-elements","title":"Selecting Elements","text":"<pre><code>const header = document.getElementById(\"header\");\nconst items = document.querySelectorAll(\".item\");\n\nconsole.log(header);\nconsole.log(items);\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#modifying-elements","title":"Modifying Elements","text":"<pre><code>const title = document.querySelector(\"h1\");\ntitle.textContent = \"Welcome to JavaScript Tutorial!\";\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#events","title":"Events","text":""},{"location":"languages/javascript/tutorial/basics/#adding-event-listeners","title":"Adding Event Listeners","text":"<pre><code>const button = document.querySelector(\"button\");\n\nbutton.addEventListener(\"click\", () =&gt; {\n    alert(\"Button clicked!\");\n});\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#event-handling","title":"Event Handling","text":"<pre><code>function handleClick() {\n    console.log(\"Button was clicked\");\n}\n\ndocument.querySelector(\"button\").addEventListener(\"click\", handleClick);\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#asynchronous-javascript","title":"Asynchronous JavaScript","text":""},{"location":"languages/javascript/tutorial/basics/#callbacks","title":"Callbacks","text":"<pre><code>function fetchData(callback) {\n    setTimeout(() =&gt; {\n        callback(\"Data fetched\");\n    }, 1000);\n}\n\nfetchData(data =&gt; {\n    console.log(data);\n});\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#promises","title":"Promises","text":"<pre><code>const fetchData = () =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(\"Data fetched\");\n        }, 1000);\n    });\n};\n\nfetchData().then(data =&gt; {\n    console.log(data);\n});\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#asyncawait","title":"Async/Await","text":"<pre><code>const fetchData = async () =&gt; {\n    return \"Data fetched\";\n};\n\nconst displayData = async () =&gt; {\n    const data = await fetchData();\n    console.log(data);\n};\n\ndisplayData();\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#error-handling","title":"Error Handling","text":""},{"location":"languages/javascript/tutorial/basics/#try-catch-block","title":"Try-Catch Block","text":"<pre><code>try {\n    let result = riskyFunction(); // This function might throw an error\n} catch (error) {\n    console.log(\"An error occurred:\", error.message);\n}\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#throwing-errors","title":"Throwing Errors","text":"<pre><code>function divide(a, b) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    return a / b;\n}\n\ntry {\n    console.log(divide(10, 0));\n} catch (error) {\n    console.log(\"Error:\", error.message);\n}\n</code></pre>"},{"location":"languages/javascript/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of JavaScript programming. JavaScript is a versatile language used for web development to create dynamic and interactive web pages. For further learning, refer to the MDN Web Docs for JavaScript.</p>"},{"location":"languages/markdown/","title":"Welcome to Markdown Language Notes","text":"<p>Welcome to the Markdown Language Notes! Markdown is a lightweight markup language that allows you to format plain text effortlessly, making it a popular choice for writing documentation, blog posts, and content on platforms like GitHub and Reddit. These notes will provide you with a thorough understanding of Markdown\u2019s syntax and features, helping you create well-structured and visually appealing documents.</p>"},{"location":"languages/markdown/#contents","title":"Contents","text":"<ol> <li>Tutorial    This section serves as your comprehensive guide to mastering Markdown. Starting with the basics of Markdown syntax, you will learn how to format text, create headings, and include lists and links. As you progress, you\u2019ll explore more advanced features such as tables, images, and blockquotes. Each tutorial is designed with practical examples and exercises to help you apply what you\u2019ve learned effectively.</li> </ol>"},{"location":"languages/markdown/tutorial/","title":"Welcome to Markdown Tutorials","text":"<p>Welcome to the Markdown Tutorials, your comprehensive guide to mastering Markdown, a lightweight markup language that allows you to create formatted text using plain text syntax. Markdown is widely used for writing documentation, README files, and content on platforms like GitHub and forums. These tutorials will help you understand Markdown\u2019s core features, enabling you to create clear and visually appealing documents with ease.</p>"},{"location":"languages/markdown/tutorial/#contents","title":"Contents","text":"<ol> <li> <p>Basics    Get started with the fundamentals of Markdown. This section introduces the basic syntax, including how to format text, create paragraphs, and understand Markdown's structure.</p> </li> <li> <p>Headings    Learn how to create headings of various levels using Markdown syntax. Understand the significance of headings in organizing content and improving readability.</p> </li> <li> <p>Styling    Explore different styling options available in Markdown, including bold, italics, and strikethrough, to enhance your text's visual appeal.</p> </li> <li> <p>Quoting    Discover how to incorporate quotes and blockquotes into your Markdown documents to emphasize important information or share references.</p> </li> <li> <p>Links    Learn how to create hyperlinks to internal and external resources, enhancing the interactivity of your documents.</p> </li> <li> <p>Lists    Understand how to create ordered and unordered lists in Markdown, a vital feature for organizing information effectively.</p> </li> <li> <p>Images    Find out how to insert images into your Markdown files, making your documents more engaging and informative.</p> </li> <li> <p>Tables    Discover how to create tables in Markdown for presenting data in a structured format, making it easy to compare and analyze information.</p> </li> <li> <p>Comments    Learn how to add comments in Markdown, which can be helpful for including notes or explanations that won't appear in the final rendered document.</p> </li> </ol>"},{"location":"languages/markdown/tutorial/Comments/","title":"Hiding Contents","text":"<p>Syntax: <code>&lt;!-- &lt;text&gt; --&gt;</code></p>"},{"location":"languages/markdown/tutorial/Comments/#ignore-markdown-formatting","title":"Ignore Markdown Formatting:","text":"<p>ignore (or escape) Markdown formatting by using \\ before the Markdown character.  Example:</p> <pre><code>Let's rename \\*our-new-project\\* to \\*our-old-project\\*.\n</code></pre> <p>Let's rename *our-new-project* to *our-old-project*.</p>"},{"location":"languages/markdown/tutorial/Headings/","title":"Headers","text":"<p>To create a heading, add one to six <code>#</code> symbols before your heading text. The number of <code>#</code> you use will determine the hierarchy level and typeface size of the heading.</p>"},{"location":"languages/markdown/tutorial/Headings/#a-first-level-heading","title":"A first-level heading","text":"<p><code># Heading</code></p>"},{"location":"languages/markdown/tutorial/Headings/#a-second-level-heading","title":"A second-level heading","text":"<p><code>## Heading</code></p>"},{"location":"languages/markdown/tutorial/Headings/#a-third-level-heading","title":"A third-level heading","text":"<p><code>### Heading</code></p>"},{"location":"languages/markdown/tutorial/Headings/#a-fourth-level-heading","title":"A fourth-level heading","text":"<p><code>#### Heading</code></p>"},{"location":"languages/markdown/tutorial/Headings/#a-fifth-level-heading","title":"A fifth-level heading","text":"<p><code>##### Heading</code></p>"},{"location":"languages/markdown/tutorial/Headings/#a-sixth-level-heading","title":"A sixth-level heading","text":"<p><code>###### Heading</code></p>"},{"location":"languages/markdown/tutorial/Images/","title":"Inline Images","text":"<p>Syntax: <code>![&lt;text&gt;](Image Path | width=100)</code></p>"},{"location":"languages/markdown/tutorial/Images/#reference-image","title":"Reference Image","text":"<p>Syntax: <code>![alt text][logo]</code>  Example</p> <pre><code>[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre>"},{"location":"languages/markdown/tutorial/Images/#resize-image","title":"Resize Image","text":"<p>Syntax: <code>&lt;img src=\"https://github.com/darsaveli/Mariam/blob/main/1479814528_webarebears.gif\" width=\"385px\" align=\"center\"&gt;</code></p>"},{"location":"languages/markdown/tutorial/Images/#html-tags","title":"HTML Tags","text":"<pre><code>&lt;picture&gt;\n    &lt;source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png\"&gt;\n    &lt;source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\"&gt;\n    &lt;img alt=\"Shows an illustrated sun in light mode and a moon with stars in dark mode.\" src=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\"&gt;\n&lt;/picture&gt;\n</code></pre>"},{"location":"languages/markdown/tutorial/Links/","title":"Inline Link","text":"<p>Syntax: <code>[&lt;text&gt;](URL)</code>  Example:</p> <pre><code>This site was built using [GitHub Pages](https://pages.github.com/).\n</code></pre> <p>This site was built using GitHub Pages.</p>"},{"location":"languages/markdown/tutorial/Lists/","title":"Unordered Lists:","text":"<p>Syntax: use -. *. or +  Example:</p> <pre><code>- George Washington\n* John Adams\n+ Thomas Jefferson\n</code></pre> <ul> <li>George Washington</li> <li>John Adams</li> <li>Thomas Jefferson</li> </ul>"},{"location":"languages/markdown/tutorial/Lists/#ordered-lists","title":"Ordered Lists:","text":"<p>Syntax: precede each line with a number.  Example:</p> <pre><code>1. James Madison\n1. James Monroe\n1. John Quincy Adams\n</code></pre> <ol> <li>James Madison</li> <li>James Monroe</li> <li>John Quincy Adams</li> </ol>"},{"location":"languages/markdown/tutorial/Lists/#nested-lists","title":"Nested Lists:","text":"<p>Syntax: You can create a nested list by indenting one or more list items below another item.  Example:</p> <pre><code>1. First list item\n    - First nested list item\n        - Second nested list item\n</code></pre> <ol> <li>First list item</li> <li>First nested list item<ul> <li>Second nested list item</li> </ul> </li> </ol>"},{"location":"languages/markdown/tutorial/Quoting/","title":"Text","text":"<p>Syntax: <code>'&gt; &lt;text&gt;'</code>.</p> <p>Example: Text that is not a quote</p> <p>Text that is a quote</p>"},{"location":"languages/markdown/tutorial/Quoting/#code","title":"Code","text":"<p>Syntax:  Single backtick for inline code. ' ` '</p> <p>Example:</p> <pre><code>Use `git status` to list all new or modified files that haven't yet been committed.\n</code></pre> <p>Use <code>git status</code> to list all new or modified files that haven't yet been committed.</p>"},{"location":"languages/markdown/tutorial/Quoting/#code-block","title":"Code Block","text":"<p>Syntax:  triple backtick for inline code. ' ``` '</p> <p>Example:</p> <pre><code>Some basic Git commands are:\n    ```\n    git status\n    git add\n    git commit\n    ```\n</code></pre> <p>Some basic Git commands are: <code>git status     git add     git commit</code></p>"},{"location":"languages/markdown/tutorial/Styling/","title":"Spaces","text":"<ol> <li>Single Space \u2003:\u2003 <code>&amp;nbsp;</code> </li> <li>2 Spaces \u2003:\u2003 <code>&amp;ensp;</code></li> <li>4 Spaces \u2003:\u2003 <code>&amp;emsp;</code></li> <li>Tab Spaces \u2003:\u2003 4 times <code>&amp;nbsp;</code></li> </ol>"},{"location":"languages/markdown/tutorial/Styling/#bold","title":"Bold","text":"<p>Syntax: <code>**&lt;text&gt;**</code> or <code>__&lt;text&gt;__</code>  Example:  <code>**This is a Bold Text**</code> \u2003:\u2003 This is a Bold Text <code>__This is a Bold Text__</code> \u2003:\u2003 This is a Bold Text</p>"},{"location":"languages/markdown/tutorial/Styling/#italic","title":"Italic","text":"<p>Syntax: <code>*&lt;text&gt;*</code> or <code>_&lt;text&gt;_</code>  Example:  <code>*This is a Italic Text*</code> \u2003:\u2003 This is a Italic Text <code>_This is a Italic Text_</code> \u2003:\u2003 This is a Italic Text</p>"},{"location":"languages/markdown/tutorial/Styling/#strikethrough","title":"Strikethrough","text":"<p>Syntax: <code>~~&lt;text&gt;~~</code>  Example:  <code>~~This is a Strikethrough Text~~</code> \u2003:\u2003 ~~This is a Strikethrough Text~~</p>"},{"location":"languages/markdown/tutorial/Styling/#bold-and-nested-italic","title":"Bold and nested Italic","text":"<p>Syntax: <code>**&lt;text&gt;**</code> and <code>__&lt;text&gt;__</code>  Example:  <code>**This text is _extremely_ important**</code> \u2003:\u2003 *This text is extremely important*</p>"},{"location":"languages/markdown/tutorial/Styling/#all-bold-and-italic","title":"All bold and italic","text":"<p>Syntax: <code>***&lt;text&gt;***</code>  Example:  <code>***All this text is important***</code> \u2003:\u2003 All this text is important</p>"},{"location":"languages/markdown/tutorial/Styling/#subscript","title":"Subscript","text":"<p>Syntax: <code>&lt;sub&gt;&lt;text&gt;&lt;/sub&gt;</code>  Example:  <code>This is a &lt;sub&gt;subscript&lt;/sub&gt; text</code> \u2003:\u2003 This is a <sub>subscript</sub> text</p>"},{"location":"languages/markdown/tutorial/Styling/#superscript","title":"Superscript","text":"<p>Syntax: <code>&lt;sup&gt;&lt;text&gt;&lt;/sup&gt;</code>  Example:  <code>This is a &lt;sup&gt;superscript&lt;/sub&gt; text</code> \u2003:\u2003 This is a <sup>superscript</sup> text</p>"},{"location":"languages/markdown/tutorial/Styling/#horizontal-rule","title":"Horizontal Rule","text":"<p>Syntax: <code>---</code> or <code>***</code> or <code>___</code></p>"},{"location":"languages/markdown/tutorial/Styling/#underline","title":"Underline","text":"<p>Syntax: <code>&lt;ins&gt;&lt;text&gt;&lt;/ins&gt;</code></p>"},{"location":"languages/markdown/tutorial/Tables/","title":"Tables","text":"<p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the  raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3"},{"location":"languages/markdown/tutorial/basics/","title":"Markdown Commands","text":""},{"location":"languages/markdown/tutorial/basics/#overview","title":"Overview","text":"<p>Markdown is a lightweight markup language used for formatting text. It allows you to create formatted documents using plain text. This document covers basic Markdown commands and their usage.</p>"},{"location":"languages/markdown/tutorial/basics/#headers","title":"Headers","text":""},{"location":"languages/markdown/tutorial/basics/#header-1","title":"<code># Header 1</code>","text":"<p>Creates a level 1 header (largest).</p> <pre><code># Header 1\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example","title":"Example","text":"<pre><code># This is a level 1 header\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#header-2","title":"<code>## Header 2</code>","text":"<p>Creates a level 2 header.</p> <pre><code>## Header 2\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_1","title":"Example","text":"<pre><code>## This is a level 2 header\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#header-3","title":"<code>### Header 3</code>","text":"<p>Creates a level 3 header.</p> <pre><code>### Header 3\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_2","title":"Example","text":"<pre><code>### This is a level 3 header\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#emphasis","title":"Emphasis","text":""},{"location":"languages/markdown/tutorial/basics/#italic-or-_italic_","title":"<code>*italic*</code> or <code>_italic_</code>","text":"<p>Formats text in italics.</p> <pre><code>*italic* or _italic_\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_3","title":"Example","text":"<pre><code>*This text is italicized*\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#bold-or-__bold__","title":"<code>**bold**</code> or <code>__bold__</code>","text":"<p>Formats text in bold.</p> <pre><code>**bold** or __bold__\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_4","title":"Example","text":"<pre><code>**This text is bold**\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#lists","title":"Lists","text":""},{"location":"languages/markdown/tutorial/basics/#unordered-list","title":"Unordered List","text":"<p>Creates an unordered list with bullet points.</p> <pre><code>- Item 1\n- Item 2\n- Item 3\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_5","title":"Example","text":"<pre><code>- Apples\n- Oranges\n- Bananas\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#ordered-list","title":"Ordered List","text":"<p>Creates an ordered list with numbered items.</p> <pre><code>1. Item 1\n2. Item 2\n3. Item 3\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_6","title":"Example","text":"<pre><code>1. First step\n2. Second step\n3. Third step\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#links","title":"Links","text":""},{"location":"languages/markdown/tutorial/basics/#link-texturl","title":"<code>[Link Text](URL)</code>","text":"<p>Creates a hyperlink.</p> <pre><code>[Link Text](URL)\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_7","title":"Example","text":"<pre><code>[OpenAI](https://www.openai.com)\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#images","title":"Images","text":""},{"location":"languages/markdown/tutorial/basics/#alt-texturl","title":"<code>![Alt Text](URL)</code>","text":"<p>Inserts an image.</p> <pre><code>![Alt Text](URL)\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_8","title":"Example","text":"<pre><code>![OpenAI Logo](https://www.openai.com/favicon.ico)\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#blockquotes","title":"Blockquotes","text":""},{"location":"languages/markdown/tutorial/basics/#blockquote","title":"<code>&gt; Blockquote</code>","text":"<p>Formats text as a blockquote.</p> <pre><code>&gt; Blockquote\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_9","title":"Example","text":"<pre><code>&gt; This is a blockquote.\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#code","title":"Code","text":""},{"location":"languages/markdown/tutorial/basics/#inline-code","title":"Inline Code","text":"<p>Creates inline code with backticks.</p> <pre><code>`inline code`\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_10","title":"Example","text":"<pre><code>Use the `print()` function to display text.\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#code-block","title":"Code Block","text":"<p>Creates a code block with triple backticks.</p> <p>Code block </p>"},{"location":"languages/markdown/tutorial/basics/#example_11","title":"Example","text":"<pre><code>def hello_world():\n    print(\"Hello, World!\")\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#horizontal-rule","title":"Horizontal Rule","text":""},{"location":"languages/markdown/tutorial/basics/#-or-or-___","title":"<code>---</code> or <code>***</code> or <code>___</code>","text":"<p>Creates a horizontal line.</p> <pre><code>---\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_12","title":"Example","text":"<pre><code>---\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#tables","title":"Tables","text":""},{"location":"languages/markdown/tutorial/basics/#header-1-header-2","title":"<code>| Header 1 | Header 2 |</code>","text":"<p>Creates a table.</p> <pre><code>| Header 1 | Header 2 |\n|----------|----------|\n| Row 1    | Data 1   |\n| Row 2    | Data 2   |\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#example_13","title":"Example","text":"<pre><code>| Name  | Age |\n|-------|-----|\n| John  | 30  |\n| Alice | 25  |\n</code></pre>"},{"location":"languages/markdown/tutorial/basics/#summary","title":"Summary","text":"<p>Markdown provides a simple way to format text documents with headers, emphasis, lists, links, images, blockquotes, code, horizontal rules, and tables. Using these commands, you can create well-structured and readable documents. For more detailed information on Markdown syntax, refer to the Markdown Guide.</p>"},{"location":"languages/python/","title":"Welcome to Python Notes","text":"<p>Welcome to the Python Notes, your comprehensive resource for learning and mastering Python, one of the most popular and versatile programming languages in the world. Whether you are a beginner looking to understand the basics or an experienced developer seeking advanced techniques, these notes cover a wide range of topics to enhance your Python programming skills.</p>"},{"location":"languages/python/#contents","title":"Contents","text":"<ol> <li> <p>Tutorials    This section offers a collection of tutorials that introduce you to Python's syntax, data types, control structures, functions, and more. Each tutorial is designed to provide clear explanations and practical examples, helping you to grasp fundamental concepts and apply them in your projects.</p> </li> <li> <p>Creation and Publish of a Python Library    In this section, you will learn how to create and publish your own Python library. It covers best practices for structuring your code, writing documentation, and preparing your library for distribution. You'll also find detailed instructions on how to create the <code>setup.py</code> file, manage dependencies, and publish your library on PyPI (Python Package Index).</p> </li> <li> <p>Libraries and Frameworks    Explore various Python libraries and frameworks that can enhance your development workflow. This section includes an overview of popular libraries for data analysis, web development, machine learning, and more. You'll learn how to install and utilize these libraries in your projects, along with tips for choosing the right tools for your needs.</p> </li> </ol>"},{"location":"languages/python/create_publish_library/","title":"Create and Publish Python Library","text":"<p>Welcome to the guide on creating and publishing your own Python library! This resource is designed for developers who want to package their code for reuse and share it with the broader Python community. Whether you are building a simple utility or a complex framework, this guide will walk you through the necessary steps to ensure your library is well-structured, documented, and ready for distribution.</p>"},{"location":"languages/python/create_publish_library/#content","title":"Content","text":"<ol> <li> <p>Guidelines    This section provides essential guidelines for creating a Python library. It covers best practices for structuring your code, writing clear documentation, and ensuring your library meets community standards. You\u2019ll learn about naming conventions, versioning, and how to effectively manage dependencies to make your library user-friendly and maintainable.</p> </li> <li> <p>Setup    In this section, you will learn how to create the <code>setup.py</code> file, which is crucial for packaging your library for distribution. The tutorial will guide you through defining your package metadata, dependencies, and entry points. By the end of this section, you\u2019ll have a solid understanding of how to prepare your library for upload to platforms like PyPI (Python Package Index).</p> </li> </ol>"},{"location":"languages/python/create_publish_library/Publish%20a%20python%20library/","title":"Step by step to create a python library.","text":""},{"location":"languages/python/create_publish_library/Publish%20a%20python%20library/#prequisite-modules","title":"Prequisite modules:","text":"<ol> <li>unittest - to check if all good with the package</li> <li>twine - to check/publish your package</li> <li>wheel - to build your package</li> </ol>"},{"location":"languages/python/create_publish_library/Publish%20a%20python%20library/#create-the-following-folder-structure","title":"Create the following folder structure:","text":"<pre><code>abc &lt;main folder&gt;\n    xyz &lt;package folder&gt;\n        __init__.py\n        module.py\n    tests &lt;testing package&gt;\n        __init__.py\n        module_tests.py\n    main.py &lt;Some examples with import&gt;\n    README.md &lt;Guidance template&gt;\n    requirements.txt &lt;if any dependencies required for the package&gt;\n    setup.py &lt;trigger the library builder&gt;\n</code></pre>"},{"location":"languages/python/create_publish_library/Publish%20a%20python%20library/#steps","title":"Steps:","text":"<ol> <li>Once all the folder structure is ready, create the virutal environment in python.</li> <li>check your module is running fine using unittest library. Command: <code>python -m unittest -v tests/multiplication_tests.py</code>.</li> <li>Install wheel and twine, if not installed using pip command.</li> <li>Add the .gitignore file to exclude irrevelant files for the package and git repository. This can be generated using gitignore.io website.</li> <li>Create a setup.py files by following the file present in the folder.</li> <li>create a build using wheel library and setup.py file. Command : <code>python setup.py sdist bdist_wheel</code></li> <li>Check the build using twine. Command : <code>twine check dist/*</code></li> <li>Before pushing to test pypi. Make sure you have an account and api is set. Username will be token and password will be api key.</li> <li> <p>Once everything is passed, push it to test pypi to check if good to push on pypi. Command : <code>twine upload --repository-url https://test.pypi.org/legacy/ dist/*</code> Twine will ask for username and password. Kindly provide this as mentioned in step 8. Once all went correct, you can see the library on test pypi package manager. This can be installed using pypi from anywhere.</p> </li> <li> <p>For Pypi package manager, repeat steps from 8 and 9.</p> </li> </ol>"},{"location":"languages/python/libraries_frameworks/","title":"Welcome to the Python Libraries Guide","text":"<p>Welcome to the Python Libraries Guide! This resource provides a comprehensive overview of the essential libraries in Python that extend its functionality and simplify common tasks across various domains, including data manipulation, web development, scientific computing, and more. Understanding these libraries will enhance your ability to write efficient and powerful Python code.</p>"},{"location":"languages/python/libraries_frameworks/#contents","title":"Contents","text":"<ol> <li> <p>Datetime    Learn how to work with dates and times using the <code>datetime</code> library. This section covers creating, manipulating, and formatting date and time objects, as well as performing date arithmetic.</p> </li> <li> <p>OS    Discover the <code>os</code> library for interacting with the operating system. This section explains how to perform tasks such as file and directory manipulation, environment variable access, and executing system commands.</p> </li> <li> <p>Pathlib    Explore <code>pathlib</code>, a modern approach to handling filesystem paths in Python. This section discusses how to create, manipulate, and query file paths using an object-oriented interface.</p> </li> <li> <p>Math    Delve into the <code>math</code> library, which provides mathematical functions and constants. This section covers various mathematical operations, including trigonometry, logarithms, and factorial calculations.</p> </li> <li> <p>Collections    Understand the <code>collections</code> module, which offers alternative data structures such as <code>Counter</code>, <code>deque</code>, <code>defaultdict</code>, and <code>namedtuple</code>. This section highlights the use cases for each structure.</p> </li> <li> <p>Operator    Learn about the <code>operator</code> module, which provides a set of efficient functions corresponding to the intrinsic operators of Python. This section covers the usage of these functions to simplify complex operations.</p> </li> <li> <p>Json    Discover how to work with JSON data using the <code>json</code> library. This section explains how to serialize and deserialize JSON objects, making it easy to exchange data between applications.</p> </li> <li> <p>Sqlite3    Explore the <code>sqlite3</code> module for database management. This section covers how to create, read, update, and delete records in a SQLite database using Python.</p> </li> <li> <p>Locale    Learn about locale-specific settings and how to format numbers, dates, and currencies using the <code>locale</code> module. This section discusses internationalization and localization in Python applications.</p> </li> <li> <p>Itertools     Dive into the <code>itertools</code> module, which provides a collection of tools for working with iterators. This section covers functions for creating iterators for efficient looping and combinatorial tasks.</p> </li> <li> <p>Asyncio     Discover asynchronous programming with the <code>asyncio</code> library. This section explains how to write concurrent code using coroutines, tasks, and event loops.</p> </li> <li> <p>Random     Explore the <code>random</code> module for generating random numbers and making random selections. This section covers various methods for creating randomness in your programs.</p> </li> <li> <p>Functools     Understand the <code>functools</code> module, which provides higher-order functions for functional programming. This section includes decorators and utilities for caching and partial function application.</p> </li> <li> <p>DIS     Learn about the <code>dis</code> module, which disassembles Python bytecode into a more readable format. This section is valuable for understanding how Python executes code at a low level.</p> </li> <li> <p>Base64     Explore the <code>base64</code> module for encoding and decoding binary data into a text format using Base64 encoding. This section covers practical use cases for data transmission.</p> </li> <li> <p>Queue and Dequeue     Discover how to use queues and deques in Python for managing data in FIFO (First In, First Out) and LIFO (Last In, First Out) manners. This section explains the differences and use cases for both structures.</p> </li> <li> <p>Webbrowser     Learn how to interact with web browsers using the <code>webbrowser</code> module. This section covers how to open URLs in different browsers programmatically.</p> </li> <li> <p>Tkinter     Dive into <code>Tkinter</code>, the standard GUI toolkit for Python. This section provides an overview of creating desktop applications with windows, buttons, and other UI elements.</p> </li> <li> <p>PyAutoGUI     Explore <code>PyAutoGUI</code>, a library for automating GUI tasks by simulating mouse and keyboard actions. This section covers how to automate repetitive tasks on your computer.</p> </li> <li> <p>Matplotlib     Discover <code>Matplotlib</code>, a powerful plotting library for creating static, animated, and interactive visualizations in Python. This section covers basic plotting techniques and customization options.</p> </li> <li> <p>Graph Tool     Learn about the <code>Graph Tool</code>, a Python library for manipulation and statistical analysis of graphs. This section provides an overview of its capabilities for network analysis.</p> </li> <li> <p>Subprocess     Understand how to spawn new processes and interact with them using the <code>subprocess</code> module. This section covers process management, input/output handling, and command execution.</p> </li> <li> <p>Urllib     Explore <code>urllib</code>, a package for working with URLs. This section discusses how to fetch data across the web, parse URLs, and handle HTTP requests.</p> </li> <li> <p>Scrapy     Discover <code>Scrapy</code>, a powerful framework for web scraping. This section covers how to extract data from websites and handle different web scraping challenges.</p> </li> <li> <p>Selenium Web Driver     Learn how to automate web browsers using Selenium Web Driver. This section provides an overview of how to navigate web pages, fill out forms, and extract data.</p> </li> <li> <p>Requests     Explore the <code>requests</code> library for making HTTP requests in a user-friendly way. This section covers sending GET and POST requests, handling responses, and working with APIs.</p> </li> <li> <p>LXML     Dive into <code>lxml</code>, a powerful library for processing XML and HTML. This section discusses how to parse and manipulate XML documents effectively.</p> </li> <li> <p>Beautiful Soup     Learn about Beautiful Soup, a library for web scraping that makes it easy to extract data from HTML and XML documents. This section covers parsing, searching, and modifying parsed data.</p> </li> <li> <p>Curl     Discover how to use <code>curl</code> in Python for transferring data with URLs. This section provides examples of how to perform various network requests.</p> </li> <li> <p>Turtle     Explore the <code>turtle</code> graphics library for creating simple drawings and animations in Python. This section is great for beginners learning programming concepts.</p> </li> <li> <p>Logger     Learn how to implement logging in your Python applications using the <code>logging</code> module. This section covers different logging levels, formatting, and best practices for tracking application behavior.</p> </li> <li> <p>Pandas     Discover <code>Pandas</code>, a powerful data manipulation library for working with structured data. This section covers data frames, series, and common data analysis techniques.</p> </li> <li> <p>Seaborn     Explore <code>Seaborn</code>, a data visualization library based on Matplotlib. This section discusses how to create informative and attractive statistical graphics.</p> </li> <li> <p>Plotly     Learn about <code>Plotly</code>, a library for creating interactive plots and dashboards. This section covers how to build web-based visualizations for data analysis.</p> </li> <li> <p>MayaVI     Dive into <code>MayaVI</code>, a scientific data visualization tool. This section provides an overview of how to create 3D visualizations for complex datasets.</p> </li> <li> <p>PyInstaller     Understand how to bundle Python applications into standalone executables using <code>PyInstaller</code>. This section covers packaging strategies for distribution.</p> </li> <li> <p>Pickle     Discover the <code>pickle</code> module for serializing and deserializing Python objects. This section explains how to store and retrieve complex data structures.</p> </li> <li> <p>Flask     Learn about <code>Flask</code>, a lightweight web framework for building web applications. This section covers routing, templates, and creating RESTful APIs.</p> </li> <li> <p>RabbitMQ     Explore <code>RabbitMQ</code>, a message broker for handling communication between applications. This section discusses how to set up and interact with RabbitMQ for asynchronous messaging.</p> </li> <li> <p>AMQPStorm     Understand <code>AMQPStorm</code>, a Python library for interacting with RabbitMQ. This section covers how to publish and consume messages effectively.</p> </li> <li> <p>PyQuery     Discover <code>PyQuery</code>, a jQuery-like library for parsing HTML documents. This section covers how to navigate and manipulate DOM elements.</p> </li> <li> <p>GZIP     Learn how to compress and decompress files using the <code>gzip</code> module. This section covers how to handle compressed data efficiently in your applications.</p> </li> <li> <p>WSGI     Explore the Web Server Gateway Interface (WSGI), a standard for web server communication with web applications. This section discusses its importance in Python web development.</p> </li> <li> <p>Mixins     Understand the concept of mixins in object-oriented programming</p> </li> </ol> <p>. This section explains how to use mixins for code reuse and modular design in Python.</p> <ol> <li> <p>ArcPy     Discover <code>ArcPy</code>, a Python site package for performing geographic information system (GIS) tasks. This section covers spatial analysis and map creation.</p> </li> <li> <p>PySerial     Learn how to communicate with serial ports using <code>PySerial</code>. This section covers how to read from and write to serial devices in Python.</p> </li> <li> <p>Py2Neo     Explore <code>Py2Neo</code>, a client library for working with Neo4j graph databases. This section discusses how to interact with graph data effectively.</p> </li> <li> <p>Pillow     Dive into <code>Pillow</code>, a library for image processing in Python. This section covers basic image manipulation techniques, such as opening, resizing, and saving images.</p> </li> <li> <p>MySQLDB     Learn about <code>MySQLDB</code>, a Python interface for connecting to MySQL databases. This section covers how to execute SQL queries and manage database connections.</p> </li> <li> <p>Psycopg2     Discover <code>Psycopg2</code>, a PostgreSQL adapter for Python. This section covers how to interact with PostgreSQL databases and perform database operations.</p> </li> <li> <p>Oracle DB     Understand how to connect to Oracle databases using Python. This section discusses the use of Oracle's database drivers for executing SQL queries.</p> </li> <li> <p>SQLAlchemy     Explore <code>SQLAlchemy</code>, a powerful SQL toolkit and Object-Relational Mapping (ORM) library. This section covers database interactions using an object-oriented approach.</p> </li> <li> <p>Openpyxl     Learn how to read and write Excel files using <code>openpyxl</code>. This section covers basic operations for managing Excel spreadsheets programmatically.</p> </li> <li> <p>Xlwings     Discover <code>xlwings</code>, a library for connecting Python to Excel. This section covers how to manipulate Excel spreadsheets from Python scripts.</p> </li> <li> <p>Xlrd     Understand how to read data from Excel files using <code>xlrd</code>. This section covers reading cell values and extracting information from spreadsheets.</p> </li> <li> <p>Xlsx Writer     Explore <code>XlsxWriter</code>, a library for creating Excel XLSX files. This section covers how to format and write data to Excel spreadsheets.</p> </li> <li> <p>Turtle Graphics     Dive deeper into <code>Turtle Graphics</code>, a module for creating drawings and animations. This section provides advanced techniques for creating engaging graphics.</p> </li> <li> <p>Hashlib     Learn how to perform secure hash and message digest operations using the <code>hashlib</code> library. This section covers generating hashes for data integrity.</p> </li> <li> <p>Win32     Discover the <code>win32</code> module for interacting with Windows APIs. This section covers how to manage Windows applications and system resources from Python.</p> </li> <li> <p>Config Parser     Understand how to read and write configuration files using the <code>configparser</code> module. This section discusses best practices for managing application settings.</p> </li> <li> <p>PyTesseract     Explore <code>PyTesseract</code>, a Python wrapper for Google's Tesseract-OCR Engine. This section covers how to perform optical character recognition on images.</p> </li> <li> <p>PyOCR     Learn about <code>PyOCR</code>, another OCR library for Python. This section discusses how to extract text from images using various OCR engines.</p> </li> <li> <p>Virtual Env Wrapper     Discover how to manage virtual environments using <code>virtualenv</code>. This section covers best practices for creating isolated environments for Python projects.</p> </li> <li> <p>SYS     Understand the <code>sys</code> module for accessing system-specific parameters and functions. This section covers how to manipulate Python\u2019s runtime environment.</p> </li> <li> <p>ChemPy     Dive into <code>ChemPy</code>, a library for solving chemical kinetics and equilibria. This section covers how to model and simulate chemical reactions.</p> </li> <li> <p>PyGame     Learn how to create games and multimedia applications using <code>PyGame</code>. This section covers game development concepts, such as event handling and rendering graphics.</p> </li> <li> <p>PyGlet     Explore <code>PyGlet</code>, a library for developing games and other visually-rich applications. This section discusses graphics rendering and audio playback.</p> </li> <li> <p>OpenGL     Discover how to use OpenGL for 2D and 3D graphics programming in Python. This section covers the basics of rendering graphics using OpenGL.</p> </li> <li> <p>Kivy     Learn about <code>Kivy</code>, a library for developing multitouch applications. This section covers how to build interactive applications for various platforms.</p> </li> <li> <p>PyAudio     Understand how to play and record audio using <code>PyAudio</code>. This section covers basic audio processing techniques and sound playback.</p> </li> <li> <p>Pytest     Explore <code>pytest</code>, a testing framework for writing and running tests. This section covers how to create test cases, fixtures, and assert statements.</p> </li> <li> <p>API Wrappers     Learn about creating and using API wrappers to simplify interactions with RESTful APIs. This section covers best practices for designing reusable API clients.</p> </li> <li> <p>Libraries     Discover a curated list of additional Python libraries across various domains. This section provides links and brief descriptions for further exploration.</p> </li> <li> <p>Python for Scientists     Explore resources and libraries tailored for scientific computing in Python. This section covers tools and libraries beneficial for researchers and scientists.</p> </li> </ol>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/","title":"List of Python API Wrappers","text":"<p>Hi. Below you will find a list of web services along with links to their docs and Python wrappers/libraries.</p>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#3taps-data-exchange","title":"3taps - Data Exchange","text":"<ul> <li>API Documentation</li> <li>Python wrapper for 3taps</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#alexa-web-web-traffic-data","title":"Alexa Web - Web traffic data","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Alexa Web</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#amazon-online-shopping","title":"Amazon - Online Shopping","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Amazon.com</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#amazon-product-api-amazons-product-catalog","title":"Amazon Product API - Amazon's product catalog","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#amazon-s3-cloud-storage","title":"Amazon S3 - Cloud storage","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#amazon-sqs-managed-queue-service","title":"Amazon SQS - Managed Queue Service","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#aws-cloud-computing-platform","title":"AWS - Cloud computing platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for AWS</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#aws-amazon-simple-workflow-orchestration-service-for-building-scalable-distributed-applications","title":"AWS - Amazon Simple Workflow - Orchestration service for building scalable distributed applications","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Amazon Simple Workflow</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#american-fuzzy-lop-afl-fuzzer-that-employs-genetic-algorithms-in-order-to-efficiently-increase-code-coverage-of-the-test-cases","title":"American Fuzzy Lop / AFL - Fuzzer that employs genetic algorithms in order to efficiently increase code coverage of the test cases","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#archiveis-time-capsule-for-web-pages","title":"Archive.is - time capsule for web pages","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#archiveorg-internet-archive","title":"Archive.org - Internet Archive","text":"<ul> <li>API Documentation</li> <li>Python wrapper for archive.org</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#arista-eos-network-operating-system","title":"Arista EOS - Network Operating System","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ark-blockchain-solutions","title":"ARK - Blockchain Solutions","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> <li>Blog Post</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#arrayfire-high-performance-library-for-parallel-computing","title":"ArrayFire - high performance library for parallel computing","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ascribe-register-and-license-intellectual-property","title":"Ascribe - Register and License Intellectual Property","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#authorizenet-payment-gateway","title":"Authorize.net - Payment gateway","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#azure-cloud-computing-platform","title":"Azure - Cloud computing platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#backblaze-cloud-backup-and-storage-provider","title":"Backblaze - cloud backup and storage provider","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#balanced-payments-for-marketplaces","title":"Balanced - Payments for Marketplaces","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Balanced</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bearersh-api-integrations-platform","title":"Bearer.sh - API integrations platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bigml-machine-learning-made-easy","title":"BigML - Machine Learning Made Easy","text":"<ul> <li>API Documentation</li> <li>Python wrapper for BigML</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bing-microsoft-search-engine","title":"Bing - Microsoft search engine","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Bing search</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bitcoin-open-source-p2p-money","title":"Bitcoin - Open source P2P money","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Bitcoin</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bitly-url-shortener","title":"Bitly - URL shortener","text":"<ul> <li>API Documentation</li> <li>Python wrapper for bit.ly</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#bitstamp-buy-and-sell-bitcoins","title":"Bitstamp - Buy and sell bitcoins","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Bitstamp</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#blogger-blog-publishing-service","title":"Blogger - Blog-publishing service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Blogger</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#box-online-file-sharing","title":"Box - Online file sharing","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Box</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#braintree-accept-payments-online","title":"Braintree - Accept Payments Online","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Braintree</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#buildkite-continuous-integration","title":"Buildkite - Continuous Integration","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Buildkite</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#carriots-m2m-application-platform","title":"Carriots - M2M Application Platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Carriots</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#challonge-tournament-brackets","title":"Challonge - Tournament Brackets","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Challonge</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#chargify-recurring-billing-application","title":"Chargify - Recurring billing application","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Chargify</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#closeio-sales-communication-platform","title":"Close.io - Sales communication platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Close.io</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#coinbase-bitcoin-wallet","title":"Coinbase - Bitcoin Wallet","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Coinbase</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#coinpayments-checkout-system-for-cryptocurrencies","title":"CoinPayments - checkout system for cryptocurrencies","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#countries-country-information","title":"Countries - Country Information","text":"<ul> <li>API Documentation</li> <li>Python wrapper for REST Countries</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#craigslist-classified-advertisements","title":"Craigslist - Classified advertisements","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#delicious-social-bookmarking-service","title":"Delicious - Social bookmarking service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Del.icio.us</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#discogs-marketplace-for-music-on-vinyl-cd","title":"Discogs - Marketplace for Music on Vinyl, CD..","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Discogs</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#discord-all-in-one-voice-and-text-chat-for-gamers","title":"Discord - All-in-one voice and text chat for gamers","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Discord</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#discourse-civilized-discussion","title":"Discourse - Civilized discussion","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#disqus-blog-comment-hosting-service","title":"Disqus - Blog comment hosting service","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for Disqus</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#docker-an-open-platform-for-distributed-applications-for-developers-and-sysadmins","title":"Docker - an open platform for distributed applications for developers and sysadmins","text":"<ul> <li>API Documentation</li> <li>Python Wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#dribbble-community-for-showcasing-user-made-artwork","title":"Dribbble - community for showcasing user-made artwork","text":"<ul> <li>API Documentation</li> <li>Python Wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#dropbox-file-hosting-service","title":"Dropbox - File hosting service","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for Dropbox</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#duktape-embeddable-javascript-engine","title":"Duktape - Embeddable JavaScript engine","text":"<ul> <li>API Documentation</li> <li>Python Wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ebay-online-auction-and-shopping","title":"Ebay - Online auction and shopping","text":"<ul> <li>API Documentation</li> <li>Python wrapper for eBay API</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#embedly-front-end-developer-tools","title":"Embedly - Front-end developer tools","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Embedly</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#evernote-notetaking-software","title":"Evernote - Notetaking software","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for Evernote</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#expedia-a-travel-website","title":"Expedia - A travel website","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for Expedia</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#facebook-social-networking-service","title":"Facebook - Social networking service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Facebook</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#fedex-global-courier-delivery-services","title":"FedEx - Global courier delivery services","text":"<ul> <li>API Documentation</li> <li>Python wrapper for FedEx</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#flickr-image-and-video-hosting","title":"Flickr - Image and Video hosting","text":"<ul> <li>API Documentation</li> <li>Python wrapper #1</li> <li>Python wrapper #2</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#forecast-weather-forecasting","title":"Forecast - Weather forecasting","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Forecast</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#foursquare-location-based-networking","title":"Foursquare - Location based networking","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Foursquare</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#fullcontact-manage-your-contacts","title":"FullContact - Manage your contacts","text":"<ul> <li>API Documentation</li> <li>Python wrapper for FullContact</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#genius-song-lyrics-and-annotations","title":"Genius - Song lyrics and annotations","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Genius</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#geocodio-ridiculously-affordable-geocoding","title":"Geocodio - Ridiculously affordable geocoding","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Geocodio</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#geopy-geocoding-for-python","title":"Geopy - Geocoding for Python","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Geopy</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#github-online-project-hosting","title":"GitHub - Online project hosting","text":"<ul> <li>API Documentation</li> <li>Python wrapper for GitHub</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#gitlab-online-and-self-hosted-git-repository-management","title":"GitLab - Online and self-hosted Git repository management","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Gitlab</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#gmail-web-based-e-mail-service","title":"Gmail -  Web-based e-mail service","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-charts-interactive-charts-for-browsers-and-mobile-devices","title":"Google Charts - Interactive charts for browsers and mobile devices","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-cloud-functions-serverless-environment-to-build-and-connect-cloud-services","title":"Google Cloud Functions - Serverless environment to build and connect cloud services","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-drive-file-storage-service","title":"Google Drive - File storage service","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-maps-web-mapping-service","title":"Google Maps - Web mapping service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Google Maps</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-music-google-music","title":"Google Music - Google Music","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Google Music</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-search-unofficial-api-for-google-search","title":"Google Search - Unofficial API for Google Search","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-sheets-create-and-edit-spreadsheets-online-for-free","title":"Google Sheets - create and edit spreadsheets online, for free.","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-spreadsheet-online-spreadsheets","title":"Google Spreadsheet - Online Spreadsheets","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Google Spreadsheet</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#google-translate-translation-service","title":"Google Translate - Translation Service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Google Translate</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#gopro-cameras","title":"GoPro - cameras","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#hacker-news-social-news","title":"Hacker News - Social News","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Hacker News</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#hadoop-yarn-apache-hadoop-nextgen-mapreduce-yarn","title":"Hadoop YARN - Apache Hadoop NextGen MapReduce (YARN)","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Hadoop YARN</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#heroku-cloud-application-platform","title":"Heroku - Cloud Application Platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Heroku</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#highrise-contact-management-tool-crm","title":"Highrise - Contact management tool (CRM)","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Highrise</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#hipchat-hosted-group-chat-and-im","title":"HipChat - Hosted group chat and IM","text":"<ul> <li>API Documentation</li> <li>Python wrapper for HipChat</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#hubspot-marketing-sales-and-crm-software","title":"HubSpot - Marketing, Sales, and CRM software","text":"<ul> <li>API Documentation</li> <li>Python wrapper for HubSpot</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#iex-real-time-and-historical-stock-prices","title":"IEX - Real-time and historical stock prices","text":"<ul> <li>API Documentation</li> <li>Python wrapper for IEX</li> <li>Python backtesting engine with IEX Cloud support to train AI to make future price predictions</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ifixit-the-free-repair-manual","title":"iFixit - The free repair manual","text":"<ul> <li>API Documentation</li> <li>Python wrapper for iFixit</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#iformbuilder-mobile-data-collection-software","title":"iFormBuilder - Mobile Data Collection Software","text":"<ul> <li>API Documentation</li> <li>Python wrapper for iFormBuilder</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ihackernews-hacker-news-mobile","title":"iHackernews - Hacker News Mobile","text":"<ul> <li>API Documentation</li> <li>Python wrapper for iHackerNews</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#imgur-simple-image-sharer","title":"Imgur - Simple Image Sharer","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Imgur</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#indeed-search-engine-for-jobs","title":"Indeed - Search engine for jobs","text":"<ul> <li>API Documentation</li> <li>Python wrapper for indeed.com</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#instagram-online-photo-sharing","title":"Instagram - Online photo sharing","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Instagram</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#intercom-marketing-and-customer-support","title":"Intercom - Marketing and Customer support","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Intercom</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#investopedia-stock-simulator","title":"Investopedia - Stock Simulator","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ip-street-patent-data-and-analytics-algorithms-as-a-service","title":"IP Street - patent data and analytics algorithms as a service","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#itunes-store-search-engine-for-itunes-content","title":"iTunes Store - Search engine for iTunes content","text":"<ul> <li>API Documentation</li> <li>Python wrapper for iTunes Store</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#jira-issue-tracking-product","title":"Jira - Issue tracking product","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Jira</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#kite-connect-stock-trading-apis","title":"Kite Connect - Stock trading APIs","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Kite Connect</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#lastfm-online-music","title":"Last.fm - Online music","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Last.fm</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#lightgbm-gradient-boosting-framework-by-microsoft","title":"LightGBM - gradient boosting framework by Microsoft","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#linkedin-professional-social-network","title":"LinkedIn - Professional Social Network","text":"<ul> <li>API Documentation</li> <li>Python wrapper #1</li> <li>Python wrapper #2</li> <li>Python wrapper #3</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#loggly-cloud-based-logging","title":"Loggly - Cloud-based logging","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Loggly</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#medium-blog-publishing-platform","title":"Medium - blog publishing platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#meetup-offline-group-meetings","title":"Meetup - Offline group meetings","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Meetup Web</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#mega-free-cloud-storage","title":"Mega - Free cloud storage","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Mega</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#mercury-take-any-web-article-and-return-only-the-relevant-content","title":"Mercury - take any web article and return only the relevant content","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#metwit-social-and-crowdsourced-weather","title":"Metwit - Social and crowdsourced weather","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Metwit</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#mixcloud-social-music-streaming","title":"Mixcloud - Social music streaming","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#mlb-gameday-real-time-mlb-data","title":"MLB GameDay - Real-time MLB data","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#monkeylearn-machine-learning-for-text-analysis","title":"MonkeyLearn - Machine Learning for Text Analysis","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#musixmatch-explore-the-worlds-largest-catalog-of-song-lyrics-and-translations","title":"Musixmatch - Explore the world's largest catalog of song lyrics and translations","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Musixmatch</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#nasa-national-aeronautics-and-space-administration","title":"NASA - National Aeronautics and Space Administration","text":"<ul> <li>API Documentation</li> <li>Python wrapper for NASA</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#nba-stats-nba-advanced-stats","title":"NBA Stats - NBA Advanced Stats","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#netflix-on-demand-streaming-media","title":"Netflix - On-demand streaming media","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Netflix</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#netflix-roulette-get-a-random-movie-from-the-netflix-catalog-and-watch-it-instantly","title":"Netflix Roulette - Get a random movie from the Netflix catalog and watch it instantly","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#new-york-times-archive-api-the-archive-api-provides-json-lists-of-articles-by-month","title":"New York Times Archive API - The Archive API provides JSON lists of articles by month","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#news-api-json-api-for-live-news-and-blog-headlines","title":"News API - JSON API for live news and blog headlines","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#onetimesecret-self-destructing-messaging-service","title":"OneTimeSecret - Self-destructing messaging service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for OneTimeSecret</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#onfleet-last-mile-delivery-management-service","title":"Onfleet - Last mile delivery management service","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#openweathermap-weather-service","title":"OpenWeatherMap - Weather Service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for OpenWeatherMap</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pagerduty-it-alert-monitoring","title":"PagerDuty - IT alert monitoring","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for PagerDuty</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#peercoin-open-source-p2p-money","title":"Peercoin - Open source P2P money","text":"<ul> <li>API Documentation</li> <li>JSON-RPC API Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pinterest-pinboard-style-sharing","title":"Pinterest - Pinboard-style sharing","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Pinterest</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pixoto-online-photo-sharing-platform","title":"Pixoto - Online photo sharing platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Pixoto</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#phaxio-faxing-for-developers","title":"Phaxio - Faxing for Developers","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Phaxio</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#phishai-detect-zero-day-phishing-websites","title":"Phish.AI - Detect zero-day phishing websites","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#photobucket-image-hosting-and-video","title":"Photobucket - Image hosting and video","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Photobucket</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#plotly-easily-analyze-data-together","title":"Plot.ly - Easily analyze data together","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Plot.ly</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#polar-devices-watches-and-devices","title":"Polar Devices - Watches and devices","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pubmed-database-of-medical-publications","title":"PubMed - database of medical publications","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#rackspace-open-cloud-company","title":"Rackspace - Open cloud company","text":"<ul> <li>API Documentation</li> <li>Python wrapper for the Rackspace Cloud</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#reddit-social-news-aggregation-and-discussion","title":"Reddit - Social news aggregation and discussion","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Reddit</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#rottentomatoes-film-review-aggregator","title":"RottenTomatoes - Film review aggregator","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Rotten Tomatoes</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#salesforce-cloud-computing-company-crm","title":"Salesforce - Cloud computing company (CRM)","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Salesforce</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#sas-business-intelligence-software","title":"SAS - business intelligence software","text":"<ul> <li>API Documentation</li> <li>Python Wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#scaleway-cloud-computing-platform","title":"Scaleway - Cloud computing platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Scaleway</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#scrapinghub-scraping-services","title":"Scrapinghub - Scraping services","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Scrapinghub</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#sendgrid-email-api-for-developers","title":"SendGrid - Email API for developers","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#shodan-search-engine-for-internet-connected-devices","title":"Shodan - Search engine for Internet-connected devices","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#skyscanner-travel-metasearch","title":"Skyscanner - Travel metasearch","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Skyscanner</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#slack-team-communication-platform","title":"Slack - Team Communication Platform","text":"<ul> <li>API Documentation</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#python-wrappers","title":"Python Wrappers","text":"<ul> <li>Slacker</li> <li>Gendo</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#slideshare-slide-hosting-service","title":"Slideshare - Slide hosting service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for slideshare</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#smartfile-file-management-service","title":"SmartFile - File management service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for SmartFile</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#socrata-open-data-api-data-discovery-for-government-data","title":"Socrata Open Data API - Data discovery for government data","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Socrata Open Data API</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#soundcloud-share-your-sounds","title":"Soundcloud - Share your sounds","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Soundcloud</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#sportradar-broad-range-of-sports-apis","title":"Sportradar - Broad range of sports APIs","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Sportradar</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#spotify-music-streaming-service","title":"Spotify - Music streaming service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Spotify</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#spreedly-cloud-based-credit-card-vault","title":"Spreedly - Cloud based credit card vault","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Spreedly</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#stack-exchange-community-powered-qa","title":"Stack Exchange - Community-Powered Q&amp;A","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Stack Exchange</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#stanford-corenlp-simple-api-for-text-processing-tasks","title":"Stanford CoreNLP - simple API for text processing tasks","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#stripe-payments-for-developers","title":"Stripe - Payments for developers","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Stripe</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#sunlightfoundation-sunlight-foundation","title":"SunlightFoundation - Sunlight Foundation","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Sunlight Foundation</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#syncthing-decentralized-data-sync","title":"Syncthing - Decentralized data sync","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Syncthing</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#taiga-project-management","title":"Taiga - Project management","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#technorati-searching-blogs","title":"Technorati - Searching blogs","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Technorati</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#telegram-mobile-and-desktop-messaging-app","title":"Telegram - Mobile and desktop messaging app","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#temp-mail-anonymous-emails","title":"Temp Mail - Anonymous emails","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Temp mail</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tesseract-ocr-ocr-engine","title":"Tesseract OCR - OCR Engine","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#the-echo-nest-music-services","title":"The Echo Nest - Music services","text":"<ul> <li>API Documentation</li> <li>Python Wrapper for Echo Nest</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#the-pirate-bay-peer-to-peer-file-sharing","title":"The Pirate Bay - Peer-to-peer file sharing","text":"<ul> <li>API Documentation</li> <li>Python wrapper for TPB</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#the-movie-database-movie-and-tv-database","title":"The Movie Database - Movie and TV Database","text":""},{"location":"languages/python/libraries_frameworks/API%20wrappers/#official-site","title":"Official Site","text":"<ul> <li>API Documentation</li> <li>List of wrappers</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#wrappers","title":"Wrappers","text":""},{"location":"languages/python/libraries_frameworks/API%20wrappers/#easytmdb-020-python-package-index","title":"easytmdb 0.2.0 : Python Package Index","text":"to click Source Code https://github.com/benregn/easytmdb PyPI Page https://pypi.python.org/pypi/easytmdb/0.2.0 Py Support Last Update Info Date 2014/09/07 <p>Observations and notes:</p> <ul> <li>2014/09/07:</li> <li>based on tmdbsimple, with implementation changes (meanwhile already present in tmdbsimple)</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#themoviedb-themoviedborg-wrapper-for-api-v3","title":"themoviedb themoviedb.org wrapper for api v3","text":"to click Source Code https://github.com/doganaydin/themoviedb PyPI Page Py Support Last Update Info Date 2014/10/17 <p>Observations and notes:</p> <ul> <li>2014/10/17:</li> <li>supports API v3</li> <li>only movie search api is implemented.</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#themoviedb-python-wrapper-to-themoviedborg-api","title":"themoviedb Python wrapper to themoviedb.org API","text":"to click Source Code https://github.com/doganaydin/themoviedb_oldapi PyPI Page Py Support Last Update Info Date 2014/10/17 <p>Observations and notes:</p> <ul> <li>2014/10/17:</li> <li>deprecated</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#themoviedb-python-wrapper-to-themoviedborg-api_1","title":"themoviedb  Python wrapper to themoviedb.org API","text":"to click Source Code https://github.com/dbr/themoviedb PyPI Page Py Support v. 2.6, v. 2.7, v. 3.3 Last Update 2013/05/31 Info Date 2014/09/07"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#themoviedbbundle","title":"TheMovieDB.bundle","text":"to click Source Code https://github.com/plexinc-agents/TheMovieDB.bundle PyPI Page Py Support Last Update 2014/07/27 Info Date 2014/09/07"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#themoviedb-json-unofficial-themoviedborg-python-api-wrapper","title":"[themoviedb-json] Unofficial themoviedb.org python api wrapper","text":"to click Source Code https://github.com/doganaydin/themoviedb-json PyPI Page Last Update Info Date 2014/09/07"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tmdb-python-package-index","title":"[tmdb] Python Package Index","text":"to click Source Code PyPI Page https://pypi.python.org/pypi/tmdb/1.0b Py Support v.2.7, v.3 Last Update version 1.0b Info Date 2014/09/07 <p>Observations and notes:  + (2014/09/07)    - deprecated</p>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tmdb-small-application-using-tmdb-apis","title":"TMDB Small application using TMDB APIs","text":"to click Source Code https://github.com/codershoder/TMDB PyPI Page Py Support Last Update Info Date 2014/09/07"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tmdbsimple-a-python-wrapper-for-the-movie-database-api-v3","title":"tmdbsimple - A Python wrapper for The Movie Database API v3","text":"to click Source Code https://github.com/celiao/tmdbsimple PyPI Page https://pypi.python.org/pypi/tmdbsimple Py Support Last Update version 1.0.0 (2014/09/22) Info Date 2014/09/07 <p>Observations and notes:</p> <ul> <li>2014/09/07:</li> <li>simply maps API endpoints to Python functions</li> <li>supports v.3 of the API and the new Search/Multi endpoint</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tmdb3-070-python-package-index","title":"[tmdb3] 0.7.0 : Python Package Index","text":"to click Source Code PyPI Page https://pypi.python.org/pypi/tmdb3 Py Support Last Update version 0.7.0 (?/?/?) Info Date 2014/09/07"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tinyurl-url-shortner","title":"TinyURL - URL Shortner","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#trello-kanban-boards","title":"Trello - Kanban boards","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Trello</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tuenti-social-networking-service","title":"Tuenti - Social networking service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Tuenti</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tumblr-microblogging-platform","title":"Tumblr - Microblogging platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper #1</li> <li>Python wrapper #2</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#thetvdbcom-community-driven-database-of-television-shows","title":"TheTVDB.com - Community driven database of television shows","text":""},{"location":"languages/python/libraries_frameworks/API%20wrappers/#official-site_1","title":"Official Site","text":"<ul> <li>API Documentation</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#wrappers_1","title":"Wrappers","text":""},{"location":"languages/python/libraries_frameworks/API%20wrappers/#gnarlytvdb-a-python-interface-to-thetvdbcom-xml-api","title":"gnarlytvdb: A python interface to thetvdb.com xml api","text":"to click Source Code https://github.com/steinitzu/gnarly-tvdb PyPI Page https://pypi.python.org/pypi/gnarlytvdb/0.6 Py Support Last Update version 0.6 (2013/01/29) Info Date 2014/12/20 <p>Observations and notes:</p> <ul> <li>2014/12/20:</li> <li>Does not implement actors and banners API</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pytvdb-a-python-library-for-interacting-with-thetvdbcom-api","title":"pytvdb: A python library for interacting with TheTVDB.com API","text":"to click Source Code https://bitbucket.org/arshsingh/pytvdb PyPI Page Py Support Last Update (2014/08/19) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pytvdb-a-python-module-for-the-thetvdbcom-api","title":"PyTVDB: a Python module for the thetvdb.com API","text":"to click Source Code https://github.com/elderhsouza/PyTVDB PyPI Page Py Support Last Update (2014/03/13) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#pytvdbapi-a-clean-resource-friendly-and-easy-to-use-api-for-thetvdbcom","title":"pytvdbapi: A clean, resource friendly and easy to use API for thetvdb.com","text":"to click Source Code https://github.com/fuzzycode/pytvdbapi PyPI Page https://pypi.python.org/pypi/pytvdbapi/0.5.0 Py Support v.2.6, v.2.7, v.3.3 and v.3.4 Last Update version 0.5.0 (2014/10/28) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#thetvdb_api-a-python-api-for-thetvdb","title":"thetvdb_api: A Python API for theTVDB.","text":"to click Source Code https://bitbucket.org/Julien-D/thetvdb_api PyPI Page https://pypi.python.org/pypi/thetvdb_api/0.3.1 Py Support v.2.7, v.3.2 Last Update version 0.3.1 (2014/02/10) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tvdb-module-for-accessing-the-web-api-at-thetvdbcom","title":"tvdb: Module for accessing the Web API at TheTVDB.com","text":"to click Source Code PyPI Page https://pypi.python.org/pypi/tvdb/0.22 Py Support Last Update version 0.22 (2009/02/20) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tvdb-caching-api","title":"TVDB Caching API","text":"to click Source Code PyPI Page https://bitbucket.org/robdennis/tvdb-caching-api Py Support Last Update (2012/06/26) Info Date 2014/12/21"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#dbrtvdb_api-interface-to-thetvdbcom","title":"dbr/tvdb_api: Interface to thetvdb.com","text":"to click Source Code http://github.com/dbr/tvdb_api/tree/master PyPI Page https://pypi.python.org/pypi/tvdb_api/1.10 Py Support v.2.6, v.2.7, v.3.3 and v.3.4 Last Update version 1.10 (2014/11/08) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#fuzemantvdb_api","title":"fuzeman/tvdb_api","text":"to click Source Code https://github.com/fuzeman/tvdb_api PyPI Page Py Support Last Update (2012/11/07) Info Date 2014/12/21 <p>Observations and notes:</p> <ul> <li>2014/12/21:</li> <li>This is a fork of version 1.8.1 of dbr/tvdb_api (https://github.com/dbr/tvdb_api/tree/master) recommended for use with TVDB Cache Server (https://github.com/fuzeman/tvdb-cache-server)</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#tvdbpy-yet-another-tvdb-api-python-wrapper-work-in-progress","title":"tvdbpy: Yet another TvDB API Python wrapper. Work in progress.","text":"to click Source Code https://github.com/matiasb/tvdbpy PyPI Page Py Support Last Update (2014/02/16) Info Date 2014/12/20"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#twilio-sms-and-voice-through-the-cloud","title":"Twilio - SMS and Voice through the cloud","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Twilio</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#twitter-online-microblogging-service","title":"Twitter - Online microblogging service","text":"<ul> <li>API Documentation</li> <li>Python wrapper #1 - python-twitter</li> <li>Python wrapper #2 - Twython</li> <li>Python wrapper #3 - birdy</li> <li>Python wrapper #4 - tweepy</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#uber-taxi-private-car-or-rideshare-service","title":"Uber - Taxi, private car or rideshare service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Uber</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#udacity-online-university","title":"Udacity - Online University","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Udacity</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#udemy-online-university","title":"Udemy - Online University","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Udemy</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#unirest-set-of-lightweight-http-libraries","title":"Unirest - Set of lightweight HTTP libraries","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Unirest</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#ups-package-delivery","title":"UPS - Package Delivery","text":"<ul> <li>API Documentation</li> <li>Python wrapper for UPS</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#urbandictionary-web-based-dictionary","title":"UrbanDictionary - Web-based dictionary","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Urban Dictionary</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#vault-a-tool-for-managing-secrets","title":"Vault - A tool for managing secrets.","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Vault</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#vimeo-video-sharing-website","title":"Vimeo - Video-sharing website","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Vimeo</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#vk-social-networking-service","title":"VK - Social networking service","text":"<ul> <li>API Documentation</li> <li>Python wrapper #1</li> <li>Python wrapper #2</li> <li>Fully asynchronous Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#walmart-open-api-access-to-the-walmart-product-catalog","title":"Walmart Open API - access to the Walmart product catalog","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#whatsapp-mobile-and-desktop-messaging-app","title":"WhatsApp -  Mobile and desktop messaging app","text":"<ul> <li>~~API Documentation~~</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#wikipedia-wikipedia","title":"Wikipedia - Wikipedia","text":"<ul> <li>API Documentation</li> <li>Python wrapper 1</li> <li>Python wrapper 2</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#windows-azure-microsofts-cloud-platform","title":"Windows Azure - Microsoft's Cloud Platform","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Windows Azure</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#world-bank-collection-of-development-indicators","title":"World Bank - Collection of development indicators","text":"<ul> <li>API Documentation</li> <li>Python wrapper for World Bank</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#world-weather-weather-service","title":"World Weather - Weather Service","text":"<ul> <li>API Documentation</li> <li>Python wrapper for World Weather</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#woocommerce-ecommerce","title":"WooCommerce - Ecommerce","text":"<ul> <li>API Documentation</li> <li>Python wrapper for WooCommerce</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#wordnik-online-dictionary","title":"Wordnik - Online dictionary","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Wordnik</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#wunderlist-task-management-application","title":"Wunderlist - Task Management Application","text":"<ul> <li>API Documentation</li> <li>Python wrapper</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#yahoo-web-portal-search-engine","title":"Yahoo - Web portal, search engine","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Yahoo</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#yahoo-query-language-sql-like-query-language","title":"Yahoo Query Language - SQL-like query language","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Yahoo Query Language</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#yelp-local-search-website","title":"Yelp - Local search website","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Yelp</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#you-need-a-budget-ynab-personal-budgeting-software","title":"You Need a Budget (YNAB) - Personal budgeting software","text":"<ul> <li>Python wrapper for YNAB</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#youtube-video-sharing-website","title":"YouTube - Video-sharing website","text":"<ul> <li>API Documentation</li> <li>Python wrapper for YouTube</li> </ul>"},{"location":"languages/python/libraries_frameworks/API%20wrappers/#zoop-payment-gateway","title":"Zoop - Payment Gateway","text":"<ul> <li>API Documentation</li> <li>Python wrapper for Zoop</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/","title":"Python Frameworks, Libraries, software and resources.","text":"<p>A curated list of awesome Python frameworks, libraries, software and resources.</p>"},{"location":"languages/python/libraries_frameworks/Libraries/#admin-panels","title":"Admin Panels","text":"<p>Libraries for administrative interfaces.</p> <ul> <li>ajenti - The admin panel your servers deserve.</li> <li>django-grappelli - A jazzy skin for the Django Admin-Interface.</li> <li>django-jet - Modern responsive template for the Django admin interface with improved functionality.</li> <li>django-suit - Alternative Django Admin-Interface (free only for Non-commercial use).</li> <li>django-xadmin - Drop-in replacement of Django admin comes with lots of goodies.</li> <li>flask-admin - Simple and extensible administrative interface framework for Flask.</li> <li>flower - Real-time monitor and web admin for Celery.</li> <li>jet-bridge - Admin panel framework for any application with nice UI (ex Jet Django).</li> <li>wooey - A Django app which creates automatic web UIs for Python scripts.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#algorithms-and-design-patterns","title":"Algorithms and Design Patterns","text":"<p>Python implementation of data structures, algorithms and design patterns.</p> <ul> <li>Algorithms<ul> <li>algorithms - Minimal examples of data structures and algorithms.</li> <li>python-ds - A collection of data structure and algorithms for coding interviews.</li> <li>sortedcontainers - Fast and pure-Python implementation of sorted collections.</li> <li>TheAlgorithms - All Algorithms implemented in Python.</li> </ul> </li> <li>Design Patterns<ul> <li>PyPattyrn - A simple yet effective library for implementing common design patterns.</li> <li>python-patterns - A collection of design patterns in Python.</li> <li>transitions - A lightweight, object-oriented finite state machine implementation.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#asgi-servers","title":"ASGI Servers","text":"<p>ASGI-compatible web servers.</p> <ul> <li>daphne - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li> <li>uvicorn - A lightning-fast ASGI server implementation, using uvloop and httptools.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#asynchronous-programming","title":"Asynchronous Programming","text":"<ul> <li>asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.<ul> <li>awesome-asyncio</li> </ul> </li> <li>trio - A friendly library for async concurrency and I/O.</li> <li>Twisted - An event-driven networking engine.</li> <li>uvloop - Ultra fast asyncio event loop.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#audio","title":"Audio","text":"<p>Libraries for manipulating audio and its metadata.</p> <ul> <li>Audio<ul> <li>audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li> <li>audioFlux - A library for audio and music analysis, feature extraction.</li> <li>dejavu - Audio fingerprinting and recognition.</li> <li>kapre - Keras Audio Preprocessors.</li> <li>librosa - Python library for audio and music analysis.</li> <li>matchering - A library for automated reference audio mastering.</li> <li>mingus - An advanced music theory and notation package with MIDI file and playback support.</li> <li>pyAudioAnalysis - Audio feature extraction, classification, segmentation and applications.</li> <li>pydub - Manipulate audio with a simple and easy high level interface.</li> <li>TimeSide - Open web audio processing framework.</li> </ul> </li> <li>Metadata<ul> <li>beets - A music library manager and MusicBrainz tagger.</li> <li>eyeD3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li> <li>mutagen - A Python module to handle audio metadata.</li> <li>tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#authentication","title":"Authentication","text":"<p>Libraries for implementing authentications schemes.</p> <ul> <li>OAuth<ul> <li>authlib - JavaScript Object Signing and Encryption draft implementation.</li> <li>django-allauth - Authentication app for Django that \"just works.\"</li> <li>django-oauth-toolkit - OAuth 2 goodies for Django.</li> <li>oauthlib - A generic and thorough implementation of the OAuth request-signing logic.</li> <li>python-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers.</li> <li>python-social-auth - An easy-to-setup social authentication mechanism.</li> </ul> </li> <li>JWT<ul> <li>pyjwt - JSON Web Token implementation in Python.</li> <li>python-jose - A JOSE implementation in Python.</li> <li>python-jwt - A module for generating and verifying JSON Web Tokens.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#build-tools","title":"Build Tools","text":"<p>Compile software from source code.</p> <ul> <li>BitBake - A make-like build tool for embedded Linux.</li> <li>buildout - A build system for creating, assembling and deploying applications from multiple parts.</li> <li>PlatformIO - A console tool to build code with different development platforms.</li> <li>pybuilder - A continuous build tool written in pure Python.</li> <li>SCons - A software construction tool.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#built-in-classes-enhancement","title":"Built-in Classes Enhancement","text":"<p>Libraries for enhancing Python built-in classes.</p> <ul> <li>attrs - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li> <li>bidict - Efficient, Pythonic bidirectional map data structures and related functionality..</li> <li>Box - Python dictionaries with advanced dot notation access.</li> <li>dataclasses - (Python standard library) Data classes.</li> <li>DottedDict - A library that provides a method of accessing lists and dicts with a dotted path notation.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#cms","title":"CMS","text":"<p>Content Management Systems.</p> <ul> <li>django-cms - An Open source enterprise CMS based on the Django.</li> <li>feincms - One of the most advanced Content Management Systems built on Django.</li> <li>indico - A feature-rich event management system, made @ CERN.</li> <li>Kotti - A high-level, Pythonic web application framework built on Pyramid.</li> <li>mezzanine - A powerful, consistent, and flexible content management platform.</li> <li>plone - A CMS built on top of the open source application server Zope.</li> <li>quokka - Flexible, extensible, small CMS powered by Flask and MongoDB.</li> <li>wagtail - A Django content management system.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#caching","title":"Caching","text":"<p>Libraries for caching data.</p> <ul> <li>beaker - A WSGI middleware for sessions and caching.</li> <li>django-cache-machine - Automatic caching and invalidation for Django models.</li> <li>django-cacheops - A slick ORM cache with automatic granular event-driven invalidation.</li> <li>dogpile.cache - dogpile.cache is a next generation replacement for Beaker made by the same authors.</li> <li>HermesCache - Python caching library with tag-based invalidation and dogpile effect prevention.</li> <li>pylibmc - A Python wrapper around the libmemcached interface.</li> <li>python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#chatops-tools","title":"ChatOps Tools","text":"<p>Libraries for chatbot development.</p> <ul> <li>errbot - The easiest and most popular chatbot to implement ChatOps.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#code-analysis","title":"Code Analysis","text":"<p>Tools of static analysis, linters and code quality checkers.</p> <ul> <li>Code Analysis<ul> <li>coala - Language independent and easily extendable code analysis application.</li> <li>code2flow - Turn your Python and JavaScript code into DOT flowcharts.</li> <li>prospector - A tool to analyse Python code.</li> <li>pycallgraph - A library that visualises the flow (call graph) of your Python application.</li> <li>vulture - A tool for finding and analysing dead Python code.</li> </ul> </li> <li>Code Linters<ul> <li>flake8 - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.<ul> <li>awesome-flake8-extensions</li> </ul> </li> <li>pylama - A code audit tool for Python and JavaScript.</li> <li>pylint - A fully customizable source code analyzer.</li> <li>wemake-python-styleguide - The strictest and most opinionated python linter ever.</li> </ul> </li> <li>Code Formatters<ul> <li>black - The uncompromising Python code formatter.</li> <li>isort - A Python utility / library to sort imports.</li> <li>yapf - Yet another Python code formatter from Google.</li> </ul> </li> <li>Static Type Checkers, also see awesome-python-typing<ul> <li>mypy - Check variable types during compile time.</li> <li>pyre-check - Performant type checking.</li> <li>typeshed - Collection of library stubs for Python, with static types.</li> </ul> </li> <li>Static Type Annotations Generators<ul> <li>MonkeyType - A system for Python that generates static type annotations by collecting runtime types.</li> <li>pytype - Pytype checks and infers types for Python code - without requiring type annotations.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#command-line-interface-development","title":"Command-line Interface Development","text":"<p>Libraries for building command-line applications.</p> <ul> <li>Command-line Application Development<ul> <li>cement - CLI Application Framework for Python.</li> <li>click - A package for creating beautiful command line interfaces in a composable way.</li> <li>cliff - A framework for creating command-line programs with multi-level commands.</li> <li>docopt - Pythonic command line arguments parser.</li> <li>python-fire - A library for creating command line interfaces from absolutely any Python object.</li> <li>python-prompt-toolkit - A library for building powerful interactive command lines.</li> </ul> </li> <li>Terminal Rendering<ul> <li>alive-progress - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li> <li>asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li> <li>bashplotlib - Making basic plots in the terminal.</li> <li>colorama - Cross-platform colored terminal text.</li> <li>rich - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li> <li>tqdm - Fast, extensible progress bar for loops and CLI.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#command-line-tools","title":"Command-line Tools","text":"<p>Useful CLI-based tools for productivity.</p> <ul> <li>Productivity Tools<ul> <li>copier - A library and command-line utility for rendering projects templates.</li> <li>cookiecutter - A command-line utility that creates projects from cookiecutters (project templates).</li> <li>doitlive - A tool for live presentations in the terminal.</li> <li>howdoi - Instant coding answers via the command line.</li> <li>Invoke - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li> <li>PathPicker - Select files out of bash output.</li> <li>percol - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li> <li>thefuck - Correcting your previous console command.</li> <li>tmuxp - A tmux session manager.</li> <li>try - A dead simple CLI to try out python packages - it's never been easier.</li> </ul> </li> <li>CLI Enhancements<ul> <li>httpie - A command line HTTP client, a user-friendly cURL replacement.</li> <li>iredis - Redis CLI with autocompletion and syntax highlighting.</li> <li>kube-shell - An integrated shell for working with the Kubernetes CLI.</li> <li>litecli - SQLite CLI with autocompletion and syntax highlighting.</li> <li>mycli - MySQL CLI with autocompletion and syntax highlighting.</li> <li>pgcli - PostgreSQL CLI with autocompletion and syntax highlighting.</li> <li>saws - A Supercharged aws-cli.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#compatibility","title":"Compatibility","text":"<p>Libraries for migrating from Python 2 to 3.</p> <ul> <li>python-future - The missing compatibility layer between Python 2 and Python 3.</li> <li>modernize - Modernizes Python code for eventual Python 3 migration.</li> <li>six - Python 2 and 3 compatibility utilities.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#computer-vision","title":"Computer Vision","text":"<p>Libraries for Computer Vision.</p> <ul> <li>EasyOCR - Ready-to-use OCR with 40+ languages supported.</li> <li>Face Recognition - Simple facial recognition library.</li> <li>Kornia - Open Source Differentiable Computer Vision Library for PyTorch.</li> <li>OpenCV - Open Source Computer Vision Library.</li> <li>pytesseract - A wrapper for Google Tesseract OCR.</li> <li>SimpleCV - An open source framework for building computer vision applications.</li> <li>tesserocr - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#concurrency-and-parallelism","title":"Concurrency and Parallelism","text":"<p>Libraries for concurrent and parallel execution.</p> <ul> <li>concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables.</li> <li>eventlet - Asynchronous framework with WSGI support.</li> <li>gevent - A coroutine-based Python networking library that uses greenlet.</li> <li>multiprocessing - (Python standard library) Process-based parallelism.</li> <li>scoop - Scalable Concurrent Operations in Python.</li> <li>uvloop - Ultra fast implementation of <code>asyncio</code> event loop on top of <code>libuv</code>.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#configuration","title":"Configuration","text":"<p>Libraries for storing and parsing configuration options.</p> <ul> <li>configobj - INI file parser with validation.</li> <li>configparser - (Python standard library) INI file parser.</li> <li>hydra - Hydra is a framework for elegantly configuring complex applications.</li> <li>profig - Config from multiple formats with value conversion.</li> <li>python-decouple - Strict separation of settings from code.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#cryptography","title":"Cryptography","text":"<ul> <li>cryptography - A package designed to expose cryptographic primitives and recipes to Python developers.</li> <li>paramiko - The leading native Python SSHv2 protocol library.</li> <li>passlib - Secure password storage/hashing library, very high level.</li> <li>pynacl - Python binding to the Networking and Cryptography (NaCl) library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#data-analysis","title":"Data Analysis","text":"<p>Libraries for data analyzing.</p> <ul> <li>AWS Data Wrangler - Pandas on AWS.</li> <li>Blaze - NumPy and Pandas interface to Big Data.</li> <li>Open Mining - Business Intelligence (BI) in Pandas interface.</li> <li>Optimus - Agile Data Science Workflows made easy with PySpark.</li> <li>Orange - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li> <li>Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#data-validation","title":"Data Validation","text":"<p>Libraries for validating data. Used for forms in many cases.</p> <ul> <li>Cerberus - A lightweight and extensible data validation library.</li> <li>colander - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li> <li>jsonschema - An implementation of JSON Schema for Python.</li> <li>schema - A library for validating Python data structures.</li> <li>Schematics - Data Structure Validation.</li> <li>valideer - Lightweight extensible data validation and adaptation library.</li> <li>voluptuous - A Python data validation library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#data-visualization","title":"Data Visualization","text":"<p>Libraries for visualizing data.</p> <ul> <li>Altair - Declarative statistical visualization library for Python.</li> <li>Bokeh - Interactive Web Plotting for Python.</li> <li>bqplot - Interactive Plotting Library for the Jupyter Notebook.</li> <li>Cartopy - A cartographic python library with matplotlib support.</li> <li>Dash - Built on top of Flask, React and Plotly aimed at analytical web applications.<ul> <li>awesome-dash</li> </ul> </li> <li>diagrams - Diagram as Code.</li> <li>Matplotlib - A Python 2D plotting library.</li> <li>plotnine - A grammar of graphics for Python based on ggplot2.</li> <li>Pygal - A Python SVG Charts Creator.</li> <li>PyGraphviz - Python interface to Graphviz.</li> <li>PyQtGraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li> <li>Seaborn - Statistical data visualization using Matplotlib.</li> <li>VisPy - High-performance scientific visualization based on OpenGL.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#database","title":"Database","text":"<p>Databases implemented in Python.</p> <ul> <li>pickleDB - A simple and lightweight key-value store for Python.</li> <li>tinydb - A tiny, document-oriented database.</li> <li>ZODB - A native object database for Python. A key-value and object graph database.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#database-drivers","title":"Database Drivers","text":"<p>Libraries for connecting and operating databases.</p> <ul> <li>MySQL - awesome-mysql<ul> <li>mysqlclient - MySQL connector with Python 3 support (mysql-python fork).</li> <li>PyMySQL - A pure Python MySQL driver compatible to mysql-python.</li> </ul> </li> <li>PostgreSQL - awesome-postgres<ul> <li>psycopg2 - The most popular PostgreSQL adapter for Python.</li> <li>queries - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li> </ul> </li> <li>SQlite - awesome-sqlite<ul> <li>sqlite3 - (Python standard library) SQlite interface compliant with DB-API 2.0</li> <li>SuperSQLite - A supercharged SQLite library built on top of apsw.</li> </ul> </li> <li>Other Relational Databases<ul> <li>pymssql - A simple database interface to Microsoft SQL Server.</li> <li>clickhouse-driver - Python driver with native interface for ClickHouse.</li> </ul> </li> <li>NoSQL Databases<ul> <li>cassandra-driver - The Python Driver for Apache Cassandra.</li> <li>happybase - A developer-friendly library for Apache HBase.</li> <li>kafka-python - The Python client for Apache Kafka.</li> <li>py2neo - A client library and toolkit for working with Neo4j.</li> <li>pymongo - The official Python client for MongoDB.</li> <li>redis-py - The Python client for Redis.</li> </ul> </li> <li>Asynchronous Clients<ul> <li>motor - The async Python driver for MongoDB.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#date-and-time","title":"Date and Time","text":"<p>Libraries for working with dates and times.</p> <ul> <li>Arrow - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li> <li>Chronyk - A Python 3 library for parsing human-written times and dates.</li> <li>dateutil - Extensions to the standard Python datetime module.</li> <li>delorean - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li> <li>maya - Datetimes for Humans.</li> <li>moment - A Python library for dealing with dates/times. Inspired by Moment.js.</li> <li>Pendulum - Python datetimes made easy.</li> <li>PyTime - An easy-to-use Python module which aims to operate date/time/datetime by string.</li> <li>pytz - World timezone definitions, modern and historical. Brings the tz database into Python.</li> <li>when.py - Providing user-friendly functions to help perform common date and time actions.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#debugging-tools","title":"Debugging Tools","text":"<p>Libraries for debugging code.</p> <ul> <li>pdb-like Debugger<ul> <li>ipdb - IPython-enabled pdb.</li> <li>pdb++ - Another drop-in replacement for pdb.</li> <li>pudb - A full-screen, console-based Python debugger.</li> <li>wdb - An improbable web debugger through WebSockets.</li> </ul> </li> <li>Tracing<ul> <li>lptrace - strace for Python programs.</li> <li>manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li> <li>pyringe - Debugger capable of attaching to and injecting code into Python processes.</li> <li>python-hunter - A flexible code tracing toolkit.</li> </ul> </li> <li>Profiler<ul> <li>line_profiler - Line-by-line profiling.</li> <li>memory_profiler - Monitor Memory usage of Python code.</li> <li>py-spy - A sampling profiler for Python programs. Written in Rust.</li> <li>pyflame - A ptracing profiler For Python.</li> <li>vprof - Visual Python profiler.</li> </ul> </li> <li>Others<ul> <li>django-debug-toolbar - Display various debug information for Django.</li> <li>django-devserver - A drop-in replacement for Django's runserver.</li> <li>flask-debugtoolbar - A port of the django-debug-toolbar to flask.</li> <li>icecream - Inspect variables, expressions, and program execution with a single, simple function call.</li> <li>pyelftools - Parsing and analyzing ELF files and DWARF debugging information.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#deep-learning","title":"Deep Learning","text":"<p>Frameworks for Neural Networks and Deep Learning.</p> <ul> <li>caffe - A fast open framework for deep learning..</li> <li>keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li> <li>mxnet - A deep learning framework designed for both efficiency and flexibility.</li> <li>pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li> <li>SerpentAI - Game agent framework. Use any video game as a deep learning sandbox.</li> <li>tensorflow - The most popular Deep Learning framework created by Google.</li> <li>Theano - A library for fast numerical computation.</li> <li>lightning - Deep learning framework to train, deploy, and ship AI products Lightning fast.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#devops-tools","title":"DevOps Tools","text":"<p>Software and libraries for DevOps.</p> <ul> <li>Configuration Management<ul> <li>ansible - A radically simple IT automation platform.</li> <li>cloudinit - A multi-distribution package that handles early initialization of a cloud instance.</li> <li>OpenStack - Open source software for building private and public clouds.</li> <li>pyinfra - A versatile CLI tools and python libraries to automate infrastructure.</li> <li>saltstack - Infrastructure automation and management system.</li> </ul> </li> <li>SSH-style Deployment<ul> <li>cuisine - Chef-like functionality for Fabric.</li> <li>fabric - A simple, Pythonic tool for remote execution and deployment.</li> <li>fabtools - Tools for writing awesome Fabric files.</li> </ul> </li> <li>Process Management<ul> <li>honcho - A Python clone of Foreman, for managing Procfile-based applications.</li> <li>supervisor - Supervisor process control system for UNIX.</li> </ul> </li> <li>Monitoring<ul> <li>psutil - A cross-platform process and system utilities module.</li> </ul> </li> <li>Backup<ul> <li>BorgBackup - A deduplicating archiver with compression and encryption.</li> </ul> </li> <li>Others<ul> <li>docker-compose - Fast, isolated development environments using Docker.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#distributed-computing","title":"Distributed Computing","text":"<p>Frameworks and libraries for Distributed Computing.</p> <ul> <li>Batch Processing<ul> <li>dask - A flexible parallel computing library for analytic computing.</li> <li>luigi - A module that helps you build complex pipelines of batch jobs.</li> <li>mrjob - Run MapReduce jobs on Hadoop or Amazon Web Services.</li> <li>PySpark - Apache Spark Python API.</li> <li>Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li> </ul> </li> <li>Stream Processing<ul> <li>faust - A stream processing library, porting the ideas from Kafka Streams to Python.</li> <li>streamparse - Run Python code against real-time streams of data via Apache Storm.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#distribution","title":"Distribution","text":"<p>Libraries to create packaged executables for release distribution.</p> <ul> <li>dh-virtualenv - Build and distribute a virtualenv as a Debian package.</li> <li>Nuitka - Compile scripts, modules, packages to an executable or extension module.</li> <li>py2app - Freezes Python scripts (Mac OS X).</li> <li>py2exe - Freezes Python scripts (Windows).</li> <li>pyarmor - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li> <li>PyInstaller - Converts Python programs into stand-alone executables (cross-platform).</li> <li>pynsist - A tool to build Windows installers, installers bundle Python itself.</li> <li>shiv - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#documentation","title":"Documentation","text":"<p>Libraries for generating project documentation.</p> <ul> <li>sphinx - Python Documentation generator.<ul> <li>awesome-sphinxdoc</li> </ul> </li> <li>pdoc - Epydoc replacement to auto generate API documentation for Python libraries.</li> <li>pycco - The literate-programming-style documentation generator.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#downloader","title":"Downloader","text":"<p>Libraries for downloading.</p> <ul> <li>akshare - A financial data interface library, built for human beings!</li> <li>s3cmd - A command line tool for managing Amazon S3 and CloudFront.</li> <li>s4cmd - Super S3 command line tool, good for higher performance.</li> <li>you-get - A YouTube/Youku/Niconico video downloader written in Python 3.</li> <li>youtube-dl - A small command-line program to download videos from YouTube.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#e-commerce","title":"E-commerce","text":"<p>Frameworks and libraries for e-commerce and payments.</p> <ul> <li>alipay - Unofficial Alipay API for Python.</li> <li>Cartridge - A shopping cart app built using the Mezzanine.</li> <li>django-oscar - An open-source e-commerce framework for Django.</li> <li>django-shop - A Django based shop system.</li> <li>forex-python - Foreign exchange rates, Bitcoin price index and currency conversion.</li> <li>merchant - A Django app to accept payments from various payment processors.</li> <li>money - <code>Money</code> class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.</li> <li>python-currencies - Display money format and its filthy currencies.</li> <li>saleor - Headless open-source e-commerce platform.</li> <li>shoop - An open source E-Commerce platform based on Django.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#editor-plugins-and-ides","title":"Editor Plugins and IDEs","text":"<ul> <li>Emacs<ul> <li>elpy - Emacs Python Development Environment.</li> </ul> </li> <li>Sublime Text<ul> <li>anaconda - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li> <li>SublimeJEDI - A Sublime Text plugin to the awesome auto-complete library Jedi.</li> </ul> </li> <li>Vim<ul> <li>jedi-vim - Vim bindings for the Jedi auto-completion library for Python.</li> <li>python-mode - An all in one plugin for turning Vim into a Python IDE.</li> <li>YouCompleteMe - Includes Jedi-based completion engine for Python.</li> </ul> </li> <li>Visual Studio<ul> <li>PTVS - Python Tools for Visual Studio.</li> </ul> </li> <li>Visual Studio Code<ul> <li>Python - The official VSCode extension with rich support for Python.</li> </ul> </li> <li>IDE<ul> <li>PyCharm - Commercial Python IDE by JetBrains. Has free community edition available.</li> <li>spyder - Open Source Python IDE.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#email","title":"Email","text":"<p>Libraries for sending and parsing email.</p> <ul> <li>Mail Servers<ul> <li>modoboa - A mail hosting and management platform including a modern Web UI.</li> <li>salmon - A Python Mail Server.</li> </ul> </li> <li>Clients<ul> <li>imbox - Python IMAP for Humans.</li> <li>yagmail - Yet another Gmail/SMTP client.</li> </ul> </li> <li>Others<ul> <li>flanker - An email address and Mime parsing library.</li> <li>mailer - High-performance extensible mail delivery framework.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#enterprise-application-integrations","title":"Enterprise Application Integrations","text":"<p>Platforms and tools for systems integrations in enterprise environments</p> <ul> <li>Zato - ESB, SOA, REST, APIs and Cloud Integrations in Python.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#environment-management","title":"Environment Management","text":"<p>Libraries for Python version and virtual environment management.</p> <ul> <li>pyenv - Simple Python version management.</li> <li>virtualenv - A tool to create isolated Python environments.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#file","title":"File","text":"<p>Libraries for file manipulation and MIME type detection.</p> <ul> <li>mimetypes - (Python standard library) Map filenames to MIME types.</li> <li>path.py - A module wrapper for os.path.</li> <li>pathlib - (Python standard library) An cross-platform, object-oriented path library.</li> <li>PyFilesystem2 - Python's filesystem abstraction layer.</li> <li>python-magic - A Python interface to the libmagic file type identification library.</li> <li>Unipath - An object-oriented approach to file/directory operations.</li> <li>watchdog - API and shell utilities to monitor file system events.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#foreign-function-interface","title":"Foreign Function Interface","text":"<p>Libraries for providing foreign function interface.</p> <ul> <li>cffi - Foreign Function Interface for Python calling C code.</li> <li>ctypes - (Python standard library) Foreign Function Interface for Python calling C code.</li> <li>PyCUDA - A Python wrapper for Nvidia's CUDA API.</li> <li>SWIG - Simplified Wrapper and Interface Generator.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#forms","title":"Forms","text":"<p>Libraries for working with forms.</p> <ul> <li>Deform - Python HTML form generation library influenced by the formish form generation library.</li> <li>django-bootstrap3 - Bootstrap 3 integration with Django.</li> <li>django-bootstrap4 - Bootstrap 4 integration with Django.</li> <li>django-crispy-forms - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li> <li>django-remote-forms - A platform independent Django form serializer.</li> <li>WTForms - A flexible forms validation and rendering library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#functional-programming","title":"Functional Programming","text":"<p>Functional Programming with Python.</p> <ul> <li>Coconut - A variant of Python built for simple, elegant, Pythonic functional programming.</li> <li>CyToolz - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li> <li>fn.py - Functional programming in Python: implementation of missing features to enjoy FP.</li> <li>funcy - A fancy and practical functional tools.</li> <li>more-itertools - More routines for operating on iterables, beyond <code>itertools</code>.</li> <li>returns - A set of type-safe monads, transformers, and composition utilities.</li> <li>Toolz - A collection of functional utilities for iterators, functions, and dictionaries.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#gui-development","title":"GUI Development","text":"<p>Libraries for working with graphical user interface applications.</p> <ul> <li>curses - Built-in wrapper for ncurses used to create terminal GUI applications.</li> <li>Eel - A library for making simple Electron-like offline HTML/JS GUI apps.</li> <li>enaml - Creating beautiful user-interfaces with Declarative Syntax like QML.</li> <li>Flexx - Flexx is a pure Python toolkit for creating GUI's, that uses web technology for its rendering.</li> <li>Gooey - Turn command line programs into a full GUI application with one line.</li> <li>kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li> <li>pyglet - A cross-platform windowing and multimedia library for Python.</li> <li>PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li> <li>PyQt - Python bindings for the Qt cross-platform application and UI framework.</li> <li>PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi.</li> <li>pywebview - A lightweight cross-platform native wrapper around a webview component.</li> <li>Tkinter - Tkinter is Python's de-facto standard GUI package.</li> <li>Toga - A Python native, OS native GUI toolkit.</li> <li>urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li> <li>wxPython - A blending of the wxWidgets C++ class library with the Python.</li> <li>DearPyGui - A Simple GPU accelerated Python GUI framework</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#graphql","title":"GraphQL","text":"<p>Libraries for working with GraphQL.</p> <ul> <li>graphene - GraphQL framework for Python.</li> <li>tartiflette-aiohttp - An <code>aiohttp</code>-based wrapper for Tartiflette to expose GraphQL APIs over HTTP.</li> <li>tartiflette-asgi - ASGI support for the Tartiflette GraphQL engine.</li> <li>tartiflette - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#game-development","title":"Game Development","text":"<p>Awesome game development libraries.</p> <ul> <li>Arcade - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li> <li>Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li> <li>Harfang3D - Python framework for 3D, VR and game development.</li> <li>Panda3D - 3D game engine developed by Disney.</li> <li>Pygame - Pygame is a set of Python modules designed for writing games.</li> <li>PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li> <li>PyOpenGL - Python ctypes bindings for OpenGL and it's related APIs.</li> <li>PySDL2 - A ctypes based wrapper for the SDL2 library.</li> <li>RenPy - A Visual Novel engine.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#geolocation","title":"Geolocation","text":"<p>Libraries for geocoding addresses and working with latitudes and longitudes.</p> <ul> <li>django-countries - A Django app that provides a country field for models and forms.</li> <li>GeoDjango - A world-class geographic web framework.</li> <li>GeoIP - Python API for MaxMind GeoIP Legacy Database.</li> <li>geojson - Python bindings and utilities for GeoJSON.</li> <li>geopy - Python Geocoding Toolbox.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#html-manipulation","title":"HTML Manipulation","text":"<p>Libraries for working with HTML and XML.</p> <ul> <li>BeautifulSoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li> <li>bleach - A whitelist-based HTML sanitization and text linkification library.</li> <li>cssutils - A CSS library for Python.</li> <li>html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments.</li> <li>lxml - A very fast, easy-to-use and versatile library for handling HTML and XML.</li> <li>MarkupSafe - Implements a XML/HTML/XHTML Markup safe string for Python.</li> <li>pyquery - A jQuery-like library for parsing HTML.</li> <li>untangle - Converts XML documents to Python objects for easy access.</li> <li>WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF.</li> <li>xmldataset - Simple XML Parsing.</li> <li>xmltodict - Working with XML feel like you are working with JSON.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#http-clients","title":"HTTP Clients","text":"<p>Libraries for working with HTTP.</p> <ul> <li>grequests - requests + gevent for asynchronous HTTP requests.</li> <li>httplib2 - Comprehensive HTTP client library.</li> <li>httpx - A next generation HTTP client for Python.</li> <li>requests - HTTP Requests for Humans.</li> <li>treq - Python requests like API built on top of Twisted's HTTP client.</li> <li>urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#hardware","title":"Hardware","text":"<p>Libraries for programming with hardware.</p> <ul> <li>ino - Command line toolkit for working with Arduino.</li> <li>keyboard - Hook and simulate global keyboard events on Windows and Linux.</li> <li>mouse - Hook and simulate global mouse events on Windows and Linux.</li> <li>Pingo - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li> <li>PyUserInput - A module for cross-platform control of the mouse and keyboard.</li> <li>scapy - A brilliant packet manipulation library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#image-processing","title":"Image Processing","text":"<p>Libraries for manipulating images.</p> <ul> <li>hmap - Image histogram remapping.</li> <li>imgSeek - A project for searching a collection of images using visual similarity.</li> <li>nude.py - Nudity detection.</li> <li>pagan - Retro identicon (Avatar) generation based on input string and hash.</li> <li>pillow - Pillow is the friendly PIL fork.</li> <li>python-barcode - Create barcodes in Python with no extra dependencies.</li> <li>pygram - Instagram-like image filters.</li> <li>PyMatting - A library for alpha matting.</li> <li>python-qrcode - A pure Python QR Code generator.</li> <li>pywal - A tool that generates color schemes from images.</li> <li>pyvips - A fast image processing library with low memory needs.</li> <li>Quads - Computer art based on quadtrees.</li> <li>scikit-image - A Python library for (scientific) image processing.</li> <li>thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li> <li>wand - Python bindings for MagickWand, C API for ImageMagick.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#implementations","title":"Implementations","text":"<p>Implementations of Python.</p> <ul> <li>CLPython - Implementation of the Python programming language written in Common Lisp.</li> <li>CPython - Default, most widely used implementation of the Python programming language written in C.</li> <li>Cython - Optimizing Static Compiler for Python.</li> <li>Grumpy - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li> <li>IronPython - Implementation of the Python programming language written in C#.</li> <li>Jython - Implementation of Python programming language written in Java for the JVM.</li> <li>MicroPython - A lean and efficient Python programming language implementation.</li> <li>Numba - Python JIT compiler to LLVM aimed at scientific Python.</li> <li>PeachPy - x86-64 assembler embedded in Python.</li> <li>Pyjion - A JIT for Python based upon CoreCLR.</li> <li>PyPy - A very fast and compliant implementation of the Python language.</li> <li>Pyston - A Python implementation using JIT techniques.</li> <li>Stackless Python - An enhanced version of the Python programming language.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#interactive-interpreter","title":"Interactive Interpreter","text":"<p>Interactive Python interpreters (REPL).</p> <ul> <li>bpython - A fancy interface to the Python interpreter.</li> <li>Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively.<ul> <li>awesome-jupyter</li> </ul> </li> <li>ptpython - Advanced Python REPL built on top of the python-prompt-toolkit.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#internationalization","title":"Internationalization","text":"<p>Libraries for working with i18n.</p> <ul> <li>Babel - An internationalization library for Python.</li> <li>PyICU - A wrapper of International Components for Unicode C++ library (ICU).</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#job-scheduler","title":"Job Scheduler","text":"<p>Libraries for scheduling jobs.</p> <ul> <li>Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows.</li> <li>APScheduler - A light but powerful in-process task scheduler that lets you schedule functions.</li> <li>django-schedule - A calendaring app for Django.</li> <li>doit - A task runner and build tool.</li> <li>gunnery - Multipurpose task execution tool for distributed systems with web-based interface.</li> <li>Joblib - A set of tools to provide lightweight pipelining in Python.</li> <li>Plan - Writing crontab file in Python like a charm.</li> <li>Prefect - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li> <li>schedule - Python job scheduling for humans.</li> <li>Spiff - A powerful workflow engine implemented in pure Python.</li> <li>TaskFlow - A Python library that helps to make task execution easy, consistent and reliable.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#logging","title":"Logging","text":"<p>Libraries for generating and working with logs.</p> <ul> <li>logbook - Logging replacement for Python.</li> <li>logging - (Python standard library) Logging facility for Python.</li> <li>loguru - Library which aims to bring enjoyable logging in Python.</li> <li>sentry-python - Sentry SDK for Python.</li> <li>structlog - Structured logging made easy.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#machine-learning","title":"Machine Learning","text":"<p>Libraries for Machine Learning.</p> <ul> <li>gym - A toolkit for developing and comparing reinforcement learning algorithms.</li> <li>H2O - Open Source Fast Scalable Machine Learning Platform.</li> <li>Metrics - Machine learning evaluation metrics.</li> <li>NuPIC - Numenta Platform for Intelligent Computing.</li> <li>scikit-learn - The most popular Python library for Machine Learning.</li> <li>Spark ML - Apache Spark's scalable Machine Learning library.</li> <li>vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit.</li> <li>xgboost - A scalable, portable, and distributed gradient boosting library.</li> <li>MindsDB - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#microsoft-windows","title":"Microsoft Windows","text":"<p>Python programming on Microsoft Windows.</p> <ul> <li>Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li> <li>pythonlibs - Unofficial Windows binaries for Python extension packages.</li> <li>PythonNet - Python Integration with the .NET Common Language Runtime (CLR).</li> <li>PyWin32 - Python Extensions for Windows.</li> <li>WinPython - Portable development environment for Windows 7/8.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#miscellaneous","title":"Miscellaneous","text":"<p>Useful libraries or tools that don't fit in the categories above.</p> <ul> <li>blinker - A fast Python in-process signal/event dispatching system.</li> <li>boltons - A set of pure-Python utilities.</li> <li>itsdangerous - Various helpers to pass trusted data to untrusted environments.</li> <li>magenta - A tool to generate music and art using artificial intelligence.</li> <li>pluginbase - A simple but flexible plugin system for Python.</li> <li>tryton - A general purpose business framework.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#natural-language-processing","title":"Natural Language Processing","text":"<p>Libraries for working with human languages.</p> <ul> <li>General<ul> <li>gensim - Topic Modeling for Humans.</li> <li>langid.py - Stand-alone language identification system.</li> <li>nltk - A leading platform for building Python programs to work with human language data.</li> <li>pattern - A web mining module.</li> <li>polyglot - Natural language pipeline supporting hundreds of languages.</li> <li>pytext - A natural language modeling framework based on PyTorch.</li> <li>PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research.</li> <li>spacy - A library for industrial-strength natural language processing in Python and Cython.</li> <li>Stanza - The Stanford NLP Group's official Python library, supporting 60+ languages.</li> </ul> </li> <li>Chinese<ul> <li>funNLP - A collection of tools and datasets for Chinese NLP.</li> <li>jieba - The most popular Chinese text segmentation library.</li> <li>pkuseg-python - A toolkit for Chinese word segmentation in various domains.</li> <li>snownlp - A library for processing Chinese text.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#network-virtualization","title":"Network Virtualization","text":"<p>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</p> <ul> <li>mininet - A popular network emulator and API written in Python.</li> <li>napalm - Cross-vendor API to manipulate network devices.</li> <li>pox - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#news-feed","title":"News Feed","text":"<p>Libraries for building user's activities.</p> <ul> <li>django-activity-stream - Generating generic activity streams from the actions on your site.</li> <li>Stream Framework - Building news feed and notification systems using Cassandra and Redis.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#orm","title":"ORM","text":"<p>Libraries that implement Object-Relational Mapping or data mapping techniques.</p> <ul> <li>Relational Databases<ul> <li>Django Models - The Django ORM.</li> <li>SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper.<ul> <li>awesome-sqlalchemy</li> </ul> </li> <li>dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li> <li>orator -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li> <li>orm - An async ORM.</li> <li>peewee - A small, expressive ORM.</li> <li>pony - ORM that provides a generator-oriented interface to SQL.</li> <li>pydal - A pure Python Database Abstraction Layer.</li> </ul> </li> <li>NoSQL Databases<ul> <li>hot-redis - Rich Python data types for Redis.</li> <li>mongoengine - A Python Object-Document-Mapper for working with MongoDB.</li> <li>PynamoDB - A Pythonic interface for Amazon DynamoDB.</li> <li>redisco - A Python Library for Simple Models and Containers Persisted in Redis.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#package-management","title":"Package Management","text":"<p>Libraries for package and dependency management.</p> <ul> <li>pip - The package installer for Python.<ul> <li>pip-tools - A set of tools to keep your pinned Python dependencies fresh.</li> <li>PyPI</li> </ul> </li> <li>conda - Cross-platform, Python-agnostic binary package manager.</li> <li>poetry - Python dependency management and packaging made easy.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#package-repositories","title":"Package Repositories","text":"<p>Local PyPI repository server and proxies.</p> <ul> <li>bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li> <li>devpi - PyPI server and packaging/testing/release tool.</li> <li>localshop - Local PyPI server (custom packages and auto-mirroring of pypi).</li> <li>warehouse - Next generation Python Package Repository (PyPI).</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#penetration-testing","title":"Penetration Testing","text":"<p>Frameworks and tools for penetration testing.</p> <ul> <li>fsociety - A Penetration testing framework.</li> <li>setoolkit - A toolkit for social engineering.</li> <li>sqlmap - Automatic SQL injection and database takeover tool.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#permissions","title":"Permissions","text":"<p>Libraries that allow or deny users access to data or functionality.</p> <ul> <li>django-guardian - Implementation of per object permissions for Django 1.2+</li> <li>django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#processes","title":"Processes","text":"<p>Libraries for starting and communicating with OS processes.</p> <ul> <li>delegator.py - Subprocesses for Humans 2.0.</li> <li>sarge - Yet another wrapper for subprocess.</li> <li>sh - A full-fledged subprocess replacement for Python.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#recommender-systems","title":"Recommender Systems","text":"<p>Libraries for building recommender systems.</p> <ul> <li>annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li> <li>fastFM - A library for Factorization Machines.</li> <li>implicit - A fast Python implementation of collaborative filtering for implicit datasets.</li> <li>libffm - A library for Field-aware Factorization Machine (FFM).</li> <li>lightfm - A Python implementation of a number of popular recommendation algorithms.</li> <li>spotlight - Deep recommender models using PyTorch.</li> <li>Surprise - A scikit for building and analyzing recommender systems.</li> <li>tensorrec - A Recommendation Engine Framework in TensorFlow.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#refactoring","title":"Refactoring","text":"<p>Refactoring tools and libraries for Python</p> <ul> <li>Bicycle Repair Man - Bicycle Repair Man, a refactoring tool for Python.</li> <li>Bowler - Safe code refactoring for modern Python.</li> <li>Rope -  Rope is a python refactoring library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#restful-api","title":"RESTful API","text":"<p>Libraries for building RESTful APIs.</p> <ul> <li>Django<ul> <li>django-rest-framework - A powerful and flexible toolkit to build web APIs.</li> <li>django-tastypie - Creating delicious APIs for Django apps.</li> </ul> </li> <li>Flask<ul> <li>eve - REST API framework powered by Flask, MongoDB and good intentions.</li> <li>flask-api - Browsable Web APIs for Flask.</li> <li>flask-restful - Quickly building REST APIs for Flask.</li> </ul> </li> <li>Pyramid<ul> <li>cornice - A RESTful framework for Pyramid.</li> </ul> </li> <li>Framework agnostic<ul> <li>apistar - A smart Web API framework, designed for Python 3.</li> <li>falcon - A high-performance framework for building cloud APIs and web app backends.</li> <li>fastapi - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li> <li>hug - A Python 3 framework for cleanly exposing APIs.</li> <li>sandman2 - Automated REST APIs for existing database-driven systems.</li> <li>sanic - A Python 3.6+ web server and web framework that's written to go fast.</li> <li>vibora - Fast, efficient and asynchronous Web framework inspired by Flask.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#robotics","title":"Robotics","text":"<p>Libraries for robotics.</p> <ul> <li>PythonRobotics - This is a compilation of various robotics algorithms with visualizations.</li> <li>rospy - This is a library for ROS (Robot Operating System).</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#rpc-servers","title":"RPC Servers","text":"<p>RPC-compatible servers.</p> <ul> <li>RPyC (Remote Python Call) - A transparent and symmetric RPC library for Python</li> <li>zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#science","title":"Science","text":"<p>Libraries for scientific computing.</p> <ul> <li>astropy - A community Python library for Astronomy.</li> <li>bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li> <li>bccb - Collection of useful code related to biological analysis.</li> <li>Biopython - Biopython is a set of freely available tools for biological computation.</li> <li>cclib - A library for parsing and interpreting the results of computational chemistry packages.</li> <li>Colour - Implementing a comprehensive number of colour theory transformations and algorithms.</li> <li>Karate Club - Unsupervised machine learning toolbox for graph structured data.</li> <li>NetworkX - A high-productivity software for complex networks.</li> <li>NIPY - A collection of neuroimaging toolkits.</li> <li>NumPy - A fundamental package for scientific computing with Python.</li> <li>ObsPy - A Python toolbox for seismology.</li> <li>Open Babel - A chemical toolbox designed to speak the many languages of chemical data.</li> <li>PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li> <li>PyMC - Markov Chain Monte Carlo sampling toolkit.</li> <li>QuTiP - Quantum Toolbox in Python.</li> <li>RDKit - Cheminformatics and Machine Learning Software.</li> <li>SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li> <li>SimPy -  A process-based discrete-event simulation framework.</li> <li>statsmodels - Statistical modeling and econometrics in Python.</li> <li>SymPy - A Python library for symbolic mathematics.</li> <li>Zipline - A Pythonic algorithmic trading library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#search","title":"Search","text":"<p>Libraries and software for indexing and performing search queries on data.</p> <ul> <li>django-haystack - Modular search for Django.</li> <li>elasticsearch-dsl-py - The official high-level Python client for Elasticsearch.</li> <li>elasticsearch-py - The official low-level Python client for Elasticsearch.</li> <li>pysolr - A lightweight Python wrapper for Apache Solr.</li> <li>whoosh - A fast, pure Python search engine library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#serialization","title":"Serialization","text":"<p>Libraries for serializing complex data types</p> <ul> <li>marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes.</li> <li>pysimdjson - A Python bindings for simdjson.</li> <li>python-rapidjson - A Python wrapper around RapidJSON.</li> <li>ultrajson - A fast JSON decoder and encoder written in C with Python bindings.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#serverless-frameworks","title":"Serverless Frameworks","text":"<p>Frameworks for developing serverless Python code.</p> <ul> <li>python-lambda - A toolkit for developing and deploying Python code in AWS Lambda.</li> <li>Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#shell","title":"Shell","text":"<p>Shells based on Python.</p> <ul> <li>xonsh - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#specific-formats-processing","title":"Specific Formats Processing","text":"<p>Libraries for parsing and manipulating specific text formats.</p> <ul> <li>General<ul> <li>tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li> </ul> </li> <li>Office<ul> <li>docxtpl - Editing a docx document by jinja2 template</li> <li>openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li> <li>pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li> <li>python-docx - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li> <li>python-pptx - Python library for creating and updating PowerPoint (.pptx) files.</li> <li>unoconv - Convert between any document format supported by LibreOffice/OpenOffice.</li> <li>XlsxWriter - A Python module for creating Excel .xlsx files.</li> <li>xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li> <li>xlwt / xlrd - Writing and reading data and formatting information from Excel files.</li> </ul> </li> <li>PDF<ul> <li>PDFMiner - A tool for extracting information from PDF documents.</li> <li>PyPDF2 - A library capable of splitting, merging and transforming PDF pages.</li> <li>ReportLab - Allowing Rapid creation of rich PDF documents.</li> </ul> </li> <li>Markdown<ul> <li>Mistune - Fastest and full featured pure Python parsers of Markdown.</li> <li>Python-Markdown - A Python implementation of John Gruber\u2019s Markdown.</li> </ul> </li> <li>YAML<ul> <li>PyYAML - YAML implementations for Python.</li> </ul> </li> <li>CSV<ul> <li>csvkit - Utilities for converting to and working with CSV.</li> </ul> </li> <li>Archive<ul> <li>unp - A command line tool that can unpack archives easily.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#static-site-generator","title":"Static Site Generator","text":"<p>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</p> <ul> <li>lektor - An easy to use static CMS and blog engine.</li> <li>mkdocs - Markdown friendly documentation generator.</li> <li>makesite - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li> <li>nikola - A static website and blog generator.</li> <li>pelican - Static site generator that supports Markdown and reST syntax.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#tagging","title":"Tagging","text":"<p>Libraries for tagging items.</p> <ul> <li>django-taggit - Simple tagging for Django.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#task-queues","title":"Task Queues","text":"<p>Libraries for working with task queues.</p> <ul> <li>celery - An asynchronous task queue/job queue based on distributed message passing.</li> <li>dramatiq - A fast and reliable background task processing library for Python 3.</li> <li>huey - Little multi-threaded task queue.</li> <li>mrq - A distributed worker task queue in Python using Redis &amp; gevent.</li> <li>rq - Simple job queues for Python.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#template-engine","title":"Template Engine","text":"<p>Libraries and tools for templating and lexing.</p> <ul> <li>Genshi - Python templating toolkit for generation of web-aware output.</li> <li>Jinja2 - A modern and designer friendly templating language.</li> <li>Mako - Hyperfast and lightweight templating for the Python platform.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#testing","title":"Testing","text":"<p>Libraries for testing codebases and generating test data.</p> <ul> <li>Testing Frameworks<ul> <li>hypothesis - Hypothesis is an advanced Quickcheck style property based testing library.</li> <li>nose2 - The successor to <code>nose</code>, based on `unittest2.</li> <li>pytest - A mature full-featured Python testing tool.</li> <li>Robot Framework - A generic test automation framework.</li> <li>unittest - (Python standard library) Unit testing framework.</li> </ul> </li> <li>Test Runners<ul> <li>green - A clean, colorful test runner.</li> <li>mamba - The definitive testing tool for Python. Born under the banner of BDD.</li> <li>tox - Auto builds and tests distributions in multiple Python versions</li> </ul> </li> <li>GUI / Web Testing<ul> <li>locust - Scalable user load testing tool written in Python.</li> <li>PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li> <li>Schemathesis - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li> <li>Selenium - Python bindings for Selenium WebDriver.</li> <li>sixpack - A language-agnostic A/B Testing framework.</li> <li>splinter - Open source tool for testing web applications.</li> </ul> </li> <li>Mock<ul> <li>doublex - Powerful test doubles framework for Python.</li> <li>freezegun - Travel through time by mocking the datetime module.</li> <li>httmock - A mocking library for requests for Python 2.6+ and 3.2+.</li> <li>httpretty - HTTP request mock tool for Python.</li> <li>mock - (Python standard library) A mocking and patching library.</li> <li>mocket - A socket mock framework with gevent/asyncio/SSL support.</li> <li>responses - A utility library for mocking out the requests Python library.</li> <li>VCR.py - Record and replay HTTP interactions on your tests.</li> </ul> </li> <li>Object Factories<ul> <li>factory_boy - A test fixtures replacement for Python.</li> <li>mixer - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li> <li>model_mommy - Creating random fixtures for testing in Django.</li> </ul> </li> <li>Code Coverage<ul> <li>coverage - Code coverage measurement.</li> </ul> </li> <li>Fake Data<ul> <li>fake2db - Fake database generator.</li> <li>faker - A Python package that generates fake data.</li> <li>mimesis - is a Python library that help you generate fake data.</li> <li>radar - Generate random datetime / time.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#text-processing","title":"Text Processing","text":"<p>Libraries for parsing and manipulating plain texts.</p> <ul> <li>General<ul> <li>chardet - Python 2/3 compatible character encoding detector.</li> <li>difflib - (Python standard library) Helpers for computing deltas.</li> <li>ftfy - Makes Unicode text less broken and more consistent automagically.</li> <li>fuzzywuzzy - Fuzzy String Matching.</li> <li>Levenshtein - Fast computation of Levenshtein distance and string similarity.</li> <li>pangu.py - Paranoid text spacing.</li> <li>pyfiglet - An implementation of figlet written in Python.</li> <li>pypinyin - Convert Chinese hanzi (\u6f22\u5b57) to pinyin (\u62fc\u97f3).</li> <li>textdistance - Compute distance between sequences with 30+ algorithms.</li> <li>unidecode - ASCII transliterations of Unicode text.</li> </ul> </li> <li>Slugify<ul> <li>awesome-slugify - A Python slugify library that can preserve unicode.</li> <li>python-slugify - A Python slugify library that translates unicode to ASCII.</li> <li>unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency.</li> </ul> </li> <li>Unique identifiers<ul> <li>hashids - Implementation of hashids in Python.</li> <li>shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs.</li> </ul> </li> <li>Parser<ul> <li>ply - Implementation of lex and yacc parsing tools for Python.</li> <li>pygments - A generic syntax highlighter.</li> <li>pyparsing - A general purpose framework for generating parsers.</li> <li>python-nameparser - Parsing human names into their individual components.</li> <li>python-phonenumbers - Parsing, formatting, storing and validating international phone numbers.</li> <li>python-user-agents - Browser user agent parser.</li> <li>sqlparse - A non-validating SQL parser.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#third-party-apis","title":"Third-party APIs","text":"<p>Libraries for accessing third party services APIs.</p> <ul> <li>apache-libcloud - One Python library for all clouds.</li> <li>boto3 - Python interface to Amazon Web Services.</li> <li>django-wordpress - WordPress models and views for Django.</li> <li>facebook-sdk - Facebook Platform Python SDK.</li> <li>google-api-python-client - Google APIs Client Library for Python.</li> <li>gspread - Google Spreadsheets Python API.</li> <li>twython - A Python wrapper for the Twitter API.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#url-manipulation","title":"URL Manipulation","text":"<p>Libraries for parsing URLs.</p> <ul> <li>furl - A small Python library that makes parsing and manipulating URLs easy.</li> <li>purl - A simple, immutable URL class with a clean API for interrogation and manipulation.</li> <li>pyshorteners - A pure Python URL shortening lib.</li> <li>webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#video","title":"Video","text":"<p>Libraries for manipulating video and GIFs.</p> <ul> <li>moviepy - A module for script-based movie editing with many formats, including animated GIFs.</li> <li>scikit-video - Video processing routines for SciPy.</li> <li>vidgear - Most Powerful multi-threaded Video Processing framework.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#web-asset-management","title":"Web Asset Management","text":"<p>Tools for managing, compressing and minifying website assets.</p> <ul> <li>django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file.</li> <li>django-pipeline - An asset packaging library for Django.</li> <li>django-storages - A collection of custom storage back ends for Django.</li> <li>fanstatic - Packages, optimizes, and serves static file dependencies as Python packages.</li> <li>fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP.</li> <li>flask-assets - Helps you integrate webassets into your Flask app.</li> <li>webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#web-content-extracting","title":"Web Content Extracting","text":"<p>Libraries for extracting web contents.</p> <ul> <li>html2text - Convert HTML to Markdown-formatted text.</li> <li>lassie - Web Content Retrieval for Humans.</li> <li>micawber - A small library for extracting rich content from URLs.</li> <li>newspaper - News extraction, article extraction and content curation in Python.</li> <li>python-readability - Fast Python port of arc90's readability tool.</li> <li>requests-html - Pythonic HTML Parsing for Humans.</li> <li>sumy - A module for automatic summarization of text documents and HTML pages.</li> <li>textract - Extract text from any document, Word, PowerPoint, PDFs, etc.</li> <li>toapi - Every web site provides APIs.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#web-crawling","title":"Web Crawling","text":"<p>Libraries to automate web scraping.</p> <ul> <li>cola - A distributed crawling framework.</li> <li>feedparser - Universal feed parser.</li> <li>grab - Site scraping framework.</li> <li>MechanicalSoup - A Python library for automating interaction with websites.</li> <li>portia - Visual scraping for Scrapy.</li> <li>pyspider - A powerful spider system.</li> <li>robobrowser - A simple, Pythonic library for browsing the web without a standalone web browser.</li> <li>scrapy - A fast high-level screen scraping and web crawling framework.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#web-frameworks","title":"Web Frameworks","text":"<p>Traditional full stack web frameworks.</p> <ul> <li>Synchronous<ul> <li>Django - The most popular web framework in Python.<ul> <li>awesome-django</li> <li>awesome-django</li> </ul> </li> <li>Flask - A microframework for Python.<ul> <li>awesome-flask</li> </ul> </li> <li>Pyramid - A small, fast, down-to-earth, open source Python web framework.<ul> <li>awesome-pyramid</li> </ul> </li> <li>Masonite - The modern and developer centric Python web framework.</li> </ul> </li> <li>Asynchronous<ul> <li>Tornado - A web framework and asynchronous networking library.</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#websocket","title":"WebSocket","text":"<p>Libraries for working with WebSocket.</p> <ul> <li>autobahn-python - WebSocket &amp; WAMP for Python on Twisted and asyncio.</li> <li>channels - Developer-friendly asynchrony for Django.</li> <li>websockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#wsgi-servers","title":"WSGI Servers","text":"<p>WSGI-compatible web servers.</p> <ul> <li>bjoern - Asynchronous, very fast and written in C.</li> <li>gunicorn - Pre-forked, ported from Ruby's Unicorn project.</li> <li>uWSGI - A project aims at developing a full stack for building hosting services, written in C.</li> <li>waitress - Multi-threaded, powers Pyramid.</li> <li>werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#resources","title":"Resources","text":"<p>Where to discover learning resources or new Python libraries.</p>"},{"location":"languages/python/libraries_frameworks/Libraries/#books","title":"Books","text":"<ul> <li>Fluent Python</li> <li>Think Python</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#websites","title":"Websites","text":"<ul> <li>Tutorials<ul> <li>Full Stack Python</li> <li>Python Cheatsheet</li> <li>Real Python</li> <li>The Hitchhiker\u2019s Guide to Python</li> <li>Ultimate Python study guide</li> </ul> </li> <li>Libraries<ul> <li>Awesome Python @LibHunt</li> </ul> </li> <li>Others<ul> <li>Python ZEEF</li> <li>Pythonic News</li> <li>What the f*ck Python!</li> </ul> </li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#newsletters","title":"Newsletters","text":"<ul> <li>Awesome Python Newsletter</li> <li>Pycoder's Weekly</li> <li>Python Tricks</li> <li>Python Weekly</li> </ul>"},{"location":"languages/python/libraries_frameworks/Libraries/#podcasts","title":"Podcasts","text":"<ul> <li>Django Chat</li> <li>Podcast.__init__</li> <li>Python Bytes</li> <li>Running in Production</li> <li>Talk Python To Me</li> <li>Test and Code</li> <li>The Real Python Podcast</li> </ul>"},{"location":"languages/python/libraries_frameworks/amqpstorm/","title":"AMQPStorm Module in Python: A Comprehensive Guide","text":"<p>AMQPStorm is a lightweight, fast, and highly optimized library for working with AMQP (Advanced Message Queuing Protocol) in Python. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with AMQPStorm.</p>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#introduction-to-amqpstorm","title":"Introduction to AMQPStorm","text":"<p>AMQPStorm is designed to be a flexible and easy-to-use library for interfacing with AMQP brokers like RabbitMQ. It provides high-level methods for connecting, publishing, consuming, and managing AMQP resources.</p> <p>Key features of AMQPStorm: - Easy to use and lightweight - Supports synchronous and asynchronous operations - High-level API for common AMQP tasks - Connection and channel management - Supports AMQP 0.9.1</p>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#installation","title":"Installation","text":"<p>To install AMQPStorm, you can use pip:</p> <pre><code>pip install amqpstorm\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#connecting-to-an-amqp-broker","title":"Connecting to an AMQP Broker","text":"<p>To connect to an AMQP broker, you need the broker's URL or the individual connection parameters.</p> <pre><code>from amqpstorm import UriConnection\n\n# Connect to the broker using URI\nconnection = UriConnection('amqp://guest:guest@localhost:5672/%2F')\n\n# Alternatively, use Connection class\nfrom amqpstorm import Connection\n\nconnection = Connection('localhost', 'guest', 'guest')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#publishing-messages","title":"Publishing Messages","text":"<p>Publishing messages to an exchange is straightforward with AMQPStorm.</p> <pre><code>from amqpstorm import Connection\n\n# Establish connection\nconnection = Connection('localhost', 'guest', 'guest')\nchannel = connection.channel()\n\n# Declare the exchange\nchannel.exchange.declare(exchange='example_exchange', exchange_type='direct')\n\n# Publish message\nchannel.basic.publish(body='Hello, World!', routing_key='example_key', exchange='example_exchange')\n\n# Close the connection\nchannel.close()\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#consuming-messages","title":"Consuming Messages","text":"<p>Consuming messages from a queue involves setting up a consumer and processing messages in a callback function.</p> <pre><code>from amqpstorm import Connection\n\ndef message_callback(message):\n    print(\"Received message:\", message.body)\n    message.ack()\n\n# Establish connection\nconnection = Connection('localhost', 'guest', 'guest')\nchannel = connection.channel()\n\n# Declare the queue\nchannel.queue.declare('example_queue')\n\n# Bind the queue to an exchange\nchannel.queue.bind(queue='example_queue', exchange='example_exchange', routing_key='example_key')\n\n# Start consuming\nchannel.basic.consume(queue='example_queue', callback=message_callback)\n\ntry:\n    channel.start_consuming()\nexcept KeyboardInterrupt:\n    channel.close()\n    connection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#queues","title":"Queues","text":"<p>Declaring and managing queues in AMQPStorm.</p> <pre><code># Declare a queue\nchannel.queue.declare('example_queue', durable=True)\n\n# Bind queue to an exchange\nchannel.queue.bind(queue='example_queue', exchange='example_exchange', routing_key='example_key')\n\n# Delete a queue\nchannel.queue.delete('example_queue')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#exchanges","title":"Exchanges","text":"<p>Declaring and managing exchanges in AMQPStorm.</p> <pre><code># Declare an exchange\nchannel.exchange.declare(exchange='example_exchange', exchange_type='direct', durable=True)\n\n# Delete an exchange\nchannel.exchange.delete('example_exchange')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#message-acknowledgment","title":"Message Acknowledgment","text":"<p>AMQPStorm supports manual acknowledgment of messages.</p> <pre><code>def message_callback(message):\n    print(\"Received message:\", message.body)\n    message.ack()\n\n# Start consuming with acknowledgment\nchannel.basic.consume(queue='example_queue', callback=message_callback)\nchannel.start_consuming()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#error-handling","title":"Error Handling","text":"<p>AMQPStorm provides mechanisms to handle errors gracefully.</p> <pre><code>from amqpstorm import AMQPError\n\ntry:\n    connection = Connection('localhost', 'guest', 'guest')\n    channel = connection.channel()\n    channel.basic.publish(body='Hello, World!', routing_key='example_key', exchange='example_exchange')\nexcept AMQPError as e:\n    print(\"An error occurred:\", e)\nfinally:\n    channel.close()\n    connection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/amqpstorm/#publisher-confirms","title":"Publisher Confirms","text":"<p>Publisher confirms ensure that messages have been successfully published.</p> <pre><code>channel.confirm_deliveries()\n\ntry:\n    channel.basic.publish(body='Hello, World!', routing_key='example_key', exchange='example_exchange')\n    print(\"Message published successfully\")\nexcept AMQPError:\n    print(\"Failed to publish message\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#message-properties","title":"Message Properties","text":"<p>Setting message properties like headers, content type, and delivery mode.</p> <pre><code>from amqpstorm import Message\n\nmessage = Message.create(channel, body='Hello, World!', properties={\n    'content_type': 'text/plain',\n    'delivery_mode': 2  # Persistent\n})\n\nmessage.publish(routing_key='example_key', exchange='example_exchange')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#rpc-remote-procedure-call","title":"RPC (Remote Procedure Call)","text":"<p>Implementing RPC with AMQPStorm.</p> <pre><code>import uuid\n\ndef on_response(message):\n    print(\"Received response:\", message.body)\n    message.ack()\n\n# Declare a callback queue\nresult = channel.queue.declare('', exclusive=True)\ncallback_queue = result['queue']\n\n# Publish the RPC request\ncorrelation_id = str(uuid.uuid4())\nchannel.basic.publish(body='RPC Request', routing_key='rpc_queue', properties={\n    'reply_to': callback_queue,\n    'correlation_id': correlation_id\n})\n\n# Consume the response\nchannel.basic.consume(callback_queue, on_response)\nchannel.start_consuming()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/amqpstorm/#conclusion","title":"Conclusion","text":"<p>AMQPStorm is a robust and efficient library for working with AMQP brokers like RabbitMQ. Its high-level API simplifies the process of connecting, publishing, consuming, and managing AMQP resources. By mastering the core features and functionalities of AMQPStorm, you can create powerful and reliable messaging systems with minimal effort.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/","title":"Arcpy Module in Python: A Comprehensive Guide","text":"<p>Arcpy is a Python library provided by Esri for use with ArcGIS. It allows for automation of spatial analysis, data management, and geoprocessing tasks. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with Arcpy.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#introduction-to-arcpy","title":"Introduction to Arcpy","text":"<p>Arcpy is a Python library for automating geospatial workflows in ArcGIS. It provides a range of tools and functions for spatial analysis, data manipulation, and geoprocessing tasks.</p> <p>Key features of Arcpy: - Access to ArcGIS geoprocessing tools - Spatial data analysis and manipulation - Map and layer management - Scripting and automation capabilities - Integration with ArcGIS Online and ArcGIS Pro</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#installation-and-setup","title":"Installation and Setup","text":"<p>Arcpy is included with ArcGIS Desktop or ArcGIS Pro installations. To use Arcpy, you need to have a licensed copy of ArcGIS.</p> <ol> <li>Install ArcGIS Desktop or ArcGIS Pro: Follow the installation instructions provided by Esri.</li> <li>Configure Python Environment: Ensure that the Python environment is properly configured. Arcpy is typically installed with Python, which comes with ArcGIS.</li> </ol> <p>You can check if Arcpy is installed by running:</p> <pre><code>import arcpy\nprint(arcpy.__version__)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#basic-concepts","title":"Basic Concepts","text":""},{"location":"languages/python/libraries_frameworks/arcpy/#importing-arcpy","title":"Importing Arcpy","text":"<p>To use Arcpy in a script, import it at the beginning:</p> <pre><code>import arcpy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#setting-the-workspace","title":"Setting the Workspace","text":"<p>The workspace defines the location where input and output data are stored:</p> <pre><code>arcpy.env.workspace = \"C:/path/to/your/workspace\"\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#listing-files","title":"Listing Files","text":"<p>You can list files in the workspace using wildcards:</p> <pre><code># List all feature classes in the workspace\nfeature_classes = arcpy.ListFeatureClasses()\nprint(feature_classes)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#geoprocessing-tools","title":"Geoprocessing Tools","text":"<p>Arcpy provides access to ArcGIS geoprocessing tools, which can be used to perform various spatial operations.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#buffer","title":"Buffer","text":"<p>Create buffer zones around features:</p> <pre><code>arcpy.Buffer_analysis(\"input.shp\", \"output_buffer.shp\", \"100 meters\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#clip","title":"Clip","text":"<p>Clip one feature class by another:</p> <pre><code>arcpy.Clip_analysis(\"input.shp\", \"clip_area.shp\", \"output_clip.shp\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#dissolve","title":"Dissolve","text":"<p>Dissolve features based on a field:</p> <pre><code>arcpy.Dissolve_management(\"input.shp\", \"output_dissolve.shp\", \"FIELD_NAME\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#spatial-analysis","title":"Spatial Analysis","text":"<p>Arcpy includes functions for spatial analysis, such as proximity analysis and overlay analysis.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#spatial-join","title":"Spatial Join","text":"<p>Join attributes from one feature class to another based on spatial relationships:</p> <pre><code>arcpy.SpatialJoin_analysis(\"target.shp\", \"join.shp\", \"output_join.shp\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#intersect","title":"Intersect","text":"<p>Find the intersection of two feature classes:</p> <pre><code>arcpy.Intersect_analysis([\"input1.shp\", \"input2.shp\"], \"output_intersect.shp\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#data-management","title":"Data Management","text":"<p>Arcpy offers tools for managing and manipulating spatial data.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#copy","title":"Copy","text":"<p>Copy datasets to a new location:</p> <pre><code>arcpy.CopyFeatures_management(\"input.shp\", \"output_copy.shp\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#delete","title":"Delete","text":"<p>Delete existing datasets:</p> <pre><code>arcpy.Delete_management(\"output_copy.shp\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#add-field","title":"Add Field","text":"<p>Add a new field to a feature class:</p> <pre><code>arcpy.AddField_management(\"input.shp\", \"new_field\", \"TEXT\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#calculate-field","title":"Calculate Field","text":"<p>Calculate values for a field:</p> <pre><code>arcpy.CalculateField_management(\"input.shp\", \"new_field\", \"'Value'\", \"PYTHON3\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#working-with-maps-and-layers","title":"Working with Maps and Layers","text":"<p>Arcpy can interact with maps and layers in ArcGIS.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#creating-a-map-document","title":"Creating a Map Document","text":"<p>Create a new map document and add layers:</p> <pre><code>from arcpy import mp\n\n# Create a new map document\nmxd = mp.ArcGISProject(\"CURRENT\")\nmap = mxd.listMaps()[0]\n\n# Add a layer to the map\nlayer = mp.LayerFile(\"path/to/layer.lyrx\")\nmap.addLayer(layer)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#exporting-a-map","title":"Exporting a Map","text":"<p>Export the map to an image or PDF:</p> <pre><code>map.exportToPDF(\"output_map.pdf\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#scripting-and-automation","title":"Scripting and Automation","text":"<p>Arcpy is often used in scripts to automate repetitive tasks.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#script-example-batch-buffer","title":"Script Example: Batch Buffer","text":"<p>Buffer multiple feature classes in a loop:</p> <pre><code>import arcpy\nimport os\n\narcpy.env.workspace = \"C:/path/to/your/workspace\"\n\n# List all feature classes\nfeature_classes = arcpy.ListFeatureClasses()\n\n# Buffer each feature class\nfor fc in feature_classes:\n    out_buffer = os.path.join(\"C:/path/to/output\", f\"buffer_{fc}\")\n    arcpy.Buffer_analysis(fc, out_buffer, \"100 meters\")\n    print(f\"Buffered {fc} to {out_buffer}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#script-example-error-handling","title":"Script Example: Error Handling","text":"<p>Handle errors gracefully in your scripts:</p> <pre><code>import arcpy\n\ntry:\n    arcpy.Buffer_analysis(\"input.shp\", \"output_buffer.shp\", \"100 meters\")\nexcept arcpy.ExecuteError:\n    print(arcpy.GetMessages())\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#error-handling","title":"Error Handling","text":"<p>Proper error handling ensures that your scripts handle exceptions and provide useful feedback.</p>"},{"location":"languages/python/libraries_frameworks/arcpy/#using-try-except-blocks","title":"Using Try-Except Blocks","text":"<p>Use try-except blocks to catch and handle errors:</p> <pre><code>try:\n    arcpy.Buffer_analysis(\"input.shp\", \"output_buffer.shp\", \"100 meters\")\nexcept arcpy.ExecuteError:\n    print(arcpy.GetMessages())\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#checking-for-tool-success","title":"Checking for Tool Success","text":"<p>Check if a geoprocessing tool completed successfully:</p> <pre><code>result = arcpy.Buffer_analysis(\"input.shp\", \"output_buffer.shp\", \"100 meters\")\nif result.status == \"Succeeded\":\n    print(\"Buffer analysis completed successfully.\")\nelse:\n    print(f\"Buffer analysis failed with messages: {arcpy.GetMessages()}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/arcpy/#conclusion","title":"Conclusion","text":"<p>Arcpy is a powerful tool for automating geospatial tasks in ArcGIS. Its extensive functionality allows for efficient spatial analysis, data management, and map creation. By mastering Arcpy, you can significantly streamline your geospatial workflows and leverage the full capabilities of ArcGIS. This guide provides a solid foundation for using Arcpy effectively in your Python scripts and applications.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/","title":"Python <code>asyncio</code> Module: Detailed Overview and Examples","text":"<p>The <code>asyncio</code> module in Python provides support for asynchronous programming by using coroutines, tasks, and event loops. It allows you to write concurrent code using the <code>async</code> and <code>await</code> syntax, making it easier to handle tasks that involve I/O operations, networking, and other asynchronous activities.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#importing-the-asyncio-module","title":"Importing the <code>asyncio</code> Module","text":"<p>To use the functions and classes from the <code>asyncio</code> module, you need to import it:</p> <pre><code>import asyncio\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#key-components","title":"Key Components","text":""},{"location":"languages/python/libraries_frameworks/asyncio/#1-event-loop","title":"1. Event Loop","text":"<p>The event loop is the core component of <code>asyncio</code> that manages and executes asynchronous tasks.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example","title":"Example","text":"<pre><code>import asyncio\n\n# Define an asynchronous function\nasync def hello_world():\n    print(\"Hello\")\n    await asyncio.sleep(1)\n    print(\"World\")\n\n# Run the event loop\nasyncio.run(hello_world())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#2-coroutines","title":"2. Coroutines","text":"<p>Coroutines are functions defined with the <code>async def</code> syntax. They use <code>await</code> to yield control to the event loop.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_1","title":"Example","text":"<pre><code>import asyncio\n\n# Define a coroutine\nasync def greet(name):\n    print(f\"Hello, {name}!\")\n    await asyncio.sleep(1)\n    print(f\"Goodbye, {name}!\")\n\n# Run the coroutine\nasyncio.run(greet(\"Alice\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#3-tasks","title":"3. Tasks","text":"<p>Tasks are used to schedule coroutines to run concurrently. They are created using <code>asyncio.create_task()</code> or <code>loop.create_task()</code>.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_2","title":"Example","text":"<pre><code>import asyncio\n\nasync def task1():\n    print(\"Task 1 start\")\n    await asyncio.sleep(2)\n    print(\"Task 1 end\")\n\nasync def task2():\n    print(\"Task 2 start\")\n    await asyncio.sleep(1)\n    print(\"Task 2 end\")\n\n# Run multiple tasks concurrently\nasync def main():\n    await asyncio.gather(task1(), task2())\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#4-asynciogather","title":"4. <code>asyncio.gather()</code>","text":"<p><code>asyncio.gather()</code> is used to run multiple coroutines concurrently and wait for them to complete.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_3","title":"Example","text":"<pre><code>import asyncio\n\nasync def fetch_data(x):\n    print(f\"Fetching data {x}\")\n    await asyncio.sleep(x)\n    return f\"Data {x}\"\n\nasync def main():\n    results = await asyncio.gather(fetch_data(2), fetch_data(1))\n    print(results)\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#5-asynciosleep","title":"5. <code>asyncio.sleep()</code>","text":"<p><code>asyncio.sleep()</code> is a coroutine that pauses execution for a given number of seconds.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_4","title":"Example","text":"<pre><code>import asyncio\n\nasync def delay_print():\n    print(\"Start\")\n    await asyncio.sleep(2)\n    print(\"End\")\n\nasyncio.run(delay_print())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#6-asyncioqueue","title":"6. <code>asyncio.Queue</code>","text":"<p><code>asyncio.Queue</code> provides a FIFO queue for coroutines, allowing safe concurrent access.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_5","title":"Example","text":"<pre><code>import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f\"Produced {i}\")\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f\"Consumed {item}\")\n        await asyncio.sleep(2)\n\nasync def main():\n    queue = asyncio.Queue()\n    await asyncio.gather(producer(queue), consumer(queue))\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#7-exception-handling","title":"7. Exception Handling","text":"<p>Handling exceptions in asynchronous code is similar to synchronous code but should be done using <code>try</code> and <code>except</code> within coroutines.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_6","title":"Example","text":"<pre><code>import asyncio\n\nasync def error_task():\n    try:\n        await asyncio.sleep(1)\n        raise ValueError(\"An error occurred\")\n    except ValueError as e:\n        print(f\"Caught exception: {e}\")\n\nasyncio.run(error_task())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#8-asyncioevent","title":"8. <code>asyncio.Event</code>","text":"<p><code>asyncio.Event</code> is a simple synchronization primitive that allows coroutines to wait for an event to be set.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_7","title":"Example","text":"<pre><code>import asyncio\n\nasync def waiter(event):\n    print(\"Waiting for event\")\n    await event.wait()\n    print(\"Event received\")\n\nasync def setter(event):\n    print(\"Setting event\")\n    await asyncio.sleep(2)\n    event.set()\n\nasync def main():\n    event = asyncio.Event()\n    await asyncio.gather(waiter(event), setter(event))\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#9-asynciosemaphore","title":"9. <code>asyncio.Semaphore</code>","text":"<p><code>asyncio.Semaphore</code> is used to limit the number of coroutines accessing a resource concurrently.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_8","title":"Example","text":"<pre><code>import asyncio\n\nasync def worker(semaphore, num):\n    async with semaphore:\n        print(f\"Worker {num} is working\")\n        await asyncio.sleep(2)\n        print(f\"Worker {num} done\")\n\nasync def main():\n    semaphore = asyncio.Semaphore(2)  # Limit to 2 concurrent workers\n    await asyncio.gather(\n        worker(semaphore, 1),\n        worker(semaphore, 2),\n        worker(semaphore, 3)\n    )\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#10-asynciotimeout","title":"10. <code>asyncio.Timeout</code>","text":"<p><code>asyncio.Timeout</code> allows you to specify a timeout for coroutines.</p>"},{"location":"languages/python/libraries_frameworks/asyncio/#example_9","title":"Example","text":"<pre><code>import asyncio\n\nasync def long_task():\n    await asyncio.sleep(5)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=2)\n    except asyncio.TimeoutError:\n        print(\"Task timed out\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/asyncio/#conclusion","title":"Conclusion","text":"<p>The <code>asyncio</code> module is a powerful tool for writing concurrent code in Python using asynchronous programming. It provides a range of components, including coroutines, tasks, and synchronization primitives, to manage and execute asynchronous operations. By understanding and leveraging these components, you can write efficient and scalable code for applications that involve I/O-bound tasks, networking, and other asynchronous activities.</p>"},{"location":"languages/python/libraries_frameworks/base64/","title":"Python <code>base64</code> Module: Detailed Overview and Examples","text":"<p>The <code>base64</code> module in Python provides functions for encoding binary data to a Base64 encoded string and decoding a Base64 encoded string back to binary data. Base64 encoding is commonly used for encoding binary data in a text format, such as encoding images or files for inclusion in HTML or JSON, and for transmitting data over media that are designed to deal with textual data.</p>"},{"location":"languages/python/libraries_frameworks/base64/#importing-the-base64-module","title":"Importing the <code>base64</code> Module","text":"<p>To use the <code>base64</code> module, you need to import it:</p> <pre><code>import base64\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/base64/#1-encoding-binary-data","title":"1. Encoding Binary Data","text":""},{"location":"languages/python/libraries_frameworks/base64/#base64b64encodedata-altcharsnone","title":"<code>base64.b64encode(data, altchars=None)</code>","text":"<p>Encodes binary data using Base64 and returns the encoded bytes.</p> <ul> <li><code>data</code>: The binary data to encode.</li> <li><code>altchars</code>: Optional argument to specify an alternative alphabet.</li> </ul>"},{"location":"languages/python/libraries_frameworks/base64/#example","title":"Example","text":"<pre><code>import base64\n\n# Binary data to encode\ndata = b'Hello, World!'\n\n# Encode the data\nencoded_data = base64.b64encode(data)\nprint(encoded_data)  # Output: b'SGVsbG8sIFdvcmxkIQ=='\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#2-decoding-base64-encoded-data","title":"2. Decoding Base64 Encoded Data","text":""},{"location":"languages/python/libraries_frameworks/base64/#base64b64decodedata-altcharsnone-validatefalse","title":"<code>base64.b64decode(data, altchars=None, validate=False)</code>","text":"<p>Decodes Base64 encoded data and returns the original binary data.</p> <ul> <li><code>data</code>: The Base64 encoded data to decode.</li> <li><code>altchars</code>: Optional argument to specify an alternative alphabet.</li> <li><code>validate</code>: If <code>True</code>, checks for non-alphabet characters.</li> </ul>"},{"location":"languages/python/libraries_frameworks/base64/#example_1","title":"Example","text":"<pre><code>import base64\n\n# Base64 encoded data\nencoded_data = b'SGVsbG8sIFdvcmxkIQ=='\n\n# Decode the data\ndecoded_data = base64.b64decode(encoded_data)\nprint(decoded_data)  # Output: b'Hello, World!'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#3-url-safe-encoding-and-decoding","title":"3. URL-Safe Encoding and Decoding","text":"<p>URL-safe variants of the Base64 encoding can be used to encode binary data in URLs.</p>"},{"location":"languages/python/libraries_frameworks/base64/#base64urlsafe_b64encodedata","title":"<code>base64.urlsafe_b64encode(data)</code>","text":"<p>Encodes binary data using a URL-safe Base64 alphabet.</p>"},{"location":"languages/python/libraries_frameworks/base64/#example_2","title":"Example","text":"<pre><code>import base64\n\n# Binary data to encode\ndata = b'Hello, World!'\n\n# URL-safe encode the data\nencoded_data = base64.urlsafe_b64encode(data)\nprint(encoded_data)  # Output: b'SGVsbG8sIFdvcmxkIQ=='\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#base64urlsafe_b64decodedata","title":"<code>base64.urlsafe_b64decode(data)</code>","text":"<p>Decodes URL-safe Base64 encoded data.</p>"},{"location":"languages/python/libraries_frameworks/base64/#example_3","title":"Example","text":"<pre><code>import base64\n\n# URL-safe Base64 encoded data\nencoded_data = b'SGVsbG8sIFdvcmxkIQ=='\n\n# URL-safe decode the data\ndecoded_data = base64.urlsafe_b64decode(encoded_data)\nprint(decoded_data)  # Output: b'Hello, World!'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#4-encoding-and-decoding-with-padding","title":"4. Encoding and Decoding with Padding","text":"<p>Base64 encoding typically includes padding characters (<code>=</code>) to ensure the encoded output length is a multiple of 4. However, some applications require the encoded data without padding.</p>"},{"location":"languages/python/libraries_frameworks/base64/#base64b32encodedata","title":"<code>base64.b32encode(data)</code>","text":"<p>Encodes binary data using Base32 and returns the encoded bytes.</p>"},{"location":"languages/python/libraries_frameworks/base64/#example_4","title":"Example","text":"<pre><code>import base64\n\n# Binary data to encode\ndata = b'Hello, World!'\n\n# Encode the data using Base32\nencoded_data = base64.b32encode(data)\nprint(encoded_data)  # Output: b'JBSWY3DPEBLW64TMMQ======'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#base64b32decodedata-casefoldfalse-map01none","title":"<code>base64.b32decode(data, casefold=False, map01=None)</code>","text":"<p>Decodes Base32 encoded data and returns the original binary data.</p> <ul> <li><code>casefold</code>: If <code>True</code>, accepts lowercase letters as well as uppercase letters.</li> <li><code>map01</code>: Optional argument to map the digit <code>0</code> or letter <code>O</code> to <code>1</code>.</li> </ul>"},{"location":"languages/python/libraries_frameworks/base64/#example_5","title":"Example","text":"<pre><code>import base64\n\n# Base32 encoded data\nencoded_data = b'JBSWY3DPEBLW64TMMQ======'\n\n# Decode the data using Base32\ndecoded_data = base64.b32decode(encoded_data)\nprint(decoded_data)  # Output: b'Hello, World!'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#5-standard-base16-encoding-and-decoding","title":"5. Standard Base16 Encoding and Decoding","text":""},{"location":"languages/python/libraries_frameworks/base64/#base64b16encodedata","title":"<code>base64.b16encode(data)</code>","text":"<p>Encodes binary data using Base16 and returns the encoded bytes.</p>"},{"location":"languages/python/libraries_frameworks/base64/#example_6","title":"Example","text":"<pre><code>import base64\n\n# Binary data to encode\ndata = b'Hello, World!'\n\n# Encode the data using Base16\nencoded_data = base64.b16encode(data)\nprint(encoded_data)  # Output: b'48656C6C6F2C20576F726C6421'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#base64b16decodedata-casefoldfalse","title":"<code>base64.b16decode(data, casefold=False)</code>","text":"<p>Decodes Base16 encoded data and returns the original binary data.</p> <ul> <li><code>casefold</code>: If <code>True</code>, accepts lowercase letters as well as uppercase letters.</li> </ul>"},{"location":"languages/python/libraries_frameworks/base64/#example_7","title":"Example","text":"<pre><code>import base64\n\n# Base16 encoded data\nencoded_data = b'48656C6C6F2C20576F726C6421'\n\n# Decode the data using Base16\ndecoded_data = base64.b16decode(encoded_data)\nprint(decoded_data)  # Output: b'Hello, World!'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/base64/#example-1-encoding-and-decoding-a-string","title":"Example 1: Encoding and Decoding a String","text":"<pre><code>import base64\n\n# Original string\noriginal_string = \"Python Base64 Module\"\ndata = original_string.encode('utf-8')\n\n# Encode the string\nencoded_data = base64.b64encode(data)\nprint(f\"Encoded: {encoded_data}\")\n\n# Decode the string\ndecoded_data = base64.b64decode(encoded_data)\ndecoded_string = decoded_data.decode('utf-8')\nprint(f\"Decoded: {decoded_string}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#example-2-encoding-and-decoding-an-image","title":"Example 2: Encoding and Decoding an Image","text":"<pre><code>import base64\n\n# Read image file in binary mode\nwith open('image.png', 'rb') as image_file:\n    image_data = image_file.read()\n\n# Encode image data\nencoded_image = base64.b64encode(image_data)\nprint(f\"Encoded Image: {encoded_image[:100]}...\")  # Print the first 100 characters\n\n# Decode image data\ndecoded_image = base64.b64decode(encoded_image)\n\n# Write the decoded image data to a new file\nwith open('decoded_image.png', 'wb') as image_file:\n    image_file.write(decoded_image)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/base64/#conclusion","title":"Conclusion","text":"<p>The <code>base64</code> module in Python is a versatile tool for encoding and decoding binary data in a text format. It supports standard Base64, URL-safe Base64, Base32, and Base16 encodings. Whether you're encoding text, images, or other binary data, the <code>base64</code> module provides the necessary functions to handle these tasks efficiently. By understanding the various encoding and decoding methods and their use cases, you can effectively integrate Base64 encoding into your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/","title":"Python BeautifulSoup Module Report","text":"<p><code>BeautifulSoup</code> is a Python library used for parsing HTML and XML documents. It provides easy methods for navigating and searching through the parse tree, which makes it a powerful tool for web scraping and data extraction. This report provides a detailed guide on how to use BeautifulSoup, including installation, basic concepts, and examples.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#introduction","title":"Introduction","text":"<p><code>BeautifulSoup</code> is designed to parse HTML and XML documents and provides Pythonic idioms for iterating, searching, and modifying the parse tree. It is particularly useful for web scraping tasks where you need to extract information from web pages.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#installation","title":"Installation","text":"<p>To use BeautifulSoup, you need to install the <code>beautifulsoup4</code> package, along with a parser. The most common parser used is <code>lxml</code>, but <code>html.parser</code> is also included in Python\u2019s standard library.</p> <p>Install BeautifulSoup and the <code>lxml</code> parser with pip:</p> <pre><code>pip install beautifulsoup4 lxml\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#basic-usage","title":"Basic Usage","text":"<p>To use BeautifulSoup, you first need to create a <code>BeautifulSoup</code> object by passing the HTML content and a parser to it. You can then use various methods to navigate and manipulate the parse tree.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#example-code","title":"Example Code","text":"<p>Here\u2019s a basic example of how to use BeautifulSoup to parse HTML:</p> <pre><code>from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"title\"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little sisters; and their names were\n&lt;a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\"&gt;Elsie&lt;/a&gt;,\n&lt;a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\"&gt;Lacie&lt;/a&gt; and\n&lt;a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\"&gt;Tillie&lt;/a&gt;;\nand they lived at the bottom of a well.&lt;/p&gt;\n&lt;p class=\"story\"&gt;...&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nsoup = BeautifulSoup(html_doc, 'lxml')\n\nprint(soup.prettify())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/beautifulsoup/#parsing-html","title":"Parsing HTML","text":"<p>To parse HTML and create a BeautifulSoup object, use the following:</p> <pre><code>from bs4 import BeautifulSoup\n\nhtml_doc = \"&lt;html&gt;&lt;head&gt;&lt;title&gt;My Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Welcome to my page!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# Print the prettified HTML\nprint(soup.prettify())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#searching-for-elements","title":"Searching for Elements","text":"<p>BeautifulSoup provides several methods to search for elements within the parsed HTML. Common methods include <code>find()</code>, <code>find_all()</code>, and CSS selectors.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#finding-a-single-element","title":"Finding a Single Element","text":"<pre><code># Find the first &lt;p&gt; tag\np_tag = soup.find('p')\nprint(p_tag.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#finding-multiple-elements","title":"Finding Multiple Elements","text":"<pre><code># Find all &lt;a&gt; tags\na_tags = soup.find_all('a')\nfor tag in a_tags:\n    print(tag.get('href'), tag.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#using-css-selectors","title":"Using CSS Selectors","text":"<pre><code># Find elements using CSS selectors\nsoup = BeautifulSoup(html_doc, 'lxml')\ntitle_tag = soup.select_one('p.title')\nprint(title_tag.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#navigating-the-parse-tree","title":"Navigating the Parse Tree","text":"<p>BeautifulSoup allows navigation of the parse tree using attributes like <code>.parent</code>, <code>.children</code>, and <code>.siblings</code>.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#accessing-parents-and-siblings","title":"Accessing Parents and Siblings","text":"<pre><code># Get the parent of a tag\nparent = p_tag.parent\nprint(parent.name)\n\n# Get the next sibling of a tag\nnext_sibling = p_tag.find_next_sibling()\nprint(next_sibling.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#accessing-children","title":"Accessing Children","text":"<pre><code># Iterate over children of a tag\nfor child in soup.body.children:\n    print(child.name)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#modifying-the-parse-tree","title":"Modifying the Parse Tree","text":"<p>BeautifulSoup allows modification of the HTML document by adding or changing elements.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#adding-elements","title":"Adding Elements","text":"<pre><code># Add a new tag\nnew_tag = soup.new_tag('p')\nnew_tag.string = \"This is a new paragraph.\"\nsoup.body.append(new_tag)\nprint(soup.prettify())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#modifying-elements","title":"Modifying Elements","text":"<pre><code># Modify an existing tag\nsoup.title.string = \"New Title\"\nprint(soup.prettify())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#removing-elements","title":"Removing Elements","text":"<pre><code># Remove a tag\nsoup.p.decompose()\nprint(soup.prettify())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#handling-common-issues","title":"Handling Common Issues","text":""},{"location":"languages/python/libraries_frameworks/beautifulsoup/#handling-html-with-broken-tags","title":"Handling HTML with Broken Tags","text":"<p>If you encounter HTML with broken tags, BeautifulSoup is designed to handle such cases gracefully. However, always validate your input to ensure it is well-formed when possible.</p>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#parser-choice","title":"Parser Choice","text":"<p>BeautifulSoup supports different parsers. <code>lxml</code> is the fastest, but <code>html.parser</code> is included in the Python standard library. Choose the parser based on your needs:</p> <pre><code>soup = BeautifulSoup(html_doc, 'lxml')  # Use lxml parser\n</code></pre>"},{"location":"languages/python/libraries_frameworks/beautifulsoup/#conclusion","title":"Conclusion","text":"<p><code>BeautifulSoup</code> is a powerful and flexible library for parsing HTML and XML documents in Python. It provides easy-to-use methods for searching, navigating, and modifying the parse tree, making it an excellent tool for web scraping and data extraction tasks.</p> <p>For more detailed information and advanced features, refer to the BeautifulSoup documentation.</p>"},{"location":"languages/python/libraries_frameworks/chempy/","title":"Python chempy Module: A Comprehensive Guide","text":"<p>The <code>chempy</code> module is a library for performing chemical computations in Python. It includes functionalities for handling chemical equations, calculating chemical properties, and manipulating chemical structures. This guide provides an overview of the <code>chempy</code> module, along with detailed examples to illustrate its use.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#introduction-to-chempy","title":"Introduction to chempy","text":"<p><code>chempy</code> is a Python library for handling various aspects of chemistry, including chemical reactions, stoichiometry, and chemical properties. It is useful for researchers, educators, and students who need to perform chemical computations and analysis.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#installation","title":"Installation","text":"<p>To use <code>chempy</code>, you need to install it via pip. You can install it with the following command:</p> <pre><code>pip install chempy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#basic-operations","title":"Basic Operations","text":"<p><code>chempy</code> provides functionalities for basic chemical operations, such as handling chemical formulas and calculating molecular weights.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#calculating-molecular-weight","title":"Calculating Molecular Weight","text":"<pre><code>from chempy import Substance\n\n# Create a Substance object\nsubstance = Substance.from_formula('H2O')\n\n# Calculate molecular weight\nmolecular_weight = substance.mass\nprint(f'Molecular weight of H2O: {molecular_weight} g/mol')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#handling-chemical-equations","title":"Handling Chemical Equations","text":"<p><code>chempy</code> can be used to balance chemical equations and perform stoichiometric calculations.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#balancing-chemical-equations","title":"Balancing Chemical Equations","text":"<pre><code>from chempy import balance_stoichiometry\n\n# Define reactants and products\nreactants = {'Fe2O3': 1, 'H2': 3}\nproducts = {'Fe': 2, 'H2O': 3}\n\n# Balance the equation\nbalanced_reactants, balanced_products = balance_stoichiometry(reactants, products)\nprint(f'Balanced reactants: {balanced_reactants}')\nprint(f'Balanced products: {balanced_products}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#performing-stoichiometric-calculations","title":"Performing Stoichiometric Calculations","text":"<pre><code>from chempy import balance_stoichiometry\n\n# Define the balanced equation\nbalanced_reactants = {'Fe2O3': 1, 'H2': 3}\nbalanced_products = {'Fe': 2, 'H2O': 3}\n\n# Calculate the amount of product formed\ndef calculate_product_amount(reactant_amount, reactant_formula, product_formula):\n    reaction = balance_stoichiometry(balanced_reactants, balanced_products)\n    reactant_ratio = reaction[reactant_formula]\n    product_ratio = reaction[product_formula]\n    product_amount = (reactant_amount * product_ratio) / reactant_ratio\n    return product_amount\n\n# Example calculation\namount_of_Fe = calculate_product_amount(10, 'Fe2O3', 'Fe')\nprint(f'Amount of Fe produced: {amount_of_Fe} mol')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#calculating-chemical-properties","title":"Calculating Chemical Properties","text":"<p><code>chempy</code> allows you to calculate various chemical properties such as equilibrium constants and concentrations.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#calculating-equilibrium-constants","title":"Calculating Equilibrium Constants","text":"<pre><code>from chempy import Equilibrium\n\n# Define the equilibrium constants\neq = Equilibrium({'A': 1, 'B': 2}, {'C': 3})\n\n# Calculate equilibrium constant\nK_eq = eq.K\nprint(f'Equilibrium constant K: {K_eq}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#concentration-calculations","title":"Concentration Calculations","text":"<pre><code>from chempy import Substance\n\n# Define a substance and its concentration\nsubstance = Substance.from_formula('NaCl')\nconcentration = 0.5  # mol/L\n\n# Calculate the amount of substance\namount = concentration * 1.0  # For 1 L of solution\nprint(f'Amount of NaCl in 1 L of solution: {amount} mol')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#manipulating-chemical-structures","title":"Manipulating Chemical Structures","text":"<p><code>chempy</code> provides functionalities for manipulating chemical structures and generating molecular formulas.</p>"},{"location":"languages/python/libraries_frameworks/chempy/#generating-molecular-formulas","title":"Generating Molecular Formulas","text":"<pre><code>from chempy import Substance\n\n# Create a Substance object\nsubstance = Substance.from_formula('C6H12O6')\n\n# Get molecular formula\nformula = substance.formula\nprint(f'Molecular formula of glucose: {formula}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#molecular-weight-calculation","title":"Molecular Weight Calculation","text":"<pre><code>from chempy import Substance\n\n# Create a Substance object\nsubstance = Substance.from_formula('C6H12O6')\n\n# Calculate molecular weight\nmolecular_weight = substance.mass\nprint(f'Molecular weight of glucose: {molecular_weight} g/mol')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#error-handling","title":"Error Handling","text":"<p>Handling errors gracefully is important for ensuring the robustness of your calculations.</p> <pre><code>from chempy import Substance\n\ntry:\n    # Create a Substance object with invalid formula\n    substance = Substance.from_formula('InvalidFormula')\nexcept Exception as e:\n    print(f'An error occurred: {e}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/chempy/#conclusion","title":"Conclusion","text":"<p>The <code>chempy</code> module provides a range of functionalities for performing chemical computations and analysis in Python. From handling chemical equations and calculating properties to manipulating chemical structures, <code>chempy</code> is a versatile tool for anyone working with chemistry in Python. With the examples provided, you should be well-equipped to use <code>chempy</code> for your chemical computation needs.</p>"},{"location":"languages/python/libraries_frameworks/collections/","title":"Python <code>collections</code> Module: Detailed Overview and Examples","text":"<p>The <code>collections</code> module in Python provides alternatives to the built-in data types, offering specialized container datatypes that are designed to make certain programming tasks easier and more efficient. This module includes several classes that enhance the functionality of standard data types such as lists, tuples, and dictionaries.</p>"},{"location":"languages/python/libraries_frameworks/collections/#importing-the-collections-module","title":"Importing the <code>collections</code> Module","text":"<p>To use the functionalities provided by the <code>collections</code> module, you first need to import it:</p> <pre><code>import collections\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#1-namedtuple","title":"1. <code>namedtuple()</code>","text":"<p>The <code>namedtuple()</code> function returns a new type of tuple with named fields. It helps to create tuple subclasses with named fields that can be accessed like attributes.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example","title":"Example","text":"<pre><code>from collections import namedtuple\n\n# Define a named tuple\nPerson = namedtuple('Person', 'name age')\n\n# Create an instance of the named tuple\nperson = Person(name='Alice', age=30)\n\n# Access fields by name\nprint(person.name)  # Output: Alice\nprint(person.age)   # Output: 30\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#2-deque","title":"2. <code>deque</code>","text":"<p>The <code>deque</code> class provides a double-ended queue which supports appending and popping elements from both ends efficiently. It is ideal for queue and stack implementations.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example_1","title":"Example","text":"<pre><code>from collections import deque\n\n# Create a deque\nd = deque([1, 2, 3])\n\n# Append to both ends\nd.append(4)        # Right end\nd.appendleft(0)    # Left end\n\n# Pop from both ends\nright_end = d.pop()\nleft_end = d.popleft()\n\nprint(d)           # Output: deque([1, 2, 3])\nprint(right_end)   # Output: 4\nprint(left_end)    # Output: 0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#3-counter","title":"3. <code>Counter</code>","text":"<p>The <code>Counter</code> class is a subclass of <code>dict</code> that helps to count hashable objects. It provides a convenient way to tally occurrences of items in a collection.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example_2","title":"Example","text":"<pre><code>from collections import Counter\n\n# Create a Counter object\nc = Counter('abracadabra')\n\n# Get counts of individual characters\nprint(c)  # Output: Counter({'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1})\n\n# Most common elements\nprint(c.most_common(2))  # Output: [('a', 5), ('b', 2)]\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#4-ordereddict","title":"4. <code>OrderedDict</code>","text":"<p>The <code>OrderedDict</code> class is a dictionary that maintains the order of its items. Prior to Python 3.7, regular dictionaries did not maintain order.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example_3","title":"Example","text":"<pre><code>from collections import OrderedDict\n\n# Create an OrderedDict\nod = OrderedDict()\nod['one'] = 1\nod['two'] = 2\nod['three'] = 3\n\n# Items maintain insertion order\nfor key, value in od.items():\n    print(f\"{key}: {value}\")\n\n# Output:\n# one: 1\n# two: 2\n# three: 3\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#5-defaultdict","title":"5. <code>defaultdict</code>","text":"<p>The <code>defaultdict</code> class provides a default value for nonexistent keys, avoiding <code>KeyError</code> exceptions when accessing or modifying dictionary elements.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example_4","title":"Example","text":"<pre><code>from collections import defaultdict\n\n# Create a defaultdict with default value of list\nd = defaultdict(list)\n\n# Append to the defaultdict\nd['key1'].append(1)\nd['key1'].append(2)\nd['key2'].append(3)\n\nprint(d['key1'])  # Output: [1, 2]\nprint(d['key2'])  # Output: [3]\nprint(d['key3'])  # Output: []  # Default empty list\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#6-chainmap","title":"6. <code>ChainMap</code>","text":"<p>The <code>ChainMap</code> class groups multiple dictionaries or mappings into a single view. It allows you to search through several mappings at once.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example_5","title":"Example","text":"<pre><code>from collections import ChainMap\n\n# Create multiple dictionaries\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\n\n# Create a ChainMap\nchain_map = ChainMap(dict1, dict2)\n\nprint(chain_map['a'])  # Output: 1\nprint(chain_map['b'])  # Output: 2  # First dictionary value for 'b'\nprint(chain_map['c'])  # Output: 4\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#7-userdict-userlist-and-userstring","title":"7. <code>UserDict</code>, <code>UserList</code>, and <code>UserString</code>","text":"<p>These classes are wrappers around dictionary, list, and string objects, respectively. They allow for easier customization and extension of these data types.</p>"},{"location":"languages/python/libraries_frameworks/collections/#example-of-userdict","title":"Example of <code>UserDict</code>","text":"<pre><code>from collections import UserDict\n\n# Create a custom dictionary class\nclass MyDict(UserDict):\n    def __setitem__(self, key, value):\n        print(f\"Setting {key} = {value}\")\n        super().__setitem__(key, value)\n\n# Use the custom dictionary\nd = MyDict()\nd['key'] = 'value'\n# Output: Setting key = value\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#example-of-userlist","title":"Example of <code>UserList</code>","text":"<pre><code>from collections import UserList\n\n# Create a custom list class\nclass MyList(UserList):\n    def append(self, item):\n        print(f\"Appending {item}\")\n        super().append(item)\n\n# Use the custom list\nlst = MyList()\nlst.append(1)\n# Output: Appending 1\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#example-of-userstring","title":"Example of <code>UserString</code>","text":"<pre><code>from collections import UserString\n\n# Create a custom string class\nclass MyString(UserString):\n    def upper(self):\n        return f\"MyString: {self.data.upper()}\"\n\n# Use the custom string\ns = MyString(\"hello\")\nprint(s.upper())  # Output: MyString: HELLO\n</code></pre>"},{"location":"languages/python/libraries_frameworks/collections/#conclusion","title":"Conclusion","text":"<p>The <code>collections</code> module offers powerful and flexible data structures that can simplify coding tasks and improve code efficiency. Each class is designed to handle specific use cases:</p> <ul> <li><code>namedtuple()</code> for creating lightweight, immutable objects with named fields.</li> <li><code>deque</code> for fast appends and pops from both ends of a sequence.</li> <li><code>Counter</code> for counting hashable objects and finding common elements.</li> <li><code>OrderedDict</code> for maintaining order in dictionaries (though this is now the default behavior in Python 3.7+).</li> <li><code>defaultdict</code> for handling missing dictionary keys with default values.</li> <li><code>ChainMap</code> for managing multiple mappings as a single unit.</li> <li><code>UserDict</code>, <code>UserList</code>, and <code>UserString</code> for customizing and extending built-in container types.</li> </ul> <p>Understanding these tools can help you write more efficient, readable, and maintainable code.</p>"},{"location":"languages/python/libraries_frameworks/configparser/","title":"Python ConfigParser Module: A Comprehensive Guide","text":"<p>The <code>configparser</code> module in Python is used to handle configuration files. These files are often used to store configuration data for applications in a structured format. The <code>configparser</code> module provides methods for reading, writing, and manipulating configuration files that are formatted in the <code>.ini</code> style. This guide covers the key features and functionalities of the <code>configparser</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/configparser/#introduction-to-configparser","title":"Introduction to ConfigParser","text":"<p>The <code>configparser</code> module allows you to read and write configuration files in the <code>.ini</code> file format. This format is typically used for configuration files and is structured into sections, each containing key-value pairs.</p>"},{"location":"languages/python/libraries_frameworks/configparser/#configuration-file-format","title":"Configuration File Format","text":"<p>An <code>.ini</code> configuration file is divided into sections, with each section containing key-value pairs. Here is an example of a simple <code>.ini</code> file:</p> <pre><code>[General]\napp_name = MyApp\nversion = 1.0\n\n[Database]\nhost = localhost\nport = 5432\nusername = user\npassword = pass\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#reading-configuration-files","title":"Reading Configuration Files","text":"<p>To read a configuration file using <code>configparser</code>, you need to create a <code>ConfigParser</code> object and then use it to read the file.</p> <pre><code>import configparser\n\n# Create a ConfigParser object\nconfig = configparser.ConfigParser()\n\n# Read the configuration file\nconfig.read('config.ini')\n\n# Access data from the configuration file\napp_name = config['General']['app_name']\nversion = config.get('General', 'version')\nhost = config.get('Database', 'host')\n\nprint(f\"App Name: {app_name}\")\nprint(f\"Version: {version}\")\nprint(f\"Database Host: {host}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#writing-configuration-files","title":"Writing Configuration Files","text":"<p>To write to a configuration file, you create a <code>ConfigParser</code> object, add sections and options, and then write the configuration to a file.</p> <pre><code>import configparser\n\n# Create a ConfigParser object\nconfig = configparser.ConfigParser()\n\n# Add sections and options\nconfig['General'] = {\n    'app_name': 'MyApp',\n    'version': '1.0'\n}\nconfig['Database'] = {\n    'host': 'localhost',\n    'port': '5432',\n    'username': 'user',\n    'password': 'pass'\n}\n\n# Write the configuration to a file\nwith open('new_config.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#updating-configuration-files","title":"Updating Configuration Files","text":"<p>You can update existing configuration files by modifying sections and options, then writing the changes back to the file.</p> <pre><code>import configparser\n\n# Create a ConfigParser object and read the existing file\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n# Update an option in the 'Database' section\nconfig.set('Database', 'port', '3306')\n\n# Add a new section\nconfig['Logging'] = {\n    'log_file': 'app.log',\n    'log_level': 'DEBUG'\n}\n\n# Write the updated configuration to the file\nwith open('config.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#working-with-sections-and-options","title":"Working with Sections and Options","text":"<p>You can add, remove, and check for sections and options in the configuration file.</p>"},{"location":"languages/python/libraries_frameworks/configparser/#adding-sections","title":"Adding Sections","text":"<pre><code>import configparser\n\n# Create a ConfigParser object\nconfig = configparser.ConfigParser()\n\n# Add a new section\nconfig.add_section('NewSection')\nconfig['NewSection']['new_option'] = 'value'\n\n# Write to the configuration file\nwith open('config.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#removing-sections-and-options","title":"Removing Sections and Options","text":"<pre><code>import configparser\n\n# Create a ConfigParser object and read the existing file\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n# Remove an option\nconfig.remove_option('Database', 'password')\n\n# Remove a section\nconfig.remove_section('Logging')\n\n# Write the updated configuration to the file\nwith open('config.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#checking-for-sections-and-options","title":"Checking for Sections and Options","text":"<pre><code>import configparser\n\n# Create a ConfigParser object and read the existing file\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n# Check if a section exists\nif 'General' in config:\n    print(\"Section 'General' exists\")\n\n# Check if an option exists in a section\nif config.has_option('Database', 'host'):\n    print(\"Option 'host' exists in section 'Database'\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#handling-defaults-and-interpolation","title":"Handling Defaults and Interpolation","text":"<p><code>configparser</code> supports default values and interpolation. Interpolation allows you to use values from other options within the same section.</p>"},{"location":"languages/python/libraries_frameworks/configparser/#using-defaults","title":"Using Defaults","text":"<pre><code>import configparser\n\n# Create a ConfigParser object with defaults\nconfig = configparser.ConfigParser(defaults={'default_key': 'default_value'})\n\n# Read the configuration file\nconfig.read('config.ini')\n\n# Access a default value\ndefault_value = config.get('SomeSection', 'some_option', fallback='default_value')\nprint(f\"Default Value: {default_value}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#interpolation","title":"Interpolation","text":"<pre><code>import configparser\n\n# Create a ConfigParser object with interpolation\nconfig = configparser.ConfigParser()\nconfig.optionxform = str  # Preserve case sensitivity of options\n\n# Define an interpolation string\nconfig['General'] = {\n    'app_name': 'MyApp',\n    'version': '1.0'\n}\nconfig['Database'] = {\n    'connection_string': 'Server={host};Port={port};',\n    'host': 'localhost',\n    'port': '5432'\n}\n\n# Use interpolation\nconfig['Database']['connection_string'] = config['Database']['connection_string'].format(\n    host=config['Database']['host'],\n    port=config['Database']['port']\n)\n\n# Write to the configuration file\nwith open('config.ini', 'w') as configfile:\n    config.write(configfile)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#error-handling","title":"Error Handling","text":"<p>Handling errors is essential when working with configuration files.</p> <pre><code>import configparser\n\ntry:\n    # Create a ConfigParser object and read the configuration file\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n\n    # Access an option\n    value = config.get('NonExistentSection', 'some_option')\nexcept configparser.NoSectionError as e:\n    print(f\"Section error: {e}\")\nexcept configparser.NoOptionError as e:\n    print(f\"Option error: {e}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/configparser/#conclusion","title":"Conclusion","text":"<p>The <code>configparser</code> module in Python provides a robust way to manage configuration files using the <code>.ini</code> file format. It supports reading, writing, and updating configuration files, as well as handling sections, options, and defaults. By understanding and utilizing these features, you can efficiently manage configuration data for your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/curl/","title":"Python cURL Module (<code>pycurl</code>) Report","text":"<p><code>pycurl</code> is a Python interface to the cURL library, which allows you to perform various HTTP operations such as GET, POST, PUT, and DELETE. It provides a way to interact with web resources directly from Python code. This report covers the installation, basic usage, and examples of how to use <code>pycurl</code>.</p>"},{"location":"languages/python/libraries_frameworks/curl/#introduction","title":"Introduction","text":"<p><code>pycurl</code> is a Python module that provides a way to use the cURL library for performing HTTP requests. cURL is a powerful tool for making network requests and handling various internet protocols. <code>pycurl</code> allows Python developers to use cURL\u2019s capabilities in their applications.</p>"},{"location":"languages/python/libraries_frameworks/curl/#installation","title":"Installation","text":"<p>To use <code>pycurl</code>, you need to have the cURL library installed on your system, as well as the <code>pycurl</code> Python package. You can install <code>pycurl</code> via pip:</p> <pre><code>pip install pycurl\n</code></pre> <p>Make sure that you have cURL installed on your system. On most Unix-like systems, you can install it using your package manager, e.g., <code>sudo apt-get install curl</code> on Debian-based systems.</p>"},{"location":"languages/python/libraries_frameworks/curl/#basic-usage","title":"Basic Usage","text":"<p><code>pycurl</code> provides an interface to the cURL functions using Python\u2019s syntax. The basic usage involves creating a <code>pycurl.Curl</code> object, setting options using the <code>setopt</code> method, and performing a request.</p>"},{"location":"languages/python/libraries_frameworks/curl/#example-code","title":"Example Code","text":"<p>Here is a simple example of performing a GET request using <code>pycurl</code>:</p> <pre><code>import pycurl\nfrom io import BytesIO\n\n# Create a BytesIO object to capture the response\nresponse = BytesIO()\n\n# Initialize a Curl object\ncurl = pycurl.Curl()\n\n# Set the URL to fetch\ncurl.setopt(curl.URL, 'http://example.com')\n\n# Write the response to the BytesIO object\ncurl.setopt(curl.WRITEDATA, response)\n\n# Perform the request\ncurl.perform()\n\n# Close the Curl object\ncurl.close()\n\n# Get the content of the response\ncontent = response.getvalue()\n\n# Print the response content\nprint(content.decode('utf-8'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/curl/#simple-get-request","title":"Simple GET Request","text":"<p>This example demonstrates how to perform a simple GET request to retrieve content from a URL:</p> <pre><code>import pycurl\nfrom io import BytesIO\n\ndef fetch_url(url):\n    buffer = BytesIO()\n    curl = pycurl.Curl()\n    curl.setopt(curl.URL, url)\n    curl.setopt(curl.WRITEDATA, buffer)\n    curl.perform()\n    curl.close()\n    return buffer.getvalue().decode('utf-8')\n\nurl = 'http://example.com'\nresponse_content = fetch_url(url)\nprint(response_content)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#post-request-with-data","title":"POST Request with Data","text":"<p>To perform a POST request and send data, you can use the following example:</p> <pre><code>import pycurl\nfrom io import BytesIO\n\ndef post_data(url, data):\n    buffer = BytesIO()\n    curl = pycurl.Curl()\n    curl.setopt(curl.URL, url)\n    curl.setopt(curl.POST, 1)\n    curl.setopt(curl.POSTFIELDS, data)\n    curl.setopt(curl.WRITEDATA, buffer)\n    curl.perform()\n    curl.close()\n    return buffer.getvalue().decode('utf-8')\n\nurl = 'http://httpbin.org/post'\ndata = 'field1=value1&amp;field2=value2'\nresponse_content = post_data(url, data)\nprint(response_content)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#handling-http-headers","title":"Handling HTTP Headers","text":"<p>You can set and read HTTP headers using <code>pycurl</code>. Here\u2019s how to set custom headers:</p> <pre><code>import pycurl\nfrom io import BytesIO\n\ndef fetch_with_headers(url, headers):\n    buffer = BytesIO()\n    curl = pycurl.Curl()\n    curl.setopt(curl.URL, url)\n    curl.setopt(curl.HTTPHEADER, headers)\n    curl.setopt(curl.WRITEDATA, buffer)\n    curl.perform()\n    curl.close()\n    return buffer.getvalue().decode('utf-8')\n\nurl = 'http://httpbin.org/headers'\nheaders = ['User-Agent: MyApp/1.0', 'Accept: application/json']\nresponse_content = fetch_with_headers(url, headers)\nprint(response_content)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#downloading-files","title":"Downloading Files","text":"<p>To download a file from a URL, you can use the following code:</p> <pre><code>import pycurl\n\ndef download_file(url, filename):\n    with open(filename, 'wb') as f:\n        curl = pycurl.Curl()\n        curl.setopt(curl.URL, url)\n        curl.setopt(curl.WRITEDATA, f)\n        curl.perform()\n        curl.close()\n\nurl = 'https://example.com/file.zip'\ndownload_file(url, 'file.zip')\nprint('File downloaded successfully.')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#error-handling","title":"Error Handling","text":"<p>When using <code>pycurl</code>, you should handle possible exceptions to ensure that your program can deal with errors gracefully.</p> <pre><code>import pycurl\nfrom io import BytesIO\nfrom pycurl import error\n\ndef fetch_url_safe(url):\n    buffer = BytesIO()\n    curl = pycurl.Curl()\n    try:\n        curl.setopt(curl.URL, url)\n        curl.setopt(curl.WRITEDATA, buffer)\n        curl.perform()\n    except error as e:\n        print(f'An error occurred: {e}')\n    finally:\n        curl.close()\n    return buffer.getvalue().decode('utf-8')\n\nurl = 'http://nonexistent-url.com'\nresponse_content = fetch_url_safe(url)\nprint(response_content)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/curl/#conclusion","title":"Conclusion","text":"<p>The <code>pycurl</code> module provides a Pythonic interface to the cURL library, enabling powerful and flexible HTTP requests and handling. It supports various features, including GET and POST requests, handling headers, and downloading files. By utilizing <code>pycurl</code>, you can efficiently interact with web resources and manage HTTP communication in your Python applications.</p> <p>For further details and advanced usage, refer to the pycurl documentation.</p>"},{"location":"languages/python/libraries_frameworks/datetime/","title":"Working with Date and Time in Python","text":"<p>Python provides powerful libraries to handle date and time data. The most commonly used libraries are <code>datetime</code>, <code>time</code>, and <code>calendar</code>. These libraries allow you to create, manipulate, format, and convert date and time data.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#table-of-contents","title":"Table of Contents","text":"<ol> <li>[Introduction]</li> </ol>"},{"location":"languages/python/libraries_frameworks/datetime/#1-the-datetime-module","title":"1. The <code>datetime</code> Module","text":"<p>The <code>datetime</code> module supplies classes for manipulating dates and times.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#11-getting-the-current-date-and-time","title":"1.1 Getting the Current Date and Time","text":"<p>You can get the current date and time using the <code>datetime.now()</code> method.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example","title":"Example:","text":"<pre><code>from datetime import datetime\n\n# Getting the current date and time\ncurrent_datetime = datetime.now()\nprint(\"Current date and time:\", current_datetime)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output","title":"Output:","text":"<pre><code>Current date and time: 2024-08-04 10:15:30.123456\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#12-creating-date-and-time-objects","title":"1.2 Creating Date and Time Objects","text":"<p>You can create specific date and time objects using the <code>datetime</code> class.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_1","title":"Example:","text":"<pre><code>from datetime import datetime\n\n# Creating a specific date and time\nspecific_datetime = datetime(2024, 8, 4, 10, 15, 30)\nprint(\"Specific date and time:\", specific_datetime)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_1","title":"Output:","text":"<pre><code>Specific date and time: 2024-08-04 10:15:30\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#13-accessing-date-and-time-components","title":"1.3 Accessing Date and Time Components","text":"<p>You can access individual components of a date and time object, such as the year, month, day, hour, minute, second, and microsecond.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_2","title":"Example:","text":"<pre><code>from datetime import datetime\n\n# Getting the current date and time\ncurrent_datetime = datetime.now()\n\n# Accessing individual components\nyear = current_datetime.year\nmonth = current_datetime.month\nday = current_datetime.day\nhour = current_datetime.hour\nminute = current_datetime.minute\nsecond = current_datetime.second\nmicrosecond = current_datetime.microsecond\n\nprint(\"Year:\", year)\nprint(\"Month:\", month)\nprint(\"Day:\", day)\nprint(\"Hour:\", hour)\nprint(\"Minute:\", minute)\nprint(\"Second:\", second)\nprint(\"Microsecond:\", microsecond)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_2","title":"Output:","text":"<pre><code>Year: 2024\nMonth: 8\nDay: 4\nHour: 10\nMinute: 15\nSecond: 30\nMicrosecond: 123456\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#2-the-time-module","title":"2. The <code>time</code> Module","text":"<p>The <code>time</code> module provides various time-related functions.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#21-getting-the-current-time","title":"2.1 Getting the Current Time","text":"<p>You can get the current time in seconds since the epoch using the <code>time.time()</code> function.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_3","title":"Example:","text":"<pre><code>import time\n\n# Getting the current time\ncurrent_time = time.time()\nprint(\"Current time in seconds since the epoch:\", current_time)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_3","title":"Output:","text":"<pre><code>Current time in seconds since the epoch: 1691136930.123456\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#22-sleeping-for-a-specific-duration","title":"2.2 Sleeping for a Specific Duration","text":"<p>You can pause the execution of your program for a specified duration using the <code>time.sleep()</code> function.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_4","title":"Example:","text":"<pre><code>import time\n\n# Sleeping for 2 seconds\nprint(\"Sleeping for 2 seconds...\")\ntime.sleep(2)\nprint(\"Awake!\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_4","title":"Output:","text":"<pre><code>Sleeping for 2 seconds...\nAwake!\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#3-the-calendar-module","title":"3. The <code>calendar</code> Module","text":"<p>The <code>calendar</code> module provides functions related to calendars, including printing text calendars and checking for leap years.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#31-printing-a-calendar-for-a-month","title":"3.1 Printing a Calendar for a Month","text":"<p>You can print a calendar for a specific month using the <code>calendar.month()</code> function.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_5","title":"Example:","text":"<pre><code>import calendar\n\n# Printing a calendar for August 2024\nprint(calendar.month(2024, 8))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_5","title":"Output:","text":"<pre><code>    August 2024\nMo Tu We Th Fr Sa Su\n          1  2  3  4\n 5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30 31\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#32-checking-for-a-leap-year","title":"3.2 Checking for a Leap Year","text":"<p>You can check if a year is a leap year using the <code>calendar.isleap()</code> function.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_6","title":"Example:","text":"<pre><code>import calendar\n\n# Checking if 2024 is a leap year\nis_leap = calendar.isleap(2024)\nprint(\"Is 2024 a leap year?\", is_leap)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_6","title":"Output:","text":"<pre><code>Is 2024 a leap year? True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#4-formatting-dates-and-times","title":"4. Formatting Dates and Times","text":"<p>You can format date and time objects as strings using the <code>strftime()</code> method.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_7","title":"Example:","text":"<pre><code>from datetime import datetime\n\n# Getting the current date and time\ncurrent_datetime = datetime.now()\n\n# Formatting the date and time\nformatted_datetime = current_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(\"Formatted date and time:\", formatted_datetime)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_7","title":"Output:","text":"<pre><code>Formatted date and time: 2024-08-04 10:15:30\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#5-parsing-dates-and-times","title":"5. Parsing Dates and Times","text":"<p>You can parse strings into date and time objects using the <code>strptime()</code> method.</p>"},{"location":"languages/python/libraries_frameworks/datetime/#example_8","title":"Example:","text":"<pre><code>from datetime import datetime\n\n# Parsing a string into a date and time object\ndate_string = \"2024-08-04 10:15:30\"\nparsed_datetime = datetime.strptime(date_string, \"%Y-%m-%d %H:%M:%S\")\nprint(\"Parsed date and time:\", parsed_datetime)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#output_8","title":"Output:","text":"<pre><code>Parsed date and time: 2024-08-04 10:15:30\n</code></pre>"},{"location":"languages/python/libraries_frameworks/datetime/#conclusion","title":"Conclusion","text":"<p>Working with dates and times in Python is made easy with the <code>datetime</code>, <code>time</code>, and <code>calendar</code> modules. Understanding how to create, manipulate, format, and convert date and time data is crucial for many applications. By practicing the examples provided, you can gain a deeper understanding of how to work with date and time in Python effectively.</p>"},{"location":"languages/python/libraries_frameworks/dis/","title":"Python <code>dis</code> Module: Detailed Overview and Examples","text":"<p>The <code>dis</code> module in Python is a built-in library for disassembling Python bytecode into a human-readable format. It allows developers to analyze and understand the low-level operations that Python performs for a given piece of code. This is particularly useful for optimization, debugging, and understanding the internals of Python.</p>"},{"location":"languages/python/libraries_frameworks/dis/#importing-the-dis-module","title":"Importing the <code>dis</code> Module","text":"<p>To use the functions and methods from the <code>dis</code> module, you need to import it:</p> <pre><code>import dis\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/dis/#1-disassembling-functions","title":"1. Disassembling Functions","text":""},{"location":"languages/python/libraries_frameworks/dis/#disdisobject","title":"<code>dis.dis(object)</code>","text":"<p>Disassembles the bytecode of the given object (function, method, or code object).</p>"},{"location":"languages/python/libraries_frameworks/dis/#example","title":"Example","text":"<pre><code>import dis\n\ndef example_function(x):\n    return x + 1\n\ndis.dis(example_function)\n</code></pre> <p>Output:</p> <pre><code>  2           0 LOAD_FAST                0 (x)\n              2 LOAD_CONST               1 (1)\n              4 BINARY_ADD\n              6 RETURN_VALUE\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#2-disassembling-strings","title":"2. Disassembling Strings","text":""},{"location":"languages/python/libraries_frameworks/dis/#disdisassemblecode-lasti-1-filenone","title":"<code>dis.disassemble(code, lasti=-1, *, file=None)</code>","text":"<p>Disassembles the bytecode of a code object. This is a lower-level interface that is typically used internally by <code>dis.dis</code>.</p>"},{"location":"languages/python/libraries_frameworks/dis/#example_1","title":"Example","text":"<pre><code>import dis\n\ncode = compile('x + 1', '&lt;string&gt;', 'eval')\ndis.disassemble(code)\n</code></pre> <p>Output:</p> <pre><code>  1           0 LOAD_NAME                0 (x)\n              2 LOAD_CONST               0 (1)\n              4 BINARY_ADD\n              6 RETURN_VALUE\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#3-disassembling-classes-and-modules","title":"3. Disassembling Classes and Modules","text":""},{"location":"languages/python/libraries_frameworks/dis/#disdisobjnone-filenone-depthnone","title":"<code>dis.dis(obj=None, *, file=None, depth=None)</code>","text":"<p>Disassembles classes and modules. The <code>depth</code> parameter specifies how deep to disassemble (default is unlimited).</p>"},{"location":"languages/python/libraries_frameworks/dis/#example_2","title":"Example","text":"<pre><code>import dis\n\nclass ExampleClass:\n    def method(self, x):\n        return x * 2\n\ndis.dis(ExampleClass)\n</code></pre> <p>Output:</p> <pre><code>Disassembly of method:\n  2           0 LOAD_FAST                1 (x)\n              2 LOAD_CONST               1 (2)\n              4 BINARY_MULTIPLY\n              6 RETURN_VALUE\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#4-getting-bytecode-instructions","title":"4. Getting Bytecode Instructions","text":""},{"location":"languages/python/libraries_frameworks/dis/#disget_instructionsx-first_linenone-current_offsetnone","title":"<code>dis.get_instructions(x, *, first_line=None, current_offset=None)</code>","text":"<p>Returns an iterator over <code>dis.Instruction</code> instances for the given function, method, source code string, or code object.</p>"},{"location":"languages/python/libraries_frameworks/dis/#example_3","title":"Example","text":"<pre><code>import dis\n\ndef example_function(x):\n    return x - 1\n\ninstructions = dis.get_instructions(example_function)\nfor instr in instructions:\n    print(instr)\n</code></pre> <p>Output:</p> <pre><code>Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='x', argrepr='x', offset=0, starts_line=2, is_jump_target=False)\nInstruction(opname='LOAD_CONST', opcode=100, arg=1, argval=1, argrepr='1', offset=2, starts_line=2, is_jump_target=False)\nInstruction(opname='BINARY_SUBTRACT', opcode=24, arg=None, argval=None, argrepr='', offset=4, starts_line=2, is_jump_target=False)\nInstruction(opname='RETURN_VALUE', opcode=83, arg=None, argval=None, argrepr='', offset=6, starts_line=2, is_jump_target=False)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#5-showing-bytecode","title":"5. Showing Bytecode","text":""},{"location":"languages/python/libraries_frameworks/dis/#disshow_codeco-filenone","title":"<code>dis.show_code(co, *, file=None)</code>","text":"<p>Displays details of a code object, including the argument count, number of locals, stack size, and flags.</p>"},{"location":"languages/python/libraries_frameworks/dis/#example_4","title":"Example","text":"<pre><code>import dis\n\ndef example_function(x):\n    return x / 2\n\ndis.show_code(example_function.__code__)\n</code></pre> <p>Output:</p> <pre><code>Name:              example_function\nFilename:          &lt;ipython-input-2-49b1e5eab4df&gt;\nArgument count:    1\nPositional-only arguments: 0\nKw-only arguments: 0\nNumber of locals:  2\nStack size:        2\nFlags:             OPTIMIZED, NEWLOCALS, NOFREE\nConstants:\n  0: None\n  1: 2\nNames:\n  0: x\nVariable names:\n  0: x\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/dis/#example-1-analyzing-a-function","title":"Example 1: Analyzing a Function","text":"<pre><code>import dis\n\ndef add(a, b):\n    return a + b\n\ndis.dis(add)\n</code></pre> <p>Output:</p> <pre><code>  2           0 LOAD_FAST                0 (a)\n              2 LOAD_FAST                1 (b)\n              4 BINARY_ADD\n              6 RETURN_VALUE\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#example-2-analyzing-a-class-method","title":"Example 2: Analyzing a Class Method","text":"<pre><code>import dis\n\nclass Calculator:\n    def multiply(self, a, b):\n        return a * b\n\ndis.dis(Calculator.multiply)\n</code></pre> <p>Output:</p> <pre><code>  2           0 LOAD_FAST                1 (a)\n              2 LOAD_FAST                2 (b)\n              4 BINARY_MULTIPLY\n              6 RETURN_VALUE\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#example-3-using-get_instructions","title":"Example 3: Using <code>get_instructions</code>","text":"<pre><code>import dis\n\ndef subtract(a, b):\n    return a - b\n\ninstructions = dis.get_instructions(subtract)\nfor instr in instructions:\n    print(instr)\n</code></pre> <p>Output:</p> <pre><code>Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='a', argrepr='a', offset=0, starts_line=2, is_jump_target=False)\nInstruction(opname='LOAD_FAST', opcode=124, arg=1, argval='b', argrepr='b', offset=2, starts_line=2, is_jump_target=False)\nInstruction(opname='BINARY_SUBTRACT', opcode=24, arg=None, argval=None, argrepr='', offset=4, starts_line=2, is_jump_target=False)\nInstruction(opname='RETURN_VALUE', opcode=83, arg=None, argval=None, argrepr='', offset=6, starts_line=2, is_jump_target=False)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#example-4-showing-code-object-details","title":"Example 4: Showing Code Object Details","text":"<pre><code>import dis\n\ndef divide(a, b):\n    return a / b\n\ndis.show_code(divide.__code__)\n</code></pre> <p>Output:</p> <pre><code>Name:              divide\nFilename:          &lt;ipython-input-4-0d7b92749d8e&gt;\nArgument count:    2\nPositional-only arguments: 0\nKw-only arguments: 0\nNumber of locals:  2\nStack size:        2\nFlags:             OPTIMIZED, NEWLOCALS, NOFREE\nConstants:\n  0: None\nNames:\n  0: a\n  1: b\nVariable names:\n  0: a\n  1: b\n</code></pre>"},{"location":"languages/python/libraries_frameworks/dis/#conclusion","title":"Conclusion","text":"<p>The <code>dis</code> module in Python is a powerful tool for disassembling and analyzing Python bytecode. It provides detailed insights into the low-level operations performed by Python, which can be useful for optimization, debugging, and understanding the internals of Python code. By leveraging the functions and methods provided by the <code>dis</code> module, developers can gain a deeper understanding of how Python executes their code and make informed decisions to improve performance and correctness.</p>"},{"location":"languages/python/libraries_frameworks/flask/","title":"Flask Module in Python: A Comprehensive Guide","text":"<p>Flask is a lightweight WSGI web application framework in Python. It is designed with simplicity and flexibility in mind, making it a popular choice for developers looking to create web applications quickly and easily. This guide covers the key features, functionalities, and examples to help you get started with Flask.</p>"},{"location":"languages/python/libraries_frameworks/flask/#introduction-to-flask","title":"Introduction to Flask","text":"<p>Flask is a micro-framework for Python based on Werkzeug and Jinja2. It is designed to be easy to use and extend, providing the essentials for web development without imposing a specific structure or dependencies.</p> <p>Key features of Flask: - Lightweight and modular design - Built-in development server and debugger - Integrated support for unit testing - RESTful request dispatching - Jinja2 templating - Secure cookie handling</p>"},{"location":"languages/python/libraries_frameworks/flask/#installation","title":"Installation","text":"<p>To install Flask, you can use pip:</p> <pre><code>pip install Flask\n</code></pre>"},{"location":"languages/python/libraries_frameworks/flask/#basic-application-structure","title":"Basic Application Structure","text":"<p>A minimal Flask application consists of a single Python file:</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Save this as <code>app.py</code> and run it using:</p> <pre><code>python app.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/flask/#routing","title":"Routing","text":"<p>Routing in Flask is straightforward. You define URL patterns and associate them with view functions.</p> <pre><code>@app.route('/hello')\ndef hello():\n    return 'Hello, Flask!'\n\n@app.route('/user/&lt;username&gt;')\ndef show_user_profile(username):\n    return f'User {username}'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/flask/#templates","title":"Templates","text":"<p>Flask uses Jinja2 for templating. Create an HTML template in the <code>templates</code> folder.</p> <p>templates/index.html <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Render the template in your view function:</p> <pre><code>from flask import render_template\n\n@app.route('/')\ndef home():\n    return render_template('index.html', title='Home Page', message='Welcome to Flask!')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/flask/#forms-and-validation","title":"Forms and Validation","text":"<p>Use Flask-WTF to handle forms and validation.</p> <p>Install Flask-WTF:</p> <pre><code>pip install Flask-WTF\n</code></pre> <p>app.py <pre><code>from flask import Flask, render_template, request, redirect, url_for\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField\nfrom wtforms.validators import DataRequired\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your_secret_key'\n\nclass NameForm(FlaskForm):\n    name = StringField('What is your name?', validators=[DataRequired()])\n    submit = SubmitField('Submit')\n\n@app.route('/form', methods=['GET', 'POST'])\ndef form():\n    form = NameForm()\n    if form.validate_on_submit():\n        return redirect(url_for('hello', username=form.name.data))\n    return render_template('form.html', form=form)\n</code></pre></p> <p>templates/form.html <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\"&gt;\n        {{ form.hidden_tag() }}\n        {{ form.name.label }} {{ form.name }}\n        {{ form.submit }}\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#database-integration","title":"Database Integration","text":""},{"location":"languages/python/libraries_frameworks/flask/#sqlalchemy","title":"SQLAlchemy","text":"<p>Flask-SQLAlchemy simplifies database interactions.</p> <p>Install Flask-SQLAlchemy:</p> <pre><code>pip install Flask-SQLAlchemy\n</code></pre> <p>app.py <pre><code>from flask_sqlalchemy import SQLAlchemy\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f'&lt;User {self.username}&gt;'\n\n@app.route('/add_user/&lt;username&gt;')\ndef add_user(username):\n    user = User(username=username)\n    db.session.add(user)\n    db.session.commit()\n    return f'User {username} added.'\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#flask-migrate","title":"Flask-Migrate","text":"<p>Flask-Migrate handles database migrations.</p> <p>Install Flask-Migrate:</p> <pre><code>pip install Flask-Migrate\n</code></pre> <p>app.py <pre><code>from flask_migrate import Migrate\n\nmigrate = Migrate(app, db)\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#user-authentication","title":"User Authentication","text":"<p>Use Flask-Login to handle user authentication.</p> <p>Install Flask-Login:</p> <pre><code>pip install Flask-Login\n</code></pre> <p>app.py <pre><code>from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    # Here you would typically check the username and password from a form\n    user = User.query.filter_by(username='admin').first()\n    login_user(user)\n    return 'Logged in!'\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return 'Logged out!'\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    return f'Hello, {current_user.username}!'\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#restful-api","title":"RESTful API","text":"<p>Use Flask-RESTful to create RESTful APIs.</p> <p>Install Flask-RESTful:</p> <pre><code>pip install Flask-RESTful\n</code></pre> <p>app.py <pre><code>from flask_restful import Resource, Api\n\napi = Api(app)\n\nclass HelloWorld(Resource):\n    def get(self):\n        return {'hello': 'world'}\n\napi.add_resource(HelloWorld, '/api/hello')\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#error-handling","title":"Error Handling","text":"<p>Custom error pages can be defined in Flask.</p> <pre><code>@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n</code></pre> <p>templates/404.html <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Page Not Found&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;404 - Page Not Found&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/flask/#deployment","title":"Deployment","text":"<p>Deploy your Flask application using a WSGI server like Gunicorn.</p> <p>Install Gunicorn:</p> <pre><code>pip install gunicorn\n</code></pre> <p>Run your app with Gunicorn:</p> <pre><code>gunicorn -w 4 app:app\n</code></pre> <p>For more robust deployment, consider using platforms like Heroku, AWS, or Docker.</p>"},{"location":"languages/python/libraries_frameworks/flask/#conclusion","title":"Conclusion","text":"<p>Flask is a versatile and easy-to-use framework for building web applications in Python. Its simplicity and flexibility make it suitable for both beginners and experienced developers. By mastering the core features and functionalities of Flask, you can create powerful web applications with minimal effort.</p>"},{"location":"languages/python/libraries_frameworks/functools/","title":"Python <code>functools</code> Module: Detailed Overview and Examples","text":"<p>The <code>functools</code> module in Python provides higher-order functions that act on or return other functions. These utilities help with common functional programming patterns and can make your code more concise and expressive.</p>"},{"location":"languages/python/libraries_frameworks/functools/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/functools/#1-functoolspartial","title":"1. <code>functools.partial</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description","title":"Description","text":"<p><code>functools.partial</code> allows you to fix a certain number of arguments of a function and generate a new function.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax","title":"Syntax","text":"<pre><code>functools.partial(func, /, *args, **keywords)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example","title":"Example","text":"<pre><code>import functools\n\ndef multiply(x, y):\n    return x * y\n\n# Create a new function that multiplies by 2\ndouble = functools.partial(multiply, 2)\n\nprint(double(5))  # Output: 10\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#2-functoolsreduce","title":"2. <code>functools.reduce</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_1","title":"Description","text":"<p><code>functools.reduce</code> applies a binary function cumulatively to the items of a sequence, from left to right, to reduce the sequence to a single value.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_1","title":"Syntax","text":"<pre><code>functools.reduce(function, iterable[, initializer])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_1","title":"Example","text":"<pre><code>import functools\n\n# Sum all elements in a list\nresult = functools.reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])\nprint(result)  # Output: 15\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#3-functoolslru_cache","title":"3. <code>functools.lru_cache</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_2","title":"Description","text":"<p><code>functools.lru_cache</code> is a decorator that caches the results of function calls with least-recently-used (LRU) eviction.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_2","title":"Syntax","text":"<pre><code>functools.lru_cache(maxsize=128, typed=False)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_2","title":"Example","text":"<pre><code>import functools\n\n@functools.lru_cache(maxsize=100)\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))  # Output: 120\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#4-functoolssingledispatch","title":"4. <code>functools.singledispatch</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_3","title":"Description","text":"<p><code>functools.singledispatch</code> is a decorator that transforms a function into a single-dispatch generic function.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_3","title":"Syntax","text":"<pre><code>@functools.singledispatch\ndef func(arg, *args, **kw):\n    ...\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_3","title":"Example","text":"<pre><code>import functools\n\n@functools.singledispatch\ndef process(value):\n    print(f\"Default: {value}\")\n\n@process.register(int)\ndef _(value):\n    print(f\"Integer: {value}\")\n\n@process.register(str)\ndef _(value):\n    print(f\"String: {value}\")\n\nprocess(10)    # Output: Integer: 10\nprocess(\"hi\")  # Output: String: hi\nprocess([1, 2, 3])  # Output: Default: [1, 2, 3]\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#5-functoolsupdate_wrapper-and-functoolswraps","title":"5. <code>functools.update_wrapper</code> and <code>functools.wraps</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_4","title":"Description","text":"<p><code>functools.update_wrapper</code> is used to update a wrapper function to look more like the wrapped function by copying attributes. <code>functools.wraps</code> is a decorator that applies <code>update_wrapper</code> to the wrapper function.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_4","title":"Syntax","text":"<pre><code>functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)\nfunctools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_4","title":"Example","text":"<pre><code>import functools\n\ndef my_decorator(f):\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = f(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    return f\"Hello, {name}\"\n\nprint(say_hello(\"Alice\"))\nprint(say_hello.__name__)  # Output: say_hello\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#6-functoolstotal_ordering","title":"6. <code>functools.total_ordering</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_5","title":"Description","text":"<p><code>functools.total_ordering</code> is a class decorator that fills in missing comparison methods (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>) based on <code>__eq__</code> and one other method.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_5","title":"Syntax","text":"<pre><code>@functools.total_ordering\nclass MyClass:\n    ...\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_5","title":"Example","text":"<pre><code>import functools\n\n@functools.total_ordering\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return self.age == other.age\n\n    def __lt__(self, other):\n        return self.age &lt; other.age\n\n# Create instances\nperson1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n\nprint(person1 &gt; person2)  # Output: True\nprint(person1 &lt;= person2)  # Output: False\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#7-functoolscached_property","title":"7. <code>functools.cached_property</code>","text":""},{"location":"languages/python/libraries_frameworks/functools/#description_6","title":"Description","text":"<p><code>functools.cached_property</code> transforms a method into a property whose value is computed once and then cached as a normal attribute for the life of the instance.</p>"},{"location":"languages/python/libraries_frameworks/functools/#syntax_6","title":"Syntax","text":"<pre><code>class MyClass:\n    @functools.cached_property\n    def my_property(self):\n        ...\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#example_6","title":"Example","text":"<pre><code>import functools\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    @functools.cached_property\n    def area(self):\n        print(\"Computing area\")\n        return 3.14159 * self.radius * self.radius\n\nc = Circle(10)\nprint(c.area)  # Output: Computing area 314.159\nprint(c.area)  # Output: 314.159\n</code></pre>"},{"location":"languages/python/libraries_frameworks/functools/#conclusion","title":"Conclusion","text":"<p>The <code>functools</code> module in Python provides a variety of higher-order functions that can greatly simplify and enhance your code. From partial application of functions with <code>partial</code> to memoization with <code>lru_cache</code>, and method overloading with <code>singledispatch</code>, the module offers powerful tools for functional programming and optimization. By leveraging these utilities, you can write more concise, readable, and efficient Python code.</p>"},{"location":"languages/python/libraries_frameworks/graphtool/","title":"Python <code>graph-tool</code> Module: Detailed Overview and Examples","text":"<p>The <code>graph-tool</code> module is a Python library for manipulation and statistical analysis of graphs (networks). It is designed to be fast and scalable, providing efficient algorithms for various graph operations and properties. The library leverages C++ for performance and provides a comprehensive API for Python users.</p>"},{"location":"languages/python/libraries_frameworks/graphtool/#installation","title":"Installation","text":"<p>To install <code>graph-tool</code>, you can use <code>pip</code>:</p> <pre><code>pip install graph-tool\n</code></pre> <p>Note: <code>graph-tool</code> has several dependencies and might require additional steps to install on some systems. For detailed installation instructions, refer to the official documentation.</p>"},{"location":"languages/python/libraries_frameworks/graphtool/#importing-the-graph-tool-module","title":"Importing the <code>graph-tool</code> Module","text":"<pre><code>from graph_tool.all import *\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#creating-and-manipulating-graphs","title":"Creating and Manipulating Graphs","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#creating-a-graph","title":"Creating a Graph","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example","title":"Example","text":"<pre><code>from graph_tool.all import Graph\n\n# Create a new directed graph\ng = Graph(directed=True)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#adding-vertices-and-edges","title":"Adding Vertices and Edges","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_1","title":"Example","text":"<pre><code># Add vertices\nv1 = g.add_vertex()\nv2 = g.add_vertex()\n\n# Add an edge\ne = g.add_edge(v1, v2)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#accessing-vertices-and-edges","title":"Accessing Vertices and Edges","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_2","title":"Example","text":"<pre><code># Iterate over vertices\nfor v in g.vertices():\n    print(v)\n\n# Iterate over edges\nfor e in g.edges():\n    print(e)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#properties","title":"Properties","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#vertex-and-edge-properties","title":"Vertex and Edge Properties","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_3","title":"Example","text":"<pre><code># Add vertex property\nvprop = g.new_vertex_property(\"string\")\ng.vp.name = vprop\n\n# Set property values\ng.vp.name[v1] = \"Vertex 1\"\ng.vp.name[v2] = \"Vertex 2\"\n\n# Add edge property\neprop = g.new_edge_property(\"int\")\ng.ep.weight = eprop\n\n# Set property values\ng.ep.weight[e] = 5\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#graph-properties","title":"Graph Properties","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_4","title":"Example","text":"<pre><code># Add graph property\ngprop = g.new_graph_property(\"string\")\ng.gp.title = gprop\n\n# Set property value\ng.gp.title = \"My Graph\"\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#visualization","title":"Visualization","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#basic-plotting","title":"Basic Plotting","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_5","title":"Example","text":"<pre><code>from graph_tool.all import graph_draw\n\n# Draw the graph\ngraph_draw(g, output_size=(400, 400), output=\"graph.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#advanced-plotting","title":"Advanced Plotting","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_6","title":"Example","text":"<pre><code># Create a larger graph\ng = Graph()\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\n\n# Add properties\ng.vp.size = g.new_vertex_property(\"double\")\ng.vp.size[v1] = 10\ng.vp.size[v2] = 20\ng.vp.size[v3] = 30\n\n# Draw with custom properties\ngraph_draw(g, vertex_size=g.vp.size, output_size=(400, 400), output=\"graph_custom.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#graph-algorithms","title":"Graph Algorithms","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#shortest-path","title":"Shortest Path","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_7","title":"Example","text":"<pre><code>from graph_tool.all import shortest_path\n\n# Create a graph\ng = Graph()\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\n\n# Calculate shortest path\ndist, path = shortest_path(g, source=v1, target=v3)\nprint(\"Distance:\", dist)\nprint(\"Path:\", [int(v) for v in path])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#clustering-coefficient","title":"Clustering Coefficient","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_8","title":"Example","text":"<pre><code>from graph_tool.all import global_clustering\n\n# Create a graph\ng = Graph()\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\ne3 = g.add_edge(v3, v1)\n\n# Calculate clustering coefficient\ncc = global_clustering(g)\nprint(\"Global Clustering Coefficient:\", cc)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#pagerank","title":"PageRank","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example_9","title":"Example","text":"<pre><code>from graph_tool.all import pagerank\n\n# Create a graph\ng = Graph(directed=True)\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\ne3 = g.add_edge(v3, v1)\n\n# Calculate PageRank\npr = pagerank(g)\nfor v in g.vertices():\n    print(f\"Vertex {int(v)}: {pr[v]}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/graphtool/#example-1-social-network-analysis","title":"Example 1: Social Network Analysis","text":"<pre><code>from graph_tool.all import Graph, graph_draw\n\n# Create a graph\ng = Graph()\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\nv4 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\ne3 = g.add_edge(v3, v4)\ne4 = g.add_edge(v4, v1)\n\n# Add vertex properties\ng.vp.name = g.new_vertex_property(\"string\")\ng.vp.name[v1] = \"Alice\"\ng.vp.name[v2] = \"Bob\"\ng.vp.name[v3] = \"Charlie\"\ng.vp.name[v4] = \"Diana\"\n\n# Visualize the graph\ngraph_draw(g, vertex_text=g.vp.name, output_size=(400, 400), output=\"social_network.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#example-2-road-network-analysis","title":"Example 2: Road Network Analysis","text":"<pre><code>from graph_tool.all import Graph, graph_draw\n\n# Create a graph\ng = Graph()\nv1 = g.add_vertex()\nv2 = g.add_vertex()\nv3 = g.add_vertex()\nv4 = g.add_vertex()\ne1 = g.add_edge(v1, v2)\ne2 = g.add_edge(v2, v3)\ne3 = g.add_edge(v3, v4)\ne4 = g.add_edge(v4, v1)\n\n# Add edge properties\ng.ep.distance = g.new_edge_property(\"float\")\ng.ep.distance[e1] = 10.0\ng.ep.distance[e2] = 20.0\ng.ep.distance[e3] = 15.0\ng.ep.distance[e4] = 25.0\n\n# Visualize the graph\ngraph_draw(g, edge_text=g.ep.distance, output_size=(400, 400), output=\"road_network.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/graphtool/#conclusion","title":"Conclusion","text":"<p>The <code>graph-tool</code> module is a powerful library for graph manipulation and analysis in Python. It provides efficient algorithms and a flexible API for creating, modifying, and analyzing graphs. Whether you're working on social network analysis, road network analysis, or any other graph-related task, <code>graph-tool</code> offers the tools you need to perform your analysis effectively. By leveraging its advanced features and customization options, you can handle complex graph structures and derive meaningful insights from your data.</p>"},{"location":"languages/python/libraries_frameworks/gzip/","title":"Python <code>gzip</code> Module Report","text":""},{"location":"languages/python/libraries_frameworks/gzip/#introduction","title":"Introduction","text":"<p>The <code>gzip</code> module in Python provides a way to handle GNU zip files, also known as gzip files. It supports compression and decompression of files and data streams using the gzip format. This module is part of the Python Standard Library and offers both file and in-memory compression.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#features","title":"Features","text":"<ol> <li>File Compression and Decompression: Read and write gzip-compressed files.</li> <li>In-Memory Compression: Compress and decompress data in memory without using files.</li> <li>Compatibility: Supports the standard gzip file format used by many systems and tools.</li> </ol>"},{"location":"languages/python/libraries_frameworks/gzip/#installation","title":"Installation","text":"<p>The <code>gzip</code> module is included with Python's standard library, so no additional installation is required.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/gzip/#compressing-data","title":"Compressing Data","text":"<p>You can compress data using the <code>gzip</code> module with the <code>gzip.compress()</code> method for in-memory data or the <code>gzip.open()</code> method for file operations.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#example-compressing-data-to-memory","title":"Example: Compressing Data to Memory","text":"<pre><code>import gzip\n\ndata = b\"This is some data that will be compressed.\"\n\n# Compress data\ncompressed_data = gzip.compress(data)\n\nprint(\"Compressed Data:\", compressed_data)\n</code></pre> <p>In this example: - <code>gzip.compress()</code> compresses the byte data <code>data</code> and returns the compressed byte string.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#decompressing-data","title":"Decompressing Data","text":"<p>To decompress data, you use the <code>gzip.decompress()</code> method.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#example-decompressing-data-from-memory","title":"Example: Decompressing Data from Memory","text":"<pre><code>import gzip\n\ncompressed_data = b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x0b\\xc9\\xc8\\xcf\\xcc\\x00\\xa2\\xfc\\xdc\\x02\\x00\\xba\\xea\\x0b\\x47\\x0f\\x00\\x00\\x00'\n\n# Decompress data\ndecompressed_data = gzip.decompress(compressed_data)\n\nprint(\"Decompressed Data:\", decompressed_data.decode())\n</code></pre> <p>In this example: - <code>gzip.decompress()</code> decompresses the byte string <code>compressed_data</code> and returns the original data.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#file-compression-and-decompression","title":"File Compression and Decompression","text":""},{"location":"languages/python/libraries_frameworks/gzip/#example-compressing-a-file","title":"Example: Compressing a File","text":"<pre><code>import gzip\nimport shutil\n\ninput_file = 'example.txt'\noutput_file = 'example.txt.gz'\n\n# Compress the file\nwith open(input_file, 'rb') as f_in:\n    with gzip.open(output_file, 'wb') as f_out:\n        shutil.copyfileobj(f_in, f_out)\n</code></pre> <p>In this example: - <code>gzip.open()</code> is used to create a gzip-compressed file. - <code>shutil.copyfileobj()</code> copies the contents of <code>example.txt</code> to <code>example.txt.gz</code> while compressing it.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#example-decompressing-a-file","title":"Example: Decompressing a File","text":"<pre><code>import gzip\nimport shutil\n\ninput_file = 'example.txt.gz'\noutput_file = 'example.txt'\n\n# Decompress the file\nwith gzip.open(input_file, 'rb') as f_in:\n    with open(output_file, 'wb') as f_out:\n        shutil.copyfileobj(f_in, f_out)\n</code></pre> <p>In this example: - <code>gzip.open()</code> is used to open the gzip-compressed file for reading. - <code>shutil.copyfileobj()</code> copies the decompressed contents to <code>example.txt</code>.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#advanced-usage","title":"Advanced Usage","text":""},{"location":"languages/python/libraries_frameworks/gzip/#handling-stream-data","title":"Handling Stream Data","text":"<p>You can use <code>gzip.GzipFile</code> for more control over compression and decompression.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#example-compressing-data-stream","title":"Example: Compressing Data Stream","text":"<pre><code>import gzip\nimport io\n\ndata = b\"This is some data to be streamed.\"\n\n# Create a BytesIO stream\nbuffer = io.BytesIO()\n\n# Compress data and write to buffer\nwith gzip.GzipFile(fileobj=buffer, mode='wb') as gz_file:\n    gz_file.write(data)\n\n# Get compressed data\ncompressed_data = buffer.getvalue()\n\nprint(\"Compressed Data:\", compressed_data)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/gzip/#example-decompressing-data-stream","title":"Example: Decompressing Data Stream","text":"<pre><code>import gzip\nimport io\n\ncompressed_data = b'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x0b\\xc9\\xc8\\xcf\\xcc\\x00\\xa2\\xfc\\xdc\\x02\\x00\\xba\\xea\\x0b\\x47\\x0f\\x00\\x00\\x00'\n\n# Create a BytesIO stream from compressed data\nbuffer = io.BytesIO(compressed_data)\n\n# Decompress data from stream\nwith gzip.GzipFile(fileobj=buffer, mode='rb') as gz_file:\n    decompressed_data = gz_file.read()\n\nprint(\"Decompressed Data:\", decompressed_data.decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/gzip/#best-practices","title":"Best Practices","text":"<ol> <li>Stream Data: Use streams for large data to avoid loading entire files into memory.</li> <li>Handle Exceptions: Implement error handling to manage issues like corrupted gzip files.</li> <li>Check Compatibility: Ensure compatibility with other gzip tools and systems by adhering to the standard format.</li> </ol>"},{"location":"languages/python/libraries_frameworks/gzip/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Corrupted Files: Gzip files can become corrupted. Handle exceptions like <code>OSError</code> when reading or writing files.</li> <li>Encoding Issues: Ensure data is correctly encoded/decoded when working with text and byte strings.</li> </ol>"},{"location":"languages/python/libraries_frameworks/gzip/#conclusion","title":"Conclusion","text":"<p>The <code>gzip</code> module is a powerful tool for compressing and decompressing files and data streams in Python. It supports both file operations and in-memory compression, making it versatile for various applications. By following best practices and being mindful of common pitfalls, you can effectively use the <code>gzip</code> module to handle compressed data in your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/gzip/#references","title":"References","text":"<ul> <li>Python <code>gzip</code> Module Documentation - Official documentation for the <code>gzip</code> module.</li> <li>GNU Gzip - Information about the GNU gzip utility and format.</li> </ul>"},{"location":"languages/python/libraries_frameworks/hashlib/","title":"Python hashlib Module: A Comprehensive Guide","text":"<p>The <code>hashlib</code> module in Python provides a way to perform secure hash and message digest algorithms. Hash functions are commonly used for tasks such as verifying data integrity, storing passwords securely, and creating unique identifiers. This guide will cover the key features and functionalities of the <code>hashlib</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/hashlib/#introduction-to-hashlib","title":"Introduction to hashlib","text":"<p>The <code>hashlib</code> module provides a suite of cryptographic hash functions that can be used to produce fixed-size hash values from variable-size input data. These hash functions are often used in security applications and data integrity checks.</p>"},{"location":"languages/python/libraries_frameworks/hashlib/#supported-hash-algorithms","title":"Supported Hash Algorithms","text":"<p>The <code>hashlib</code> module supports several hash algorithms, including:</p> <ul> <li>MD5</li> <li>SHA-1</li> <li>SHA-224</li> <li>SHA-256</li> <li>SHA-384</li> <li>SHA-512</li> <li>BLAKE2 (both BLAKE2b and BLAKE2s)</li> </ul> <p>You can access these algorithms via the <code>hashlib</code> module.</p>"},{"location":"languages/python/libraries_frameworks/hashlib/#creating-hash-objects","title":"Creating Hash Objects","text":"<p>To create a hash object, use the <code>hashlib</code> functions corresponding to the desired algorithm.</p> <pre><code>import hashlib\n\n# Create an MD5 hash object\nmd5_hash = hashlib.md5()\n\n# Create a SHA-256 hash object\nsha256_hash = hashlib.sha256()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#updating-hash-objects","title":"Updating Hash Objects","text":"<p>Once a hash object is created, you can update it with data using the <code>update()</code> method. The <code>update()</code> method can be called multiple times with different data chunks.</p> <pre><code>import hashlib\n\n# Create a SHA-256 hash object\nhash_object = hashlib.sha256()\n\n# Update the hash object with data\nhash_object.update(b'Hello, ')\nhash_object.update(b'World!')\n\n# Get the hexadecimal digest\ndigest = hash_object.hexdigest()\nprint(f\"SHA-256 Digest: {digest}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#obtaining-hash-digests","title":"Obtaining Hash Digests","text":"<p>To obtain the final hash value, use the <code>digest()</code> or <code>hexdigest()</code> methods. The <code>digest()</code> method returns the hash value as bytes, while <code>hexdigest()</code> returns it as a hexadecimal string.</p> <pre><code>import hashlib\n\n# Create an SHA-1 hash object\nhash_object = hashlib.sha1()\n\n# Update the hash object\nhash_object.update(b'Hello, World!')\n\n# Obtain the digest as bytes\ndigest_bytes = hash_object.digest()\nprint(f\"SHA-1 Digest (bytes): {digest_bytes}\")\n\n# Obtain the digest as a hexadecimal string\ndigest_hex = hash_object.hexdigest()\nprint(f\"SHA-1 Digest (hex): {digest_hex}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#hashing-strings-and-files","title":"Hashing Strings and Files","text":""},{"location":"languages/python/libraries_frameworks/hashlib/#hashing-strings","title":"Hashing Strings","text":"<p>You can hash strings by encoding them to bytes before updating the hash object.</p> <pre><code>import hashlib\n\n# Create a SHA-256 hash object\nhash_object = hashlib.sha256()\n\n# Hash a string\nstring = \"Hello, World!\"\nhash_object.update(string.encode('utf-8'))\n\n# Obtain the digest\ndigest = hash_object.hexdigest()\nprint(f\"SHA-256 Digest of string: {digest}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#hashing-files","title":"Hashing Files","text":"<p>To hash the contents of a file, read the file in binary mode and update the hash object in chunks.</p> <pre><code>import hashlib\n\n# Create a SHA-256 hash object\nhash_object = hashlib.sha256()\n\n# Read and hash the file\nwith open('example.txt', 'rb') as file:\n    while chunk := file.read(8192):\n        hash_object.update(chunk)\n\n# Obtain the digest\ndigest = hash_object.hexdigest()\nprint(f\"SHA-256 Digest of file: {digest}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#comparing-hashes","title":"Comparing Hashes","text":"<p>Hashes are often used to compare files or data to verify integrity.</p> <pre><code>import hashlib\n\ndef compute_hash(file_path, algorithm='sha256'):\n    hash_object = getattr(hashlib, algorithm)()\n    with open(file_path, 'rb') as file:\n        while chunk := file.read(8192):\n            hash_object.update(chunk)\n    return hash_object.hexdigest()\n\n# Compute hashes of two files\nfile1_hash = compute_hash('file1.txt')\nfile2_hash = compute_hash('file2.txt')\n\n# Compare hashes\nif file1_hash == file2_hash:\n    print(\"Files are identical.\")\nelse:\n    print(\"Files differ.\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#handling-binary-data","title":"Handling Binary Data","text":"<p>You can handle binary data directly with the <code>hashlib</code> module, ensuring that your data is properly encoded as bytes before hashing.</p> <pre><code>import hashlib\n\n# Example binary data\nbinary_data = b'\\x00\\x01\\x02\\x03\\x04\\x05'\n\n# Create an SHA-512 hash object\nhash_object = hashlib.sha512()\n\n# Update the hash object with binary data\nhash_object.update(binary_data)\n\n# Obtain the digest\ndigest = hash_object.hexdigest()\nprint(f\"SHA-512 Digest of binary data: {digest}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#error-handling","title":"Error Handling","text":"<p>Handling errors when working with the <code>hashlib</code> module ensures that your application can manage unexpected issues gracefully.</p> <pre><code>import hashlib\n\ntry:\n    # Create an unsupported hash object\n    hash_object = hashlib.new('unsupported_algorithm')\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    # Compute hash of a file that doesn't exist\n    with open('non_existent_file.txt', 'rb') as file:\n        hash_object = hashlib.sha256()\n        while chunk := file.read(8192):\n            hash_object.update(chunk)\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/hashlib/#conclusion","title":"Conclusion","text":"<p>The <code>hashlib</code> module in Python provides a straightforward way to perform hashing operations using various cryptographic algorithms. Whether you need to hash strings, files, or binary data, <code>hashlib</code> offers flexible methods to compute and compare hash values. By understanding the features and capabilities of <code>hashlib</code>, you can effectively utilize hashing for data integrity, security, and unique identification purposes.</p>"},{"location":"languages/python/libraries_frameworks/itertools/","title":"Python <code>itertools</code> Module: Detailed Overview and Examples","text":"<p>The <code>itertools</code> module in Python provides a collection of tools for handling iterators. These functions create iterators for efficient looping and are useful for working with sequences of data in a memory-efficient way. The module includes a variety of functions for generating combinations, permutations, and other iterator-based tasks.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#importing-the-itertools-module","title":"Importing the <code>itertools</code> Module","text":"<p>To use the functions from the <code>itertools</code> module, you first need to import it:</p> <pre><code>import itertools\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#itertools-functions","title":"Itertools Functions","text":""},{"location":"languages/python/libraries_frameworks/itertools/#1-countstart0-step1","title":"1. <code>count(start=0, step=1)</code>","text":"<p>Returns an iterator that generates consecutive numbers, starting from <code>start</code> and increasing by <code>step</code>.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example","title":"Example","text":"<pre><code>import itertools\n\n# Create a count iterator\ncounter = itertools.count(start=5, step=2)\n\n# Print the first 5 values\nfor _ in range(5):\n    print(next(counter))\n# Output:\n# 5\n# 7\n# 9\n# 11\n# 13\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#2-cycleiterable","title":"2. <code>cycle(iterable)</code>","text":"<p>Returns an iterator that cycles through the given iterable indefinitely.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_1","title":"Example","text":"<pre><code>import itertools\n\n# Create a cycle iterator\ncycler = itertools.cycle(['A', 'B', 'C'])\n\n# Print the first 6 values\nfor _ in range(6):\n    print(next(cycler))\n# Output:\n# A\n# B\n# C\n# A\n# B\n# C\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#3-repeatobject-timesnone","title":"3. <code>repeat(object, times=None)</code>","text":"<p>Returns an iterator that repeatedly yields the given <code>object</code>. If <code>times</code> is specified, it will repeat <code>object</code> that many times.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_2","title":"Example","text":"<pre><code>import itertools\n\n# Create a repeat iterator\nrepeater = itertools.repeat('Hello', times=3)\n\n# Print the values\nfor value in repeater:\n    print(value)\n# Output:\n# Hello\n# Hello\n# Hello\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#4-combinationsiterable-r","title":"4. <code>combinations(iterable, r)</code>","text":"<p>Returns all possible combinations of <code>r</code> elements from the <code>iterable</code>, without repetition.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_3","title":"Example","text":"<pre><code>import itertools\n\n# Create combinations of length 2 from the list\ncombs = itertools.combinations([1, 2, 3], 2)\n\n# Print the combinations\nfor comb in combs:\n    print(comb)\n# Output:\n# (1, 2)\n# (1, 3)\n# (2, 3)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#5-combinations_with_replacementiterable-r","title":"5. <code>combinations_with_replacement(iterable, r)</code>","text":"<p>Returns all possible combinations of <code>r</code> elements from the <code>iterable</code>, allowing for elements to be repeated.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_4","title":"Example","text":"<pre><code>import itertools\n\n# Create combinations with replacement of length 2\ncombs_with_replacement = itertools.combinations_with_replacement([1, 2, 3], 2)\n\n# Print the combinations\nfor comb in combs_with_replacement:\n    print(comb)\n# Output:\n# (1, 1)\n# (1, 2)\n# (1, 3)\n# (2, 2)\n# (2, 3)\n# (3, 3)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#6-permutationsiterable-rnone","title":"6. <code>permutations(iterable, r=None)</code>","text":"<p>Returns all possible permutations of <code>r</code> elements from the <code>iterable</code>. If <code>r</code> is not specified, it defaults to the length of the <code>iterable</code>.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_5","title":"Example","text":"<pre><code>import itertools\n\n# Create permutations of length 2 from the list\nperms = itertools.permutations([1, 2, 3], 2)\n\n# Print the permutations\nfor perm in perms:\n    print(perm)\n# Output:\n# (1, 2)\n# (1, 3)\n# (2, 1)\n# (2, 3)\n# (3, 1)\n# (3, 2)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#7-productiterables-repeat1","title":"7. <code>product(*iterables, repeat=1)</code>","text":"<p>Returns the Cartesian product of input iterables. Equivalent to a nested for-loop.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_6","title":"Example","text":"<pre><code>import itertools\n\n# Create the Cartesian product of the lists\nprod = itertools.product([1, 2], ['A', 'B'])\n\n# Print the product\nfor p in prod:\n    print(p)\n# Output:\n# (1, 'A')\n# (1, 'B')\n# (2, 'A')\n# (2, 'B')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#8-chainiterables","title":"8. <code>chain(*iterables)</code>","text":"<p>Returns an iterator that combines multiple iterables into one continuous sequence.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_7","title":"Example","text":"<pre><code>import itertools\n\n# Chain together several iterables\nchained = itertools.chain([1, 2], ['A', 'B'], [3, 4])\n\n# Print the chained result\nfor item in chained:\n    print(item)\n# Output:\n# 1\n# 2\n# A\n# B\n# 3\n# 4\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#9-zip_longestiterables-fillvaluenone","title":"9. <code>zip_longest(*iterables, fillvalue=None)</code>","text":"<p>Returns an iterator that aggregates elements from each iterable, filling in missing values with <code>fillvalue</code> if the iterables are of unequal length.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_8","title":"Example","text":"<pre><code>import itertools\n\n# Zip together two lists with different lengths\nzipped = itertools.zip_longest([1, 2], ['A', 'B', 'C'], fillvalue='X')\n\n# Print the zipped result\nfor item in zipped:\n    print(item)\n# Output:\n# (1, 'A')\n# (2, 'B')\n# (X, 'C')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#10-isliceiterable-start-stop-step","title":"10. <code>islice(iterable, start, stop[, step])</code>","text":"<p>Returns an iterator that slices the input iterable from <code>start</code> to <code>stop</code> with an optional <code>step</code>.</p>"},{"location":"languages/python/libraries_frameworks/itertools/#example_9","title":"Example","text":"<pre><code>import itertools\n\n# Create an islice iterator\nsliced = itertools.islice(range(10), 2, 8, 2)\n\n# Print the sliced result\nfor item in sliced:\n    print(item)\n# Output:\n# 2\n# 4\n# 6\n</code></pre>"},{"location":"languages/python/libraries_frameworks/itertools/#conclusion","title":"Conclusion","text":"<p>The <code>itertools</code> module is a powerful tool for working with iterators in Python. It provides a variety of functions for creating and manipulating iterators, including generating sequences, combining data, and performing complex iterations efficiently. By understanding and utilizing these functions, you can streamline data processing tasks and write more efficient, readable code.</p>"},{"location":"languages/python/libraries_frameworks/json/","title":"Python <code>json</code> Module: Detailed Overview and Examples","text":"<p>The <code>json</code> module in Python provides an easy way to encode and decode JSON (JavaScript Object Notation) data. JSON is a popular data format used for transmitting data in web applications and is commonly used for configuration files. The <code>json</code> module includes functions for serializing Python objects into JSON strings and deserializing JSON strings into Python objects.</p>"},{"location":"languages/python/libraries_frameworks/json/#importing-the-json-module","title":"Importing the <code>json</code> Module","text":"<p>To use the functions from the <code>json</code> module, you need to import it:</p> <pre><code>import json\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/json/#1-jsondumpsobj-skipkeysfalse-ensure_asciitrue-check_circulartrue-allow_nantrue-clsnone-indentnone-separatorsnone-defaultnone-sort_keysfalse","title":"1. <code>json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)</code>","text":"<p>Serializes a Python object (<code>obj</code>) into a JSON string.</p>"},{"location":"languages/python/libraries_frameworks/json/#parameters","title":"Parameters","text":"<ul> <li><code>skipkeys</code>: If <code>True</code>, skip keys that are not basic types (str, int, float, bool, None).</li> <li><code>ensure_ascii</code>: If <code>True</code>, escape all non-ASCII characters.</li> <li><code>check_circular</code>: If <code>True</code>, check for circular references.</li> <li><code>allow_nan</code>: If <code>True</code>, allow NaN and Infinity values.</li> <li><code>cls</code>: An optional custom encoder class.</li> <li><code>indent</code>: If not <code>None</code>, pretty-print the JSON string with the specified number of spaces.</li> <li><code>separators</code>: A tuple specifying how to separate objects and arrays.</li> <li><code>default</code>: A function for custom serialization of objects that are not serializable by default.</li> <li><code>sort_keys</code>: If <code>True</code>, sort the keys in the output.</li> </ul>"},{"location":"languages/python/libraries_frameworks/json/#example","title":"Example","text":"<pre><code>import json\n\n# Python object to be serialized\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"hobbies\": [\"Reading\", \"Cycling\"]\n}\n\n# Serialize Python object to JSON string\njson_string = json.dumps(data, indent=4, sort_keys=True)\nprint(json_string)\n</code></pre> <p>Output:</p> <pre><code>{\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"hobbies\": [\n        \"Reading\",\n        \"Cycling\"\n    ],\n    \"name\": \"Alice\"\n}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#2-jsondumpobj-fp-skipkeysfalse-ensure_asciitrue-check_circulartrue-allow_nantrue-clsnone-indentnone-separatorsnone-defaultnone-sort_keysfalse","title":"2. <code>json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False)</code>","text":"<p>Serializes a Python object (<code>obj</code>) and writes it to a file-like object (<code>fp</code>).</p>"},{"location":"languages/python/libraries_frameworks/json/#example_1","title":"Example","text":"<pre><code>import json\n\n# Python object to be serialized\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"hobbies\": [\"Reading\", \"Cycling\"]\n}\n\n# Serialize Python object and write to a file\nwith open('data.json', 'w') as file:\n    json.dump(data, file, indent=4, sort_keys=True)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#3-jsonloadss-encodingnone-clsnone-object_hooknone-parse_floatnone-parse_intnone-parse_constantnone-object_pairs_hooknone","title":"3. <code>json.loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None)</code>","text":"<p>Deserializes a JSON string (<code>s</code>) into a Python object.</p>"},{"location":"languages/python/libraries_frameworks/json/#parameters_1","title":"Parameters","text":"<ul> <li><code>encoding</code>: The encoding of the JSON string (not needed in Python 3).</li> <li><code>cls</code>: An optional custom decoder class.</li> <li><code>object_hook</code>: A function to convert parsed JSON objects into custom Python objects.</li> <li><code>parse_float</code>: A function to convert JSON floating-point numbers.</li> <li><code>parse_int</code>: A function to convert JSON integers.</li> <li><code>parse_constant</code>: A function to handle JSON constants (e.g., NaN).</li> <li><code>object_pairs_hook</code>: A function to handle pairs of key-value tuples.</li> </ul>"},{"location":"languages/python/libraries_frameworks/json/#example_2","title":"Example","text":"<pre><code>import json\n\n# JSON string to be deserialized\njson_string = '''\n{\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"hobbies\": [\"Reading\", \"Cycling\"]\n}\n'''\n\n# Deserialize JSON string to Python object\ndata = json.loads(json_string)\nprint(data)\n</code></pre> <p>Output:</p> <pre><code>{'name': 'Alice', 'age': 30, 'city': 'New York', 'hobbies': ['Reading', 'Cycling']}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#4-jsonloadfp-encodingnone-clsnone-object_hooknone-parse_floatnone-parse_intnone-parse_constantnone-object_pairs_hooknone","title":"4. <code>json.load(fp, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None)</code>","text":"<p>Deserializes a JSON object from a file-like object (<code>fp</code>) into a Python object.</p>"},{"location":"languages/python/libraries_frameworks/json/#example_3","title":"Example","text":"<pre><code>import json\n\n# Deserialize JSON from a file\nwith open('data.json', 'r') as file:\n    data = json.load(file)\nprint(data)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#5-handling-custom-serialization","title":"5. Handling Custom Serialization","text":"<p>You can use the <code>default</code> parameter in <code>json.dumps()</code> to handle objects that are not serializable by default.</p>"},{"location":"languages/python/libraries_frameworks/json/#example_4","title":"Example","text":"<pre><code>import json\nfrom datetime import datetime\n\n# Custom serialization function\ndef encode_datetime(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()\n    raise TypeError(\"Type not serializable\")\n\n# Python object containing a datetime\ndata = {\n    \"event\": \"Conference\",\n    \"date\": datetime(2024, 8, 4)\n}\n\n# Serialize Python object to JSON string with custom serialization\njson_string = json.dumps(data, default=encode_datetime, indent=4)\nprint(json_string)\n</code></pre> <p>Output:</p> <pre><code>{\n    \"event\": \"Conference\",\n    \"date\": \"2024-08-04T00:00:00\"\n}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#6-handling-json-decoding-errors","title":"6. Handling JSON Decoding Errors","text":"<p>You can handle errors that occur during JSON decoding using exception handling.</p>"},{"location":"languages/python/libraries_frameworks/json/#example_5","title":"Example","text":"<pre><code>import json\n\n# Invalid JSON string\njson_string = '{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"'\n\ntry:\n    data = json.loads(json_string)\nexcept json.JSONDecodeError as e:\n    print(f\"Error decoding JSON: {e}\")\n</code></pre> <p>Output:</p> <pre><code>Error decoding JSON: Expecting ',' delimiter: line 1 column 40 (char 39)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/json/#conclusion","title":"Conclusion","text":"<p>The <code>json</code> module is a powerful tool for working with JSON data in Python. It provides functions for both serializing Python objects to JSON strings and deserializing JSON strings into Python objects. Understanding how to use these functions, including handling custom serialization and managing errors, can greatly enhance your ability to work with data in a structured format.</p>"},{"location":"languages/python/libraries_frameworks/kivy/","title":"Python Kivy Module: A Comprehensive Guide","text":"<p>The <code>kivy</code> module is a Python library for developing multitouch applications. It is used to build user interfaces and applications that run on various platforms, including Windows, macOS, Linux, Android, and iOS. This guide provides a detailed overview of the <code>kivy</code> module, including installation, basic usage, and examples.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#introduction-to-kivy","title":"Introduction to Kivy","text":"<p>Kivy is a Python framework designed for building multi-touch applications. It provides a range of tools and widgets for creating interactive user interfaces and handling user input across various platforms.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#installation","title":"Installation","text":"<p>To use <code>kivy</code>, you need to install the module via pip. Depending on your platform, you might need additional dependencies.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#installing-kivy","title":"Installing Kivy","text":"<pre><code>pip install kivy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/kivy/#additional-dependencies","title":"Additional Dependencies","text":"<ul> <li>On Windows: You may need to install dependencies manually for specific features.</li> <li>On macOS: Use Homebrew to install additional dependencies if needed.</li> <li>On Linux: Ensure you have the necessary development libraries installed.</li> </ul>"},{"location":"languages/python/libraries_frameworks/kivy/#basic-usage","title":"Basic Usage","text":"<p><code>kivy</code> provides a set of core modules and classes for creating and managing user interfaces. Here is a basic example of a Kivy application.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#basic-application-example","title":"Basic Application Example","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.label import Label\n\nclass MyApp(App):\n    def build(self):\n        return Label(text='Hello, Kivy!')\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, we define a class <code>MyApp</code> that inherits from <code>App</code>. The <code>build</code> method returns a <code>Label</code> widget with the text \"Hello, Kivy!\".</p>"},{"location":"languages/python/libraries_frameworks/kivy/#building-a-simple-application","title":"Building a Simple Application","text":"<p>Let\u2019s build a more complex example with a button and a label that updates when the button is pressed.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#example-button-and-label","title":"Example: Button and Label","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.button import Button\nfrom kivy.uix.label import Label\n\nclass MyApp(App):\n    def build(self):\n        layout = BoxLayout(orientation='vertical')\n        self.label = Label(text='Press the button')\n        button = Button(text='Press Me')\n        button.bind(on_press=self.on_button_press)\n\n        layout.add_widget(self.label)\n        layout.add_widget(button)\n        return layout\n\n    def on_button_press(self, instance):\n        self.label.text = 'Button Pressed!'\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, a <code>BoxLayout</code> is used to arrange the <code>Label</code> and <code>Button</code> widgets vertically. The <code>on_button_press</code> method updates the label text when the button is pressed.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#using-kivy-widgets","title":"Using Kivy Widgets","text":"<p>Kivy provides a wide range of widgets for building user interfaces. Some common widgets include <code>Button</code>, <code>Label</code>, <code>TextInput</code>, and <code>Slider</code>.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#example-using-different-widgets","title":"Example: Using Different Widgets","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.gridlayout import GridLayout\nfrom kivy.uix.button import Button\nfrom kivy.uix.textinput import TextInput\nfrom kivy.uix.slider import Slider\n\nclass MyApp(App):\n    def build(self):\n        layout = GridLayout(cols=2)\n\n        self.text_input = TextInput(hint_text='Type here')\n        button = Button(text='Submit')\n        slider = Slider(min=0, max=100, value=50)\n\n        layout.add_widget(self.text_input)\n        layout.add_widget(button)\n        layout.add_widget(slider)\n\n        return layout\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, a <code>GridLayout</code> is used to arrange a <code>TextInput</code>, <code>Button</code>, and <code>Slider</code> widgets in a grid.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#layouts-and-design","title":"Layouts and Design","text":"<p>Kivy provides several layout containers to arrange widgets. Some of the commonly used layouts include <code>BoxLayout</code>, <code>GridLayout</code>, and <code>StackLayout</code>.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#example-using-boxlayout-and-gridlayout","title":"Example: Using BoxLayout and GridLayout","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.gridlayout import GridLayout\nfrom kivy.uix.button import Button\nfrom kivy.uix.label import Label\n\nclass MyApp(App):\n    def build(self):\n        main_layout = BoxLayout(orientation='horizontal')\n\n        left_layout = GridLayout(cols=1)\n        right_layout = GridLayout(cols=1)\n\n        for i in range(3):\n            left_layout.add_widget(Button(text=f'Left {i}'))\n\n        for i in range(3):\n            right_layout.add_widget(Button(text=f'Right {i}'))\n\n        main_layout.add_widget(left_layout)\n        main_layout.add_widget(right_layout)\n\n        return main_layout\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, a <code>BoxLayout</code> arranges two <code>GridLayout</code> containers horizontally.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#event-handling","title":"Event Handling","text":"<p>Kivy allows you to handle various events such as button presses, touch events, and more.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#example-handling-button-press-events","title":"Example: Handling Button Press Events","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.button import Button\nfrom kivy.uix.boxlayout import BoxLayout\n\nclass MyApp(App):\n    def build(self):\n        layout = BoxLayout(orientation='vertical')\n        button = Button(text='Press Me')\n        button.bind(on_press=self.on_button_press)\n        layout.add_widget(button)\n        return layout\n\n    def on_button_press(self, instance):\n        print('Button was pressed!')\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, the <code>on_button_press</code> method is called when the button is pressed, and a message is printed to the console.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#advanced-features","title":"Advanced Features","text":"<p>Kivy offers advanced features such as animations, gestures, and custom widgets.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#example-adding-animation","title":"Example: Adding Animation","text":"<pre><code>from kivy.app import App\nfrom kivy.uix.label import Label\nfrom kivy.animation import Animation\n\nclass MyApp(App):\n    def build(self):\n        label = Label(text='Hello, Kivy!')\n        anim = Animation(size=(200, 200), duration=2)\n        anim += Animation(size=(100, 100), duration=2)\n        anim.repeat = True\n        anim.start(label)\n        return label\n\nif __name__ == '__main__':\n    MyApp().run()\n</code></pre> <p>In this example, an <code>Animation</code> is used to animate the size of a label.</p>"},{"location":"languages/python/libraries_frameworks/kivy/#conclusion","title":"Conclusion","text":"<p>The <code>kivy</code> module provides a versatile framework for building multi-touch applications and user interfaces in Python. With its wide range of widgets, layouts, and features, it allows you to create interactive and visually appealing applications across various platforms. By following the examples and guidelines in this report, you should be able to leverage Kivy\u2019s capabilities effectively for your projects.</p>"},{"location":"languages/python/libraries_frameworks/locale/","title":"Python <code>locale</code> Module: Detailed Overview and Examples","text":"<p>The <code>locale</code> module in Python provides access to the cultural and locale-specific conventions of a user's environment. It allows you to format numbers, dates, and currencies according to locale-specific conventions, which is useful for applications that need to be sensitive to regional settings.</p>"},{"location":"languages/python/libraries_frameworks/locale/#importing-the-locale-module","title":"Importing the <code>locale</code> Module","text":"<p>To use the functions from the <code>locale</code> module, you need to import it:</p> <pre><code>import locale\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/locale/#1-localegetlocalecategorylc_ctype","title":"1. <code>locale.getlocale(category=LC_CTYPE)</code>","text":"<p>Returns the current locale settings for the specified category.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters","title":"Parameters","text":"<ul> <li><code>category</code>: Specifies the category of the locale settings (e.g., <code>locale.LC_CTYPE</code>, <code>locale.LC_NUMERIC</code>, etc.).</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example","title":"Example","text":"<pre><code>import locale\n\n# Get the current locale for numeric category\ncurrent_locale = locale.getlocale(locale.LC_NUMERIC)\nprint(current_locale)  # Output: ('en_US', 'UTF-8')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#2-localesetlocalecategory-localenone","title":"2. <code>locale.setlocale(category, locale=None)</code>","text":"<p>Sets the locale for the specified category. If <code>locale</code> is <code>None</code>, it returns the current locale setting for the category.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters_1","title":"Parameters","text":"<ul> <li><code>category</code>: Specifies the category to set (e.g., <code>locale.LC_CTYPE</code>, <code>locale.LC_NUMERIC</code>, etc.).</li> <li><code>locale</code>: The locale to set (e.g., <code>'en_US.UTF-8'</code>, <code>'fr_FR'</code>).</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example_1","title":"Example","text":"<pre><code>import locale\n\n# Set the locale for numeric category\nlocale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')\n\n# Get the new locale for numeric category\ncurrent_locale = locale.getlocale(locale.LC_NUMERIC)\nprint(current_locale)  # Output: ('en_US', 'UTF-8')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#3-localelocaleconv","title":"3. <code>locale.localeconv()</code>","text":"<p>Returns a dictionary containing locale-specific conventions for numeric formatting.</p>"},{"location":"languages/python/libraries_frameworks/locale/#example_2","title":"Example","text":"<pre><code>import locale\n\n# Get locale-specific conventions for numeric formatting\nconv = locale.localeconv()\nprint(conv)\n</code></pre> <p>Output:</p> <pre><code>{'decimal_point': '.', 'thousands_sep': ',', 'grouping': [3], 'currency_symbol': '$', 'intl_currency_symbol': 'USD', 'positive_sign': '', 'negative_sign': '-', 'frac_digits': 2, 'p_cs_precedes': 1, 'p_sep_by_space': 0, 'n_cs_precedes': 1, 'n_sep_by_space': 0, 'p_sign_posn': 1, 'n_sign_posn': 1, 'frac_digits': 2, 'p_sign_posn': 1, 'n_sign_posn': 1}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#4-localeformat_stringformat_string-value-groupingfalse","title":"4. <code>locale.format_string(format_string, value, grouping=False)</code>","text":"<p>Formats a number according to the current locale conventions.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters_2","title":"Parameters","text":"<ul> <li><code>format_string</code>: A format string (e.g., <code>\"%f\"</code>).</li> <li><code>value</code>: The value to format.</li> <li><code>grouping</code>: If <code>True</code>, use grouping for thousands.</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example_3","title":"Example","text":"<pre><code>import locale\n\n# Set locale to German (Germany)\nlocale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')\n\n# Format a number according to the German locale\nformatted_number = locale.format_string(\"%.2f\", 1234567.89, grouping=True)\nprint(formatted_number)  # Output: '1.234.567,89'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#5-localecurrencyvalue-symboltrue-groupingfalse-internationalfalse","title":"5. <code>locale.currency(value, symbol=True, grouping=False, international=False)</code>","text":"<p>Formats a number as currency according to the current locale conventions.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters_3","title":"Parameters","text":"<ul> <li><code>value</code>: The value to format.</li> <li><code>symbol</code>: If <code>True</code>, include the currency symbol.</li> <li><code>grouping</code>: If <code>True</code>, use grouping for thousands.</li> <li><code>international</code>: If <code>True</code>, use international currency symbol.</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example_4","title":"Example","text":"<pre><code>import locale\n\n# Set locale to French (France)\nlocale.setlocale(locale.LC_MONETARY, 'fr_FR.UTF-8')\n\n# Format a number as currency according to the French locale\nformatted_currency = locale.currency(1234567.89, symbol=True, grouping=True)\nprint(formatted_currency)  # Output: '1\u00a0234\u00a0567,89 \u20ac'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#6-localestrcollstring1-string2","title":"6. <code>locale.strcoll(string1, string2)</code>","text":"<p>Compares two strings according to the current locale conventions.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters_4","title":"Parameters","text":"<ul> <li><code>string1</code>: The first string to compare.</li> <li><code>string2</code>: The second string to compare.</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example_5","title":"Example","text":"<pre><code>import locale\n\n# Set locale to Spanish (Spain)\nlocale.setlocale(locale.LC_COLLATE, 'es_ES.UTF-8')\n\n# Compare two strings according to the Spanish locale\ncomparison_result = locale.strcoll('ma\u00f1ana', 'mango')\nprint(comparison_result)  # Output: Negative number if 'ma\u00f1ana' comes before 'mango'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#7-localestrxfrmstring","title":"7. <code>locale.strxfrm(string)</code>","text":"<p>Transforms a string into a format suitable for locale-aware comparisons.</p>"},{"location":"languages/python/libraries_frameworks/locale/#parameters_5","title":"Parameters","text":"<ul> <li><code>string</code>: The string to transform.</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#example_6","title":"Example","text":"<pre><code>import locale\n\n# Set locale to Japanese (Japan)\nlocale.setlocale(locale.LC_COLLATE, 'ja_JP.UTF-8')\n\n# Transform a string for locale-aware comparison\ntransformed_string = locale.strxfrm('\u3055\u304f\u3089')\nprint(transformed_string)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#8-localesetlocalecategory-localenone","title":"8. <code>locale.setlocale(category, locale=None)</code>","text":"<p>Sets the locale for the specified category. If <code>locale</code> is <code>None</code>, it returns the current locale setting for the category.</p>"},{"location":"languages/python/libraries_frameworks/locale/#example_7","title":"Example","text":"<pre><code>import locale\n\n# Set the locale for the category LC_TIME\nlocale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')\n\n# Get the new locale for time category\ncurrent_locale = locale.getlocale(locale.LC_TIME)\nprint(current_locale)  # Output: ('fr_FR', 'UTF-8')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/locale/#locale-categories","title":"Locale Categories","text":"<p>The <code>locale</code> module supports several categories that you can set or retrieve:</p> <ul> <li><code>locale.LC_CTYPE</code>: Character classification and case conversion.</li> <li><code>locale.LC_COLLATE</code>: String collation (sorting and comparison).</li> <li><code>locale.LC_MONETARY</code>: Formatting of monetary values.</li> <li><code>locale.LC_NUMERIC</code>: Numeric formatting.</li> <li><code>locale.LC_TIME</code>: Date and time formatting.</li> </ul>"},{"location":"languages/python/libraries_frameworks/locale/#conclusion","title":"Conclusion","text":"<p>The <code>locale</code> module in Python provides essential functionality for working with locale-specific data formats, such as numbers, dates, and currencies. By setting and retrieving locale information, formatting numbers and currencies, and performing locale-aware string comparisons, you can create applications that are sensitive to regional settings and conventions. This is particularly valuable for internationalized applications and for ensuring that data is presented in a format familiar to users in different locales.</p>"},{"location":"languages/python/libraries_frameworks/logger/","title":"Python Logging Module Report","text":"<p>The <code>logging</code> module in Python provides a flexible framework for emitting log messages from Python programs. It is useful for tracking events, debugging, and monitoring applications. This report covers the <code>logging</code> module's concepts, configuration, and practical examples.</p>"},{"location":"languages/python/libraries_frameworks/logger/#introduction","title":"Introduction","text":"<p>The <code>logging</code> module allows developers to record log messages, which can be crucial for monitoring and debugging applications. It provides various levels of logging, handlers for different output destinations, and formatters for customizing log messages.</p>"},{"location":"languages/python/libraries_frameworks/logger/#basic-configuration","title":"Basic Configuration","text":"<p>To start using the <code>logging</code> module, you need to import it and configure it with a basic setup.</p>"},{"location":"languages/python/libraries_frameworks/logger/#example-basic-configuration","title":"Example: Basic Configuration","text":"<pre><code>import logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Log messages\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\nlogging.critical('This is a critical message')\n</code></pre> <p>In this example, <code>basicConfig()</code> sets up the default configuration with the logging level <code>DEBUG</code>, which means all levels of log messages will be shown.</p>"},{"location":"languages/python/libraries_frameworks/logger/#logging-levels","title":"Logging Levels","text":"<p>The <code>logging</code> module provides several log levels, each representing the severity of the event.</p> <ul> <li><code>DEBUG</code>: Detailed information for diagnosing problems.</li> <li><code>INFO</code>: General information about the application's operation.</li> <li><code>WARNING</code>: Indication of potential problems.</li> <li><code>ERROR</code>: An error that prevents the application from performing a function.</li> <li><code>CRITICAL</code>: A severe error that causes the program to terminate.</li> </ul>"},{"location":"languages/python/libraries_frameworks/logger/#example-using-different-log-levels","title":"Example: Using Different Log Levels","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogging.debug('Debug message')\nlogging.info('Info message')\nlogging.warning('Warning message')\nlogging.error('Error message')\nlogging.critical('Critical message')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#logging-output","title":"Logging Output","text":"<p>The <code>logging</code> module supports various output destinations, such as the console, files, or remote servers.</p>"},{"location":"languages/python/libraries_frameworks/logger/#example-logging-to-console","title":"Example: Logging to Console","text":"<pre><code>import logging\n\n# Configure logging to output to console\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\nlogging.info('This message will appear in the console')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#example-logging-to-file","title":"Example: Logging to File","text":"<pre><code>import logging\n\n# Configure logging to output to a file\nlogging.basicConfig(filename='app.log', level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\nlogging.info('This message will be written to a file')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#advanced-configuration","title":"Advanced Configuration","text":"<p>For more complex logging requirements, you can use handlers, formatters, and configurations to customize the logging behavior.</p>"},{"location":"languages/python/libraries_frameworks/logger/#logging-to-files","title":"Logging to Files","text":"<p>You can log messages to files with different configurations using <code>FileHandler</code>.</p> <pre><code>import logging\n\n# Create a logger object\nlogger = logging.getLogger('example_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a file handler\nfile_handler = logging.FileHandler('app.log')\nfile_handler.setLevel(logging.DEBUG)\n\n# Create a formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\n\n# Add the file handler to the logger\nlogger.addHandler(file_handler)\n\nlogger.debug('Debug message')\nlogger.info('Info message')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#logging-to-multiple-destinations","title":"Logging to Multiple Destinations","text":"<p>You can configure multiple handlers to log messages to different destinations simultaneously.</p> <pre><code>import logging\n\n# Create a logger object\nlogger = logging.getLogger('example_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.INFO)\n\n# Create a file handler\nfile_handler = logging.FileHandler('app.log')\nfile_handler.setLevel(logging.DEBUG)\n\n# Create a formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Add formatter to handlers\nconsole_handler.setFormatter(formatter)\nfile_handler.setFormatter(formatter)\n\n# Add handlers to logger\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)\n\nlogger.debug('Debug message')\nlogger.info('Info message')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#custom-log-handlers","title":"Custom Log Handlers","text":"<p>You can create custom log handlers to define how log messages are processed.</p> <pre><code>import logging\n\nclass CustomHandler(logging.Handler):\n    def emit(self, record):\n        log_entry = self.format(record)\n        print(f'Custom log output: {log_entry}')\n\n# Create a logger object\nlogger = logging.getLogger('example_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a custom handler\ncustom_handler = CustomHandler()\ncustom_handler.setLevel(logging.DEBUG)\n\n# Create a formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\ncustom_handler.setFormatter(formatter)\n\n# Add custom handler to the logger\nlogger.addHandler(custom_handler)\n\nlogger.debug('Debug message with custom handler')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#custom-log-formatters","title":"Custom Log Formatters","text":"<p>You can customize the format of log messages using formatters.</p> <pre><code>import logging\n\n# Create a logger object\nlogger = logging.getLogger('example_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.DEBUG)\n\n# Create a custom formatter\nformatter = logging.Formatter('%(levelname)s - %(message)s')\nconsole_handler.setFormatter(formatter)\n\n# Add handler to logger\nlogger.addHandler(console_handler)\n\nlogger.debug('Debug message with custom format')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#error-handling","title":"Error Handling","text":"<p>The <code>logging</code> module can also be used to handle exceptions and errors gracefully.</p>"},{"location":"languages/python/libraries_frameworks/logger/#example-logging-exceptions","title":"Example: Logging Exceptions","text":"<pre><code>import logging\n\n# Configure logging\nlogging.basicConfig(filename='errors.log', level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')\n\ntry:\n    1 / 0\nexcept ZeroDivisionError as e:\n    logging.error('An error occurred: %s', e, exc_info=True)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/logger/#best-practices","title":"Best Practices","text":"<ol> <li>Use Different Log Levels: Appropriately use different log levels to distinguish between normal operations, warnings, and errors.</li> <li>Log to Multiple Destinations: Configure multiple handlers to log to various destinations (console, file, etc.) based on your needs.</li> <li>Avoid Logging Sensitive Information: Be cautious about logging sensitive information that might expose data.</li> <li>Use Custom Formatters: Customize log formats to include relevant details such as timestamps, log levels, and messages.</li> <li>Handle Exceptions Gracefully: Log exceptions with traceback information to aid in debugging and error resolution.</li> </ol>"},{"location":"languages/python/libraries_frameworks/logger/#conclusion","title":"Conclusion","text":"<p>The <code>logging</code> module in Python provides a powerful and flexible framework for logging events and debugging applications. By using the various features and configurations available, you can tailor the logging behavior to suit your needs, whether you're developing a small script or a large application.</p> <p>For more detailed information and advanced features, refer to the Python Logging documentation.</p>"},{"location":"languages/python/libraries_frameworks/lxml/","title":"Python lxml Module Report","text":"<p><code>lxml</code> is a Python library for processing XML and HTML documents. It provides a powerful and efficient way to parse and interact with XML and HTML content, leveraging the <code>libxml2</code> and <code>libxslt</code> libraries. This report covers installation, basic usage, and provides examples to illustrate how to use <code>lxml</code>.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#introduction","title":"Introduction","text":"<p><code>lxml</code> is a comprehensive library for XML and HTML processing. It provides facilities for parsing, navigating, and modifying XML and HTML documents. <code>lxml</code> is known for its speed and ease of use, and it supports XPath and XSLT.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#installation","title":"Installation","text":"<p>To use <code>lxml</code>, you need to install the module via pip. The library also requires <code>libxml2</code> and <code>libxslt</code>, which are typically installed automatically if you are using precompiled binaries.</p> <p>Install <code>lxml</code> with pip:</p> <pre><code>pip install lxml\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#basic-usage","title":"Basic Usage","text":"<p>The <code>lxml</code> library supports both XML and HTML parsing. The core classes you will use are <code>lxml.etree.ElementTree</code> for XML and <code>lxml.html</code> for HTML. </p>"},{"location":"languages/python/libraries_frameworks/lxml/#example-code","title":"Example Code","text":"<p>Here\u2019s how to use <code>lxml</code> to parse and interact with XML and HTML documents:</p> <pre><code>from lxml import etree, html\n\n# Example XML content\nxml_content = \"\"\"\n&lt;root&gt;\n    &lt;child name=\"child1\"&gt;Content1&lt;/child&gt;\n    &lt;child name=\"child2\"&gt;Content2&lt;/child&gt;\n&lt;/root&gt;\n\"\"\"\n\n# Parse XML\nxml_tree = etree.fromstring(xml_content)\nprint(etree.tostring(xml_tree, pretty_print=True).decode())\n\n# Example HTML content\nhtml_content = \"\"\"\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;My Page&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"text\"&gt;Hello World&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse HTML\nhtml_tree = html.fromstring(html_content)\nprint(etree.tostring(html_tree, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/lxml/#parsing-xml","title":"Parsing XML","text":"<p>Parsing XML with <code>lxml</code> is straightforward. You can load XML from a string, file, or URL.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#example-parsing-from-a-string","title":"Example: Parsing from a String","text":"<pre><code>from lxml import etree\n\nxml_string = \"\"\"\n&lt;root&gt;\n    &lt;element key=\"value\"&gt;Text&lt;/element&gt;\n&lt;/root&gt;\n\"\"\"\n\nroot = etree.fromstring(xml_string)\nprint(etree.tostring(root, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#example-parsing-from-a-file","title":"Example: Parsing from a File","text":"<pre><code>from lxml import etree\n\ntree = etree.parse('example.xml')\nroot = tree.getroot()\nprint(etree.tostring(root, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#parsing-html","title":"Parsing HTML","text":"<p><code>lxml</code> can also parse HTML content. It handles both well-formed and malformed HTML.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#example-parsing-html-from-a-string","title":"Example: Parsing HTML from a String","text":"<pre><code>from lxml import html\n\nhtml_string = \"\"\"\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Page Title&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p class=\"description\"&gt;This is a paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\ntree = html.fromstring(html_string)\nprint(etree.tostring(tree, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#example-parsing-html-from-a-url","title":"Example: Parsing HTML from a URL","text":"<pre><code>from lxml import html\nimport requests\n\nresponse = requests.get('http://example.com')\ntree = html.fromstring(response.content)\nprint(etree.tostring(tree, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#xpath-queries","title":"XPath Queries","text":"<p>XPath is a powerful way to query XML and HTML documents. <code>lxml</code> supports XPath expressions for searching and navigating the document.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#example-using-xpath-to-find-elements","title":"Example: Using XPath to Find Elements","text":"<pre><code>from lxml import etree\n\nxml_string = \"\"\"\n&lt;root&gt;\n    &lt;item id=\"1\"&gt;First&lt;/item&gt;\n    &lt;item id=\"2\"&gt;Second&lt;/item&gt;\n&lt;/root&gt;\n\"\"\"\n\nroot = etree.fromstring(xml_string)\nitems = root.xpath('//item')\nfor item in items:\n    print(item.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#example-using-xpath-to-extract-attributes","title":"Example: Using XPath to Extract Attributes","text":"<pre><code>from lxml import etree\n\nhtml_string = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n&lt;a href=\"http://example.com\" id=\"link1\"&gt;Example&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\ntree = etree.HTML(html_string)\nhref = tree.xpath('//a/@href')[0]\nprint(href)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#modifying-documents","title":"Modifying Documents","text":"<p><code>lxml</code> allows you to modify XML and HTML documents. You can add, change, or remove elements.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#example-adding-elements","title":"Example: Adding Elements","text":"<pre><code>from lxml import etree\n\nxml_string = \"\"\"\n&lt;root&gt;\n    &lt;element&gt;Original&lt;/element&gt;\n&lt;/root&gt;\n\"\"\"\n\nroot = etree.fromstring(xml_string)\nnew_element = etree.Element('new_element')\nnew_element.text = 'Added Text'\nroot.append(new_element)\n\nprint(etree.tostring(root, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#example-modifying-attributes","title":"Example: Modifying Attributes","text":"<pre><code>from lxml import etree\n\nhtml_string = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n&lt;p class=\"text\"&gt;Old Text&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\ntree = etree.HTML(html_string)\np = tree.xpath('//p')[0]\np.text = 'New Text'\np.attrib['class'] = 'new-class'\n\nprint(etree.tostring(tree, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#example-removing-elements","title":"Example: Removing Elements","text":"<pre><code>from lxml import etree\n\nxml_string = \"\"\"\n&lt;root&gt;\n    &lt;element&gt;Remove Me&lt;/element&gt;\n&lt;/root&gt;\n\"\"\"\n\nroot = etree.fromstring(xml_string)\nelement_to_remove = root.find('.//element')\nroot.remove(element_to_remove)\n\nprint(etree.tostring(root, pretty_print=True).decode())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/lxml/#handling-common-issues","title":"Handling Common Issues","text":""},{"location":"languages/python/libraries_frameworks/lxml/#handling-malformed-html","title":"Handling Malformed HTML","text":"<p><code>lxml</code> can handle malformed HTML but using <code>html.parser</code> might be better for extremely broken HTML. If you face issues with broken HTML, validate and clean the HTML where possible.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#memory-usage","title":"Memory Usage","text":"<p>For large XML or HTML documents, be mindful of memory usage. <code>lxml</code> processes documents in memory, so consider using incremental parsing for very large files.</p>"},{"location":"languages/python/libraries_frameworks/lxml/#conclusion","title":"Conclusion","text":"<p><code>lxml</code> is a robust library for processing XML and HTML documents in Python. It provides efficient parsing, querying with XPath, and document modification capabilities. With its comprehensive set of features, <code>lxml</code> is ideal for a wide range of tasks involving structured data in XML or HTML formats.</p> <p>For more detailed information and advanced usage, refer to the lxml documentation.</p>"},{"location":"languages/python/libraries_frameworks/math/","title":"Python <code>math</code> Module: Detailed Overview and Examples","text":"<p>The Python <code>math</code> module provides a wide range of mathematical functions and constants. It is part of the standard library, which means it is included with Python and does not require any additional installation. This module is ideal for performing mathematical operations and computations efficiently.</p>"},{"location":"languages/python/libraries_frameworks/math/#importing-the-math-module","title":"Importing the <code>math</code> Module","text":"<p>To use the functions and constants in the <code>math</code> module, you first need to import it:</p> <pre><code>import math\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#constants","title":"Constants","text":""},{"location":"languages/python/libraries_frameworks/math/#mathpi","title":"<code>math.pi</code>","text":"<p>Represents the mathematical constant \u03c0 (pi), which is approximately 3.14159.</p>"},{"location":"languages/python/libraries_frameworks/math/#example","title":"Example","text":"<pre><code>import math\n\nprint(math.pi)  # Output: 3.141592653589793\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathe","title":"<code>math.e</code>","text":"<p>Represents the mathematical constant e, which is approximately 2.71828.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_1","title":"Example","text":"<pre><code>import math\n\nprint(math.e)  # Output: 2.718281828459045\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathinf","title":"<code>math.inf</code>","text":"<p>Represents positive infinity.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_2","title":"Example","text":"<pre><code>import math\n\nprint(math.inf)  # Output: inf\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathnan","title":"<code>math.nan</code>","text":"<p>Represents a \"Not-a-Number\" value.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_3","title":"Example","text":"<pre><code>import math\n\nprint(math.nan)  # Output: nan\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathematical-functions","title":"Mathematical Functions","text":""},{"location":"languages/python/libraries_frameworks/math/#mathsqrtx","title":"<code>math.sqrt(x)</code>","text":"<p>Returns the square root of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_4","title":"Example","text":"<pre><code>import math\n\nprint(math.sqrt(16))  # Output: 4.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathpowx-y","title":"<code>math.pow(x, y)</code>","text":"<p>Returns <code>x</code> raised to the power of <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_5","title":"Example","text":"<pre><code>import math\n\nprint(math.pow(2, 3))  # Output: 8.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathexpx","title":"<code>math.exp(x)</code>","text":"<p>Returns e raised to the power of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_6","title":"Example","text":"<pre><code>import math\n\nprint(math.exp(2))  # Output: 7.38905609893065\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathlogx-base","title":"<code>math.log(x[, base])</code>","text":"<p>Returns the logarithm of <code>x</code> to the given <code>base</code>. If the base is not specified, it returns the natural logarithm (base <code>e</code>).</p>"},{"location":"languages/python/libraries_frameworks/math/#example_7","title":"Example","text":"<pre><code>import math\n\nprint(math.log(100))  # Output: 4.605170185988092\nprint(math.log(100, 10))  # Output: 2.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathlog10x","title":"<code>math.log10(x)</code>","text":"<p>Returns the base-10 logarithm of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_8","title":"Example","text":"<pre><code>import math\n\nprint(math.log10(100))  # Output: 2.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathsinx","title":"<code>math.sin(x)</code>","text":"<p>Returns the sine of <code>x</code> radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_9","title":"Example","text":"<pre><code>import math\n\nprint(math.sin(math.pi / 2))  # Output: 1.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathcosx","title":"<code>math.cos(x)</code>","text":"<p>Returns the cosine of <code>x</code> radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_10","title":"Example","text":"<pre><code>import math\n\nprint(math.cos(math.pi))  # Output: -1.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathtanx","title":"<code>math.tan(x)</code>","text":"<p>Returns the tangent of <code>x</code> radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_11","title":"Example","text":"<pre><code>import math\n\nprint(math.tan(math.pi / 4))  # Output: 0.9999999999999999\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathfactorialx","title":"<code>math.factorial(x)</code>","text":"<p>Returns the factorial of <code>x</code>, where <code>x</code> must be a non-negative integer.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_12","title":"Example","text":"<pre><code>import math\n\nprint(math.factorial(5))  # Output: 120\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathgcdx-y","title":"<code>math.gcd(x, y)</code>","text":"<p>Returns the greatest common divisor of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_13","title":"Example","text":"<pre><code>import math\n\nprint(math.gcd(48, 18))  # Output: 6\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathdegreesx","title":"<code>math.degrees(x)</code>","text":"<p>Converts angle <code>x</code> from radians to degrees.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_14","title":"Example","text":"<pre><code>import math\n\nprint(math.degrees(math.pi))  # Output: 180.0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathradiansx","title":"<code>math.radians(x)</code>","text":"<p>Converts angle <code>x</code> from degrees to radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_15","title":"Example","text":"<pre><code>import math\n\nprint(math.radians(180))  # Output: 3.141592653589793\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#trigonometric-functions","title":"Trigonometric Functions","text":""},{"location":"languages/python/libraries_frameworks/math/#mathasinx","title":"<code>math.asin(x)</code>","text":"<p>Returns the arc sine of <code>x</code> in radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_16","title":"Example","text":"<pre><code>import math\n\nprint(math.asin(1))  # Output: 1.5707963267948966\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathacosx","title":"<code>math.acos(x)</code>","text":"<p>Returns the arc cosine of <code>x</code> in radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_17","title":"Example","text":"<pre><code>import math\n\nprint(math.acos(0))  # Output: 1.5707963267948966\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathatanx","title":"<code>math.atan(x)</code>","text":"<p>Returns the arc tangent of <code>x</code> in radians.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_18","title":"Example","text":"<pre><code>import math\n\nprint(math.atan(1))  # Output: 0.7853981633974483\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathatan2y-x","title":"<code>math.atan2(y, x)</code>","text":"<p>Returns the arc tangent of <code>y/x</code> in radians, with consideration of the sign of both arguments.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_19","title":"Example","text":"<pre><code>import math\n\nprint(math.atan2(1, 1))  # Output: 0.7853981633974483\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#hyperbolic-functions","title":"Hyperbolic Functions","text":""},{"location":"languages/python/libraries_frameworks/math/#mathsinhx","title":"<code>math.sinh(x)</code>","text":"<p>Returns the hyperbolic sine of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_20","title":"Example","text":"<pre><code>import math\n\nprint(math.sinh(1))  # Output: 1.1752011936438014\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathcoshx","title":"<code>math.cosh(x)</code>","text":"<p>Returns the hyperbolic cosine of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_21","title":"Example","text":"<pre><code>import math\n\nprint(math.cosh(1))  # Output: 1.5430806348152437\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#mathtanhx","title":"<code>math.tanh(x)</code>","text":"<p>Returns the hyperbolic tangent of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/math/#example_22","title":"Example","text":"<pre><code>import math\n\nprint(math.tanh(1))  # Output: 0.7615941559557649\n</code></pre>"},{"location":"languages/python/libraries_frameworks/math/#conclusion","title":"Conclusion","text":"<p>The Python <code>math</code> module provides a comprehensive set of functions and constants for performing mathematical operations. Whether you need basic arithmetic, advanced functions, or special mathematical constants, the <code>math</code> module is a valuable tool for handling numerical computations and mathematical tasks efficiently. By leveraging these functions, you can perform complex calculations and process mathematical data with ease.</p>"},{"location":"languages/python/libraries_frameworks/matplotlib/","title":"Python <code>matplotlib</code> Module: Detailed Overview and Examples","text":"<p><code>matplotlib</code> is a comprehensive library for creating static, animated, and interactive visualizations in Python. It is highly customizable and can be used to generate plots, histograms, power spectra, bar charts, error charts, scatter plots, and more.</p>"},{"location":"languages/python/libraries_frameworks/matplotlib/#importing-matplotlib","title":"Importing <code>matplotlib</code>","text":"<p>To use <code>matplotlib</code>, you typically import the <code>pyplot</code> submodule:</p> <pre><code>import matplotlib.pyplot as plt\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#basic-plotting","title":"Basic Plotting","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#line-plot","title":"Line Plot","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\n\n# Plot\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Line Plot')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#scatter-plot","title":"Scatter Plot","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_1","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11]\ny = [99, 86, 87, 88, 100, 86, 103, 87, 94, 78]\n\n# Plot\nplt.scatter(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Scatter Plot')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#bar-chart","title":"Bar Chart","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_2","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = ['A', 'B', 'C', 'D']\ny = [3, 12, 5, 18]\n\n# Plot\nplt.bar(x, y)\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Bar Chart')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#histogram","title":"Histogram","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_3","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\ndata = [1.5, 2.5, 2.1, 3.5, 3.7, 2.8, 3.2, 4.1, 3.9, 3.7]\n\n# Plot\nplt.hist(data, bins=5)\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#pie-chart","title":"Pie Chart","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_4","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nlabels = 'A', 'B', 'C', 'D'\nsizes = [15, 30, 45, 10]\n\n# Plot\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.title('Pie Chart')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#customizing-plots","title":"Customizing Plots","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#adding-legends","title":"Adding Legends","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_5","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny1 = [10, 20, 25, 30]\ny2 = [15, 25, 20, 35]\n\n# Plot\nplt.plot(x, y1, label='Series 1')\nplt.plot(x, y2, label='Series 2')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Line Plot with Legend')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#changing-line-styles-and-colors","title":"Changing Line Styles and Colors","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_6","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\n\n# Plot\nplt.plot(x, y, linestyle='--', color='r', marker='o')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Custom Line Plot')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#adding-grid","title":"Adding Grid","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_7","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\n\n# Plot\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Plot with Grid')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#subplots","title":"Subplots","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_8","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny1 = [10, 20, 25, 30]\ny2 = [15, 25, 20, 35]\n\n# Plot\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.plot(x, y1)\nax1.set_title('Subplot 1')\n\nax2.plot(x, y2)\nax2.set_title('Subplot 2')\n\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#advanced-plotting","title":"Advanced Plotting","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#3d-plotting","title":"3D Plotting","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_9","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\nx = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\nz = [5, 15, 20, 10]\n\n# Plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot(x, y, z)\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_zlabel('Z-axis')\nax.set_title('3D Line Plot')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#contour-plots","title":"Contour Plots","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_10","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(-5, 5, 50)\ny = np.linspace(-5, 5, 50)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot\nplt.contour(X, Y, Z)\nplt.title('Contour Plot')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#saving-plots","title":"Saving Plots","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#save-plot-to-file","title":"Save Plot to File","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example_11","title":"Example","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\n\n# Plot\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Plot to Save')\n\n# Save\nplt.savefig('plot.png')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/matplotlib/#example-1-visualizing-a-sine-wave","title":"Example 1: Visualizing a Sine Wave","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Plot\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Sine Wave')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#example-2-comparing-multiple-series","title":"Example 2: Comparing Multiple Series","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4]\ny1 = [10, 20, 25, 30]\ny2 = [15, 25, 20, 35]\n\n# Plot\nplt.plot(x, y1, label='Series 1')\nplt.plot(x, y2, label='Series 2')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Comparison of Two Series')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#example-3-creating-a-heatmap","title":"Example 3: Creating a Heatmap","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = np.random.rand(10, 10)\n\n# Plot\nplt.imshow(data, cmap='hot', interpolation='nearest')\nplt.title('Heatmap')\nplt.colorbar()\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/matplotlib/#conclusion","title":"Conclusion","text":"<p>The <code>matplotlib</code> module is a versatile and powerful library for creating a wide range of visualizations in Python. From simple line plots to complex 3D plots, <code>matplotlib</code> provides the tools needed to create informative and visually appealing graphics. By leveraging the customization options and advanced plotting capabilities, you can tailor your visualizations to effectively communicate your data and insights.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/","title":"Python Mayavi Module Report","text":"<p>The <code>mayavi</code> module is a powerful scientific data visualization tool that provides interactive 3D plotting and visualization capabilities. It is built on top of the VTK (Visualization Toolkit) and integrates with other scientific libraries such as NumPy and SciPy.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#introduction","title":"Introduction","text":"<p><code>Mayavi</code> is a visualization tool that excels in creating complex 3D visualizations for scientific data. It leverages the capabilities of VTK for rendering and integrates seamlessly with Python's scientific stack.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#installation","title":"Installation","text":"<p>To install <code>mayavi</code>, you need to have Python and its package manager <code>pip</code>. You can install <code>mayavi</code> using the following command:</p> <pre><code>pip install mayavi\n</code></pre> <p>Note: <code>mayavi</code> depends on other libraries like <code>vtk</code>, <code>traits</code>, and <code>pyface</code>, which will be installed automatically when you install <code>mayavi</code>.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/mayavi/#creating-a-basic-plot","title":"Creating a Basic Plot","text":"<p><code>Mayavi</code> allows you to create 3D visualizations with just a few lines of code. Here's how to create a simple 3D scatter plot.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-basic-3d-scatter-plot","title":"Example: Basic 3D Scatter Plot","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Generate random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\n\n# Create a 3D scatter plot\nmlab.figure(size=(800, 600))\nmlab.points3d(x, y, z, scale_mode='none', scale_factor=0.1)\nmlab.title('3D Scatter Plot')\nmlab.show()\n</code></pre> <p>In this example, <code>mlab.points3d</code> is used to create a scatter plot with random data points.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#adding-scalars","title":"Adding Scalars","text":"<p>You can visualize scalar values associated with data points by adding color maps.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-scatter-plot-with-scalar-data","title":"Example: Scatter Plot with Scalar Data","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Generate random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nscalars = np.sqrt(x**2 + y**2 + z**2)  # Example scalar field\n\n# Create a 3D scatter plot with scalars\nmlab.figure(size=(800, 600))\nmlab.points3d(x, y, z, scalars, scale_mode='none', scale_factor=0.1, colormap='viridis')\nmlab.colorbar(title='Magnitude')\nmlab.title('3D Scatter Plot with Scalars')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#advanced-visualization","title":"Advanced Visualization","text":""},{"location":"languages/python/libraries_frameworks/mayavi/#surface-and-volume-rendering","title":"Surface and Volume Rendering","text":"<p><code>Mayavi</code> supports advanced visualization techniques such as surface and volume rendering.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-surface-plot","title":"Example: Surface Plot","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Create a grid of data\nx, y, z = np.mgrid[-3:3:30j, -3:3:30j, -3:3:30j]\ndata = np.sin(x*y*z)  # Example scalar field\n\n# Create a surface plot\nmlab.figure(size=(800, 600))\nmlab.contour3d(data, contours=10, opacity=0.5)\nmlab.title('3D Surface Plot')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-volume-rendering","title":"Example: Volume Rendering","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Create a grid of data\nx, y, z = np.mgrid[-3:3:30j, -3:3:30j, -3:3:30j]\ndata = np.exp(-x**2 - y**2 - z**2)  # Example scalar field\n\n# Create a volume plot\nmlab.figure(size=(800, 600))\nmlab.volume_slice(data, plane_orientation='z_axes', colormap='inferno')\nmlab.title('3D Volume Rendering')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#3d-contour-plots","title":"3D Contour Plots","text":"<p><code>Mayavi</code> provides functionality for creating 3D contour plots.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-3d-contour-plot","title":"Example: 3D Contour Plot","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Create a grid of data\nx, y, z = np.mgrid[-3:3:30j, -3:3:30j, -3:3:30j]\ndata = np.sin(x**2 + y**2 + z**2)  # Example scalar field\n\n# Create a 3D contour plot\nmlab.figure(size=(800, 600))\nmlab.contour3d(data, contours=10, colormap='plasma')\nmlab.title('3D Contour Plot')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#interactive-visualization","title":"Interactive Visualization","text":"<p><code>Mayavi</code> allows for interactive visualization, enabling users to manipulate and explore data in real-time.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-interactive-plot","title":"Example: Interactive Plot","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Generate random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\n\n# Create an interactive 3D scatter plot\nmlab.figure(size=(800, 600))\nscatter = mlab.points3d(x, y, z, scale_mode='none', scale_factor=0.1)\nmlab.title('Interactive 3D Scatter Plot')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#integrating-with-other-libraries","title":"Integrating with Other Libraries","text":"<p><code>Mayavi</code> integrates well with other scientific libraries like NumPy, SciPy, and pandas.</p>"},{"location":"languages/python/libraries_frameworks/mayavi/#example-using-numpy-arrays","title":"Example: Using NumPy Arrays","text":"<pre><code>from mayavi import mlab\nimport numpy as np\n\n# Generate a 3D grid\nx, y, z = np.mgrid[-3:3:30j, -3:3:30j, -3:3:30j]\ndata = np.sin(x**2 + y**2 + z**2)\n\n# Create a 3D plot using NumPy arrays\nmlab.figure(size=(800, 600))\nmlab.contour3d(data, contours=10, colormap='viridis')\nmlab.title('3D Plot with NumPy Arrays')\nmlab.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mayavi/#error-handling-and-debugging","title":"Error Handling and Debugging","text":"<p>Common issues include incorrect data formats or visualization artifacts. Use the following tips for debugging:</p> <ul> <li>Check Data Shapes: Ensure that data arrays have the correct shapes.</li> <li>Review Error Messages: Read error messages carefully for clues on what might be wrong.</li> <li>Consult Documentation: Refer to the Mayavi documentation for detailed information on functions and parameters.</li> </ul>"},{"location":"languages/python/libraries_frameworks/mayavi/#best-practices","title":"Best Practices","text":"<ol> <li>Use Consistent Data Formats: Ensure data is in the correct format and dimensions for the type of plot.</li> <li>Optimize Rendering: Use appropriate rendering techniques and settings to handle large datasets efficiently.</li> <li>Keep Dependencies Updated: Regularly update <code>mayavi</code> and its dependencies to benefit from bug fixes and new features.</li> <li>Leverage Integration: Integrate with other libraries like NumPy for enhanced data manipulation and visualization.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mayavi/#conclusion","title":"Conclusion","text":"<p>The <code>mayavi</code> module is a powerful tool for 3D scientific data visualization. It provides various features for creating interactive and high-quality plots, making it a valuable resource for scientists and engineers working with complex data.</p> <p>For more information and advanced usage, refer to the Mayavi documentation.</p>"},{"location":"languages/python/libraries_frameworks/mixins/","title":"Python Mixins Module Report","text":""},{"location":"languages/python/libraries_frameworks/mixins/#introduction","title":"Introduction","text":"<p>Mixins are a design pattern used in object-oriented programming to provide reusable functionality across multiple classes. The <code>mixins</code> module is a Python utility that simplifies the creation and management of mixins. This report provides a detailed overview of the <code>mixins</code> module, including its features, usage, and examples.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#features-of-the-mixins-module","title":"Features of the Mixins Module","text":"<ol> <li>Ease of Use: Simplifies the process of creating mixins by reducing boilerplate code.</li> <li>Enhanced Reusability: Facilitates the reuse of common functionality across different classes.</li> <li>Separation of Concerns: Promotes cleaner and more maintainable code by separating concerns into distinct mixins.</li> <li>Flexible Composition: Supports multiple inheritance and mixin composition for flexible class design.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mixins/#installation","title":"Installation","text":"<p>To use the <code>mixins</code> module, you need to install it. If it is available on PyPI, you can install it using pip:</p> <pre><code>pip install mixins\n</code></pre> <p>If the module is not available on PyPI, you might need to clone the repository or include it directly in your project.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#basic-usage","title":"Basic Usage","text":"<p>Here's a basic example of how to use the <code>mixins</code> module.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#example-basic-mixins","title":"Example: Basic Mixins","text":"<pre><code># Import the mixins module\nfrom mixins import Mixin\n\n# Define a basic mixin\nclass LoggerMixin(Mixin):\n    def log(self, message):\n        print(f\"LOG: {message}\")\n\n# Define a class using the mixin\nclass MyClass(LoggerMixin):\n    def do_something(self):\n        self.log(\"Doing something\")\n\n# Usage\nobj = MyClass()\nobj.do_something()\n</code></pre> <p>In this example: - <code>LoggerMixin</code> is a mixin that provides a logging functionality. - <code>MyClass</code> uses <code>LoggerMixin</code> to gain the ability to log messages. - When <code>do_something</code> is called, it uses the <code>log</code> method from <code>LoggerMixin</code>.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#advanced-usage","title":"Advanced Usage","text":"<p>Mixins can be combined to create more complex behaviors.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#example-combining-multiple-mixins","title":"Example: Combining Multiple Mixins","text":"<pre><code># Define another mixin\nclass TimestampMixin(Mixin):\n    from datetime import datetime\n\n    def timestamp(self):\n        return self.datetime.now().isoformat()\n\n# Define a class using multiple mixins\nclass AdvancedClass(LoggerMixin, TimestampMixin):\n    def perform_action(self):\n        timestamp = self.timestamp()\n        self.log(f\"Action performed at {timestamp}\")\n\n# Usage\nadvanced_obj = AdvancedClass()\nadvanced_obj.perform_action()\n</code></pre> <p>In this example: - <code>TimestampMixin</code> provides timestamp functionality. - <code>AdvancedClass</code> combines <code>LoggerMixin</code> and <code>TimestampMixin</code>. - <code>perform_action</code> logs a message with a timestamp, demonstrating the use of multiple mixins.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#best-practices","title":"Best Practices","text":"<ol> <li>Keep Mixins Focused: Each mixin should have a single, well-defined responsibility.</li> <li>Avoid State: Mixins should generally avoid maintaining state or managing instance variables.</li> <li>Ensure Compatibility: When combining multiple mixins, ensure that they do not conflict with each other.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mixins/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Diamond Problem: Be cautious of multiple inheritance issues, such as the diamond problem, where the method resolution order (MRO) can lead to unexpected behavior.</li> <li>Overusing Mixins: Avoid overusing mixins as it can lead to complex and hard-to-maintain code.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mixins/#conclusion","title":"Conclusion","text":"<p>The <code>mixins</code> module provides a robust way to implement mixins in Python, enhancing code reuse and modularity. By following best practices and being aware of common pitfalls, you can effectively utilize mixins to build clean, maintainable, and flexible Python applications.</p>"},{"location":"languages/python/libraries_frameworks/mixins/#references","title":"References","text":"<ul> <li>Python Mixins Documentation - Link to the official documentation (replace with actual link if available)</li> <li>Design Patterns: Elements of Reusable Object-Oriented Software - A classic book on design patterns, including mixins</li> </ul>"},{"location":"languages/python/libraries_frameworks/mkdocs/","title":"Python MkDocs Module Detailed Report","text":""},{"location":"languages/python/libraries_frameworks/mkdocs/#overview","title":"Overview","text":"<p>MkDocs is a static site generator specifically geared towards project documentation. Written in Python, it uses Markdown for its documentation format and provides a variety of themes and plugins for customization.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#features","title":"Features","text":"<ul> <li>Markdown-Based: Uses Markdown, a simple and popular markup language.</li> <li>Themes: Customizable themes, including the popular Read the Docs theme.</li> <li>Plugins: Extend MkDocs functionality with various plugins.</li> <li>Live Reloading: Built-in development server with live reloading.</li> <li>Easy Deployment: Can deploy to GitHub Pages and other hosting services with ease.</li> </ul>"},{"location":"languages/python/libraries_frameworks/mkdocs/#installation","title":"Installation","text":"<p>Install MkDocs using pip: <pre><code>pip install mkdocs\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#getting-started","title":"Getting Started","text":""},{"location":"languages/python/libraries_frameworks/mkdocs/#initialize-mkdocs-project","title":"Initialize MkDocs Project","text":"<p>Run the <code>mkdocs new</code> command to create a new MkDocs project: <pre><code>mkdocs new my-project\ncd my-project\n</code></pre> This command will create a new directory with the following structure: <pre><code>my-project/\n    mkdocs.yml\n    docs/\n        index.md\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#project-structure","title":"Project Structure","text":"<ul> <li><code>mkdocs.yml</code>: The configuration file for your MkDocs project.</li> <li><code>docs/</code>: The directory where your Markdown files reside.</li> </ul>"},{"location":"languages/python/libraries_frameworks/mkdocs/#configuration","title":"Configuration","text":"<p>Edit the <code>mkdocs.yml</code> file to configure your MkDocs project. Common configurations include: - Site information - Navigation structure - Theme settings - Plugins</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-mkdocsyml","title":"Example <code>mkdocs.yml</code>","text":"<pre><code>site_name: MyProject\nnav:\n  - Home: index.md\n  - About: about.md\ntheme:\n  name: material\nplugins:\n  - search\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#writing-documentation","title":"Writing Documentation","text":""},{"location":"languages/python/libraries_frameworks/mkdocs/#creating-md-files","title":"Creating <code>.md</code> Files","text":"<p>MkDocs uses Markdown for documentation. Create <code>.md</code> files in your <code>docs</code> directory to start writing your content.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-indexmd","title":"Example <code>index.md</code>","text":"<pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#adding-more-pages","title":"Adding More Pages","text":"<p>Create additional Markdown files and update the <code>mkdocs.yml</code> to reflect the navigation.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-aboutmd","title":"Example <code>about.md</code>","text":"<pre><code># About\n\nThis is the About page of the project.\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#updated-mkdocsyml","title":"Updated <code>mkdocs.yml</code>","text":"<pre><code>site_name: MyProject\nnav:\n  - Home: index.md\n  - About: about.md\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#running-the-development-server","title":"Running the Development Server","text":"<p>Use the following command to start a local server that supports live reloading: <pre><code>mkdocs serve\n</code></pre> Your site will be available at <code>http://127.0.0.1:8000</code>.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-documenting-a-simple-python-project","title":"Example: Documenting a Simple Python Project","text":""},{"location":"languages/python/libraries_frameworks/mkdocs/#python-project-structure","title":"Python Project Structure","text":"<pre><code>my-python-project/\n    docs/\n        index.md\n        usage.md\n    src/\n        mymodule.py\n    mkdocs.yml\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-python-module-srcmymodulepy","title":"Example Python Module (<code>src/mymodule.py</code>)","text":"<pre><code>\"\"\"\nMyModule\n========\n\nThis module provides an example class and functions.\n\"\"\"\n\nclass MyClass:\n    \"\"\"\n    A simple example class.\n\n    Attributes\n    ----------\n    value : int\n        The value of the class instance.\n    \"\"\"\n\n    def __init__(self, value):\n        \"\"\"\n        Initializes the MyClass instance with a value.\n\n        Parameters\n        ----------\n        value : int\n            The value to set.\n        \"\"\"\n        self.value = value\n\n    def increment(self):\n        \"\"\"\n        Increments the value by one.\n\n        Returns\n        -------\n        int\n            The incremented value.\n        \"\"\"\n        self.value += 1\n        return self.value\n\ndef add(a, b):\n    \"\"\"\n    Adds two numbers.\n\n    Parameters\n    ----------\n    a : int\n        The first number.\n    b : int\n        The second number.\n\n    Returns\n    -------\n    int\n        The sum of a and b.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-documentation-docsusagemd","title":"Example Documentation (<code>docs/usage.md</code>)","text":"<pre><code># Usage\n\n## MyClass\n\n```python\nfrom mymodule import MyClass\n\nobj = MyClass(5)\nprint(obj.increment())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#add-function","title":"add Function","text":"<p><pre><code>from mymodule import add\n\nprint(add(1, 2))\n</code></pre> <pre><code>### Updated `mkdocs.yml`\n```yaml\nsite_name: My Python Project\nnav:\n  - Home: index.md\n  - Usage: usage.md\ntheme:\n  name: material\nplugins:\n  - search\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#building-the-documentation","title":"Building the Documentation","text":"<p>To build the documentation site, run: <pre><code>mkdocs build\n</code></pre> The generated site will be placed in the <code>site</code> directory.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#additional-tips","title":"Additional Tips","text":""},{"location":"languages/python/libraries_frameworks/mkdocs/#using-mkdocs-themes","title":"Using MkDocs Themes","text":"<p>MkDocs supports various themes. The <code>material</code> theme is a popular choice and can be installed with: <pre><code>pip install mkdocs-material\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#customizing-the-theme","title":"Customizing the Theme","text":"<p>You can customize the theme further by editing the <code>theme</code> section in <code>mkdocs.yml</code>.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-theme-customization","title":"Example Theme Customization","text":"<pre><code>theme:\n  name: material\n  palette:\n    primary: 'blue'\n    accent: 'indigo'\n  font:\n    text: 'Roboto'\n    code: 'Roboto Mono'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<p>MkDocs can easily deploy your documentation to GitHub Pages.</p>"},{"location":"languages/python/libraries_frameworks/mkdocs/#example-deployment-command","title":"Example Deployment Command","text":"<pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/mkdocs/#conclusion","title":"Conclusion","text":"<p>MkDocs is an efficient and user-friendly tool for creating project documentation using Markdown. By leveraging its features and customization options, you can create comprehensive and visually appealing documentation for your projects.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/","title":"Python <code>MySQLdb</code> Module Report","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#introduction","title":"Introduction","text":"<p>The <code>MySQLdb</code> module, also known as <code>MySQL-python</code>, is a Python library used for interfacing with MySQL databases. It provides a robust and efficient way to perform database operations such as querying, updating, and managing MySQL databases directly from Python applications.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#features","title":"Features","text":"<ol> <li>Database Connectivity: Provides a connection to MySQL databases.</li> <li>SQL Execution: Allows execution of SQL queries and commands.</li> <li>Transaction Management: Supports transaction management with commit and rollback.</li> <li>Parameterized Queries: Supports parameterized queries to prevent SQL injection.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mysqldb/#installation","title":"Installation","text":"<p>The <code>MySQLdb</code> module is not included in the Python Standard Library and must be installed separately. It is often referred to as <code>MySQL-python</code>. You can install it using pip:</p> <pre><code>pip install mysqlclient\n</code></pre> <p>Note: The package <code>mysqlclient</code> is a fork of <code>MySQL-python</code> that supports Python 3 and is recommended for new projects.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#connecting-to-a-mysql-database","title":"Connecting to a MySQL Database","text":"<p>To connect to a MySQL database, you need to provide connection details such as hostname, username, password, and database name.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#example-basic-connection","title":"Example: Basic Connection","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object using the connection\ncursor = db.cursor()\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>MySQLdb.connect()</code> establishes a connection to the MySQL server. - <code>db.cursor()</code> creates a cursor object to execute SQL queries.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#executing-sql-queries","title":"Executing SQL Queries","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#example-executing-a-query","title":"Example: Executing a Query","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object\ncursor = db.cursor()\n\n# Execute a SQL query\ncursor.execute(\"SELECT VERSION()\")\n\n# Fetch and print the result\nversion = cursor.fetchone()\nprint(\"Database version:\", version[0])\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>cursor.execute()</code> runs a SQL query. - <code>cursor.fetchone()</code> retrieves the result of the query.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#example-executing-a-query-with-parameters","title":"Example: Executing a Query with Parameters","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object\ncursor = db.cursor()\n\n# Define the SQL query with parameters\nquery = \"SELECT * FROM employees WHERE department = %s\"\ndepartment = \"Sales\"\n\n# Execute the query with parameters\ncursor.execute(query, (department,))\n\n# Fetch and print the results\nresults = cursor.fetchall()\nfor row in results:\n    print(row)\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>cursor.execute()</code> runs a query with parameters to prevent SQL injection. - <code>cursor.fetchall()</code> retrieves all rows from the result set.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#inserting-and-updating-data","title":"Inserting and Updating Data","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#example-inserting-data","title":"Example: Inserting Data","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object\ncursor = db.cursor()\n\n# Define the SQL query for insertion\nquery = \"INSERT INTO employees (name, department, salary) VALUES (%s, %s, %s)\"\nvalues = (\"John Doe\", \"Engineering\", 75000)\n\n# Execute the query\ncursor.execute(query, values)\n\n# Commit the transaction\ndb.commit()\n\nprint(\"Record inserted.\")\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>cursor.execute()</code> inserts a record into the <code>employees</code> table. - <code>db.commit()</code> commits the transaction to save changes.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#example-updating-data","title":"Example: Updating Data","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object\ncursor = db.cursor()\n\n# Define the SQL query for updating\nquery = \"UPDATE employees SET salary = %s WHERE name = %s\"\nvalues = (80000, \"John Doe\")\n\n# Execute the query\ncursor.execute(query, values)\n\n# Commit the transaction\ndb.commit()\n\nprint(\"Record updated.\")\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>cursor.execute()</code> updates a record in the <code>employees</code> table. - <code>db.commit()</code> saves the changes to the database.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#deleting-data","title":"Deleting Data","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#example-deleting-data","title":"Example: Deleting Data","text":"<pre><code>import MySQLdb\n\n# Connect to the MySQL database\ndb = MySQLdb.connect(\n    host=\"localhost\",\n    user=\"yourusername\",\n    passwd=\"yourpassword\",\n    db=\"yourdatabase\"\n)\n\n# Create a cursor object\ncursor = db.cursor()\n\n# Define the SQL query for deletion\nquery = \"DELETE FROM employees WHERE name = %s\"\nvalues = (\"John Doe\",)\n\n# Execute the query\ncursor.execute(query, values)\n\n# Commit the transaction\ndb.commit()\n\nprint(\"Record deleted.\")\n\n# Close the connection\ndb.close()\n</code></pre> <p>In this example: - <code>cursor.execute()</code> deletes a record from the <code>employees</code> table. - <code>db.commit()</code> commits the transaction to ensure the deletion is applied.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#handling-exceptions","title":"Handling Exceptions","text":""},{"location":"languages/python/libraries_frameworks/mysqldb/#example-exception-handling","title":"Example: Exception Handling","text":"<pre><code>import MySQLdb\n\ntry:\n    # Connect to the MySQL database\n    db = MySQLdb.connect(\n        host=\"localhost\",\n        user=\"yourusername\",\n        passwd=\"yourpassword\",\n        db=\"yourdatabase\"\n    )\n\n    # Create a cursor object\n    cursor = db.cursor()\n\n    # Define the SQL query\n    query = \"SELECT * FROM non_existent_table\"\n\n    # Execute the query\n    cursor.execute(query)\n\nexcept MySQLdb.Error as e:\n    print(f\"Error: {e}\")\n\nfinally:\n    # Close the connection\n    if db:\n        db.close()\n</code></pre> <p>In this example: - <code>try</code> and <code>except</code> blocks handle potential exceptions that may occur during database operations. - <code>finally</code> ensures that the database connection is closed regardless of whether an exception occurred.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#best-practices","title":"Best Practices","text":"<ol> <li>Use Parameterized Queries: Always use parameterized queries to prevent SQL injection attacks.</li> <li>Handle Exceptions: Implement proper exception handling to manage errors and maintain application stability.</li> <li>Manage Transactions: Use transactions (commit and rollback) to ensure data integrity and consistency.</li> <li>Close Connections: Ensure database connections and cursors are closed to avoid resource leaks.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mysqldb/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Ignoring Exception Handling: Failing to handle exceptions can lead to application crashes and data loss.</li> <li>Not Using Transactions: Not using transactions can result in partial updates or data inconsistency.</li> <li>Not Closing Connections: Failing to close database connections can lead to resource leaks and performance issues.</li> </ol>"},{"location":"languages/python/libraries_frameworks/mysqldb/#conclusion","title":"Conclusion","text":"<p>The <code>MySQLdb</code> module, now maintained under the <code>mysqlclient</code> package, is a powerful tool for interfacing with MySQL databases from Python. By following best practices and understanding the basic operations, you can effectively manage database interactions and ensure reliable and secure data handling in your applications.</p>"},{"location":"languages/python/libraries_frameworks/mysqldb/#references","title":"References","text":"<ul> <li>MySQL-python Documentation - Documentation for the <code>mysqlclient</code> library, a maintained fork of <code>MySQL-python</code>.</li> <li>MySQL Documentation - Official documentation for MySQL, including setup and SQL syntax.</li> </ul>"},{"location":"languages/python/libraries_frameworks/opengl/","title":"Python OpenGL Module: A Comprehensive Guide","text":"<p>The <code>PyOpenGL</code> module provides Python bindings for the OpenGL library, which is used for rendering 2D and 3D graphics. This guide covers the essentials of using <code>PyOpenGL</code>, including installation, basic usage, and examples of rendering graphics.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#introduction-to-pyopengl","title":"Introduction to PyOpenGL","text":"<p><code>PyOpenGL</code> is a Python binding for OpenGL, allowing you to access OpenGL\u2019s capabilities for graphics rendering from within Python. It is commonly used in combination with other libraries like <code>pygame</code> or <code>Pyglet</code> for window management and input handling.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#installation","title":"Installation","text":"<p>To use <code>PyOpenGL</code>, you need to install the <code>PyOpenGL</code> and <code>PyOpenGL_accelerate</code> packages via pip.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#installing-pyopengl","title":"Installing PyOpenGL","text":"<pre><code>pip install PyOpenGL PyOpenGL_accelerate\n</code></pre>"},{"location":"languages/python/libraries_frameworks/opengl/#basic-usage","title":"Basic Usage","text":"<p><code>PyOpenGL</code> interacts with OpenGL, a powerful graphics API. To use OpenGL, you typically need a windowing system to render graphics. Libraries like <code>pygame</code> or <code>Pyglet</code> can be used for this purpose.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#example-basic-setup-with-pygame","title":"Example: Basic Setup with Pygame","text":"<pre><code>import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\ndef init_opengl():\n    glClearColor(0.0, 0.0, 0.0, 1.0)\n    glEnable(GL_DEPTH_TEST)\n\ndef draw_cube():\n    glBegin(GL_QUADS)\n    glColor3f(1, 0, 0)  # Red\n    glVertex3f(-1, -1, -1)\n    glVertex3f(1, -1, -1)\n    glVertex3f(1, 1, -1)\n    glVertex3f(-1, 1, -1)\n    # Other faces\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800, 600)\n    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)\n    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)\n    glTranslatef(0.0, 0.0, -5)\n\n    init_opengl()\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                return\n\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        draw_cube()\n        pygame.display.flip()\n        pygame.time.wait(10)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>In this example, we use <code>pygame</code> to create a window and <code>PyOpenGL</code> to render a red cube.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#rendering-basic-shapes","title":"Rendering Basic Shapes","text":"<p>OpenGL allows you to render various shapes using vertices and primitives.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#example-drawing-a-triangle","title":"Example: Drawing a Triangle","text":"<pre><code>import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\ndef draw_triangle():\n    glBegin(GL_TRIANGLES)\n    glColor3f(1, 0, 0)  # Red\n    glVertex3f(0, 1, 0)\n    glColor3f(0, 1, 0)  # Green\n    glVertex3f(-1, -1, 0)\n    glColor3f(0, 0, 1)  # Blue\n    glVertex3f(1, -1, 0)\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800, 600)\n    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)\n    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)\n    glTranslatef(0.0, 0.0, -5)\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                return\n\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        draw_triangle()\n        pygame.display.flip()\n        pygame.time.wait(10)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This example shows how to draw a colored triangle using OpenGL\u2019s <code>GL_TRIANGLES</code> primitive.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#working-with-shaders","title":"Working with Shaders","text":"<p>Shaders are small programs that run on the GPU to control the rendering pipeline. OpenGL supports vertex shaders and fragment shaders.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#example-using-shaders","title":"Example: Using Shaders","text":"<pre><code>import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import\n\nvertex_shader_code = \"\"\"\n#version 330\nlayout(location = 0) in vec3 position;\nvoid main() {\n    gl_Position = vec4(position, 1.0);\n}\n\"\"\"\n\nfragment_shader_code = \"\"\"\n#version 330\nout vec4 FragColor;\nvoid main() {\n    FragColor = vec4(1.0, 0.0, 0.0, 1.0); // Red color\n}\n\"\"\"\n\ndef compile_shader(shader_type, shader_code):\n    shader = glCreateShader(shader_type)\n    glShaderSource(shader, shader_code)\n    glCompileShader(shader)\n    if not glGetShaderiv(shader, GL_COMPILE_STATUS):\n        print(\"Shader compilation failed\")\n        print(glGetShaderInfoLog(shader))\n        return None\n    return shader\n\ndef create_shader_program():\n    vertex_shader = compile_shader(GL_VERTEX_SHADER, vertex_shader_code)\n    fragment_shader = compile_shader(GL_FRAGMENT_SHADER, fragment_shader_code)\n    program = glCreateProgram()\n    glAttachShader(program, vertex_shader)\n    glAttachShader(program, fragment_shader)\n    glLinkProgram(program)\n    if not glGetProgramiv(program, GL_LINK_STATUS):\n        print(\"Program linking failed\")\n        print(glGetProgramInfoLog(program))\n        return None\n    return program\n\ndef main():\n    pygame.init()\n    display = (800, 600)\n    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)\n    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)\n    glTranslatef(0.0, 0.0, -5)\n\n    shader_program = create_shader_program()\n    glUseProgram(shader_program)\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                return\n\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        glBegin(GL_TRIANGLES)\n        glVertex3f(0, 1, 0)\n        glVertex3f(-1, -1, 0)\n        glVertex3f(1, -1, 0)\n        glEnd()\n        pygame.display.flip()\n        pygame.time.wait(10)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This example demonstrates how to set up and use shaders in OpenGL to render a colored triangle.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#handling-input","title":"Handling Input","text":"<p>Handling user input is essential for interactive graphics applications. You can use libraries like <code>pygame</code> or <code>Pyglet</code> to manage input events.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#example-handling-keyboard-input","title":"Example: Handling Keyboard Input","text":"<pre><code>import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\ndef draw_cube():\n    glBegin(GL_QUADS)\n    glColor3f(1, 0, 0)  # Red\n    glVertex3f(-1, -1, -1)\n    glVertex3f(1, -1, -1)\n    glVertex3f(1, 1, -1)\n    glVertex3f(-1, 1, -1)\n    # Other faces\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800, 600)\n    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)\n    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)\n    glTranslatef(0.0, 0.0, -5)\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                return\n            if event.type == KEYDOWN:\n                if event.key == K_LEFT:\n                    glTranslatef(-0.1, 0, 0)\n                if event.key == K_RIGHT:\n                    glTranslatef(0.1, 0, 0)\n                if event.key == K_UP:\n                    glTranslatef(0, 0.1, 0)\n                if event.key == K_DOWN:\n                    glTranslatef(0, -0.1, 0)\n\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        draw_cube()\n        pygame.display.flip()\n        pygame.time.wait(10)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>In this example, keyboard input is used to move the view of the cube.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#advanced-features","title":"Advanced Features","text":"<p><code>PyOpenGL</code> supports a variety of advanced features, including texture mapping, lighting, and more.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#example-applying-a-texture","title":"Example: Applying a Texture","text":"<pre><code>import pygame\nfrom pygame.locals import *\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\ndef load\n\n_texture(image_path):\n    texture = glGenTextures(1)\n    glBindTexture(GL_TEXTURE_2D, texture)\n\n    image = pygame.image.load(image_path)\n    image = pygame.transform.flip(image, False, True)\n    image_data = pygame.image.tostring(image, 'RGBA', True)\n\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image.get_width(), image.get_height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, image_data)\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)\n\n    return texture\n\ndef draw_textured_cube(texture):\n    glBindTexture(GL_TEXTURE_2D, texture)\n    glBegin(GL_QUADS)\n    # Apply texture coordinates and vertices\n    glTexCoord2f(0, 0)\n    glVertex3f(-1, -1, -1)\n    glTexCoord2f(1, 0)\n    glVertex3f(1, -1, -1)\n    glTexCoord2f(1, 1)\n    glVertex3f(1, 1, -1)\n    glTexCoord2f(0, 1)\n    glVertex3f(-1, 1, -1)\n    # Other faces\n    glEnd()\n\ndef main():\n    pygame.init()\n    display = (800, 600)\n    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)\n    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)\n    glTranslatef(0.0, 0.0, -5)\n\n    texture = load_texture('texture.png')\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                pygame.quit()\n                return\n\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n        draw_textured_cube(texture)\n        pygame.display.flip()\n        pygame.time.wait(10)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This example demonstrates how to load and apply a texture to a cube.</p>"},{"location":"languages/python/libraries_frameworks/opengl/#conclusion","title":"Conclusion","text":"<p>The <code>PyOpenGL</code> module provides a powerful interface for rendering 2D and 3D graphics using OpenGL. By combining it with libraries like <code>pygame</code> or <code>Pyglet</code>, you can create complex and interactive graphics applications. With the examples and guidelines provided in this report, you should be well-equipped to start using <code>PyOpenGL</code> in your projects.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/","title":"Python openpyxl Module: A Comprehensive Guide","text":"<p>The <code>openpyxl</code> module in Python is a powerful library used for reading and writing Excel files in the <code>.xlsx</code> format. It provides extensive features for managing Excel workbooks, worksheets, cells, and formatting. This guide covers the key features and functionalities of the <code>openpyxl</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/#introduction-to-openpyxl","title":"Introduction to openpyxl","text":"<p>The <code>openpyxl</code> module allows you to work with Excel files (<code>.xlsx</code>) directly from Python. It supports a wide range of features, including reading, writing, formatting, and charting Excel files.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/#installation","title":"Installation","text":"<p>To use <code>openpyxl</code>, you need to install it via pip. You can install it with the following command:</p> <pre><code>pip install openpyxl\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#creating-a-workbook","title":"Creating a Workbook","text":"<p>To create a new Excel workbook and add a worksheet, use the following code:</p> <pre><code>from openpyxl import Workbook\n\n# Create a new workbook and add a worksheet\nwb = Workbook()\nws = wb.active\nws.title = \"Sheet1\"\n\n# Save the workbook\nwb.save(\"example.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#accessing-and-modifying-worksheets","title":"Accessing and Modifying Worksheets","text":""},{"location":"languages/python/libraries_frameworks/openpyxl/#accessing-a-worksheet","title":"Accessing a Worksheet","text":"<p>To access a specific worksheet in an existing workbook:</p> <pre><code>from openpyxl import load_workbook\n\n# Load an existing workbook\nwb = load_workbook(\"example.xlsx\")\n\n# Access a specific sheet by name\nws = wb[\"Sheet1\"]\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#modifying-worksheet-properties","title":"Modifying Worksheet Properties","text":"<p>You can rename, add, or remove worksheets.</p> <pre><code># Add a new worksheet\nnew_ws = wb.create_sheet(title=\"NewSheet\")\n\n# Rename an existing worksheet\nws.title = \"RenamedSheet\"\n\n# Remove a worksheet\nwb.remove(new_ws)\n\n# Save the changes\nwb.save(\"example_modified.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#reading-and-writing-data","title":"Reading and Writing Data","text":""},{"location":"languages/python/libraries_frameworks/openpyxl/#writing-data-to-cells","title":"Writing Data to Cells","text":"<p>To write data to specific cells:</p> <pre><code>from openpyxl import Workbook\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Write data to cells\nws['A1'] = \"Hello\"\nws['B1'] = 123\nws.cell(row=2, column=1, value=\"Python\")\n\n# Save the workbook\nwb.save(\"example.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#reading-data-from-cells","title":"Reading Data from Cells","text":"<p>To read data from specific cells:</p> <pre><code>from openpyxl import load_workbook\n\n# Load an existing workbook\nwb = load_workbook(\"example.xlsx\")\nws = wb.active\n\n# Read data from cells\nvalue_a1 = ws['A1'].value\nvalue_b1 = ws['B1'].value\n\nprint(f\"A1: {value_a1}, B1: {value_b1}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#formatting-cells","title":"Formatting Cells","text":"<p>You can format cells with various styles, such as font, fill, and border.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/#applying-font-and-fill-styles","title":"Applying Font and Fill Styles","text":"<pre><code>from openpyxl import Workbook\nfrom openpyxl.styles import Font, PatternFill\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Apply font style\nbold_font = Font(bold=True, color=\"FF0000\")\nws['A1'].font = bold_font\nws['A1'] = \"Bold Red Text\"\n\n# Apply fill style\nyellow_fill = PatternFill(start_color=\"FFFF00\", end_color=\"FFFF00\", fill_type=\"solid\")\nws['A2'].fill = yellow_fill\nws['A2'] = \"Yellow Background\"\n\n# Save the workbook\nwb.save(\"formatted.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#applying-border-style","title":"Applying Border Style","text":"<pre><code>from openpyxl import Workbook\nfrom openpyxl.styles import Border, Side\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Define border style\nborder = Border(left=Side(border_style=\"thin\", color=\"000000\"),\n                right=Side(border_style=\"thin\", color=\"000000\"),\n                top=Side(border_style=\"thin\", color=\"000000\"),\n                bottom=Side(border_style=\"thin\", color=\"000000\"))\n\n# Apply border to a cell\nws['A1'].border = border\nws['A1'] = \"Cell with Border\"\n\n# Save the workbook\nwb.save(\"bordered.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#adding-and-modifying-charts","title":"Adding and Modifying Charts","text":"<p>You can add and customize charts within Excel files.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/#creating-a-chart","title":"Creating a Chart","text":"<pre><code>from openpyxl import Workbook\nfrom openpyxl.chart import BarChart, Reference\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Write data for the chart\ndata = [\n    ['Month', 'Sales'],\n    ['Jan', 100],\n    ['Feb', 150],\n    ['Mar', 200],\n]\n\nfor row in data:\n    ws.append(row)\n\n# Create a bar chart\nchart = BarChart()\ndata_ref = Reference(ws, min_col=2, min_row=1, max_col=2, max_row=4)\nchart.add_data(data_ref, titles_from_data=True)\nws.add_chart(chart, \"E5\")\n\n# Save the workbook\nwb.save(\"chart.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#using-formulas","title":"Using Formulas","text":"<p>You can use Excel formulas directly in cells.</p> <pre><code>from openpyxl import Workbook\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Write some data\nws['A1'] = 10\nws['A2'] = 20\n\n# Write a formula\nws['A3'] = \"=A1 + A2\"\n\n# Save the workbook\nwb.save(\"formulas.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#handling-images","title":"Handling Images","text":"<p>You can insert images into Excel sheets.</p> <pre><code>from openpyxl import Workbook\nfrom openpyxl.drawing.image import Image\n\n# Create a workbook and access the default sheet\nwb = Workbook()\nws = wb.active\n\n# Add an image\nimg = Image(\"logo.png\")\nws.add_image(img, \"B2\")\n\n# Save the workbook\nwb.save(\"image.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#managing-multiple-sheets","title":"Managing Multiple Sheets","text":"<p>You can create and manage multiple worksheets within a workbook.</p>"},{"location":"languages/python/libraries_frameworks/openpyxl/#adding-and-accessing-multiple-sheets","title":"Adding and Accessing Multiple Sheets","text":"<pre><code>from openpyxl import Workbook\n\n# Create a workbook\nwb = Workbook()\n\n# Add multiple worksheets\nws1 = wb.create_sheet(title=\"Sheet1\")\nws2 = wb.create_sheet(title=\"Sheet2\")\n\n# Write data to sheets\nws1['A1'] = \"Data in Sheet1\"\nws2['A1'] = \"Data in Sheet2\"\n\n# Save the workbook\nwb.save(\"multiple_sheets.xlsx\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#error-handling","title":"Error Handling","text":"<p>Handling errors ensures robustness when working with Excel files.</p> <pre><code>from openpyxl import load_workbook\n\ntry:\n    # Load a workbook\n    wb = load_workbook(\"nonexistent.xlsx\")\n\nexcept FileNotFoundError:\n    print(\"The specified file does not exist.\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/openpyxl/#conclusion","title":"Conclusion","text":"<p>The <code>openpyxl</code> module provides extensive capabilities for reading, writing, and manipulating Excel files in Python. With features for data management, cell formatting, chart creation, and formula handling, <code>openpyxl</code> is a versatile tool for Excel automation and reporting. By mastering its functionalities, you can efficiently handle a wide range of tasks involving Excel spreadsheets.</p>"},{"location":"languages/python/libraries_frameworks/operator/","title":"Python <code>operator</code> Module: Detailed Overview and Examples","text":"<p>The <code>operator</code> module in Python provides a set of efficient functions that correspond to standard operators. These functions are intended to be used as functional equivalents of operators and can be particularly useful for tasks involving functional programming, such as sorting, mapping, and reducing.</p>"},{"location":"languages/python/libraries_frameworks/operator/#importing-the-operator-module","title":"Importing the <code>operator</code> Module","text":"<p>To use the functions from the <code>operator</code> module, you first need to import it:</p> <pre><code>import operator\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#arithmetic-operators","title":"Arithmetic Operators","text":""},{"location":"languages/python/libraries_frameworks/operator/#operatoraddx-y","title":"<code>operator.add(x, y)</code>","text":"<p>Returns the sum of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example","title":"Example","text":"<pre><code>import operator\n\nresult = operator.add(5, 3)\nprint(result)  # Output: 8\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorsubx-y","title":"<code>operator.sub(x, y)</code>","text":"<p>Returns the difference of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_1","title":"Example","text":"<pre><code>import operator\n\nresult = operator.sub(5, 3)\nprint(result)  # Output: 2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatormulx-y","title":"<code>operator.mul(x, y)</code>","text":"<p>Returns the product of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_2","title":"Example","text":"<pre><code>import operator\n\nresult = operator.mul(5, 3)\nprint(result)  # Output: 15\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatortruedivx-y","title":"<code>operator.truediv(x, y)</code>","text":"<p>Returns the quotient of <code>x</code> divided by <code>y</code>. For integer division, use <code>operator.floordiv</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_3","title":"Example","text":"<pre><code>import operator\n\nresult = operator.truediv(5, 3)\nprint(result)  # Output: 1.6666666666666667\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorfloordivx-y","title":"<code>operator.floordiv(x, y)</code>","text":"<p>Returns the floor division of <code>x</code> divided by <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_4","title":"Example","text":"<pre><code>import operator\n\nresult = operator.floordiv(5, 3)\nprint(result)  # Output: 1\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatormodx-y","title":"<code>operator.mod(x, y)</code>","text":"<p>Returns the remainder of <code>x</code> divided by <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_5","title":"Example","text":"<pre><code>import operator\n\nresult = operator.mod(5, 3)\nprint(result)  # Output: 2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorpowx-y","title":"<code>operator.pow(x, y)</code>","text":"<p>Returns <code>x</code> raised to the power of <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_6","title":"Example","text":"<pre><code>import operator\n\nresult = operator.pow(2, 3)\nprint(result)  # Output: 8\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#comparison-operators","title":"Comparison Operators","text":""},{"location":"languages/python/libraries_frameworks/operator/#operatoreqx-y","title":"<code>operator.eq(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is equal to <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_7","title":"Example","text":"<pre><code>import operator\n\nresult = operator.eq(5, 5)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatornex-y","title":"<code>operator.ne(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is not equal to <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_8","title":"Example","text":"<pre><code>import operator\n\nresult = operator.ne(5, 3)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorltx-y","title":"<code>operator.lt(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is less than <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_9","title":"Example","text":"<pre><code>import operator\n\nresult = operator.lt(5, 10)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorlex-y","title":"<code>operator.le(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is less than or equal to <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_10","title":"Example","text":"<pre><code>import operator\n\nresult = operator.le(5, 5)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorgtx-y","title":"<code>operator.gt(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is greater than <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_11","title":"Example","text":"<pre><code>import operator\n\nresult = operator.gt(5, 3)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorgex-y","title":"<code>operator.ge(x, y)</code>","text":"<p>Returns <code>True</code> if <code>x</code> is greater than or equal to <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_12","title":"Example","text":"<pre><code>import operator\n\nresult = operator.ge(5, 5)\nprint(result)  # Output: True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#logical-operators","title":"Logical Operators","text":""},{"location":"languages/python/libraries_frameworks/operator/#operatorand_x-y","title":"<code>operator.and_(x, y)</code>","text":"<p>Returns the bitwise AND of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_13","title":"Example","text":"<pre><code>import operator\n\nresult = operator.and_(5, 3)  # 5: 0101, 3: 0011\nprint(result)  # Output: 1 (0001 in binary)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatoror_x-y","title":"<code>operator.or_(x, y)</code>","text":"<p>Returns the bitwise OR of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_14","title":"Example","text":"<pre><code>import operator\n\nresult = operator.or_(5, 3)  # 5: 0101, 3: 0011\nprint(result)  # Output: 7 (0111 in binary)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorxorx-y","title":"<code>operator.xor(x, y)</code>","text":"<p>Returns the bitwise XOR of <code>x</code> and <code>y</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_15","title":"Example","text":"<pre><code>import operator\n\nresult = operator.xor(5, 3)  # 5: 0101, 3: 0011\nprint(result)  # Output: 6 (0110 in binary)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatornot_x","title":"<code>operator.not_(x)</code>","text":"<p>Returns the boolean NOT of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_16","title":"Example","text":"<pre><code>import operator\n\nresult = operator.not_(True)\nprint(result)  # Output: False\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorinvx","title":"<code>operator.inv(x)</code>","text":"<p>Returns the bitwise inversion of <code>x</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_17","title":"Example","text":"<pre><code>import operator\n\nresult = operator.inv(5)  # 5: 0101\nprint(result)  # Output: -6 (Inverting bits)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#object-and-attribute-operators","title":"Object and Attribute Operators","text":""},{"location":"languages/python/libraries_frameworks/operator/#operatorgetitemobj-key","title":"<code>operator.getitem(obj, key)</code>","text":"<p>Returns the item of <code>obj</code> at <code>key</code>. Equivalent to <code>obj[key]</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_18","title":"Example","text":"<pre><code>import operator\n\nmy_dict = {'a': 1, 'b': 2}\nresult = operator.getitem(my_dict, 'a')\nprint(result)  # Output: 1\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorsetitemobj-key-value","title":"<code>operator.setitem(obj, key, value)</code>","text":"<p>Sets the item of <code>obj</code> at <code>key</code> to <code>value</code>. Equivalent to <code>obj[key] = value</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_19","title":"Example","text":"<pre><code>import operator\n\nmy_dict = {'a': 1}\noperator.setitem(my_dict, 'b', 2)\nprint(my_dict)  # Output: {'a': 1, 'b': 2}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatordelitemobj-key","title":"<code>operator.delitem(obj, key)</code>","text":"<p>Deletes the item of <code>obj</code> at <code>key</code>. Equivalent to <code>del obj[key]</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_20","title":"Example","text":"<pre><code>import operator\n\nmy_dict = {'a': 1, 'b': 2}\noperator.delitem(my_dict, 'b')\nprint(my_dict)  # Output: {'a': 1}\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorgetattrobj-attr","title":"<code>operator.getattr(obj, attr)</code>","text":"<p>Returns the attribute of <code>obj</code> with the name <code>attr</code>. Equivalent to <code>getattr(obj, attr)</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_21","title":"Example","text":"<pre><code>import operator\n\nclass MyClass:\n    attr = 42\n\nobj = MyClass()\nresult = operator.getattr(obj, 'attr')\nprint(result)  # Output: 42\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatorsetattrobj-attr-value","title":"<code>operator.setattr(obj, attr, value)</code>","text":"<p>Sets the attribute of <code>obj</code> named <code>attr</code> to <code>value</code>. Equivalent to <code>setattr(obj, attr, value)</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_22","title":"Example","text":"<pre><code>import operator\n\nclass MyClass:\n    pass\n\nobj = MyClass()\noperator.setattr(obj, 'attr', 42)\nprint(obj.attr)  # Output: 42\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#operatordelattrobj-attr","title":"<code>operator.delattr(obj, attr)</code>","text":"<p>Deletes the attribute of <code>obj</code> named <code>attr</code>. Equivalent to <code>delattr(obj, attr)</code>.</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_23","title":"Example","text":"<pre><code>import operator\n\nclass MyClass:\n    attr = 42\n\nobj = MyClass()\noperator.delattr(obj, 'attr')\nprint(hasattr(obj, 'attr'))  # Output: False\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#callable-operators","title":"Callable Operators","text":""},{"location":"languages/python/libraries_frameworks/operator/#operatorcallableobj","title":"<code>operator.callable(obj)</code>","text":"<p>Checks if <code>obj</code> appears callable (i.e., it can be called like a function).</p>"},{"location":"languages/python/libraries_frameworks/operator/#example_24","title":"Example","text":"<pre><code>import operator\n\nresult = operator.callable(print)\nprint(result)  # Output: True\n\nresult = operator.callable(42)\nprint(result)  # Output: False\n</code></pre>"},{"location":"languages/python/libraries_frameworks/operator/#conclusion","title":"Conclusion","text":"<p>The <code>operator</code> module provides a set of functional equivalents for standard operators in Python. These functions can be used in a variety of contexts, including functional programming, data processing, and more. By understanding and using these functions, you can write more concise and functional code, enhancing readability and maintainability.</p>"},{"location":"languages/python/libraries_frameworks/oracle/","title":"Connecting to Oracle Database with Python: A Comprehensive Guide","text":"<p>Connecting to an Oracle database from Python allows you to perform various database operations such as querying, updating, and managing your data. This guide will cover the key steps, libraries, and examples for connecting to an Oracle database using Python.</p>"},{"location":"languages/python/libraries_frameworks/oracle/#introduction","title":"Introduction","text":"<p>Python provides several libraries to connect to an Oracle database. This guide focuses on using the <code>cx_Oracle</code> library, which is a popular and well-supported choice for interacting with Oracle databases.</p>"},{"location":"languages/python/libraries_frameworks/oracle/#prerequisites","title":"Prerequisites","text":"<ul> <li>Oracle Database: Ensure you have access to an Oracle database and know your connection details (hostname, port, service name, username, and password).</li> <li>Python Environment: Ensure you have Python installed on your system.</li> </ul>"},{"location":"languages/python/libraries_frameworks/oracle/#installing-required-libraries","title":"Installing Required Libraries","text":"<p>To connect to an Oracle database, you'll need the <code>cx_Oracle</code> library. You can install it using pip:</p> <pre><code>pip install cx_Oracle\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#connecting-to-oracle-database","title":"Connecting to Oracle Database","text":"<p>Here's a basic example of how to establish a connection to an Oracle database using <code>cx_Oracle</code>.</p> <pre><code>import cx_Oracle\n\n# Define connection parameters\ndsn = cx_Oracle.makedsn('hostname', 'port', service_name='service_name')\nusername = 'your_username'\npassword = 'your_password'\n\n# Create a connection\nconnection = cx_Oracle.connect(username, password, dsn)\n\n# Create a cursor\ncursor = connection.cursor()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#connection-parameters","title":"Connection Parameters","text":"<ul> <li>hostname: The hostname or IP address of the Oracle database server.</li> <li>port: The port number on which the Oracle database is listening (default is 1521).</li> <li>service_name: The service name or SID of the Oracle database.</li> <li>username: Your database username.</li> <li>password: Your database password.</li> </ul>"},{"location":"languages/python/libraries_frameworks/oracle/#executing-sql-queries","title":"Executing SQL Queries","text":"<p>Once connected, you can use SQL queries to interact with the database.</p>"},{"location":"languages/python/libraries_frameworks/oracle/#selecting-data","title":"Selecting Data","text":"<p>To retrieve data from a table:</p> <pre><code># Execute a SELECT statement\ncursor.execute(\"SELECT * FROM your_table\")\n\n# Fetch all rows\nrows = cursor.fetchall()\n\n# Print each row\nfor row in rows:\n    print(row)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#inserting-data","title":"Inserting Data","text":"<p>To insert new data into a table:</p> <pre><code># Define the SQL INSERT statement\ninsert_sql = \"\"\"\n    INSERT INTO your_table (column1, column2)\n    VALUES (:1, :2)\n\"\"\"\n\n# Execute the INSERT statement\ncursor.execute(insert_sql, (value1, value2))\n\n# Commit the transaction\nconnection.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#updating-data","title":"Updating Data","text":"<p>To update existing data in a table:</p> <pre><code># Define the SQL UPDATE statement\nupdate_sql = \"\"\"\n    UPDATE your_table\n    SET column1 = :1\n    WHERE column2 = :2\n\"\"\"\n\n# Execute the UPDATE statement\ncursor.execute(update_sql, (new_value1, condition_value))\n\n# Commit the transaction\nconnection.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#deleting-data","title":"Deleting Data","text":"<p>To delete data from a table:</p> <pre><code># Define the SQL DELETE statement\ndelete_sql = \"\"\"\n    DELETE FROM your_table\n    WHERE column1 = :1\n\"\"\"\n\n# Execute the DELETE statement\ncursor.execute(delete_sql, (value_to_delete,))\n\n# Commit the transaction\nconnection.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#handling-transactions","title":"Handling Transactions","text":"<p>Transactions ensure that multiple database operations are executed as a single unit. You can control transactions using the <code>commit()</code> and <code>rollback()</code> methods.</p> <pre><code>try:\n    # Execute multiple SQL statements\n    cursor.execute(\"INSERT INTO your_table (column1) VALUES ('value1')\")\n    cursor.execute(\"INSERT INTO your_table (column2) VALUES ('value2')\")\n\n    # Commit the transaction\n    connection.commit()\nexcept Exception as e:\n    # Rollback in case of error\n    connection.rollback()\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#error-handling","title":"Error Handling","text":"<p>Handling errors effectively is crucial for robust database applications.</p> <pre><code>import cx_Oracle\n\ntry:\n    # Attempt to connect to the database\n    connection = cx_Oracle.connect(username, password, dsn)\n    cursor = connection.cursor()\n\n    # Execute a query\n    cursor.execute(\"SELECT * FROM non_existing_table\")\n\nexcept cx_Oracle.DatabaseError as e:\n    error, = e.args\n    print(f\"Database error occurred: {error.message}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    # Ensure resources are cleaned up\n    cursor.close()\n    connection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#closing-the-connection","title":"Closing the Connection","text":"<p>Always close your cursor and connection to free up resources.</p> <pre><code># Close the cursor\ncursor.close()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/oracle/#using-connection-pools","title":"Using Connection Pools","text":"<p>For applications with high concurrency, use connection pools to manage multiple database connections efficiently.</p> <pre><code>import cx_Oracle\n\n# Create a connection pool\npool = cx_Oracle.SessionPool(username, password, dsn, min=2, max=5, increment=1)\n\n# Acquire a connection from the pool\nconnection = pool.acquire()\n\n# Create a cursor\ncursor = connection.cursor()\n\n# Execute SQL commands\ncursor.execute(\"SELECT * FROM your_table\")\n\n# Release the connection back to the pool\npool.release(connection)\n\n# Close the pool when done\npool.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#handling-blobs-and-clobs","title":"Handling BLOBs and CLOBs","text":"<p>To work with large binary objects (BLOBs) and character large objects (CLOBs), use appropriate data types and methods.</p> <pre><code># Insert a BLOB\nblob_data = open('path/to/large_file.bin', 'rb').read()\ncursor.execute(\"INSERT INTO your_table (blob_column) VALUES (:1)\", [blob_data])\n\n# Insert a CLOB\nclob_data = \"Large text data\"\ncursor.execute(\"INSERT INTO your_table (clob_column) VALUES (:1)\", [clob_data])\n\n# Commit the transaction\nconnection.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/oracle/#conclusion","title":"Conclusion","text":"<p>Connecting to an Oracle database with Python using <code>cx_Oracle</code> allows you to perform a variety of database operations efficiently. By following the steps outlined in this guide, you can establish connections, execute queries, handle transactions, and manage advanced features like connection pooling and large object handling. This guide provides a solid foundation for working with Oracle databases in Python.</p>"},{"location":"languages/python/libraries_frameworks/os/","title":"Python <code>os</code> Package: Overview and Examples","text":"<p>The <code>os</code> package in Python provides a way of using operating system-dependent functionality like reading or writing to the file system. This module provides a portable way of using operating system-dependent functionalities and is a part of the standard library.</p>"},{"location":"languages/python/libraries_frameworks/os/#importing-the-os-module","title":"Importing the <code>os</code> Module","text":"<p>To use the <code>os</code> module, you first need to import it.</p> <pre><code>import os\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#commonly-used-functions","title":"Commonly Used Functions","text":""},{"location":"languages/python/libraries_frameworks/os/#working-with-directories","title":"Working with Directories","text":""},{"location":"languages/python/libraries_frameworks/os/#osgetcwd","title":"<code>os.getcwd()</code>","text":"<p>Returns the current working directory.</p> <pre><code>current_directory = os.getcwd()\nprint(current_directory)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#oslistdir","title":"<code>os.listdir()</code>","text":"<p>Returns a list of entries in the specified directory.</p> <pre><code>entries = os.listdir('.')\nprint(entries)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osmkdir","title":"<code>os.mkdir()</code>","text":"<p>Creates a new directory.</p> <pre><code>os.mkdir('new_directory')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osmakedirs","title":"<code>os.makedirs()</code>","text":"<p>Creates a new directory and any necessary parent directories.</p> <pre><code>os.makedirs('parent_dir/child_dir')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osrmdir","title":"<code>os.rmdir()</code>","text":"<p>Removes an empty directory.</p> <pre><code>os.rmdir('new_directory')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osremovedirs","title":"<code>os.removedirs()</code>","text":"<p>Removes directories recursively.</p> <pre><code>os.removedirs('parent_dir/child_dir')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#oschdir","title":"<code>os.chdir()</code>","text":"<p>Changes the current working directory.</p> <pre><code>os.chdir('new_directory')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#working-with-files","title":"Working with Files","text":""},{"location":"languages/python/libraries_frameworks/os/#osrename","title":"<code>os.rename()</code>","text":"<p>Renames a file or directory.</p> <pre><code>os.rename('old_name.txt', 'new_name.txt')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osremove","title":"<code>os.remove()</code>","text":"<p>Removes a file.</p> <pre><code>os.remove('new_name.txt')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#environment-variables","title":"Environment Variables","text":""},{"location":"languages/python/libraries_frameworks/os/#osenviron","title":"<code>os.environ</code>","text":"<p>A mapping object representing the string environment.</p> <pre><code>home_directory = os.environ.get('HOME')\nprint(home_directory)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osgetenv","title":"<code>os.getenv()</code>","text":"<p>Gets the value of an environment variable.</p> <pre><code>path = os.getenv('PATH')\nprint(path)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#osputenv","title":"<code>os.putenv()</code>","text":"<p>Sets the value of an environment variable.</p> <pre><code>os.putenv('MY_VAR', 'my_value')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#path-manipulations","title":"Path Manipulations","text":""},{"location":"languages/python/libraries_frameworks/os/#ospathjoin","title":"<code>os.path.join()</code>","text":"<p>Joins one or more path components intelligently.</p> <pre><code>path = os.path.join('parent_dir', 'child_dir', 'file.txt')\nprint(path)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#ospathexists","title":"<code>os.path.exists()</code>","text":"<p>Returns <code>True</code> if the path exists.</p> <pre><code>exists = os.path.exists('path/to/file.txt')\nprint(exists)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#ospathisfile","title":"<code>os.path.isfile()</code>","text":"<p>Returns <code>True</code> if the path is a regular file.</p> <pre><code>is_file = os.path.isfile('path/to/file.txt')\nprint(is_file)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#ospathisdir","title":"<code>os.path.isdir()</code>","text":"<p>Returns <code>True</code> if the path is a directory.</p> <pre><code>is_dir = os.path.isdir('path/to/directory')\nprint(is_dir)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#ospathgetsize","title":"<code>os.path.getsize()</code>","text":"<p>Returns the size of the file in bytes.</p> <pre><code>size = os.path.getsize('path/to/file.txt')\nprint(size)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#ospathabspath","title":"<code>os.path.abspath()</code>","text":"<p>Returns the absolute path of the specified path.</p> <pre><code>absolute_path = os.path.abspath('path/to/file.txt')\nprint(absolute_path)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#example-creating-a-directory-writing-a-file-and-cleaning-up","title":"Example: Creating a Directory, Writing a File, and Cleaning Up","text":"<pre><code>import os\n\n# Create a new directory\nos.mkdir('example_dir')\n\n# Change to the new directory\nos.chdir('example_dir')\n\n# Create and write to a new file\nwith open('example_file.txt', 'w') as file:\n    file.write('Hello, world!')\n\n# Read the file\nwith open('example_file.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n# Change back to the parent directory\nos.chdir('..')\n\n# Remove the file and directory\nos.remove('example_dir/example_file.txt')\nos.rmdir('example_dir')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/os/#conclusion","title":"Conclusion","text":"<p>The <code>os</code> package in Python is a powerful tool for interacting with the operating system. It provides functionalities for directory and file operations, environment variables, and path manipulations. Understanding and utilizing these functions can significantly enhance your ability to manage files and directories programmatically.</p>"},{"location":"languages/python/libraries_frameworks/pandas/","title":"Pandas Module in Python: A Comprehensive Guide","text":"<p>Pandas is a powerful, open-source data manipulation and analysis library for Python. It provides data structures and functions needed to manipulate structured data seamlessly. This guide covers the core functionalities of the Pandas library along with practical examples.</p>"},{"location":"languages/python/libraries_frameworks/pandas/#introduction-to-pandas","title":"Introduction to Pandas","text":"<p>Pandas is designed for data manipulation and analysis. It offers data structures and operations for manipulating numerical tables and time series data.</p> <p>Key features of Pandas: - DataFrame object for data manipulation with integrated indexing - Tools for reading and writing data between in-memory data structures and different formats - Data alignment and integrated handling of missing data - Reshaping and pivoting of data sets - Label-based slicing, indexing, and subsetting of large data sets - Data structure column insertion and deletion - Group by engine for aggregating and transforming data sets - High-performance merging and joining of data sets - Hierarchical axis indexing to work with high-dimensional data in a lower-dimensional data structure</p>"},{"location":"languages/python/libraries_frameworks/pandas/#installation","title":"Installation","text":"<p>To install Pandas, you can use pip:</p> <pre><code>pip install pandas\n</code></pre> <p>Or if you are using conda:</p> <pre><code>conda install pandas\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-structures","title":"Data Structures","text":""},{"location":"languages/python/libraries_frameworks/pandas/#series","title":"Series","text":"<p>A Series is a one-dimensional array-like object containing an array of data and an associated array of data labels, called its index.</p> <pre><code>import pandas as pd\n\n# Create a Series\ndata = [1, 2, 3, 4, 5]\nindex = ['a', 'b', 'c', 'd', 'e']\nseries = pd.Series(data, index=index)\n\nprint(series)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#dataframe","title":"DataFrame","text":"<p>A DataFrame is a two-dimensional, size-mutable, and potentially heterogeneous tabular data structure with labeled axes (rows and columns).</p> <pre><code># Create a DataFrame\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'City': ['New York', 'Los Angeles', 'Chicago']\n}\ndf = pd.DataFrame(data)\n\nprint(df)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-manipulation","title":"Data Manipulation","text":""},{"location":"languages/python/libraries_frameworks/pandas/#data-selection","title":"Data Selection","text":"<p>Selecting data in a DataFrame using labels, integer location, and boolean indexing.</p> <pre><code># Select a single column\nprint(df['Name'])\n\n# Select multiple columns\nprint(df[['Name', 'City']])\n\n# Select rows by label\nprint(df.loc[0])\n\n# Select rows by integer location\nprint(df.iloc[0])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-cleaning","title":"Data Cleaning","text":"<p>Handling missing values, duplicates, and data transformations.</p> <pre><code># Handling missing values\ndf_with_nan = df.copy()\ndf_with_nan.loc[1, 'Age'] = None\ndf_with_nan['Age'].fillna(df_with_nan['Age'].mean(), inplace=True)\n\n# Removing duplicates\ndf_with_duplicates = df.append(df.iloc[0])\ndf_without_duplicates = df_with_duplicates.drop_duplicates()\n\nprint(df_with_nan)\nprint(df_without_duplicates)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-aggregation","title":"Data Aggregation","text":"<p>Aggregating data using functions like sum, mean, etc.</p> <pre><code># Aggregating data\naggregated_data = df['Age'].sum()\nprint(aggregated_data)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-merging","title":"Data Merging","text":"<p>Combining multiple DataFrames using merge, join, and concatenate.</p> <pre><code># Merging DataFrames\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'value': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['B', 'C', 'D'], 'value': [4, 5, 6]})\n\nmerged_df = pd.merge(df1, df2, on='key', how='inner')\nprint(merged_df)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-analysis","title":"Data Analysis","text":""},{"location":"languages/python/libraries_frameworks/pandas/#descriptive-statistics","title":"Descriptive Statistics","text":"<p>Generating descriptive statistics for DataFrame columns.</p> <pre><code># Descriptive statistics\nprint(df.describe())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#group-by","title":"Group By","text":"<p>Grouping data and performing aggregate functions.</p> <pre><code># Group by operation\ngrouped = df.groupby('City').mean()\nprint(grouped)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#pivot-tables","title":"Pivot Tables","text":"<p>Creating pivot tables to summarize data.</p> <pre><code># Pivot table\npivot_table = df.pivot_table(values='Age', index='City', aggfunc='mean')\nprint(pivot_table)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#time-series-analysis","title":"Time Series Analysis","text":"<p>Handling and manipulating time series data.</p> <pre><code># Time series data\ndate_rng = pd.date_range(start='2023-01-01', end='2023-01-10', freq='D')\ntime_series = pd.DataFrame(date_rng, columns=['date'])\ntime_series['data'] = pd.Series(range(10))\n\nprint(time_series)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#data-visualization","title":"Data Visualization","text":"<p>Using Pandas plotting functions to visualize data.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Line plot\ndf.plot(x='Name', y='Age', kind='line')\nplt.show()\n\n# Bar plot\ndf.plot(x='Name', y='Age', kind='bar')\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pandas/#conclusion","title":"Conclusion","text":"<p>Pandas is an essential tool for data manipulation and analysis in Python. Its versatile data structures, powerful functions, and integration with other libraries like NumPy and Matplotlib make it a go-to library for data scientists and analysts. By mastering the core functionalities of Pandas, you can efficiently handle and analyze your data, making your data analysis workflow smoother and more productive.</p>"},{"location":"languages/python/libraries_frameworks/pathlib/","title":"Python <code>pathlib</code> Package: Overview and Examples","text":"<p>The <code>pathlib</code> package in Python offers a convenient and powerful way to handle filesystem paths. It provides an object-oriented interface for working with paths and is part of the standard library from Python 3.4 onwards.</p>"},{"location":"languages/python/libraries_frameworks/pathlib/#importing-the-pathlib-module","title":"Importing the <code>pathlib</code> Module","text":"<p>To use <code>pathlib</code>, you need to import it.</p> <pre><code>from pathlib import Path\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#creating-paths","title":"Creating Paths","text":""},{"location":"languages/python/libraries_frameworks/pathlib/#creating-path-objects","title":"Creating Path Objects","text":"<p>You can create a <code>Path</code> object using the <code>Path</code> class.</p> <pre><code>p = Path('some_directory/some_file.txt')\nprint(p)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#current-directory","title":"Current Directory","text":"<p>To get the current working directory, use <code>Path.cwd()</code>.</p> <pre><code>current_directory = Path.cwd()\nprint(current_directory)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#home-directory","title":"Home Directory","text":"<p>To get the home directory, use <code>Path.home()</code>.</p> <pre><code>home_directory = Path.home()\nprint(home_directory)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#common-path-operations","title":"Common Path Operations","text":""},{"location":"languages/python/libraries_frameworks/pathlib/#joining-paths","title":"Joining Paths","text":"<p>You can join paths using the <code>/</code> operator.</p> <pre><code>p = Path('some_directory') / 'some_file.txt'\nprint(p)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#checking-path-existence","title":"Checking Path Existence","text":"<p>You can check if a path exists using the <code>exists()</code> method.</p> <pre><code>p = Path('some_directory/some_file.txt')\nprint(p.exists())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#checking-if-path-is-a-file-or-directory","title":"Checking if Path is a File or Directory","text":"<p>Use the <code>is_file()</code> and <code>is_dir()</code> methods to check if the path is a file or a directory.</p> <pre><code>print(p.is_file())\nprint(p.is_dir())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#creating-directories","title":"Creating Directories","text":"<p>Use the <code>mkdir()</code> method to create a directory.</p> <pre><code>p = Path('new_directory')\np.mkdir()\n</code></pre> <p>To create parent directories as needed, use the <code>parents</code> argument.</p> <pre><code>p = Path('parent_directory/child_directory')\np.mkdir(parents=True)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#removing-files-and-directories","title":"Removing Files and Directories","text":"<p>Use the <code>unlink()</code> method to remove a file and <code>rmdir()</code> to remove a directory.</p> <pre><code>p = Path('new_directory/some_file.txt')\np.unlink()\n\np = Path('new_directory')\np.rmdir()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#iterating-over-directory-contents","title":"Iterating Over Directory Contents","text":"<p>Use the <code>iterdir()</code> method to iterate over the contents of a directory.</p> <pre><code>p = Path('.')\nfor item in p.iterdir():\n    print(item)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#reading-and-writing-files","title":"Reading and Writing Files","text":""},{"location":"languages/python/libraries_frameworks/pathlib/#reading-a-file","title":"Reading a File","text":"<p>Use the <code>read_text()</code> method to read the contents of a file as a string.</p> <pre><code>p = Path('example_file.txt')\ncontent = p.read_text()\nprint(content)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#writing-to-a-file","title":"Writing to a File","text":"<p>Use the <code>write_text()</code> method to write a string to a file.</p> <pre><code>p = Path('example_file.txt')\np.write_text('Hello, world!')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#path-properties-and-methods","title":"Path Properties and Methods","text":""},{"location":"languages/python/libraries_frameworks/pathlib/#getting-the-name-stem-and-suffix","title":"Getting the Name, Stem, and Suffix","text":"<p>Use the <code>name</code>, <code>stem</code>, and <code>suffix</code> properties to get the name, stem, and suffix of a file.</p> <pre><code>p = Path('some_directory/some_file.txt')\nprint(p.name)    # Output: some_file.txt\nprint(p.stem)    # Output: some_file\nprint(p.suffix)  # Output: .txt\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#getting-the-parent-directory","title":"Getting the Parent Directory","text":"<p>Use the <code>parent</code> property to get the parent directory.</p> <pre><code>p = Path('some_directory/some_file.txt')\nprint(p.parent)  # Output: some_directory\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#resolving-paths","title":"Resolving Paths","text":"<p>Use the <code>resolve()</code> method to get the absolute path.</p> <pre><code>p = Path('some_directory/some_file.txt')\nprint(p.resolve())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#example-creating-a-directory-writing-a-file-and-cleaning-up","title":"Example: Creating a Directory, Writing a File, and Cleaning Up","text":"<pre><code>from pathlib import Path\n\n# Create a new directory\np = Path('example_dir')\np.mkdir()\n\n# Create and write to a new file\nfile_path = p / 'example_file.txt'\nfile_path.write_text('Hello, world!')\n\n# Read the file\ncontent = file_path.read_text()\nprint(content)\n\n# Remove the file and directory\nfile_path.unlink()\np.rmdir()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pathlib/#conclusion","title":"Conclusion","text":"<p>The <code>pathlib</code> package in Python provides a modern and intuitive way to work with filesystem paths. It offers a rich set of methods and properties to perform common path operations, making it a powerful alternative to the older <code>os.path</code> module. Understanding and utilizing <code>pathlib</code> can significantly simplify your file and directory handling tasks in Python.</p>"},{"location":"languages/python/libraries_frameworks/pickle/","title":"Python Pickle Module Report","text":"<p>The <code>pickle</code> module in Python is used for serializing and deserializing Python objects, also known as pickling and unpickling. This process converts a Python object into a byte stream, which can then be saved to a file or transferred over a network. The reverse process converts the byte stream back into a Python object. This report covers the <code>pickle</code> module's concepts, basic usage, and practical examples.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#introduction","title":"Introduction","text":"<p>The <code>pickle</code> module allows you to serialize (convert to a byte stream) and deserialize (reconstruct from a byte stream) Python objects. This is useful for saving objects to files or sending them over a network. It supports various types of Python objects, including custom classes.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/pickle/#pickling-objects","title":"Pickling Objects","text":"<p>To serialize an object, you use the <code>pickle.dump()</code> function, which writes the serialized object to a file or other file-like object.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-pickling-a-simple-object","title":"Example: Pickling a Simple Object","text":"<pre><code>import pickle\n\n# Sample data\ndata = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n# Serialize the object to a byte stream\nwith open('data.pkl', 'wb') as file:\n    pickle.dump(data, file)\n</code></pre> <p>In this example, the <code>data</code> dictionary is serialized and saved to a file named <code>data.pkl</code>.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#unpickling-objects","title":"Unpickling Objects","text":"<p>To deserialize an object, you use the <code>pickle.load()</code> function, which reads the serialized object from a file or other file-like object and reconstructs it.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-unpickling-a-simple-object","title":"Example: Unpickling a Simple Object","text":"<pre><code>import pickle\n\n# Deserialize the object from a byte stream\nwith open('data.pkl', 'rb') as file:\n    data = pickle.load(file)\n\nprint(data)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\n</code></pre> <p>In this example, the <code>data</code> dictionary is read from the <code>data.pkl</code> file and reconstructed.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#handling-file-io","title":"Handling File I/O","text":"<p>The <code>pickle</code> module works with file-like objects, allowing you to read from and write to files.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-pickling-and-unpickling-with-files","title":"Example: Pickling and Unpickling with Files","text":"<pre><code>import pickle\n\n# Sample data\ndata = [1, 2, 3, 4, 5]\n\n# Pickle the data to a file\nwith open('data_list.pkl', 'wb') as file:\n    pickle.dump(data, file)\n\n# Unpickle the data from the file\nwith open('data_list.pkl', 'rb') as file:\n    data_loaded = pickle.load(file)\n\nprint(data_loaded)  # Output: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pickle/#serialization-protocols","title":"Serialization Protocols","text":"<p>The <code>pickle</code> module supports multiple serialization protocols. The default protocol is version 3, but you can specify a different protocol when pickling objects.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-using-different-protocols","title":"Example: Using Different Protocols","text":"<pre><code>import pickle\n\n# Sample data\ndata = {'key': 'value'}\n\n# Serialize using protocol version 2\nwith open('data_v2.pkl', 'wb') as file:\n    pickle.dump(data, file, protocol=2)\n\n# Serialize using the highest protocol available\nwith open('data_latest.pkl', 'wb') as file:\n    pickle.dump(data, file, protocol=pickle.HIGHEST_PROTOCOL)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pickle/#error-handling","title":"Error Handling","text":"<p>When pickling and unpickling, various errors might occur, such as <code>FileNotFoundError</code>, <code>EOFError</code>, or <code>pickle.PicklingError</code>. It's good practice to handle these exceptions gracefully.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-error-handling","title":"Example: Error Handling","text":"<pre><code>import pickle\n\ntry:\n    with open('data.pkl', 'rb') as file:\n        data = pickle.load(file)\nexcept (FileNotFoundError, pickle.PickleError) as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pickle/#security-considerations","title":"Security Considerations","text":"<p>Deserializing data from untrusted sources can be insecure because it may execute arbitrary code. Be cautious when unpickling data from unknown or untrusted sources.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#example-secure-deserialization","title":"Example: Secure Deserialization","text":"<pre><code>import pickle\n\n# Unsafe: Don't use this with untrusted data\nwith open('unsafe_data.pkl', 'rb') as file:\n    data = pickle.load(file)\n</code></pre> <p>For secure deserialization, consider using safer serialization formats like JSON, or validate and sanitize data before processing.</p>"},{"location":"languages/python/libraries_frameworks/pickle/#best-practices","title":"Best Practices","text":"<ol> <li>Use Version Control for Protocols: Specify a protocol version when pickling to ensure compatibility between different versions of your program.</li> <li>Handle Exceptions: Gracefully handle exceptions related to file I/O and pickling errors to avoid crashing your program.</li> <li>Avoid Unpickling Untrusted Data: Be cautious with deserializing data from unknown sources to prevent security risks.</li> <li>Use Binary Mode for Files: Always open files in binary mode (<code>'wb'</code> for writing and <code>'rb'</code> for reading) when working with <code>pickle</code>.</li> <li>Consider Alternatives: For simple data structures, consider using other serialization formats like JSON if security and cross-language compatibility are important.</li> </ol>"},{"location":"languages/python/libraries_frameworks/pickle/#conclusion","title":"Conclusion","text":"<p>The <code>pickle</code> module in Python provides a convenient way to serialize and deserialize Python objects, enabling you to save and transfer complex data structures. By understanding its features and limitations, you can effectively use it for various applications while ensuring data integrity and security.</p> <p>For more information, refer to the Python Pickle documentation.</p>"},{"location":"languages/python/libraries_frameworks/pillow/","title":"Pillow Module in Python: A Comprehensive Guide","text":"<p>Pillow is a popular Python Imaging Library (PIL) fork that provides easy-to-use methods for opening, manipulating, and saving many different image file formats. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with Pillow.</p>"},{"location":"languages/python/libraries_frameworks/pillow/#introduction-to-pillow","title":"Introduction to Pillow","text":"<p>Pillow is an extensive library used for image processing tasks such as opening, manipulating, and saving images. It supports a wide variety of file formats and provides powerful image processing capabilities.</p> <p>Key features of Pillow: - Easy image manipulation - Extensive file format support - Image enhancement and filtering - Drawing capabilities - Metadata handling</p>"},{"location":"languages/python/libraries_frameworks/pillow/#installation","title":"Installation","text":"<p>To install Pillow, you can use pip:</p> <pre><code>pip install Pillow\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#opening-and-saving-images","title":"Opening and Saving Images","text":"<p>Opening and saving images are fundamental operations in Pillow.</p> <pre><code>from PIL import Image\n\n# Open an image file\nimg = Image.open(\"example.jpg\")\n\n# Display image\nimg.show()\n\n# Save the image to a different file\nimg.save(\"example_copy.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#basic-image-operations","title":"Basic Image Operations","text":""},{"location":"languages/python/libraries_frameworks/pillow/#resizing","title":"Resizing","text":"<p>Resizing an image changes its dimensions.</p> <pre><code># Resize an image\nresized_img = img.resize((200, 200))\n\n# Save the resized image\nresized_img.save(\"resized_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#cropping","title":"Cropping","text":"<p>Cropping an image involves cutting out a rectangular region.</p> <pre><code># Define the crop area (left, upper, right, lower)\ncrop_area = (100, 100, 300, 300)\n\n# Crop the image\ncropped_img = img.crop(crop_area)\n\n# Save the cropped image\ncropped_img.save(\"cropped_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#rotating","title":"Rotating","text":"<p>Rotating an image involves turning it by a specified number of degrees.</p> <pre><code># Rotate the image by 90 degrees\nrotated_img = img.rotate(90)\n\n# Save the rotated image\nrotated_img.save(\"rotated_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#flipping","title":"Flipping","text":"<p>Flipping an image can be horizontal or vertical.</p> <pre><code># Flip the image horizontally\nflipped_img = img.transpose(Image.FLIP_LEFT_RIGHT)\n\n# Save the flipped image\nflipped_img.save(\"flipped_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#image-enhancement","title":"Image Enhancement","text":"<p>Pillow provides tools to enhance images, such as adjusting brightness, contrast, and sharpness.</p> <pre><code>from PIL import ImageEnhance\n\n# Enhance brightness\nenhancer = ImageEnhance.Brightness(img)\nbright_img = enhancer.enhance(1.5)\nbright_img.save(\"bright_example.jpg\")\n\n# Enhance contrast\nenhancer = ImageEnhance.Contrast(img)\ncontrast_img = enhancer.enhance(1.5)\ncontrast_img.save(\"contrast_example.jpg\")\n\n# Enhance sharpness\nenhancer = ImageEnhance.Sharpness(img)\nsharp_img = enhancer.enhance(2.0)\nsharp_img.save(\"sharp_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#drawing-on-images","title":"Drawing on Images","text":"<p>You can draw shapes, text, and more on images using Pillow.</p> <pre><code>from PIL import ImageDraw, ImageFont\n\n# Create a drawing object\ndraw = ImageDraw.Draw(img)\n\n# Draw a rectangle\ndraw.rectangle([50, 50, 150, 150], outline=\"red\", width=5)\n\n# Draw text\nfont = ImageFont.truetype(\"arial.ttf\", 36)\ndraw.text((50, 200), \"Hello, World!\", fill=\"blue\", font=font)\n\n# Save the image with drawings\nimg.save(\"draw_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#working-with-image-metadata","title":"Working with Image Metadata","text":"<p>Pillow can handle image metadata such as EXIF data.</p> <pre><code># Access EXIF data\nexif_data = img._getexif()\nif exif_data:\n    for tag, value in exif_data.items():\n        print(f\"{tag}: {value}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#advanced-image-processing","title":"Advanced Image Processing","text":""},{"location":"languages/python/libraries_frameworks/pillow/#filtering","title":"Filtering","text":"<p>Filters can be applied to images for various effects.</p> <pre><code>from PIL import ImageFilter\n\n# Apply a blur filter\nblurred_img = img.filter(ImageFilter.BLUR)\nblurred_img.save(\"blurred_example.jpg\")\n\n# Apply an edge enhancement filter\nedge_enhanced_img = img.filter(ImageFilter.EDGE_ENHANCE)\nedge_enhanced_img.save(\"edge_enhanced_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#color-transforms","title":"Color Transforms","text":"<p>Color transforms include converting images to grayscale or changing color channels.</p> <pre><code># Convert to grayscale\ngrayscale_img = img.convert(\"L\")\ngrayscale_img.save(\"grayscale_example.jpg\")\n\n# Split image into RGB channels\nr, g, b = img.split()\n\n# Merge channels back into an image\nmerged_img = Image.merge(\"RGB\", (r, g, b))\nmerged_img.save(\"merged_example.jpg\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#handling-different-image-formats","title":"Handling Different Image Formats","text":"<p>Pillow supports a variety of image formats and allows for conversion between them.</p> <pre><code># Convert and save an image to PNG format\nimg.save(\"example.png\", \"PNG\")\n\n# Open a PNG image\npng_img = Image.open(\"example.png\")\n\n# Convert the PNG image to JPEG\npng_img.save(\"example_converted.jpg\", \"JPEG\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pillow/#conclusion","title":"Conclusion","text":"<p>Pillow is a powerful and flexible library for image processing in Python. Its comprehensive features make it suitable for a wide range of applications, from basic image manipulation to advanced image processing tasks. By mastering the core features and functionalities of Pillow, you can efficiently manage and process images with ease. This guide should serve as a solid foundation for building image-based applications using Pillow.</p>"},{"location":"languages/python/libraries_frameworks/plotly/","title":"Python Plotly Module Report","text":"<p><code>Plotly</code> is a versatile library for creating interactive, publication-quality graphs and visualizations in Python. It supports a wide range of chart types and is highly suitable for web-based visualizations.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#introduction","title":"Introduction","text":"<p><code>Plotly</code> is a graphing library that enables the creation of interactive, web-ready visualizations. It is highly flexible and supports a variety of chart types, including line charts, scatter plots, bar charts, and more. The library integrates well with data manipulation libraries such as Pandas and NumPy.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#installation","title":"Installation","text":"<p>To install <code>plotly</code>, use <code>pip</code>, Python\u2019s package installer:</p> <pre><code>pip install plotly\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/plotly/#creating-a-basic-plot","title":"Creating a Basic Plot","text":"<p><code>Plotly</code> provides a simple interface for creating basic plots. Below is an example of how to create a line chart.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-basic-line-chart","title":"Example: Basic Line Chart","text":"<pre><code>import plotly.graph_objects as go\n\n# Create a line chart\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17],\n    mode='lines+markers',\n    name='Line Chart'\n))\n\nfig.update_layout(\n    title='Basic Line Chart',\n    xaxis_title='X Axis',\n    yaxis_title='Y Axis'\n)\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#customizing-plots","title":"Customizing Plots","text":"<p><code>Plotly</code> allows extensive customization of plots, including layout, colors, and more.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-customized-line-chart","title":"Example: Customized Line Chart","text":"<pre><code>import plotly.graph_objects as go\n\n# Create a customized line chart\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17],\n    mode='lines+markers',\n    name='Customized Line Chart',\n    line=dict(color='royalblue', width=2),\n    marker=dict(size=8, color='red')\n))\n\nfig.update_layout(\n    title='Customized Line Chart',\n    xaxis_title='X Axis',\n    yaxis_title='Y Axis',\n    plot_bgcolor='lightgrey'\n)\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#advanced-visualization","title":"Advanced Visualization","text":""},{"location":"languages/python/libraries_frameworks/plotly/#3d-plots","title":"3D Plots","text":"<p><code>Plotly</code> supports 3D visualizations, which are useful for displaying complex datasets.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-3d-scatter-plot","title":"Example: 3D Scatter Plot","text":"<pre><code>import plotly.graph_objects as go\n\n# Create a 3D scatter plot\nfig = go.Figure(data=[go.Scatter3d(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17],\n    z=[5, 6, 2, 3],\n    mode='markers',\n    marker=dict(size=8, color='blue')\n)])\n\nfig.update_layout(\n    title='3D Scatter Plot',\n    scene=dict(\n        xaxis_title='X Axis',\n        yaxis_title='Y Axis',\n        zaxis_title='Z Axis'\n    )\n)\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#subplots","title":"Subplots","text":"<p><code>Plotly</code> allows you to create subplots, which can be useful for comparing multiple plots in a single figure.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-subplots","title":"Example: Subplots","text":"<pre><code>import plotly.subplots as sp\nimport plotly.graph_objects as go\n\n# Create subplots\nfig = sp.make_subplots(rows=1, cols=2, subplot_titles=('Plot 1', 'Plot 2'))\n\n# Add plots to subplots\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[10, 15, 13, 17], mode='lines+markers', name='Line 1'), row=1, col=1)\nfig.add_trace(go.Bar(x=['A', 'B', 'C', 'D'], y=[5, 10, 8, 6], name='Bar Chart'), row=1, col=2)\n\nfig.update_layout(title='Subplots Example')\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#interactive-dashboards","title":"Interactive Dashboards","text":"<p><code>Plotly</code> integrates with <code>Dash</code>, a framework for building interactive web applications.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-basic-dash-application","title":"Example: Basic Dash Application","text":"<pre><code># Install Dash using: pip install dash\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport plotly.graph_objects as go\n\n# Initialize the Dash app\napp = dash.Dash(__name__)\n\n# Create a simple plot\nfig = go.Figure(data=[go.Bar(x=[1, 2, 3], y=[4, 5, 6])])\n\n# Define the layout of the app\napp.layout = html.Div([\n    html.H1(\"Dash Application Example\"),\n    dcc.Graph(figure=fig)\n])\n\n# Run the app\nif __name__ == '__main__':\n    app.run_server(debug=True)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#integrating-with-other-libraries","title":"Integrating with Other Libraries","text":"<p><code>Plotly</code> integrates well with other scientific libraries like Pandas for data manipulation.</p>"},{"location":"languages/python/libraries_frameworks/plotly/#example-plotting-with-pandas-dataframe","title":"Example: Plotting with Pandas DataFrame","text":"<pre><code>import plotly.express as px\nimport pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({\n    'x': [1, 2, 3, 4],\n    'y': [10, 15, 13, 17],\n    'category': ['A', 'B', 'A', 'B']\n})\n\n# Create a scatter plot using Plotly Express\nfig = px.scatter(df, x='x', y='y', color='category', title='Scatter Plot from DataFrame')\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/plotly/#error-handling-and-debugging","title":"Error Handling and Debugging","text":"<p>Common issues may include incorrect data formats or missing dependencies. Use the following tips for debugging:</p> <ul> <li>Check Data Types: Ensure data is in the correct format and compatible with the plot types.</li> <li>Read Error Messages: Error messages often provide clues about what went wrong.</li> <li>Consult Documentation: Refer to the Plotly documentation for detailed information on function parameters and usage.</li> </ul>"},{"location":"languages/python/libraries_frameworks/plotly/#best-practices","title":"Best Practices","text":"<ol> <li>Optimize Performance: For large datasets, consider using sampling or data aggregation to improve performance.</li> <li>Use Clear Titles and Labels: Make sure plots have clear titles, axis labels, and legends to improve readability.</li> <li>Regularly Update Plotly: Keep <code>plotly</code> and related libraries updated to benefit from the latest features and fixes.</li> <li>Leverage Plotly Express: Use <code>plotly.express</code> for simpler and more concise code when creating common types of plots.</li> </ol>"},{"location":"languages/python/libraries_frameworks/plotly/#conclusion","title":"Conclusion","text":"<p><code>Plotly</code> is a powerful library for creating interactive and visually appealing plots in Python. It provides a rich set of features for both basic and advanced visualizations, making it a valuable tool for data analysis and presentation.</p> <p>For more information and detailed usage, refer to the Plotly documentation.</p>"},{"location":"languages/python/libraries_frameworks/psycopg2/","title":"Psycopg2 Module in Python: A Comprehensive Guide","text":"<p>Psycopg2 is a popular PostgreSQL adapter for Python. It is both efficient and feature-rich, making it the de facto standard for PostgreSQL access in Python. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with Psycopg2.</p>"},{"location":"languages/python/libraries_frameworks/psycopg2/#introduction-to-psycopg2","title":"Introduction to Psycopg2","text":"<p>Psycopg2 is designed to be a lightweight and efficient adapter for connecting to PostgreSQL databases from Python applications. It is highly compliant with the Python DB-API 2.0 specification and provides a robust set of features for working with PostgreSQL.</p> <p>Key features of Psycopg2: - Fully compliant with the Python DB-API 2.0 specification - Efficient handling of large datasets - Support for PostgreSQL-specific data types and operations - Connection pooling and asynchronous support - Support for server-side cursors and COPY operations</p>"},{"location":"languages/python/libraries_frameworks/psycopg2/#installation","title":"Installation","text":"<p>To install Psycopg2, you can use pip:</p> <pre><code>pip install psycopg2\n</code></pre> <p>For binary installation:</p> <pre><code>pip install psycopg2-binary\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#connecting-to-postgresql","title":"Connecting to PostgreSQL","text":"<p>To connect to a PostgreSQL database, you need the database connection parameters such as host, database name, user, and password.</p> <pre><code>import psycopg2\n\n# Connect to the PostgreSQL database\nconn = psycopg2.connect(\n    host=\"localhost\",\n    database=\"example_db\",\n    user=\"example_user\",\n    password=\"password\"\n)\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Close the cursor and connection\ncur.close()\nconn.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#basic-crud-operations","title":"Basic CRUD Operations","text":""},{"location":"languages/python/libraries_frameworks/psycopg2/#create","title":"Create","text":"<p>To insert data into a table:</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Execute a command: this creates a new table\ncur.execute('''\n    CREATE TABLE users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100),\n        age INTEGER\n    )\n''')\n\n# Insert data into the table\ncur.execute('''\n    INSERT INTO users (name, age) VALUES (%s, %s)\n''', (\"Alice\", 25))\n\n# Commit the transaction\nconn.commit()\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#read","title":"Read","text":"<p>To retrieve data from a table:</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Execute a command: retrieve all rows from the table\ncur.execute('SELECT * FROM users')\n\n# Fetch all rows from the executed query\nrows = cur.fetchall()\n\n# Print the rows\nfor row in rows:\n    print(row)\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#update","title":"Update","text":"<p>To update existing data:</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Update data in the table\ncur.execute('''\n    UPDATE users SET age = %s WHERE name = %s\n''', (26, \"Alice\"))\n\n# Commit the transaction\nconn.commit()\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#delete","title":"Delete","text":"<p>To delete data from a table:</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Delete data from the table\ncur.execute('''\n    DELETE FROM users WHERE name = %s\n''', (\"Alice\",))\n\n# Commit the transaction\nconn.commit()\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#executing-transactions","title":"Executing Transactions","text":"<p>Psycopg2 supports transactions, allowing you to commit or rollback changes as needed.</p> <pre><code>try:\n    # Start a new transaction\n    cur = conn.cursor()\n\n    # Execute commands\n    cur.execute(\"INSERT INTO users (name, age) VALUES (%s, %s)\", (\"Bob\", 30))\n    cur.execute(\"INSERT INTO users (name, age) VALUES (%s, %s)\", (\"Charlie\", 35))\n\n    # Commit the transaction\n    conn.commit()\nexcept Exception as e:\n    # Rollback the transaction on error\n    conn.rollback()\n    print(\"Transaction failed:\", e)\nfinally:\n    cur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#using-cursors","title":"Using Cursors","text":"<p>Cursors are used to interact with the database, allowing you to execute SQL commands and fetch results.</p> <pre><code># Create a new cursor\ncur = conn.cursor()\n\n# Execute a command\ncur.execute(\"SELECT * FROM users\")\n\n# Fetch a single row\nrow = cur.fetchone()\nprint(row)\n\n# Fetch multiple rows\nrows = cur.fetchmany(2)\nfor row in rows:\n    print(row)\n\n# Fetch all rows\nrows = cur.fetchall()\nfor row in rows:\n    print(row)\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#connection-pooling","title":"Connection Pooling","text":"<p>Connection pooling improves performance by reusing existing database connections.</p> <pre><code>from psycopg2 import pool\n\n# Create a connection pool\nconnection_pool = pool.SimpleConnectionPool(\n    1, 20,\n    host=\"localhost\",\n    database=\"example_db\",\n    user=\"example_user\",\n    password=\"password\"\n)\n\n# Get a connection from the pool\nconn = connection_pool.getconn()\n\n# Use the connection\ncur = conn.cursor()\ncur.execute(\"SELECT * FROM users\")\nrows = cur.fetchall()\nfor row in rows:\n    print(row)\ncur.close()\n\n# Return the connection to the pool\nconnection_pool.putconn(conn)\n\n# Close all connections in the pool\nconnection_pool.closeall()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#handling-binary-data","title":"Handling Binary Data","text":"<p>Psycopg2 supports working with binary data such as images and files.</p> <pre><code>from psycopg2 import Binary\n\n# Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Read binary data from a file\nwith open(\"image.png\", \"rb\") as f:\n    binary_data = f.read()\n\n# Insert binary data into the table\ncur.execute('''\n    INSERT INTO files (filename, data) VALUES (%s, %s)\n''', (\"image.png\", Binary(binary_data)))\n\n# Commit the transaction\nconn.commit()\n\n# Retrieve binary data from the table\ncur.execute('''\n    SELECT data FROM files WHERE filename = %s\n''', (\"image.png\",))\nbinary_data = cur.fetchone()[0]\n\n# Write binary data to a file\nwith open(\"output_image.png\", \"wb\") as f:\n    f.write(binary_data)\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#error-handling","title":"Error Handling","text":"<p>Psycopg2 provides comprehensive error handling for database operations.</p> <pre><code>import psycopg2\n\ntry:\n    # Execute a command that will fail\n    cur.execute(\"INSERT INTO users (name, age) VALUES (%s, %s)\", (\"Alice\", \"twenty-five\"))\nexcept psycopg2.DatabaseError as e:\n    print(\"Database error:\", e)\nexcept psycopg2.IntegrityError as e:\n    print(\"Integrity error:\", e)\nfinally:\n    cur.close()\n    conn.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/psycopg2/#copy-command","title":"Copy Command","text":"<p>The <code>COPY</code> command is used for efficient bulk data transfer.</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Copy data from a file to a table\nwith open(\"data.csv\", \"r\") as f:\n    cur.copy_from(f, \"users\", sep=\",\")\n\n# Commit the transaction\nconn.commit()\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#asynchronous-support","title":"Asynchronous Support","text":"<p>Psycopg2 supports asynchronous operations for improved performance.</p> <pre><code>import psycopg2.extras\n\n# Create an asynchronous connection\nconn = psycopg2.connect(dsn, async_=1)\n\n# Use a cursor for asynchronous operations\ncur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\ncur.execute(\"SELECT * FROM users\")\nconn.poll()\n\nwhile conn.notifies:\n    notify = conn.notifies.pop()\n    print(\"Received notification:\", notify.payload)\n\n# Close the cursor and connection\ncur.close()\nconn.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#large-objects","title":"Large Objects","text":"<p>Psycopg2 supports handling large objects (LOBs) such as large text or binary files.</p> <pre><code># Open a cursor to perform database operations\ncur = conn.cursor()\n\n# Create a new large object\noid = cur.lo_creat()\n\n# Open the large object for writing\nlo = cur.lo_open(oid, psycopg2.LARGE_OBJECT_WRITE)\n\n# Write data to the large object\nlo.write(\"This is a large object\")\n\n# Close the large object\nlo.close()\n\n# Commit the transaction\nconn.commit()\n\n# Open the large object for reading\nlo = cur.lo_open(oid, psycopg2.LARGE_OBJECT_READ)\n\n# Read data from the large object\ndata = lo.read()\n\n# Close the large object\nlo.close()\n\n# Close the cursor\ncur.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/psycopg2/#conclusion","title":"Conclusion","text":"<p>Psycopg2 is a powerful and efficient adapter for PostgreSQL, providing comprehensive tools for database access and management in Python. Its support for advanced features such as connection pooling, asynchronous operations, and large objects makes it suitable for a wide range of applications. By mastering the core features and functionalities of Psycopg2, you can efficiently manage PostgreSQL databases and perform complex operations with ease. This guide should serve as a solid foundation for building database-driven applications using Psycopg2.</p>"},{"location":"languages/python/libraries_frameworks/py2neo/","title":"Py2neo Module in Python: A Comprehensive Guide","text":"<p>Py2neo is a client library and comprehensive toolkit for working with Neo4j from within Python applications and from the command line. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with Py2neo.</p>"},{"location":"languages/python/libraries_frameworks/py2neo/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction to Py2neo</li> <li>Installation</li> <li>Connecting to Neo4j</li> <li>Basic CRUD Operations<ul> <li>Create</li> <li>Read</li> <li>Update</li> <li>Delete</li> </ul> </li> <li>Working with Nodes</li> <li>Working with Relationships</li> <li>Cypher Queries</li> <li>Graph Data Modeling</li> <li>Transactions</li> <li>Advanced Features<ul> <li>Graph Algorithms</li> <li>Batch Operations</li> <li>Full-Text Search</li> </ul> </li> <li>Error Handling</li> <li>Conclusion</li> </ol>"},{"location":"languages/python/libraries_frameworks/py2neo/#introduction-to-py2neo","title":"Introduction to Py2neo","text":"<p>Py2neo is designed to be a simple and intuitive library for working with Neo4j, a popular graph database. It offers both high-level and low-level APIs, making it suitable for a wide range of use cases from basic CRUD operations to advanced graph algorithms.</p> <p>Key features of Py2neo: - Easy integration with Neo4j - Object-oriented approach to graph data - Support for Cypher queries - Transactions and batch operations - Comprehensive error handling</p>"},{"location":"languages/python/libraries_frameworks/py2neo/#installation","title":"Installation","text":"<p>To install Py2neo, you can use pip:</p> <pre><code>pip install py2neo\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#connecting-to-neo4j","title":"Connecting to Neo4j","text":"<p>To connect to a Neo4j database, you need the database URL and authentication credentials.</p> <pre><code>from py2neo import Graph\n\n# Connect to the Neo4j database\ngraph = Graph(\"bolt://localhost:7687\", auth=(\"neo4j\", \"password\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#basic-crud-operations","title":"Basic CRUD Operations","text":""},{"location":"languages/python/libraries_frameworks/py2neo/#create","title":"Create","text":"<p>To create nodes and relationships in the database:</p> <pre><code>from py2neo import Node, Relationship\n\n# Create a node\nalice = Node(\"Person\", name=\"Alice\", age=25)\ngraph.create(alice)\n\n# Create a relationship\nbob = Node(\"Person\", name=\"Bob\", age=30)\nfriendship = Relationship(alice, \"FRIEND\", bob)\ngraph.create(friendship)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#read","title":"Read","text":"<p>To read data from the database:</p> <pre><code># Find a node by property\nalice = graph.nodes.match(\"Person\", name=\"Alice\").first()\nprint(alice)\n\n# Find a relationship\nfriendship = graph.match_one(nodes=(alice, bob), r_type=\"FRIEND\")\nprint(friendship)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#update","title":"Update","text":"<p>To update nodes and relationships:</p> <pre><code># Update a node's properties\nalice[\"age\"] = 26\ngraph.push(alice)\n\n# Update a relationship's properties\nfriendship[\"since\"] = 2020\ngraph.push(friendship)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#delete","title":"Delete","text":"<p>To delete nodes and relationships:</p> <pre><code># Delete a relationship\ngraph.separate(friendship)\n\n# Delete a node\ngraph.delete(alice)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#working-with-nodes","title":"Working with Nodes","text":"<p>Nodes represent entities in a graph.</p> <pre><code># Create a node\nalice = Node(\"Person\", name=\"Alice\", age=25)\n\n# Access node properties\nprint(alice[\"name\"])\nprint(alice[\"age\"])\n\n# Set node properties\nalice[\"age\"] = 26\n\n# Push changes to the database\ngraph.push(alice)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#working-with-relationships","title":"Working with Relationships","text":"<p>Relationships connect nodes and can have properties.</p> <pre><code># Create a relationship\nfriendship = Relationship(alice, \"FRIEND\", bob, since=2020)\n\n# Access relationship properties\nprint(friendship[\"since\"])\n\n# Set relationship properties\nfriendship[\"since\"] = 2019\n\n# Push changes to the database\ngraph.push(friendship)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#cypher-queries","title":"Cypher Queries","text":"<p>Cypher is the query language for Neo4j.</p> <pre><code># Run a Cypher query\nresult = graph.run(\"MATCH (n:Person) RETURN n.name, n.age\")\n\n# Iterate over the result\nfor record in result:\n    print(record[\"n.name\"], record[\"n.age\"])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#graph-data-modeling","title":"Graph Data Modeling","text":"<p>Define models for nodes and relationships.</p> <pre><code>from py2neo.ogm import GraphObject, Property, RelatedTo\n\nclass Person(GraphObject):\n    __primarykey__ = \"name\"\n\n    name = Property()\n    age = Property()\n    friends = RelatedTo(\"Person\", \"FRIEND\")\n\n# Create a person\nalice = Person()\nalice.name = \"Alice\"\nalice.age = 25\n\n# Create a friend relationship\nbob = Person()\nbob.name = \"Bob\"\nalice.friends.add(bob)\n\n# Push to the database\ngraph.push(alice)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#transactions","title":"Transactions","text":"<p>Manage multiple operations in a single transaction.</p> <pre><code>with graph.begin() as tx:\n    alice = Node(\"Person\", name=\"Alice\", age=25)\n    bob = Node(\"Person\", name=\"Bob\", age=30)\n    friendship = Relationship(alice, \"FRIEND\", bob)\n    tx.create(alice)\n    tx.create(bob)\n    tx.create(friendship)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/py2neo/#graph-algorithms","title":"Graph Algorithms","text":"<p>Use built-in graph algorithms.</p> <pre><code># Example: PageRank\nresult = graph.run(\"CALL algo.pageRank.stream('Person', 'FRIEND', {}) YIELD nodeId, score RETURN nodeId, score\")\nfor record in result:\n    print(record)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#batch-operations","title":"Batch Operations","text":"<p>Perform batch operations for efficiency.</p> <pre><code>from py2neo.bulk import create_nodes, create_relationships\n\n# Batch create nodes\ncreate_nodes(graph.auto(), [\n    {\"name\": \"Alice\", \"age\": 25},\n    {\"name\": \"Bob\", \"age\": 30}\n], labels={\"Person\"})\n\n# Batch create relationships\ncreate_relationships(graph.auto(), [\n    (alice.identity, \"FRIEND\", bob.identity)\n], types={\"FRIEND\"})\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#full-text-search","title":"Full-Text Search","text":"<p>Use full-text indexes for efficient search.</p> <pre><code># Create a full-text index\ngraph.run(\"CALL db.index.fulltext.createNodeIndex('persons', ['Person'], ['name', 'age'])\")\n\n# Search using the full-text index\nresult = graph.run(\"CALL db.index.fulltext.queryNodes('persons', 'Alice') YIELD node RETURN node\")\nfor record in result:\n    print(record)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#error-handling","title":"Error Handling","text":"<p>Handle errors gracefully.</p> <pre><code>from py2neo.database import ClientError\n\ntry:\n    # Example operation that might fail\n    graph.run(\"CREATE (a:Person {name: 'Alice', age: -25})\")\nexcept ClientError as e:\n    print(\"An error occurred:\", e)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/py2neo/#conclusion","title":"Conclusion","text":"<p>Py2neo is a powerful and flexible library for interacting with Neo4j from Python. Its object-oriented approach and support for Cypher queries make it easy to work with graph data. By mastering the core features and functionalities of Py2neo, you can efficiently manage graph databases and perform complex operations with ease. This guide should serve as a solid foundation for building graph-based applications using Py2neo.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/","title":"Python pyaudio Module: A Comprehensive Guide","text":"<p>The <code>pyaudio</code> module provides Python bindings for PortAudio, a cross-platform library for audio I/O. It allows you to work with audio data, including recording and playback of sound. This guide provides a detailed overview of the <code>pyaudio</code> module, including installation, basic usage, and examples.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#introduction-to-pyaudio","title":"Introduction to pyaudio","text":"<p><code>pyaudio</code> is a Python library that provides an easy interface to PortAudio, allowing you to work with audio input and output. It supports a variety of audio formats and provides functions for recording and playing back audio data.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#installation","title":"Installation","text":"<p>To use <code>pyaudio</code>, you need to install the module via pip.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#installing-pyaudio","title":"Installing pyaudio","text":"<pre><code>pip install pyaudio\n</code></pre> <p>If you encounter issues installing <code>pyaudio</code>, make sure you have the required development libraries installed. On some systems, you might need to install PortAudio separately.</p> <ul> <li>Windows: You can download pre-built binaries from PyPI.</li> <li>macOS: You can use Homebrew to install PortAudio:</li> </ul> <pre><code>brew install portaudio\n</code></pre> <ul> <li>Linux: Install PortAudio using your package manager. For example, on Ubuntu:</li> </ul> <pre><code>sudo apt-get install libportaudio2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#basic-usage","title":"Basic Usage","text":"<p><code>pyaudio</code> provides interfaces for working with audio streams, including opening, recording, and playing audio.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#importing-pyaudio","title":"Importing pyaudio","text":"<pre><code>import pyaudio\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#recording-audio","title":"Recording Audio","text":"<p>You can record audio by opening a stream with <code>pyaudio</code> and capturing audio data.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#basic-recording-example","title":"Basic Recording Example","text":"<pre><code>import pyaudio\nimport wave\n\n# Parameters for recording\nFORMAT = pyaudio.paInt16  # Audio format (16-bit PCM)\nCHANNELS = 1              # Number of audio channels (1 for mono, 2 for stereo)\nRATE = 44100              # Sampling rate (samples per second)\nCHUNK = 1024              # Chunk size (number of audio frames per buffer)\nRECORD_SECONDS = 5        # Duration of recording (in seconds)\nWAVE_OUTPUT_FILENAME = \"output.wav\"  # Output file name\n\naudio = pyaudio.PyAudio()\n\n# Open a new stream\nstream = audio.open(format=FORMAT, channels=CHANNELS,\n                    rate=RATE, input=True,\n                    frames_per_buffer=CHUNK)\n\nprint(\"Recording...\")\n\nframes = []\n\n# Record audio data\nfor i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):\n    data = stream.read(CHUNK)\n    frames.append(data)\n\nprint(\"Recording finished.\")\n\n# Stop and close the stream\nstream.stop_stream()\nstream.close()\naudio.terminate()\n\n# Save the recorded audio data to a file\nwave_file = wave.open(WAVE_OUTPUT_FILENAME, 'wb')\nwave_file.setnchannels(CHANNELS)\nwave_file.setsampwidth(audio.get_sample_size(FORMAT))\nwave_file.setframerate(RATE)\nwave_file.writeframes(b''.join(frames))\nwave_file.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#playing-audio","title":"Playing Audio","text":"<p>You can play audio by opening a stream for output and writing audio data to it.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#basic-playback-example","title":"Basic Playback Example","text":"<pre><code>import pyaudio\nimport wave\n\n# Parameters for playback\nCHUNK = 1024  # Chunk size\n\n# Open the audio file\nwf = wave.open('output.wav', 'rb')\n\naudio = pyaudio.PyAudio()\n\n# Open a new stream for playback\nstream = audio.open(format=audio.get_format_from_width(wf.getsampwidth()),\n                    channels=wf.getnchannels(),\n                    rate=wf.getframerate(),\n                    output=True)\n\nprint(\"Playing...\")\n\n# Read and play audio data\ndata = wf.readframes(CHUNK)\nwhile data:\n    stream.write(data)\n    data = wf.readframes(CHUNK)\n\nprint(\"Playback finished.\")\n\n# Stop and close the stream\nstream.stop_stream()\nstream.close()\naudio.terminate()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#streaming-audio","title":"Streaming Audio","text":"<p><code>pyaudio</code> also supports real-time audio streaming, allowing you to process and handle audio data on-the-fly.</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#streaming-example","title":"Streaming Example","text":"<pre><code>import pyaudio\n\n# Parameters for streaming\nFORMAT = pyaudio.paInt16\nCHANNELS = 1\nRATE = 44100\nCHUNK = 1024\n\naudio = pyaudio.PyAudio()\n\n# Open a new stream for input and output\nstream = audio.open(format=FORMAT, channels=CHANNELS,\n                    rate=RATE, input=True, output=True,\n                    frames_per_buffer=CHUNK)\n\nprint(\"Streaming...\")\n\ntry:\n    while True:\n        data = stream.read(CHUNK)\n        stream.write(data)\nexcept KeyboardInterrupt:\n    print(\"Streaming stopped.\")\n\n# Stop and close the stream\nstream.stop_stream()\nstream.close()\naudio.terminate()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#error-handling","title":"Error Handling","text":"<p>Handling errors is crucial for robust audio applications. Here\u2019s how you can handle common errors:</p>"},{"location":"languages/python/libraries_frameworks/pyaudio/#handling-errors","title":"Handling Errors","text":"<pre><code>import pyaudio\nimport wave\nimport sys\n\ntry:\n    audio = pyaudio.PyAudio()\n    # Example: Open a stream (replace with your code)\n    stream = audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True)\n    # More code here...\nexcept Exception as e:\n    print(f\"An error occurred: {e}\", file=sys.stderr)\nfinally:\n    if 'stream' in locals() and stream.is_active():\n        stream.stop_stream()\n        stream.close()\n    if 'audio' in locals():\n        audio.terminate()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyaudio/#conclusion","title":"Conclusion","text":"<p>The <code>pyaudio</code> module provides a versatile and powerful way to work with audio in Python. With its support for recording, playing, and streaming audio, it is suitable for a variety of audio processing applications. By following the examples and guidelines provided in this report, you should be able to integrate <code>pyaudio</code> into your projects effectively.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/","title":"Python <code>pyautogui</code> Module: Detailed Overview and Examples","text":"<p>The <code>pyautogui</code> module is a Python library that provides functions for automating interactions with the GUI (Graphical User Interface). It allows you to control the mouse and keyboard, take screenshots, and perform various other automation tasks. This is particularly useful for creating scripts that interact with applications and perform repetitive tasks.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#installing-pyautogui","title":"Installing <code>pyautogui</code>","text":"<p>You can install <code>pyautogui</code> using pip:</p> <pre><code>pip install pyautogui\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#1-mouse-control","title":"1. Mouse Control","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguimovetox-y-duration0","title":"<code>pyautogui.moveTo(x, y, duration=0)</code>","text":"<p>Moves the mouse to the specified <code>(x, y)</code> coordinates. The <code>duration</code> parameter specifies how long the movement should take.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example","title":"Example","text":"<pre><code>import pyautogui\n\n# Move the mouse to coordinates (100, 200) in 1 second\npyautogui.moveTo(100, 200, duration=1)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguiclickxnone-ynone-clicks1-interval0-buttonleft","title":"<code>pyautogui.click(x=None, y=None, clicks=1, interval=0, button='left')</code>","text":"<p>Simulates a mouse click at the specified <code>(x, y)</code> coordinates. You can also specify the number of clicks, interval between clicks, and which mouse button to use.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_1","title":"Example","text":"<pre><code>import pyautogui\n\n# Click at the coordinates (300, 400)\npyautogui.click(300, 400)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguidoubleclickxnone-ynone","title":"<code>pyautogui.doubleClick(x=None, y=None)</code>","text":"<p>Simulates a double-click at the specified <code>(x, y)</code> coordinates.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_2","title":"Example","text":"<pre><code>import pyautogui\n\n# Double-click at the coordinates (500, 600)\npyautogui.doubleClick(500, 600)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguirightclickxnone-ynone","title":"<code>pyautogui.rightClick(x=None, y=None)</code>","text":"<p>Simulates a right-click at the specified <code>(x, y)</code> coordinates.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_3","title":"Example","text":"<pre><code>import pyautogui\n\n# Right-click at the coordinates (700, 800)\npyautogui.rightClick(700, 800)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#2-keyboard-control","title":"2. Keyboard Control","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguitypewritemessage-interval00","title":"<code>pyautogui.typewrite(message, interval=0.0)</code>","text":"<p>Types the specified <code>message</code> string with an optional delay between each keystroke.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_4","title":"Example","text":"<pre><code>import pyautogui\n\n# Type \"Hello, World!\" with a 0.1-second interval between keystrokes\npyautogui.typewrite(\"Hello, World!\", interval=0.1)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguipresskey","title":"<code>pyautogui.press(key)</code>","text":"<p>Simulates pressing a single key.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_5","title":"Example","text":"<pre><code>import pyautogui\n\n# Press the \"enter\" key\npyautogui.press(\"enter\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguihotkeykeys","title":"<code>pyautogui.hotkey(*keys)</code>","text":"<p>Simulates pressing multiple keys simultaneously.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_6","title":"Example","text":"<pre><code>import pyautogui\n\n# Simulate pressing \"ctrl\" + \"s\" (Save command)\npyautogui.hotkey(\"ctrl\", \"s\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#3-screenshots","title":"3. Screenshots","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguiscreenshotimagefilenamenone-regionnone","title":"<code>pyautogui.screenshot(imageFilename=None, region=None)</code>","text":"<p>Takes a screenshot of the entire screen or a specified <code>region</code>. If <code>imageFilename</code> is provided, the screenshot is saved to that file.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_7","title":"Example","text":"<pre><code>import pyautogui\n\n# Take a screenshot of the entire screen and save it as \"screenshot.png\"\npyautogui.screenshot(\"screenshot.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguiscreenshotregionx-y-width-height","title":"<code>pyautogui.screenshot(region=(x, y, width, height))</code>","text":"<p>Takes a screenshot of a specified <code>region</code> of the screen.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_8","title":"Example","text":"<pre><code>import pyautogui\n\n# Take a screenshot of a region (100, 100, 500, 400)\npyautogui.screenshot(\"screenshot_region.png\", region=(100, 100, 500, 400))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#4-screen-position","title":"4. Screen Position","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguiposition","title":"<code>pyautogui.position()</code>","text":"<p>Returns the current mouse cursor position as a tuple <code>(x, y)</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_9","title":"Example","text":"<pre><code>import pyautogui\n\n# Print the current mouse position\nprint(pyautogui.position())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#5-screen-size","title":"5. Screen Size","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguisize","title":"<code>pyautogui.size()</code>","text":"<p>Returns the screen resolution as a tuple <code>(width, height)</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_10","title":"Example","text":"<pre><code>import pyautogui\n\n# Print the screen size\nprint(pyautogui.size())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#6-image-recognition","title":"6. Image Recognition","text":""},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguilocateonscreenimage","title":"<code>pyautogui.locateOnScreen(image)</code>","text":"<p>Searches for the specified <code>image</code> on the screen and returns the position if found.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_11","title":"Example","text":"<pre><code>import pyautogui\n\n# Locate an image on the screen\nposition = pyautogui.locateOnScreen(\"button.png\")\nprint(position)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#pyautoguicenterregion","title":"<code>pyautogui.center(region)</code>","text":"<p>Returns the center coordinates of the specified <code>region</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_12","title":"Example","text":"<pre><code>import pyautogui\n\n# Find the center of a region\nregion = pyautogui.locateOnScreen(\"button.png\")\nif region:\n    center = pyautogui.center(region)\n    print(center)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#7-fail-safe","title":"7. Fail-Safe","text":"<p><code>pyautogui</code> includes a fail-safe feature that moves the mouse to a corner of the screen to stop the program if needed. This is enabled by default.</p>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example_13","title":"Example","text":"<pre><code>import pyautogui\n\n# Enable fail-safe (move mouse to top-left corner to stop)\npyautogui.FAILSAFE = True\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#example-automation-script","title":"Example Automation Script","text":"<p>Here\u2019s a complete example of an automation script that opens a text editor, types some text, and takes a screenshot:</p> <pre><code>import pyautogui\nimport time\n\n# Wait for 5 seconds to switch to the text editor\ntime.sleep(5)\n\n# Type text\npyautogui.typewrite(\"Hello, this is an automated message!\", interval=0.1)\n\n# Press Enter to create a new line\npyautogui.press(\"enter\")\n\n# Type more text\npyautogui.typewrite(\"This message was typed by PyAutoGUI.\", interval=0.1)\n\n# Take a screenshot of the entire screen\npyautogui.screenshot(\"automation_screenshot.png\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyautogui/#conclusion","title":"Conclusion","text":"<p>The <code>pyautogui</code> module provides a comprehensive suite of functions for automating GUI interactions, including mouse and keyboard control, screenshots, and image recognition. By leveraging these capabilities, you can automate repetitive tasks, perform testing, and interact with applications programmatically. Understanding and using <code>pyautogui</code> can significantly enhance productivity and streamline workflows that involve graphical user interfaces.</p>"},{"location":"languages/python/libraries_frameworks/pygame/","title":"Python pygame Module: A Comprehensive Guide","text":"<p>The <code>pygame</code> module is a popular library for creating games and multimedia applications in Python. It provides functionalities for handling graphics, sound, and user input. This guide covers the key features and functionalities of the <code>pygame</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#introduction-to-pygame","title":"Introduction to pygame","text":"<p><code>pygame</code> is a Python library used for writing video games. It provides modules for handling graphics, sound, and input devices, making it a comprehensive tool for game development and multimedia projects.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#installation","title":"Installation","text":"<p>To use <code>pygame</code>, you need to install it via pip. Install it with the following command:</p> <pre><code>pip install pygame\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#creating-a-window","title":"Creating a Window","text":"<p>To create a basic window using <code>pygame</code>, follow these steps:</p> <pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('My Game')\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Update display\n    pygame.display.flip()\n</code></pre> <p>This code initializes <code>pygame</code>, sets up a window, and runs a main loop that handles window events.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#drawing-shapes","title":"Drawing Shapes","text":"<p>You can draw basic shapes using <code>pygame</code>.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#drawing-a-rectangle","title":"Drawing a Rectangle","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Draw Rectangle')\n\n# Define colors\nRED = (255, 0, 0)\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw a rectangle\n    pygame.draw.rect(screen, RED, pygame.Rect(50, 50, 200, 100))\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#drawing-a-circle","title":"Drawing a Circle","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Draw Circle')\n\n# Define colors\nBLUE = (0, 0, 255)\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw a circle\n    pygame.draw.circle(screen, BLUE, (400, 300), 100)\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#handling-user-input","title":"Handling User Input","text":"<p>You can handle keyboard and mouse input with <code>pygame</code>.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#keyboard-input","title":"Keyboard Input","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Keyboard Input')\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n        elif event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_ESCAPE:\n                pygame.quit()\n                sys.exit()\n            elif event.key == pygame.K_SPACE:\n                print(\"Space bar pressed\")\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#mouse-input","title":"Mouse Input","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Mouse Input')\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n        elif event.type == pygame.MOUSEBUTTONDOWN:\n            x, y = event.pos\n            print(f\"Mouse clicked at ({x}, {y})\")\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#loading-and-displaying-images","title":"Loading and Displaying Images","text":"<p><code>pygame</code> can load and display images from files.</p> <pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Display Image')\n\n# Load an image\nimage = pygame.image.load('example.png')\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw the image\n    screen.blit(image, (100, 100))\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#playing-sounds-and-music","title":"Playing Sounds and Music","text":"<p><code>pygame</code> supports playing sound and music files.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#playing-a-sound","title":"Playing a Sound","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Play Sound')\n\n# Load a sound\nsound = pygame.mixer.Sound('example.wav')\nsound.play()\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#playing-music","title":"Playing Music","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Play Music')\n\n# Load and play music\npygame.mixer.music.load('example.mp3')\npygame.mixer.music.play(-1)  # Loop indefinitely\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#animating-objects","title":"Animating Objects","text":"<p>You can animate objects by updating their properties over time.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#simple-animation","title":"Simple Animation","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Animation')\n\n# Define colors\nRED = (255, 0, 0)\n\n# Define initial position\nx, y = 100, 100\nspeed_x, speed_y = 2, 2\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Move the rectangle\n    x += speed_x\n    y += speed_y\n\n    # Bounce off the edges\n    if x &lt; 0 or x &gt; 800 - 50:\n        speed_x = -speed_x\n    if y &lt; 0 or y &gt; 600 - 50:\n        speed_y = -speed_y\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw the rectangle\n    pygame.draw.rect(screen, RED, pygame.Rect(x, y, 50, 50))\n\n    # Update display\n    pygame.display.flip()\n    pygame.time.delay(10)  # Control the frame rate\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#using-sprites","title":"Using Sprites","text":"<p><code>pygame</code> provides a <code>Sprite</code> class for managing game objects.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#using-sprites_1","title":"Using Sprites","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Sprites')\n\n# Define a sprite class\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self):\n        super().__init__()\n        self.image = pygame.Surface((50, 50))\n        self.image.fill((0, 255, 0))\n        self.rect = self.image.get_rect()\n        self.rect.x = 100\n        self.rect.y = 100\n\n# Create a sprite group\nall_sprites = pygame.sprite.Group()\nsprite = MySprite()\nall_sprites.add(sprite)\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Update sprites\n    all_sprites.update()\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw sprites\n    all_sprites.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#handling-collisions","title":"Handling Collisions","text":"<p>Detect collisions between sprites using <code>pygame</code>'s collision detection functions.</p>"},{"location":"languages/python/libraries_frameworks/pygame/#collision-detection","title":"Collision Detection","text":"<pre><code>import pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption('Collision Detection')\n\n# Define a sprite class\nclass MySprite(pygame.sprite.Sprite):\n    def __init__(self, color, x, y):\n        super().__init__()\n        self.image = pygame.Surface((50, 50))\n        self.image.fill(color)\n        self.rect = self.image.get_rect\n\n()\n        self.rect.x = x\n        self.rect.y = y\n\n# Create sprite instances\nsprite1 = MySprite((255, 0, 0), 100, 100)\nsprite2 = MySprite((0, 0, 255), 200, 200)\nall_sprites = pygame.sprite.Group(sprite1, sprite2)\n\n# Main loop\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Check for collisions\n    if pygame.sprite.collide_rect(sprite1, sprite2):\n        print(\"Collision detected!\")\n\n    # Fill background\n    screen.fill((0, 0, 0))\n\n    # Draw sprites\n    all_sprites.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#error-handling","title":"Error Handling","text":"<p>Handling errors gracefully ensures your game runs smoothly.</p> <pre><code>import pygame\nimport sys\n\ntry:\n    # Initialize pygame\n    pygame.init()\n\n    # Set up display\n    screen = pygame.display.set_mode((800, 600))\n    pygame.display.set_caption('Error Handling')\n\n    # Main loop\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n\n        # Update display\n        pygame.display.flip()\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pygame/#conclusion","title":"Conclusion","text":"<p>The <code>pygame</code> module is a versatile library for game development and multimedia applications. It offers features for window management, graphics rendering, sound playback, and handling user input. With these tools, you can create interactive games and multimedia applications in Python.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/","title":"Python pyglet Module: A Comprehensive Guide","text":"<p>The <code>pyglet</code> module is a powerful library for creating games and multimedia applications in Python. It supports windowing, user input, OpenGL graphics, and audio playback. This guide covers the key features and functionalities of the <code>pyglet</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#introduction-to-pyglet","title":"Introduction to pyglet","text":"<p><code>pyglet</code> is a Python library designed for creating games and multimedia applications. It provides tools for window management, graphics rendering, audio playback, and handling user input, making it a versatile tool for developing interactive applications.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#installation","title":"Installation","text":"<p>To use <code>pyglet</code>, you need to install it via pip. Install it with the following command:</p> <pre><code>pip install pyglet\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#creating-a-window","title":"Creating a Window","text":"<p>To create a basic window using <code>pyglet</code>, follow these steps:</p> <pre><code>import pyglet\n\n# Create a window\nwindow = pyglet.window.Window(width=800, height=600, caption='My Window')\n\n@window.event\ndef on_draw():\n    window.clear()\n\n# Run the application\npyglet.app.run()\n</code></pre> <p>This code initializes a window with a specified width, height, and caption. The <code>on_draw</code> event handler is used to clear the window each time it is redrawn.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#drawing-shapes","title":"Drawing Shapes","text":"<p>You can draw basic shapes using <code>pyglet</code>'s <code>pyglet.graphics</code> module.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#drawing-a-rectangle","title":"Drawing a Rectangle","text":"<pre><code>import pyglet\n\n# Create a window\nwindow = pyglet.window.Window()\n\n@window.event\ndef on_draw():\n    window.clear()\n    # Draw a rectangle\n    pyglet.graphics.draw(4, pyglet.gl.GL_QUADS,\n        ('v2i', (100, 100, 200, 100, 200, 200, 100, 200))\n    )\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#drawing-a-circle","title":"Drawing a Circle","text":"<p>For drawing more complex shapes like circles, you can use the <code>pyglet.shapes</code> module.</p> <pre><code>import pyglet\nfrom pyglet.shapes import Circle\n\n# Create a window\nwindow = pyglet.window.Window()\n\n# Create a circle\ncircle = Circle(x=200, y=200, radius=100, color=(50, 225, 30))\n\n@window.event\ndef on_draw():\n    window.clear()\n    circle.draw()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#handling-user-input","title":"Handling User Input","text":"<p><code>pyglet</code> allows you to handle keyboard and mouse input.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#keyboard-input","title":"Keyboard Input","text":"<pre><code>import pyglet\n\n# Create a window\nwindow = pyglet.window.Window()\n\n@window.event\ndef on_key_press(symbol, modifiers):\n    if symbol == pyglet.window.key.ESCAPE:\n        pyglet.app.exit()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#mouse-input","title":"Mouse Input","text":"<pre><code>import pyglet\n\n# Create a window\nwindow = pyglet.window.Window()\n\n@window.event\ndef on_mouse_press(x, y, button, modifiers):\n    print(f\"Mouse clicked at ({x}, {y})\")\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#loading-and-displaying-images","title":"Loading and Displaying Images","text":"<p><code>pyglet</code> can load and display images from files.</p> <pre><code>import pyglet\n\n# Create a window\nwindow = pyglet.window.Window()\n\n# Load an image\nimage = pyglet.image.load('example.png')\nsprite = pyglet.sprite.Sprite(image)\n\n@window.event\ndef on_draw():\n    window.clear()\n    sprite.draw()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#playing-sounds-and-music","title":"Playing Sounds and Music","text":"<p><code>pyglet</code> supports playing sounds and music files.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#playing-a-sound","title":"Playing a Sound","text":"<pre><code>import pyglet\n\n# Load a sound\nsound = pyglet.media.load('example.wav', streaming=False)\n\n# Play the sound\nsound.play()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#playing-music","title":"Playing Music","text":"<pre><code>import pyglet\n\n# Load a music file\nmusic = pyglet.media.load('example.mp3', streaming=False)\n\n# Play the music\nmusic.play()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#using-opengl-with-pyglet","title":"Using OpenGL with pyglet","text":"<p><code>pyglet</code> integrates well with OpenGL for advanced graphics rendering.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#setting-up-opengl","title":"Setting Up OpenGL","text":"<pre><code>import pyglet\nfrom pyglet.gl import *\n\n# Create a window\nwindow = pyglet.window.Window()\n\n@window.event\ndef on_draw():\n    window.clear()\n\n    # Set up OpenGL\n    glBegin(GL_TRIANGLES)\n    glVertex2f(0, 0)\n    glVertex2f(100, 0)\n    glVertex2f(50, 100)\n    glEnd()\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#animating-objects","title":"Animating Objects","text":"<p>You can animate objects by updating their properties over time.</p>"},{"location":"languages/python/libraries_frameworks/pyglet/#simple-animation","title":"Simple Animation","text":"<pre><code>import pyglet\nfrom pyglet.shapes import Circle\n\n# Create a window\nwindow = pyglet.window.Window()\n\n# Create a circle\ncircle = Circle(x=100, y=100, radius=50, color=(50, 225, 30))\n\n@window.event\ndef on_draw():\n    window.clear()\n    circle.draw()\n\ndef update(dt):\n    circle.x += 10 * dt\n\n# Schedule updates\npyglet.clock.schedule_interval(update, 1/60.0)\n\n# Run the application\npyglet.app.run()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#error-handling","title":"Error Handling","text":"<p>Handling errors gracefully is important for robustness.</p> <pre><code>import pyglet\n\ntry:\n    # Create a window\n    window = pyglet.window.Window()\n\n    @window.event\n    def on_draw():\n        window.clear()\n\n    # Run the application\n    pyglet.app.run()\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyglet/#conclusion","title":"Conclusion","text":"<p>The <code>pyglet</code> module is a powerful tool for creating multimedia applications in Python. It supports windowing, drawing shapes, handling input, playing sounds, and integrating OpenGL for advanced graphics. By mastering these features, you can develop interactive games and multimedia applications with ease.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/","title":"Python PyInstaller Module Report","text":"<p><code>PyInstaller</code> is a popular Python library that bundles Python applications into standalone executables, under Windows, Linux, and macOS. It simplifies the process of distributing Python programs by including the Python interpreter and all necessary dependencies into a single package.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#introduction","title":"Introduction","text":"<p><code>PyInstaller</code> converts Python applications into standalone executables. This eliminates the need for end-users to have Python installed on their machines. It packages the Python interpreter, all required libraries, and the application code into a single executable file.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#installation","title":"Installation","text":"<p>You can install <code>PyInstaller</code> using <code>pip</code>, Python\u2019s package installer.</p> <pre><code>pip install pyinstaller\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/pyinstaller/#creating-a-simple-executable","title":"Creating a Simple Executable","text":"<p>To create an executable file, you use the <code>pyinstaller</code> command followed by the script you want to package.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-basic-executable","title":"Example: Basic Executable","text":"<p>Suppose you have a Python script named <code>hello.py</code>:</p> <pre><code># hello.py\nprint(\"Hello, world!\")\n</code></pre> <p>To create an executable, run:</p> <pre><code>pyinstaller hello.py\n</code></pre> <p>This command generates several files and directories, including:</p> <ul> <li><code>dist/hello</code> (the standalone executable)</li> <li><code>build/</code> (temporary files)</li> <li><code>hello.spec</code> (the spec file)</li> </ul> <p>You can find the executable in the <code>dist/</code> directory.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#including-additional-files","title":"Including Additional Files","text":"<p>If your application depends on additional files (e.g., data files, configuration files), you need to include them in the package.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-including-files","title":"Example: Including Files","text":"<p>Create a Python script, <code>app.py</code>:</p> <pre><code># app.py\nimport sys\n\ndef main():\n    with open('data.txt', 'r') as f:\n        print(f.read())\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Create a <code>data.txt</code> file with some content:</p> <pre><code>This is some sample data.\n</code></pre> <p>To include <code>data.txt</code> in the executable, use the <code>--add-data</code> option:</p> <pre><code>pyinstaller --add-data \"data.txt;.\" app.py\n</code></pre> <p>The <code>--add-data</code> option specifies additional files. The syntax is <code>\"source_path;destination_path\"</code>, where <code>.</code> denotes the current directory.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"languages/python/libraries_frameworks/pyinstaller/#spec-files","title":"Spec Files","text":"<p><code>PyInstaller</code> uses a spec file to customize the build process. This file is automatically generated when you first run <code>pyinstaller</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-editing-a-spec-file","title":"Example: Editing a Spec File","text":"<p>Edit the <code>hello.spec</code> file to include additional data or change configurations:</p> <pre><code># hello.spec\n# -*- mode: python ; coding: utf-8 -*-\n\nblock_cipher = None\n\na = Analysis(\n    ['hello.py'],\n    pathex=['/path/to/script'],\n    binaries=[],\n    datas=[('data.txt', '.')],  # Add data files\n    hiddenimports=[],\n    hookspath=[],\n    hooksconfig={},\n    cipher=block_cipher,\n    noarchive=False,\n)\n</code></pre> <p>Rebuild the executable using the spec file:</p> <pre><code>pyinstaller hello.spec\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#customizing-the-executable","title":"Customizing the Executable","text":"<p>You can customize the executable by setting options in the spec file or using command-line arguments.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-setting-an-icon","title":"Example: Setting an Icon","text":"<p>To set an icon for your executable, use the <code>--icon</code> option:</p> <pre><code>pyinstaller --icon=app.ico app.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#handling-hidden-imports","title":"Handling Hidden Imports","text":"<p>If your application dynamically imports modules, you might need to specify hidden imports.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-specifying-hidden-imports","title":"Example: Specifying Hidden Imports","text":"<pre><code>pyinstaller --hidden-import=module_name app.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#cross-platform-builds","title":"Cross-Platform Builds","text":"<p><code>PyInstaller</code> can create executables for different platforms. However, you typically need to build the executable on the target platform. For example, to create a Windows executable, you should run <code>PyInstaller</code> on Windows.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#example-building-for-windows-on-linux","title":"Example: Building for Windows on Linux","text":"<p>Use tools like Wine to build Windows executables from Linux:</p> <pre><code>wine pyinstaller hello.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#error-handling-and-debugging","title":"Error Handling and Debugging","text":"<p>Common issues during packaging include missing modules or incorrect paths. To troubleshoot, use the <code>--debug</code> option:</p> <pre><code>pyinstaller --debug=all app.py\n</code></pre> <p>Check the <code>build/</code> directory for logs and temporary files that might help in diagnosing issues.</p>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#best-practices","title":"Best Practices","text":"<ol> <li>Test on Target Platforms: Test the executable on the target platform to ensure compatibility.</li> <li>Use Virtual Environments: Build executables within a virtual environment to avoid dependency conflicts.</li> <li>Handle Large Files: For large files, consider using compression or splitting into multiple packages.</li> <li>Update Regularly: Keep <code>PyInstaller</code> and dependencies updated to avoid issues with newer Python versions or libraries.</li> <li>Review the Spec File: Customize and review the spec file to tailor the build process to your needs.</li> </ol>"},{"location":"languages/python/libraries_frameworks/pyinstaller/#conclusion","title":"Conclusion","text":"<p>The <code>PyInstaller</code> module provides a powerful and flexible way to package Python applications into standalone executables. By understanding its features and configurations, you can create executables that simplify distribution and ensure your applications run smoothly on various platforms.</p> <p>For more information and detailed usage, refer to the PyInstaller documentation.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/","title":"Python pyocr Module: A Comprehensive Guide","text":"<p>The <code>pyocr</code> module is a Python library for Optical Character Recognition (OCR). It provides a unified interface to several OCR engines, such as Tesseract and CuneiForm, allowing you to extract text from images and PDFs. This guide covers the key features and functionalities of the <code>pyocr</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#introduction-to-pyocr","title":"Introduction to pyocr","text":"<p><code>pyocr</code> is a library that provides an interface for various OCR engines, enabling you to extract text from images and other documents. It abstracts away the complexities of different OCR engines, providing a consistent API for text extraction.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#installation","title":"Installation","text":"<p>To use <code>pyocr</code>, you need to install it via pip. Additionally, you need to install the OCR engines it supports, such as Tesseract.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#installing-pyocr","title":"Installing pyocr","text":"<pre><code>pip install pyocr\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#installing-tesseract","title":"Installing Tesseract","text":"<p><code>pyocr</code> commonly uses Tesseract as its OCR engine. Install Tesseract by following the instructions for your operating system:</p> <ul> <li>Windows: Download and install the Tesseract executable from GitHub.</li> <li>macOS: Install using Homebrew:</li> </ul> <pre><code>brew install tesseract\n</code></pre> <ul> <li>Linux: Install using your package manager:</li> </ul> <pre><code>sudo apt-get install tesseract-ocr\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#basic-usage","title":"Basic Usage","text":"<p>Once installed, you can use <code>pyocr</code> to extract text from images.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#importing-pyocr","title":"Importing pyocr","text":"<pre><code>import pyocr\nimport pyocr.builders\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#getting-the-ocr-tool","title":"Getting the OCR Tool","text":"<p><code>pyocr</code> supports multiple OCR tools. You can get the OCR tool available on your system with the following code:</p> <pre><code>tools = pyocr.get_available_tools()\ntool = tools[0]  # Select the first available tool\nprint(f'Using OCR tool: {tool.get_name()}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#using-ocr-engines","title":"Using OCR Engines","text":"<p><code>pyocr</code> provides a unified interface to OCR engines. The following examples use Tesseract as the OCR engine.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#text-extraction-from-an-image","title":"Text Extraction from an Image","text":"<pre><code>from PIL import Image\nimport pyocr\nimport pyocr.builders\n\n# Get the OCR tool\ntools = pyocr.get_available_tools()\ntool = tools[0]\n\n# Open an image file\nimage = Image.open('sample_image.png')\n\n# Perform OCR\ntext = tool.image_to_string(image, builder=pyocr.builders.TextBuilder())\nprint('Extracted text:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#extracting-text-from-a-pdf","title":"Extracting Text from a PDF","text":"<pre><code>from pdf2image import convert_from_path\nimport pyocr\nimport pyocr.builders\n\n# Get the OCR tool\ntools = pyocr.get_available_tools()\ntool = tools[0]\n\n# Convert PDF pages to images\npages = convert_from_path('sample_document.pdf')\n\n# Perform OCR on each page\nfor page_number, page in enumerate(pages):\n    text = tool.image_to_string(page, builder=pyocr.builders.TextBuilder())\n    print(f'Page {page_number + 1} text:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#handling-different-file-formats","title":"Handling Different File Formats","text":"<p><code>pyocr</code> can handle various image formats, including PNG, JPEG, and TIFF. Make sure to install any necessary libraries for handling these formats, such as <code>Pillow</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#extracting-text-from-different-image-formats","title":"Extracting Text from Different Image Formats","text":"<pre><code>from PIL import Image\nimport pyocr\nimport pyocr.builders\n\n# Get the OCR tool\ntools = pyocr.get_available_tools()\ntool = tools[0]\n\n# Open different image formats\nimage_formats = ['sample_image.png', 'sample_image.jpg', 'sample_image.tiff']\nfor image_file in image_formats:\n    image = Image.open(image_file)\n    text = tool.image_to_string(image, builder=pyocr.builders.TextBuilder())\n    print(f'Text from {image_file}:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#error-handling","title":"Error Handling","text":"<p>Handling errors gracefully ensures the robustness of your OCR application.</p>"},{"location":"languages/python/libraries_frameworks/pyocr/#handling-common-errors","title":"Handling Common Errors","text":"<pre><code>import pyocr\nimport pyocr.builders\nfrom PIL import Image\nimport sys\n\ntry:\n    # Get the OCR tool\n    tools = pyocr.get_available_tools()\n    if not tools:\n        raise RuntimeError('No OCR tools found')\n    tool = tools[0]\n\n    # Open an image file\n    image = Image.open('sample_image.png')\n\n    # Perform OCR\n    text = tool.image_to_string(image, builder=pyocr.builders.TextBuilder())\n    print('Extracted text:', text)\n\nexcept FileNotFoundError as e:\n    print(f'File not found: {e}', file=sys.stderr)\nexcept RuntimeError as e:\n    print(f'Runtime error: {e}', file=sys.stderr)\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}', file=sys.stderr)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyocr/#conclusion","title":"Conclusion","text":"<p>The <code>pyocr</code> module provides a straightforward interface for Optical Character Recognition, allowing you to extract text from various file formats using different OCR engines. With the examples provided, you should be able to set up <code>pyocr</code>, perform OCR on images and PDFs, and handle common errors effectively. This module is a powerful tool for integrating OCR capabilities into your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/","title":"Python <code>pyquery</code> Module Report","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#introduction","title":"Introduction","text":"<p>The <code>pyquery</code> module is a Python library that allows you to make jQuery queries on XML documents. It provides a convenient API to interact with and manipulate HTML and XML data, leveraging a syntax similar to jQuery. This report details the features, installation, usage, and examples of the <code>pyquery</code> module.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#features","title":"Features","text":"<ol> <li>jQuery-like Syntax: Offers a familiar syntax for those accustomed to jQuery for web development.</li> <li>HTML/XML Parsing: Allows parsing and manipulation of HTML and XML documents.</li> <li>CSS Selectors: Supports querying elements using CSS selectors.</li> <li>Document Manipulation: Provides methods for modifying, adding, or removing elements from the document.</li> </ol>"},{"location":"languages/python/libraries_frameworks/pyquery/#installation","title":"Installation","text":"<p>To use the <code>pyquery</code> module, you need to install it via pip:</p> <pre><code>pip install pyquery\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyquery/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#importing-pyquery","title":"Importing PyQuery","text":"<pre><code>from pyquery import PyQuery as pq\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyquery/#example-parsing-html","title":"Example: Parsing HTML","text":"<pre><code>from pyquery import PyQuery as pq\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is an example.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse the HTML\ndoc = pq(html)\n\n# Select the title\ntitle = doc('title').text()\nprint(\"Title:\", title)  # Output: Example\n</code></pre> <p>In this example: - <code>pq(html)</code> parses the HTML string. - <code>doc('title').text()</code> selects the <code>&lt;title&gt;</code> element and retrieves its text content.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#querying-elements","title":"Querying Elements","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#example-selecting-elements","title":"Example: Selecting Elements","text":"<pre><code>from pyquery import PyQuery as pq\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n    &lt;div class=\"content\"&gt;\n        &lt;p class=\"text\"&gt;First paragraph.&lt;/p&gt;\n        &lt;p class=\"text\"&gt;Second paragraph.&lt;/p&gt;\n        &lt;p class=\"note\"&gt;A note paragraph.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse the HTML\ndoc = pq(html)\n\n# Select paragraphs with class \"text\"\ntexts = doc('p.text')\nfor text in texts:\n    print(text.text)  # Output: First paragraph. Second paragraph.\n</code></pre> <p>In this example: - <code>doc('p.text')</code> selects all <code>&lt;p&gt;</code> elements with the class <code>text</code>. - Iterating over the elements allows access to their text content.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#example-selecting-by-id","title":"Example: Selecting by ID","text":"<pre><code>from pyquery import PyQuery as pq\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n    &lt;div id=\"unique\"&gt;This is a unique div.&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse the HTML\ndoc = pq(html)\n\n# Select the div with id \"unique\"\nunique_div = doc('#unique')\nprint(unique_div.text())  # Output: This is a unique div.\n</code></pre> <p>In this example: - <code>doc('#unique')</code> selects the element with the ID <code>unique</code>.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#modifying-elements","title":"Modifying Elements","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#example-adding-and-removing-elements","title":"Example: Adding and Removing Elements","text":"<pre><code>from pyquery import PyQuery as pq\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n    &lt;ul id=\"list\"&gt;\n        &lt;li&gt;Item 1&lt;/li&gt;\n        &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse the HTML\ndoc = pq(html)\n\n# Add a new item to the list\ndoc('#list').append('&lt;li&gt;Item 3&lt;/li&gt;')\n\n# Remove the first item\ndoc('#list li').eq(0).remove()\n\nprint(doc.html())\n</code></pre> <p>In this example: - <code>doc('#list').append('&lt;li&gt;Item 3&lt;/li&gt;')</code> adds a new <code>&lt;li&gt;</code> element to the list. - <code>doc('#list li').eq(0).remove()</code> removes the first <code>&lt;li&gt;</code> element.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#working-with-attributes","title":"Working with Attributes","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#example-getting-and-setting-attributes","title":"Example: Getting and Setting Attributes","text":"<pre><code>from pyquery import PyQuery as pq\n\nhtml = \"\"\"\n&lt;html&gt;\n&lt;body&gt;\n    &lt;img src=\"image.jpg\" alt=\"A sample image\"/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Parse the HTML\ndoc = pq(html)\n\n# Get the 'src' attribute of the image\nsrc = doc('img').attr('src')\nprint(\"Image source:\", src)  # Output: image.jpg\n\n# Set a new 'alt' attribute for the image\ndoc('img').attr('alt', 'Updated description')\nprint(doc('img').attr('alt'))  # Output: Updated description\n</code></pre> <p>In this example: - <code>doc('img').attr('src')</code> retrieves the <code>src</code> attribute. - <code>doc('img').attr('alt', 'Updated description')</code> sets a new value for the <code>alt</code> attribute.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#advanced-usage","title":"Advanced Usage","text":""},{"location":"languages/python/libraries_frameworks/pyquery/#example-working-with-external-html","title":"Example: Working with External HTML","text":"<pre><code>from pyquery import PyQuery as pq\nimport requests\n\n# Fetch HTML content from a URL\nresponse = requests.get('https://example.com')\nhtml = response.content\n\n# Parse the HTML\ndoc = pq(html)\n\n# Extract and print the title of the page\ntitle = doc('title').text()\nprint(\"Title:\", title)\n</code></pre> <p>In this example: - <code>requests.get('https://example.com')</code> fetches HTML from a remote URL. - <code>pq(html)</code> parses the fetched HTML.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Implement error handling for network requests and HTML parsing.</li> <li>Performance: For large documents, be mindful of performance implications and consider optimizing queries.</li> <li>Security: Ensure proper handling of user-generated content to avoid security issues such as XSS (Cross-Site Scripting).</li> </ol>"},{"location":"languages/python/libraries_frameworks/pyquery/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Malformed HTML: Ensure the HTML is well-formed. Malformed HTML can lead to parsing errors.</li> <li>Attribute Handling: Be cautious with attributes that might have special characters or require escaping.</li> </ol>"},{"location":"languages/python/libraries_frameworks/pyquery/#conclusion","title":"Conclusion","text":"<p>The <code>pyquery</code> module offers a powerful and flexible way to parse and manipulate HTML and XML documents using a jQuery-like syntax. It supports a range of operations from basic querying to complex document manipulation. By leveraging <code>pyquery</code>, you can efficiently interact with web content and perform tasks similar to those handled by jQuery in a browser environment.</p>"},{"location":"languages/python/libraries_frameworks/pyquery/#references","title":"References","text":"<ul> <li>PyQuery Documentation - Official documentation for the <code>pyquery</code> module.</li> <li>jQuery Documentation - Reference for jQuery syntax and features, useful for understanding <code>pyquery</code> syntax.</li> </ul>"},{"location":"languages/python/libraries_frameworks/pyserial/","title":"PySerial Module in Python: A Comprehensive Guide","text":"<p>PySerial is a Python library that encapsulates access to serial ports, providing easy-to-use APIs to communicate with serial devices. This guide will cover the key features, functionalities, and provide detailed examples to help you get started with PySerial.</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#introduction-to-pyserial","title":"Introduction to PySerial","text":"<p>PySerial is designed to facilitate communication with serial devices from Python applications. It supports various serial port implementations and provides a consistent API for managing serial ports and performing read/write operations.</p> <p>Key features of PySerial: - Support for multiple platforms (Windows, Linux, macOS) - Easy-to-use API for serial communication - Configuration options for baud rate, parity, stop bits, and more - Timeout handling - Binary data support</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#installation","title":"Installation","text":"<p>To install PySerial, you can use pip:</p> <pre><code>pip install pyserial\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#opening-and-configuring-serial-ports","title":"Opening and Configuring Serial Ports","text":"<p>To open and configure a serial port, you need the port name and configuration parameters such as baud rate.</p> <pre><code>import serial\n\n# Open a serial port\nser = serial.Serial(\n    port='/dev/ttyUSB0',  # Replace with your serial port\n    baudrate=9600,\n    bytesize=serial.EIGHTBITS,\n    parity=serial.PARITY_NONE,\n    stopbits=serial.STOPBITS_ONE,\n    timeout=1\n)\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#reading-from-and-writing-to-serial-ports","title":"Reading from and Writing to Serial Ports","text":"<p>Reading from and writing to serial ports are fundamental operations in PySerial.</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#writing-data","title":"Writing Data","text":"<p>To write data to a serial port:</p> <pre><code># Open a serial port\nser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n# Write data to the serial port\nser.write(b'Hello, World!')\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#reading-data","title":"Reading Data","text":"<p>To read data from a serial port:</p> <pre><code># Open a serial port\nser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n# Read data from the serial port\ndata = ser.read(10)  # Read up to 10 bytes\nprint(data)\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#serial-port-settings","title":"Serial Port Settings","text":"<p>PySerial allows you to configure various serial port settings.</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#baud-rate","title":"Baud Rate","text":"<p>Set the baud rate for communication:</p> <pre><code>ser.baudrate = 115200\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#data-bits","title":"Data Bits","text":"<p>Set the number of data bits:</p> <pre><code>ser.bytesize = serial.SEVENBITS\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#parity","title":"Parity","text":"<p>Set the parity checking:</p> <pre><code>ser.parity = serial.PARITY_EVEN\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#stop-bits","title":"Stop Bits","text":"<p>Set the number of stop bits:</p> <pre><code>ser.stopbits = serial.STOPBITS_TWO\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#flow-control","title":"Flow Control","text":"<p>Enable hardware (RTS/CTS) or software (XON/XOFF) flow control:</p> <pre><code>ser.rtscts = True  # Enable RTS/CTS flow control\nser.xonxoff = True  # Enable XON/XOFF flow control\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#handling-timeouts","title":"Handling Timeouts","text":"<p>PySerial provides mechanisms to handle read and write timeouts.</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#read-timeout","title":"Read Timeout","text":"<p>Set a timeout for read operations:</p> <pre><code>ser.timeout = 2  # Timeout in seconds\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#write-timeout","title":"Write Timeout","text":"<p>Set a timeout for write operations:</p> <pre><code>ser.write_timeout = 2  # Timeout in seconds\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#no-timeout","title":"No Timeout","text":"<p>Disable timeouts:</p> <pre><code>ser.timeout = None  # No timeout\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#working-with-binary-data","title":"Working with Binary Data","text":"<p>PySerial supports reading and writing binary data.</p>"},{"location":"languages/python/libraries_frameworks/pyserial/#writing-binary-data","title":"Writing Binary Data","text":"<pre><code># Open a serial port\nser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n# Write binary data to the serial port\nser.write(b'\\x01\\x02\\x03\\x04')\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#reading-binary-data","title":"Reading Binary Data","text":"<pre><code># Open a serial port\nser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n# Read binary data from the serial port\ndata = ser.read(4)  # Read 4 bytes\nprint(data)\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/pyserial/#serial-port-enumeration","title":"Serial Port Enumeration","text":"<p>List available serial ports:</p> <pre><code>import serial.tools.list_ports\n\nports = serial.tools.list_ports.comports()\nfor port in ports:\n    print(port.device)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#using-context-managers","title":"Using Context Managers","text":"<p>Use context managers to automatically handle resource cleanup:</p> <pre><code>with serial.Serial('/dev/ttyUSB0', 9600, timeout=1) as ser:\n    ser.write(b'Hello, World!')\n    data = ser.read(10)\n    print(data)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#serial-communication-with-threads","title":"Serial Communication with Threads","text":"<p>Use threads for non-blocking serial communication:</p> <pre><code>import threading\n\ndef read_from_port(ser):\n    while True:\n        data = ser.read(10)\n        if data:\n            print(data)\n\n# Open a serial port\nser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n# Start a thread for reading from the serial port\nthread = threading.Thread(target=read_from_port, args=(ser,))\nthread.start()\n\n# Write data to the serial port\nser.write(b'Hello, World!')\n\n# Close the serial port\nser.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#error-handling","title":"Error Handling","text":"<p>Handle errors gracefully in PySerial:</p> <pre><code>try:\n    # Open a serial port\n    ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)\n\n    # Write data to the serial port\n    ser.write(b'Hello, World!')\n\n    # Close the serial port\n    ser.close()\nexcept serial.SerialException as e:\n    print(f\"Serial error: {e}\")\nexcept serial.SerialTimeoutException as e:\n    print(f\"Timeout error: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pyserial/#conclusion","title":"Conclusion","text":"<p>PySerial is a powerful and versatile library for serial communication in Python. Its extensive feature set and easy-to-use API make it suitable for a wide range of applications, from simple data logging to complex device communication. By mastering the core features and functionalities of PySerial, you can efficiently manage serial ports and perform reliable serial communication. This guide should serve as a solid foundation for building serial-based applications using PySerial.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/","title":"Python pytesseract Module: A Comprehensive Guide","text":"<p>The <code>pytesseract</code> module is a Python wrapper for Google\u2019s Tesseract-OCR Engine. It provides an easy-to-use interface for performing Optical Character Recognition (OCR) on images, enabling you to extract text from various image formats. This guide provides an in-depth look at the <code>pytesseract</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#introduction-to-pytesseract","title":"Introduction to pytesseract","text":"<p><code>pytesseract</code> is a Python wrapper for the Tesseract OCR engine. It allows you to use Tesseract\u2019s capabilities to extract text from images directly within Python. It supports various image formats and provides options to configure the OCR engine\u2019s behavior.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#installation","title":"Installation","text":"<p>To use <code>pytesseract</code>, you need to install both the <code>pytesseract</code> Python package and the Tesseract OCR engine.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#installing-pytesseract","title":"Installing pytesseract","text":"<p>Install <code>pytesseract</code> via pip:</p> <pre><code>pip install pytesseract\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#installing-tesseract","title":"Installing Tesseract","text":"<p>Tesseract needs to be installed separately. Follow the instructions below based on your operating system:</p> <ul> <li>Windows: Download and install the Tesseract executable from GitHub. Add the installation directory to your system PATH or specify the path in your script.</li> <li>macOS: Install Tesseract using Homebrew:</li> </ul> <pre><code>brew install tesseract\n</code></pre> <ul> <li>Linux: Install Tesseract using your package manager:</li> </ul> <pre><code>sudo apt-get install tesseract-ocr\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#basic-usage","title":"Basic Usage","text":"<p>Once you have <code>pytesseract</code> and Tesseract installed, you can start extracting text from images.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#importing-pytesseract","title":"Importing pytesseract","text":"<pre><code>import pytesseract\nfrom PIL import Image\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#configuring-tesseract-path-windows-only","title":"Configuring Tesseract Path (Windows Only)","text":"<p>If you are using Windows, specify the path to the Tesseract executable:</p> <pre><code>pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#extracting-text-from-an-image","title":"Extracting Text from an Image","text":"<pre><code>from PIL import Image\nimport pytesseract\n\n# Open an image file\nimage = Image.open('sample_image.png')\n\n# Perform OCR\ntext = pytesseract.image_to_string(image)\nprint('Extracted text:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#advanced-configuration","title":"Advanced Configuration","text":"<p><code>pytesseract</code> provides various options to customize the OCR process, such as specifying OCR language and configuration parameters.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#specifying-language","title":"Specifying Language","text":"<p>You can specify the OCR language using the <code>lang</code> parameter. Ensure the language files are installed for Tesseract.</p> <pre><code>from PIL import Image\nimport pytesseract\n\n# Open an image file\nimage = Image.open('sample_image.png')\n\n# Perform OCR with a specific language\ntext = pytesseract.image_to_string(image, lang='eng')\nprint('Extracted text:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#using-ocr-configuration-options","title":"Using OCR Configuration Options","text":"<p>You can pass additional configuration options to Tesseract using the <code>config</code> parameter.</p> <pre><code>from PIL import Image\nimport pytesseract\n\n# Open an image file\nimage = Image.open('sample_image.png')\n\n# Perform OCR with custom configuration\ncustom_config = r'--oem 3 --psm 6'\ntext = pytesseract.image_to_string(image, config=custom_config)\nprint('Extracted text:', text)\n</code></pre> <ul> <li><code>--oem 3</code>: OCR Engine Mode (OEM). <code>3</code> means both standard and LSTM OCR.</li> <li><code>--psm 6</code>: Page Segmentation Mode (PSM). <code>6</code> means assume a single uniform block of text.</li> </ul>"},{"location":"languages/python/libraries_frameworks/pytesseract/#handling-different-image-formats","title":"Handling Different Image Formats","text":"<p><code>pytesseract</code> can handle various image formats supported by the Pillow library.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#extracting-text-from-jpeg-and-tiff-images","title":"Extracting Text from JPEG and TIFF Images","text":"<pre><code>from PIL import Image\nimport pytesseract\n\n# Open different image formats\nimage_files = ['sample_image.jpg', 'sample_image.tiff']\nfor image_file in image_files:\n    image = Image.open(image_file)\n    text = pytesseract.image_to_string(image)\n    print(f'Text from {image_file}:', text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#error-handling","title":"Error Handling","text":"<p>Handling errors effectively is crucial for robust OCR applications.</p>"},{"location":"languages/python/libraries_frameworks/pytesseract/#handling-common-errors","title":"Handling Common Errors","text":"<pre><code>import pytesseract\nfrom PIL import Image\nimport sys\n\ntry:\n    # Open an image file\n    image = Image.open('sample_image.png')\n\n    # Perform OCR\n    text = pytesseract.image_to_string(image)\n    print('Extracted text:', text)\n\nexcept FileNotFoundError as e:\n    print(f'File not found: {e}', file=sys.stderr)\nexcept pytesseract.TesseractNotFoundError as e:\n    print(f'Tesseract not found: {e}', file=sys.stderr)\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}', file=sys.stderr)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytesseract/#conclusion","title":"Conclusion","text":"<p>The <code>pytesseract</code> module provides a powerful interface for Optical Character Recognition using Tesseract OCR. With the examples provided, you should be able to extract text from various image formats, configure the OCR engine, and handle common errors effectively. This module is an invaluable tool for integrating OCR capabilities into your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/pytest/","title":"Python pytest Module: A Comprehensive Guide","text":"<p>The <code>pytest</code> module is a powerful testing framework for Python. It provides a robust and flexible way to write and execute tests, making it easier to ensure that your code behaves as expected. This guide provides an in-depth look at the <code>pytest</code> module, including installation, basic usage, and advanced features.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#introduction-to-pytest","title":"Introduction to pytest","text":"<p><code>pytest</code> is a testing framework for Python that simplifies the process of writing and running tests. It supports fixtures, parameterized tests, and rich reporting, making it a popular choice for both small and large projects.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#installation","title":"Installation","text":"<p>To use <code>pytest</code>, you need to install it via pip.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#installing-pytest","title":"Installing pytest","text":"<pre><code>pip install pytest\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#basic-usage","title":"Basic Usage","text":"<p><code>pytest</code> is designed to be easy to use. You can start running tests with a single command.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#running-tests","title":"Running Tests","text":"<p>Save your test functions in files named <code>test_*.py</code> or <code>*_test.py</code>. To run tests, use the following command:</p> <pre><code>pytest\n</code></pre> <p>By default, <code>pytest</code> will discover and execute all tests in the current directory and its subdirectories.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#writing-tests","title":"Writing Tests","text":"<p>Tests in <code>pytest</code> are written as functions with names starting with <code>test_</code>. </p>"},{"location":"languages/python/libraries_frameworks/pytest/#basic-test-example","title":"Basic Test Example","text":"<pre><code># test_sample.py\n\ndef test_addition():\n    assert 1 + 1 == 2\n\ndef test_subtraction():\n    assert 2 - 1 == 1\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#running-the-tests","title":"Running the Tests","text":"<pre><code>pytest test_sample.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#test-fixtures","title":"Test Fixtures","text":"<p>Fixtures in <code>pytest</code> provide a way to set up and tear down resources needed for tests.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#basic-fixture-example","title":"Basic Fixture Example","text":"<pre><code># test_fixture.py\nimport pytest\n\n@pytest.fixture\ndef sample_data():\n    return {\"key\": \"value\"}\n\ndef test_sample_data(sample_data):\n    assert sample_data[\"key\"] == \"value\"\n</code></pre> <p>Fixtures can be used to provide test data, set up database connections, and more.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#parameterization","title":"Parameterization","text":"<p>Parameterization allows you to run a test function multiple times with different arguments.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#parameterized-test-example","title":"Parameterized Test Example","text":"<pre><code># test_param.py\nimport pytest\n\n@pytest.mark.parametrize(\"input, expected\", [\n    (1, 2),\n    (2, 4),\n    (3, 6)\n])\ndef test_multiplication(input, expected):\n    assert input * 2 == expected\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#test-discovery","title":"Test Discovery","text":"<p><code>pytest</code> automatically discovers tests based on file naming conventions and test function names.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#customizing-test-discovery","title":"Customizing Test Discovery","text":"<p>You can customize test discovery by using command-line options or configuration files.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#using-command-line-options","title":"Using Command-Line Options","text":"<pre><code>pytest -k \"test_addition\"\n</code></pre> <p>This command runs only the tests with names matching \"test_addition\".</p>"},{"location":"languages/python/libraries_frameworks/pytest/#using-configuration-files","title":"Using Configuration Files","text":"<p>You can use a <code>pytest.ini</code> file to configure pytest settings.</p> <pre><code># pytest.ini\n[pytest]\naddopts = -v\n</code></pre> <p>This configuration enables verbose output for all test runs.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#advanced-features","title":"Advanced Features","text":"<p><code>pytest</code> offers a range of advanced features to enhance your testing process.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#custom-markers","title":"Custom Markers","text":"<p>Markers allow you to categorize and select tests.</p> <pre><code># test_marker.py\nimport pytest\n\n@pytest.mark.slow\ndef test_slow_function():\n    # time-consuming test\n    pass\n\n@pytest.mark.fast\ndef test_fast_function():\n    # quick test\n    pass\n</code></pre> <p>Run tests with a specific marker:</p> <pre><code>pytest -m slow\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#assertions-and-reporting","title":"Assertions and Reporting","text":"<p><code>pytest</code> provides detailed assertion introspection and rich reporting.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#assertion-example","title":"Assertion Example","text":"<pre><code>def test_assertion():\n    x = \"hello\"\n    assert x == \"world\", f\"Expected 'world', but got '{x}'\"\n</code></pre>"},{"location":"languages/python/libraries_frameworks/pytest/#rich-reporting","title":"Rich Reporting","text":"<p><code>pytest</code> generates detailed test reports by default. You can also use plugins to enhance reporting.</p>"},{"location":"languages/python/libraries_frameworks/pytest/#conclusion","title":"Conclusion","text":"<p>The <code>pytest</code> module is a versatile and powerful tool for testing Python code. With its simple syntax, advanced features, and rich reporting capabilities, it helps ensure that your code behaves as expected. Whether you are writing simple tests or working with complex test scenarios, <code>pytest</code> provides the tools you need to maintain high-quality code.</p>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/","title":"Python for Scientists","text":""},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#algebra","title":"Algebra","text":"<p>Libraries for manipulation of symbolic algebra, analytic integration etc.</p> <ul> <li>SymPy - SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.</li> <li>sagemath - Mathematical software system with features covering multiple aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#animations","title":"Animations","text":"<ul> <li>animatplot - A wrapper around <code>matplotlib</code>'s <code>funcanimation</code> module - makes it very easy to animate matplotlib plots.</li> <li>Line Chart Animation Tutorial - A practical tutorial for creating Animated Line Charts with Matplotlib's Animation module.</li> <li>Bar Chart Animation Tutorial - A practical tutorial for creating Animated Bar Charts with Matplotlib's Animation module.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#bayesian-analysis","title":"Bayesian Analysis","text":"<ul> <li>pymc3 - Package for Bayesian statistical modeling and probabilistic machine learning which focuses on advanced Markov chain Monte Carlo and variational fitting algorithms.</li> <li>arviz - Exploratory analysis of Bayesian models.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#better-scientific-software","title":"Better Scientific Software","text":"<ul> <li>Better Scientific Software - Articles and resources on how to write better scientific software.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#code-quality","title":"Code Quality","text":"<p>Tools to help you write neat and error-free python code</p> <ul> <li>PEP8 - The official style guide for python code.</li> <li>structure - The officially recommended way to structure any python project.</li> <li>flake8 - A command-line tool which will tell you where you've violated PEP8's recommendations.</li> <li>pyflakes - Similar to flake8, but instead checks for logistic errors (e.g. unused module imports).</li> <li>pycodestyle - A wrapper for flake8 and pyflakes which runs them both.</li> <li>pylint - A tool that checks for errors in Python code, tries to enforce a coding standard and looks for code smells.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#data-storage","title":"Data Storage","text":"<ul> <li>netcdf4-python - netCDF is a popular file format for multidimensional data, developed by the weather and forecasting community. Use this format unless you have a good reason not to. netcdf4-python is a Python interface to the netCDF C library.</li> <li>xarray - xarray's data model is based on netCDF, and provides the easiest way of reading and writing netCDF4 files in python. Will also load the data lazily, which is extremely useful when dealing with large amounts of data.</li> <li>Zarr - Zarr is a data format designed to work efficiently for very large datasets, accessed in parallel. If you normally use netCDF but want to scale up your analysis, have a look at Zarr.</li> <li>xmitgcm - A python package for reading MITgcm binary MDS files into xarray data structures. Included as an example of how to go about loading unusual binary file formats into xarray data structures intelligently.</li> <li>SQLite Tutorials - SQLite Tutorials with Python examples, demonstrations and database tips.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#debugging","title":"Debugging","text":"<ul> <li>pdb - The Python debugger. Part of the python standard library.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#development-environments","title":"Development Environments","text":"<p>Programs to write code into. The main choice is between a software-engineering style IDE, and one intended specifically for scientific users.</p> <ul> <li>JupyterLab - An IDE which incorporates Jupyter notebooks.</li> <li>PyCharm - Very powerful IDE for python. Use if you want the full powers a software engineer would expect. Has a professional version, which is free for students.</li> <li>spyder - MatLab-like development environment for scientific python users.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#documentation","title":"Documentation","text":"<ul> <li>sphinx - Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, from the docstrings in your code. Originally created for documenting the python language itself.</li> <li>nbconvert - Convert jupyter notebooks to other formats such as PDF, LaTeX, HTML.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#domain-specific-tools","title":"Domain-Specific Tools","text":"<p>Libraries of tools developed for python users in various fields of science.</p> <ul> <li>astropy - Various tools and functionality for astronomy and astrophysics.</li> <li>Biopython - Tools for biological computation.</li> <li>geoviews - Makes it easy to explore and visualize geographical, meteorological, and oceanographic datasets, such as those used in weather, climate, and remote sensing research.</li> <li>graph-tool - Efficient manipulation, visualization and statistical analysis of graphs and networks.</li> <li>MetPy - MetPy is a collection of tools in Python for reading, visualizing and performing calculations with weather data.</li> <li>NetworkX  - A package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.</li> <li>nilearn - Machine learning for Neuro-Imaging in python.</li> <li>Parcels - Track particles along circulating ocean currents.</li> <li>PlasmaPy - Various tools for plasma physics.</li> <li>ProDy - Package for protein structural dynamics analysis.</li> <li>psychopy - An open-source application allowing you run a wide range of neuroscience, psychology and psychophysics experiments.</li> <li>pyrocko - A seismology toolkit for python.</li> <li>QuTIP - QuTiP is open-source software for simulating the dynamics of open quantum systems.</li> <li>radis - A package for infrared molecular spectroscopy</li> <li>scikit-beam - Data analysis tools for X-Ray, Neutron and Electron sciences</li> <li>scikit-spectra - A community developed python package for spectroscopy.</li> <li>SunPy - SunPy is a data-analysis environment specializing in providing the software necessary to analyze solar and heliospheric data in Python.</li> <li>TomoPy - Package for tomographic data processing and image reconstruction.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#error-handling","title":"Error Handling","text":"<ul> <li>errors - How to properly raise and handle errors in python.</li> <li>warnings - Throw proper warnings instead of using print statements. Python standard library module.</li> <li>logging - Standard library module for properly logging information about what's going on as your code runs.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#forecasting","title":"Forecasting","text":"<ul> <li>prophet - Tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth. Developed by Facebook.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#gotchas","title":"Gotchas","text":"<ul> <li>python-gotchas - A collection of surprising Python snippets and lesser-known features.</li> <li>100 Python Tips &amp; Tricks - 100 Essential Python Tips with interesting Examples</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#gpu-acceleration","title":"GPU Acceleration","text":"<ul> <li>cupy - An implementation of a NumPy-compatible multi-dimensional array on CUDA.</li> <li>numba - Numba can compile python functions into CUDA code.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#graphical-interfaces","title":"Graphical Interfaces","text":"<ul> <li>pyqt5 - Library which lets you use the Qt GUI framework (itself written in C++) from python.</li> <li>PySimpleGui - A simple library for creating GUI programs with Python very quickly.</li> <li>Practical PySimpleGui Tutorials - Useful PySimpleGui Tutorials with Python Examples</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#job-scheduling","title":"Job Scheduling","text":"<ul> <li>experi - An interface for managing computational experiments with many independent variables.</li> <li>lancet - Launch jobs, organize the output, and dissect the results.</li> <li>papermill - A  tool for parameterizing, executing, and analyzing multiple Jupyter Notebooks.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#labelled-data","title":"Labelled Data","text":"<ul> <li>pandas - Major library for data analysis, made more powerful through the use of labelled data.</li> <li>xarray - N-dimensional labelled arrays and datasets. Allows you to perform operations with incredible ease and clarity:   <pre><code>average_temp = data['temperature'].sel('longitude'=40).mean(dim='time')\n</code></pre></li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#mathematical-library-functions","title":"Mathematical Library Functions","text":"<ul> <li>scipy - The standard resource for all kinds of mathematical functions.</li> <li>xrft - Discrete Fourier transform operations for xarray data structures.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#numerical-data","title":"Numerical Data","text":"<ul> <li>numpy - The fundamental package for numerical computation in python. So ubiquitous that it might as well be part of python's standard library at this point. Ultimately just a contiguous-in-memory C array, wrapped very nicely with python.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#optimisation-problems","title":"Optimisation Problems","text":"<ul> <li>nlopt - Library for nonlinear optimization, wrapping many algorithms for global and local, constrained or unconstrained, optimization.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#package-management","title":"Package Management","text":"<p>Keep track of module dependencies, python versions, and virtual environments.</p> <ul> <li>conda - A package manager specifically intended for use by the scientific python community. Developed by the authors of numpy to manage both python packages and the underlying C/Fortran libraries which make them fast. Also obviates the need for system virtual environments.</li> <li>anaconda - Conda, but packaged with a wide range of useful scientific python libraries, including many from this list.</li> <li>pip - The standard way to install python packages. Use when you can't use conda, but will play nicely together.</li> <li>setuptools - For when you make your own module, and want to install it properly into your conda environment (so you never need to touch your <code>$PYTHONPATH</code>!)</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#paper-writing","title":"Paper Writing","text":"<ul> <li>tikzplotlib - A converter that takes a matplotlib figure and spits out a TikZ/PGFplots figure for smooth integration into LaTeX. Much better than having to try and alter details of a png image later on.</li> <li>Scientific Writing - Not python, but a few useful tips on scientific writing.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#parallelization","title":"Parallelization","text":"<p>Use all the cores of your machine, and scale up to clusters!</p> <ul> <li>dask - Tools for splitting up computations and executing them across many processors in parallel. dask.array in particular provides a numpy-like interface to a chunked-in-memory array. Dask is especially useful for analysing datasets which are larger than your RAM.</li> <li>xarray - Employs dask behind the scenes to parallelize most operations.   Simply load your dataset in \"chunks\" and xarray will operate on each chunk in parallel:   <pre><code># Load data in chunks\nds = open_dataset('data.nc', chunks={'space': 100}\n\n# Will operate on each spatial chunk in parallel using dask\nds['density'].mean(dim='time')\n</code></pre></li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#physical-units","title":"Physical Units","text":"<p>Keep track of which physical units your numbers are written in.</p> <ul> <li>pint - Package to define, operate and manipulate physical quantities.</li> <li>astropy.units - Submodule of astropy which handles units. Units multiply numpy arrays directly.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#plotting","title":"Plotting","text":"<p>Producing static plots of publication quality. (For 3D plots see the Visualisation section)</p> <ul> <li>matplotlib - A 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. The standard way to plot data in python.</li> <li>anatomy of matplotlib - Tutorials on how to use matplotlib.</li> <li>matplotlib guide - Article explaining how matplotlib is intended to be used, and will help clarify the differences between figures and axes, object-oriented approach, MATLAB-like stateful approach, interactivity etc. Also good because it gives clear best practice recommendations.</li> <li>scientific-matplotlib - Matplotlib stylesheets for scientific plots.</li> <li>seaborn - A  data visualisation library based on matplotlib. Produces much prettier plots than out-of-the-box matplotlib will.</li> <li>xarray.plot - Submodule of xarray which makes plotting into a one-line job: <code>data['density'].plot()</code>.</li> <li>colorcet - A set of useful perceptually uniform colormaps for plotting scientific data.</li> <li>Hexbin - Hexbin plotting tutorials.</li> <li>Pcolor - Pcolor and Pcolormesh tutorials</li> <li>Wordcloud - Wordcloud Visualization with Python examples</li> <li>holoviews - A much more modern plotting library, useful for all sorts of scientific data. Interactive, scalable, and animatable.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#presentations-and-sharing-work","title":"Presentations and Sharing Work","text":"<ul> <li>Binder - Online Jupyter Notebook hosting for GitHub repositories. Allows users to run Jupyter notebooks from GitHub repositories in the cloud, without Python installed locally.</li> <li>nb_pdf_template - A more accurate representation of jupyter notebooks when converting to pdfs.</li> <li>RISE - A plugin for Jupyter which turns notebooks into slick presentations.</li> <li>jupyter-rise - Automatically launch the RISE plugin from Binder. Great for giving presentations remotely.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#profiling-and-benchmarking","title":"Profiling and benchmarking","text":"<ul> <li>py-spy - A profiler for python code which doesn't interfere with the running process.</li> <li>pytest-benchmark - A pytest fixture for benchmarking code.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#scripting","title":"Scripting","text":"<p>Tools which are likely to be useful when writing python scripts to automate common tasks.</p> <ul> <li>click - Run your scripts from the command line, with as little extra code as possible.</li> <li>dateutil - Provides powerful extensions to the standard datetime module available in Python.</li> <li>gitpython - Interact with git from python. Useful for tasks like checking if your simulation code has uncommitted changes before executing it.</li> <li>pathlib - Use this anytime you want to do anything with a file path. Obviates the need for <code>os</code> and <code>sys</code> most of the time. A module in the python standard library.</li> <li>Event Scheduling - Event scheduling script examples for Python </li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#speed","title":"Speed","text":"<p>Python inevitably sacrifices some speed to gain increased clarity. Scientific programs usually have one or two functions which do 90% of the work, and there are various ways to dramatically speed these up. Use in conjunction with parallelization through dask if you want as much speed as possible.</p> <ul> <li>cython - A compiler which allows you to write snippets of C code into your python for massive speed increases.</li> <li>F2PY - For calling fast, compiled Fortran subroutines from Python (part of SciPy)</li> <li>numba - Automatic generation of fast compiled C code from Python functions.</li> <li>bottleneck - A collection of fast numpy array functions written in C.</li> <li>Theano - Allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#statistics","title":"Statistics","text":"<ul> <li>statsmodels - Provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#testing","title":"Testing","text":"<p>Check that your code actually does what you think it will do!</p> <ul> <li>pytest - The standard unit testing framework for python. Essential - if you're not unit-testing your calculations then you are merely hoping that they are actually doing what you think they are. <code>pytest</code> does a lot of magic behind the scenes to make it as simple as possible to use, with no boilerplate.</li> <li>pytest-clarity - A plugin which improves the readability of pytest output.</li> <li>hypothesis - Hypothesis testing for python. Normal tests check that your function behaves as expected for some specific input. Hypothesis tests check that your function behaves as expected for any input of some type, e.g. any string, or any numpy array. Basically magic, compatible with pytest, and the algorithms used in the implementation are very interesting.</li> <li>cosmic-ray - Mutation testing in python. Checks that your test coverage is robust by randomly changing pieces of your code and checking that this change is actually caught by a test failing.</li> <li>flaky - pytest plugin for automatically re-running inconsistent (\"flaky\") tests.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#visualisation","title":"Visualisation","text":"<p>There are currently many competing visualisation libraries in python.</p> <ul> <li>animatplot - A wrapper around <code>matplotlib</code>'s <code>funcanimation</code> library - makes it very easy to animate matplotlib plots.</li> <li>mayavi - 3D scientific data visualization and plotting in Python.</li> <li>cartopy -  A library for cartographic projections and plots, with matplotlib support.</li> <li>bokeh - Bokeh is an interactive visualization library that targets modern web browsers for presentation.</li> <li>K3D-jupyter - K3D-jupyter is a new 3D plotting library which uses WebGL to create interactive plots in jupyter notebooks. Very powerful and fast, with some seriously impressive examples. However as of early 2020 the documentation is a little lacking.</li> <li>plotly - Plotly's Python graphing library makes interactive, publication-quality graphs online.</li> <li>holoviews - Stop plotting your data - annotate your data and let it visualize itself.</li> <li>ipyvolume - 3d plotting for Python in the Jupyter notebook.</li> <li>vispy - Interactive scientific visualisation in python.</li> <li>vtk - Low-level VTK interface</li> <li>vista - Streamlined interface to VTK - mainly a wrapper for VTK package</li> <li>yt - Very powerful software suite for analysing and visualising volumetric data. Written by astrophysicists, but since applied to many other domains.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#workflow","title":"Workflow","text":"<p>Don't just write and run python scripts. Tools to make your workflow faster, clearer, and easier to come back to later.</p> <ul> <li>ipython - Run python interactively, like MatLab! Forms the backend of Jupyter notebooks.</li> <li>jupyter notebooks - In-browser notebooks comprised of cells which can contain markdown, images, or executable python code! Incredibly valuable for data exploration, presentation and recording work. The perfect format to email to a supervisor for feedback. Can be version-controlled with git so also useful for reproducibility and backing up your work.</li> <li>jupyterlab - A development environment in which you can write Jupyter notebooks. The spiritual successor to spyder, in that it is designed specifically for scientists.</li> <li>papermill - A  tool for parameterizing, executing, and analyzing multiple Jupyter Notebooks.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#beginner-recommendations","title":"Beginner Recommendations","text":"<ul> <li>First, install python through anaconda, which will also give you the packages you're about to use.</li> <li>Write your code in either <code>pycharm</code> (if you want a professional IDE), <code>spyder</code> or  <code>jupyterlab</code> (if you're used to MatLabs' environment).</li> <li>Become familiar with <code>numpy</code>, the fundamental numeric object in python, and <code>matplotlib</code>, the standard way to plot.</li> <li>Next, wrap your data into clearer, higher-level objects with either <code>Pandas</code> or <code>xarray</code> (use <code>xarray</code> if your data has more than one dimension).</li> <li>Before writing new analysis functions, check if someone has already solved your problem for you in <code>scipy</code> , or in one of python's domain-specific scientific software packages.</li> <li>As soon as you start writing your own analysis functions, test they're correct with unit tests written with <code>pytest</code>.</li> <li>Analyse your data interactively with <code>ipython</code>, and record your work in a <code>Jupyter notebook</code>.</li> <li>Plot your results with <code>holoviews</code>.</li> </ul>"},{"location":"languages/python/libraries_frameworks/python%20for%20scientist/#data-visualisation-tips","title":"Data visualisation tips","text":"<ul> <li>\"Friends don't let friends make bad graphs\" - A collection of useful tips on why certain types of publication figures are very misleading, illustrated with examples of the problem and what to do instead.</li> </ul>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/","title":"Python <code>queue</code> and <code>collections.deque</code> Modules: Detailed Overview and Examples","text":"<p>The <code>queue</code> and <code>collections.deque</code> modules in Python provide robust and efficient implementations of queues. Queues are data structures that follow the First-In-First-Out (FIFO) principle. While the <code>queue</code> module is specifically designed for multi-threaded programming, providing safe and synchronized queues, the <code>collections.deque</code> class from the <code>collections</code> module offers a more general-purpose, highly optimized double-ended queue.</p>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#queue-module","title":"<code>queue</code> Module","text":"<p>The <code>queue</code> module includes several classes for creating various types of queues:</p> <ol> <li><code>Queue</code>: A FIFO queue.</li> <li><code>LifoQueue</code>: A Last-In-First-Out (LIFO) queue (stack).</li> <li><code>PriorityQueue</code>: A queue where items are sorted based on priority.</li> </ol>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#importing-the-queue-module","title":"Importing the <code>queue</code> Module","text":"<pre><code>import queue\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#1-fifo-queue","title":"1. FIFO Queue","text":""},{"location":"languages/python/libraries_frameworks/queue_dequeue/#creating-a-fifo-queue","title":"Creating a FIFO Queue","text":"<pre><code>import queue\n\n# Create a FIFO queue\nq = queue.Queue()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#adding-items-to-the-queue","title":"Adding Items to the Queue","text":"<pre><code># Add items to the queue\nq.put(\"item1\")\nq.put(\"item2\")\nq.put(\"item3\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#removing-items-from-the-queue","title":"Removing Items from the Queue","text":"<pre><code># Remove and return an item from the queue\nitem = q.get()\nprint(item)  # Output: item1\n\n# Check if the queue is empty\nprint(q.empty())  # Output: False\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#2-lifo-queue","title":"2. LIFO Queue","text":""},{"location":"languages/python/libraries_frameworks/queue_dequeue/#creating-a-lifo-queue","title":"Creating a LIFO Queue","text":"<pre><code>import queue\n\n# Create a LIFO queue\nlifo_q = queue.LifoQueue()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#adding-and-removing-items","title":"Adding and Removing Items","text":"<pre><code># Add items to the LIFO queue\nlifo_q.put(\"item1\")\nlifo_q.put(\"item2\")\n\n# Remove and return an item from the LIFO queue\nitem = lifo_q.get()\nprint(item)  # Output: item2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#3-priority-queue","title":"3. Priority Queue","text":""},{"location":"languages/python/libraries_frameworks/queue_dequeue/#creating-a-priority-queue","title":"Creating a Priority Queue","text":"<pre><code>import queue\n\n# Create a priority queue\npq = queue.PriorityQueue()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#adding-items-with-priority","title":"Adding Items with Priority","text":"<p>Items are added as tuples with the priority as the first element.</p> <pre><code># Add items with priority to the queue\npq.put((1, \"item1\"))  # Priority 1\npq.put((3, \"item3\"))  # Priority 3\npq.put((2, \"item2\"))  # Priority 2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#removing-items-based-on-priority","title":"Removing Items Based on Priority","text":"<pre><code># Remove and return the item with the highest priority (lowest priority number)\nitem = pq.get()\nprint(item)  # Output: (1, 'item1')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#thread-safety-and-blocking-operations","title":"Thread-Safety and Blocking Operations","text":"<p>The <code>queue</code> module provides thread-safe queues, which means they can be used safely in multi-threaded applications. Blocking operations allow threads to wait for items to be available in the queue.</p> <pre><code>import queue\nimport threading\nimport time\n\ndef producer(q):\n    for i in range(5):\n        q.put(f\"item {i}\")\n        print(f\"Produced: item {i}\")\n        time.sleep(1)\n\ndef consumer(q):\n    while True:\n        item = q.get()\n        if item is None:\n            break\n        print(f\"Consumed: {item}\")\n\nq = queue.Queue()\nproducer_thread = threading.Thread(target=producer, args=(q,))\nconsumer_thread = threading.Thread(target=consumer, args=(q,))\n\nproducer_thread.start()\nconsumer_thread.start()\n\nproducer_thread.join()\nq.put(None)  # Stop the consumer\nconsumer_thread.join()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#collectionsdeque","title":"<code>collections.deque</code>","text":"<p>The <code>collections.deque</code> class provides a double-ended queue that supports adding and removing elements from both ends with O(1) time complexity.</p>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#importing-the-collections-module","title":"Importing the <code>collections</code> Module","text":"<pre><code>from collections import deque\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#creating-a-deque","title":"Creating a Deque","text":"<pre><code># Create an empty deque\ndq = deque()\n\n# Create a deque with initial items\ndq = deque([\"item1\", \"item2\", \"item3\"])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#adding-and-removing-items_1","title":"Adding and Removing Items","text":""},{"location":"languages/python/libraries_frameworks/queue_dequeue/#adding-items","title":"Adding Items","text":"<pre><code># Add items to the right end\ndq.append(\"item4\")\n\n# Add items to the left end\ndq.appendleft(\"item0\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#removing-items","title":"Removing Items","text":"<pre><code># Remove and return an item from the right end\nitem = dq.pop()\nprint(item)  # Output: item4\n\n# Remove and return an item from the left end\nitem = dq.popleft()\nprint(item)  # Output: item0\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#iterating-over-a-deque","title":"Iterating Over a Deque","text":"<pre><code># Iterate over the deque\nfor item in dq:\n    print(item)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#other-deque-methods","title":"Other Deque Methods","text":""},{"location":"languages/python/libraries_frameworks/queue_dequeue/#extending-a-deque","title":"Extending a Deque","text":"<pre><code># Extend the deque with multiple items on the right end\ndq.extend([\"item4\", \"item5\"])\n\n# Extend the deque with multiple items on the left end\ndq.extendleft([\"item-1\", \"item-2\"])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#rotating-a-deque","title":"Rotating a Deque","text":"<pre><code># Rotate the deque n steps to the right (positive) or left (negative)\ndq.rotate(2)\nprint(dq)  # Output: deque(['item-1', 'item-2', 'item1', 'item2', 'item3', 'item4', 'item5'])\n\ndq.rotate(-2)\nprint(dq)  # Output: deque(['item1', 'item2', 'item3', 'item4', 'item5', 'item-1', 'item-2'])\n</code></pre>"},{"location":"languages/python/libraries_frameworks/queue_dequeue/#conclusion","title":"Conclusion","text":"<p>The <code>queue</code> and <code>collections.deque</code> modules in Python provide powerful and flexible implementations of queues for various use cases. The <code>queue</code> module is particularly useful for multi-threaded programming, offering thread-safe and synchronized queues, including FIFO, LIFO, and priority queues. On the other hand, the <code>collections.deque</code> class is a highly efficient double-ended queue suitable for general-purpose use.</p> <p>By leveraging these modules, you can efficiently manage data in a queue structure, handle concurrency with ease, and perform complex operations on sequences of items with optimal performance.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/","title":"Python RabbitMQ Module Report","text":""},{"location":"languages/python/libraries_frameworks/rabbitmq/#introduction","title":"Introduction","text":"<p>RabbitMQ is a popular open-source message broker that facilitates communication between distributed systems through messaging queues. Python applications can interact with RabbitMQ using various libraries, with <code>pika</code> being one of the most widely used. This report provides a comprehensive overview of using the <code>pika</code> library to work with RabbitMQ in Python, including installation, basic usage, and advanced examples.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#features-of-pika","title":"Features of <code>pika</code>","text":"<ol> <li>AMQP Protocol Support: Implements the Advanced Message Queuing Protocol (AMQP) for message queuing.</li> <li>Asynchronous Operations: Supports asynchronous operations for efficient message processing.</li> <li>Connection Management: Manages connections to RabbitMQ brokers and handles reconnections.</li> <li>Flexible APIs: Provides various APIs for different messaging patterns, including work queues, publish/subscribe, and RPC.</li> </ol>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#installation","title":"Installation","text":"<p>To use <code>pika</code>, you need to install it via pip:</p> <pre><code>pip install pika\n</code></pre>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/rabbitmq/#connecting-to-rabbitmq","title":"Connecting to RabbitMQ","text":"<p>To interact with RabbitMQ, you need to establish a connection and create a channel.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#example-basic-connection","title":"Example: Basic Connection","text":"<pre><code>import pika\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='hello')\n\n# Publish a message\nchannel.basic_publish(exchange='', routing_key='hello', body='Hello World!')\n\nprint(\" [x] Sent 'Hello World!'\")\n\n# Close the connection\nconnection.close()\n</code></pre> <p>In this example: - <code>pika.BlockingConnection()</code> establishes a connection to RabbitMQ. - <code>channel.queue_declare()</code> creates a queue named <code>hello</code>. - <code>channel.basic_publish()</code> sends a message to the <code>hello</code> queue.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#consuming-messages","title":"Consuming Messages","text":"<p>To consume messages from a queue, you need to define a callback function and start consuming.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#example-basic-message-consumption","title":"Example: Basic Message Consumption","text":"<pre><code>import pika\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body}\")\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='hello')\n\n# Set up subscription on the queue\nchannel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n</code></pre> <p>In this example: - <code>callback()</code> is a function that handles received messages. - <code>channel.basic_consume()</code> sets up the consumer with the <code>callback</code> function. - <code>channel.start_consuming()</code> starts the consumer to listen for messages.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"languages/python/libraries_frameworks/rabbitmq/#example-work-queues","title":"Example: Work Queues","text":"<p>Work queues distribute tasks among multiple workers.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#producer-example","title":"Producer Example","text":"<pre><code>import pika\nimport sys\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='task_queue', durable=True)\n\n# Publish messages with a command-line argument\nmessage = ' '.join(sys.argv[1:]) or \"Hello World!\"\nchannel.basic_publish(exchange='',\n                      routing_key='task_queue',\n                      body=message,\n                      properties=pika.BasicProperties(\n                          delivery_mode=2,  # Make message persistent\n                      ))\n\nprint(f\" [x] Sent {message}\")\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#consumer-example","title":"Consumer Example","text":"<pre><code>import pika\nimport time\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body}\")\n    time.sleep(body.count(b'.'))\n    print(\" [x] Done\")\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='task_queue', durable=True)\n\n# Set up subscription on the queue\nchannel.basic_consume(queue='task_queue', on_message_callback=callback)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n</code></pre> <p>In this example: - Producer: Sends messages to <code>task_queue</code> with persistence. - Consumer: Processes tasks, simulating different processing times based on message content.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#example-publishsubscribe","title":"Example: Publish/Subscribe","text":"<p>Publish/subscribe pattern involves broadcasting messages to multiple consumers.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#publisher-example","title":"Publisher Example","text":"<pre><code>import pika\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare an exchange\nchannel.exchange_declare(exchange='logs', exchange_type='fanout')\n\n# Publish messages\nmessage = 'info: Hello World!'\nchannel.basic_publish(exchange='logs', routing_key='', body=message)\n\nprint(f\" [x] Sent {message}\")\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#subscriber-example","title":"Subscriber Example","text":"<pre><code>import pika\n\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body}\")\n\n# Connect to RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare an exchange and a queue\nchannel.exchange_declare(exchange='logs', exchange_type='fanout')\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue\n\n# Bind the queue to the exchange\nchannel.queue_bind(exchange='logs', queue=queue_name)\n\n# Set up subscription\nchannel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n</code></pre> <p>In this example: - Publisher: Sends messages to an exchange of type <code>fanout</code>. - Subscriber: Receives messages from the exchange, demonstrating the publish/subscribe pattern.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#best-practices","title":"Best Practices","text":"<ol> <li>Message Durability: Ensure queues and messages are durable to prevent data loss.</li> <li>Exception Handling: Implement error handling to manage connection and channel failures.</li> <li>Scalability: Use RabbitMQ features like clustering and sharding to handle high loads.</li> </ol>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Resource Management: Properly manage connections and channels to avoid resource leaks.</li> <li>Message Acknowledgment: Handle message acknowledgments correctly to ensure reliable delivery.</li> <li>Configuration: Ensure RabbitMQ is properly configured to match your application's needs, such as connection limits and memory usage.</li> </ol>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#conclusion","title":"Conclusion","text":"<p>The <code>pika</code> library provides a powerful and flexible way to interact with RabbitMQ in Python. By understanding the basic and advanced features, you can effectively implement messaging patterns and ensure reliable communication in your distributed systems.</p>"},{"location":"languages/python/libraries_frameworks/rabbitmq/#references","title":"References","text":"<ul> <li>Pika Documentation - Official documentation for the <code>pika</code> library.</li> <li>RabbitMQ Documentation - Official documentation for RabbitMQ, including setup and configuration.</li> </ul>"},{"location":"languages/python/libraries_frameworks/random/","title":"Python <code>random</code> Module: Detailed Overview and Examples","text":"<p>The <code>random</code> module in Python provides functions for generating random numbers and performing random operations. This module implements pseudo-random number generators for various distributions, making it a versatile tool for simulations, games, security, and more.</p>"},{"location":"languages/python/libraries_frameworks/random/#importing-the-random-module","title":"Importing the <code>random</code> Module","text":"<p>To use the functions from the <code>random</code> module, you need to import it:</p> <pre><code>import random\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/random/#1-generating-random-numbers","title":"1. Generating Random Numbers","text":""},{"location":"languages/python/libraries_frameworks/random/#randomrandom","title":"<code>random.random()</code>","text":"<p>Returns a random floating-point number in the range [0.0, 1.0).</p>"},{"location":"languages/python/libraries_frameworks/random/#example","title":"Example","text":"<pre><code>import random\n\nprint(random.random())  # Output: 0.37444887175646646 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomuniforma-b","title":"<code>random.uniform(a, b)</code>","text":"<p>Returns a random floating-point number in the range [a, b] or [b, a].</p>"},{"location":"languages/python/libraries_frameworks/random/#example_1","title":"Example","text":"<pre><code>import random\n\nprint(random.uniform(1, 10))  # Output: 5.422116796127306 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomrandinta-b","title":"<code>random.randint(a, b)</code>","text":"<p>Returns a random integer N such that a &lt;= N &lt;= b.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_2","title":"Example","text":"<pre><code>import random\n\nprint(random.randint(1, 10))  # Output: 7 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomrandrangestart-stop-step","title":"<code>random.randrange(start, stop[, step])</code>","text":"<p>Returns a randomly selected element from <code>range(start, stop, step)</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_3","title":"Example","text":"<pre><code>import random\n\nprint(random.randrange(0, 10, 2))  # Output: 4 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#2-working-with-sequences","title":"2. Working with Sequences","text":""},{"location":"languages/python/libraries_frameworks/random/#randomchoiceseq","title":"<code>random.choice(seq)</code>","text":"<p>Returns a random element from the non-empty sequence <code>seq</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_4","title":"Example","text":"<pre><code>import random\n\ncolors = ['red', 'blue', 'green', 'yellow']\nprint(random.choice(colors))  # Output: 'blue' (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomchoicespopulation-weightsnone-cum_weightsnone-k1","title":"<code>random.choices(population, weights=None, *, cum_weights=None, k=1)</code>","text":"<p>Returns a list of <code>k</code> elements chosen from the <code>population</code> with replacement. <code>weights</code> or <code>cum_weights</code> can be used to influence the selection.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_5","title":"Example","text":"<pre><code>import random\n\ncolors = ['red', 'blue', 'green', 'yellow']\nprint(random.choices(colors, k=3))  # Output: ['green', 'yellow', 'red'] (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomsamplepopulation-k","title":"<code>random.sample(population, k)</code>","text":"<p>Returns a list of <code>k</code> unique elements chosen from the <code>population</code> without replacement.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_6","title":"Example","text":"<pre><code>import random\n\ncolors = ['red', 'blue', 'green', 'yellow']\nprint(random.sample(colors, 3))  # Output: ['blue', 'yellow', 'red'] (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomshufflex-random","title":"<code>random.shuffle(x[, random])</code>","text":"<p>Shuffles the sequence <code>x</code> in place.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_7","title":"Example","text":"<pre><code>import random\n\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)  # Output: [3, 5, 1, 4, 2] (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#3-generating-random-values-from-distributions","title":"3. Generating Random Values from Distributions","text":""},{"location":"languages/python/libraries_frameworks/random/#randomgaussmu-sigma","title":"<code>random.gauss(mu, sigma)</code>","text":"<p>Returns a random float from a Gaussian (normal) distribution with mean <code>mu</code> and standard deviation <code>sigma</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_8","title":"Example","text":"<pre><code>import random\n\nprint(random.gauss(0, 1))  # Output: 0.22873166603286567 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomexpovariatelambd","title":"<code>random.expovariate(lambd)</code>","text":"<p>Returns a random float from an exponential distribution with rate <code>lambd</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_9","title":"Example","text":"<pre><code>import random\n\nprint(random.expovariate(1.5))  # Output: 0.36827364554614023 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomtriangularlow-high-mode","title":"<code>random.triangular(low, high, mode)</code>","text":"<p>Returns a random float from a triangular distribution within the range <code>[low, high]</code> with the specified <code>mode</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_10","title":"Example","text":"<pre><code>import random\n\nprint(random.triangular(0, 10, 5))  # Output: 4.642715463090914 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randombetavariatealpha-beta","title":"<code>random.betavariate(alpha, beta)</code>","text":"<p>Returns a random float from a Beta distribution with parameters <code>alpha</code> and <code>beta</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_11","title":"Example","text":"<pre><code>import random\n\nprint(random.betavariate(2, 5))  # Output: 0.17193864448253458 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomgammavariatealpha-beta","title":"<code>random.gammavariate(alpha, beta)</code>","text":"<p>Returns a random float from a Gamma distribution with shape parameter <code>alpha</code> and scale parameter <code>beta</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_12","title":"Example","text":"<pre><code>import random\n\nprint(random.gammavariate(2, 2))  # Output: 3.545345143949921 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomlognormvariatemu-sigma","title":"<code>random.lognormvariate(mu, sigma)</code>","text":"<p>Returns a random float from a log-normal distribution with mean <code>mu</code> and standard deviation <code>sigma</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_13","title":"Example","text":"<pre><code>import random\n\nprint(random.lognormvariate(0, 1))  # Output: 0.9185488656444778 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#randomweibullvariatealpha-beta","title":"<code>random.weibullvariate(alpha, beta)</code>","text":"<p>Returns a random float from a Weibull distribution with scale <code>alpha</code> and shape <code>beta</code>.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_14","title":"Example","text":"<pre><code>import random\n\nprint(random.weibullvariate(1, 1.5))  # Output: 0.6329110645226275 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#seeding-the-random-number-generator","title":"Seeding the Random Number Generator","text":""},{"location":"languages/python/libraries_frameworks/random/#randomseedanone-version2","title":"<code>random.seed(a=None, version=2)</code>","text":"<p>Initializes the random number generator. The <code>a</code> argument can be any hashable object. If <code>a</code> is <code>None</code>, the current system time is used.</p>"},{"location":"languages/python/libraries_frameworks/random/#example_15","title":"Example","text":"<pre><code>import random\n\nrandom.seed(42)\nprint(random.random())  # Output: 0.6394267984578837 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/random/#example-1-simulating-a-dice-roll","title":"Example 1: Simulating a Dice Roll","text":"<pre><code>import random\n\ndef roll_dice():\n    return random.randint(1, 6)\n\nprint(roll_dice())  # Output: 4 (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#example-2-selecting-a-random-password","title":"Example 2: Selecting a Random Password","text":"<pre><code>import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for _ in range(length))\n\nprint(generate_password(10))  # Output: 'g#8N!d2P&amp;5' (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#example-3-shuffling-a-deck-of-cards","title":"Example 3: Shuffling a Deck of Cards","text":"<pre><code>import random\n\ndeck = [f\"{rank}{suit}\" for suit in \"\u2660\u2665\u2666\u2663\" for rank in \"A23456789JQK\"]\nrandom.shuffle(deck)\nprint(deck)  # Output: ['6\u2663', 'Q\u2666', '5\u2666', '3\u2660', 'K\u2665', '2\u2663', ...] (example)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/random/#conclusion","title":"Conclusion","text":"<p>The <code>random</code> module in Python is a powerful tool for generating random numbers and performing random operations. From simple random number generation to more complex random sampling and distribution functions, the <code>random</code> module offers a wide range of utilities for various applications. Whether you're simulating data, creating random passwords, or building games, the <code>random</code> module provides the functionality you need to introduce randomness into your programs.</p>"},{"location":"languages/python/libraries_frameworks/requests/","title":"Python <code>requests</code> Module Report","text":"<p>The <code>requests</code> module in Python is a popular and user-friendly library for making HTTP requests. It provides a simple and intuitive API for sending HTTP requests and handling responses. This report covers installation, basic usage, and practical examples to help you understand how to use the <code>requests</code> library effectively.</p>"},{"location":"languages/python/libraries_frameworks/requests/#introduction","title":"Introduction","text":"<p>The <code>requests</code> library is designed to simplify the process of sending HTTP requests and handling responses. It abstracts the complexities of HTTP protocols and provides a clean and elegant API. It supports various HTTP methods, including GET, POST, PUT, DELETE, and more.</p>"},{"location":"languages/python/libraries_frameworks/requests/#installation","title":"Installation","text":"<p>To install the <code>requests</code> library, you can use pip:</p> <pre><code>pip install requests\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#basic-usage","title":"Basic Usage","text":"<p>Here\u2019s a basic overview of how to use the <code>requests</code> library to make HTTP requests and handle responses.</p>"},{"location":"languages/python/libraries_frameworks/requests/#example-code","title":"Example Code","text":"<pre><code>import requests\n\n# Sending a simple GET request\nresponse = requests.get('https://www.example.com')\n\n# Print the status code\nprint(response.status_code)\n\n# Print the response content\nprint(response.text)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/requests/#sending-a-get-request","title":"Sending a GET Request","text":"<p>To send a GET request, use the <code>requests.get()</code> method. This is commonly used to retrieve data from a URL.</p> <pre><code>import requests\n\nresponse = requests.get('https://jsonplaceholder.typicode.com/posts/1')\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#sending-a-post-request","title":"Sending a POST Request","text":"<p>To send a POST request with data, use the <code>requests.post()</code> method. This is typically used to submit data to a server.</p> <pre><code>import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\ndata = {\n    'title': 'foo',\n    'body': 'bar',\n    'userId': 1\n}\n\nresponse = requests.post(url, json=data)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#handling-query-parameters","title":"Handling Query Parameters","text":"<p>To include query parameters in your request, pass them as a dictionary to the <code>params</code> argument.</p> <pre><code>import requests\n\nparams = {'q': 'python requests', 'sort': 'stars'}\nresponse = requests.get('https://api.github.com/search/repositories', params=params)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#handling-form-data","title":"Handling Form Data","text":"<p>For sending form data, use the <code>data</code> argument. This is useful for submitting forms.</p> <pre><code>import requests\n\nurl = 'https://httpbin.org/post'\nform_data = {'username': 'user', 'password': 'pass'}\n\nresponse = requests.post(url, data=form_data)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#handling-json-data","title":"Handling JSON Data","text":"<p>To send JSON data in a POST request, use the <code>json</code> argument. This automatically sets the <code>Content-Type</code> to <code>application/json</code>.</p> <pre><code>import requests\n\nurl = 'https://httpbin.org/post'\njson_data = {'key1': 'value1', 'key2': 'value2'}\n\nresponse = requests.post(url, json=json_data)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#handling-headers","title":"Handling Headers","text":"<p>You can pass custom headers using the <code>headers</code> argument. This is useful for setting authorization tokens or custom content types.</p> <pre><code>import requests\n\nurl = 'https://httpbin.org/headers'\nheaders = {'Authorization': 'Bearer your_token'}\n\nresponse = requests.get(url, headers=headers)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#handling-cookies","title":"Handling Cookies","text":"<p>To send cookies with your request, use the <code>cookies</code> argument. This can be useful for maintaining sessions.</p> <pre><code>import requests\n\nurl = 'https://httpbin.org/cookies'\ncookies = {'session_id': 'abc123'}\n\nresponse = requests.get(url, cookies=cookies)\n\nprint('Status Code:', response.status_code)\nprint('Response JSON:', response.json())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#error-handling","title":"Error Handling","text":"<p>Handling errors is crucial for robust applications. The <code>requests</code> library provides various ways to handle exceptions.</p>"},{"location":"languages/python/libraries_frameworks/requests/#example-basic-error-handling","title":"Example: Basic Error Handling","text":"<pre><code>import requests\nfrom requests.exceptions import HTTPError, RequestException\n\nurl = 'https://jsonplaceholder.typicode.com/posts/1'\n\ntry:\n    response = requests.get(url)\n    response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)\n    print('Response JSON:', response.json())\nexcept HTTPError as http_err:\n    print(f'HTTP error occurred: {http_err}')\nexcept RequestException as err:\n    print(f'Error occurred: {err}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/requests/#conclusion","title":"Conclusion","text":"<p>The <code>requests</code> library provides a simple and powerful way to make HTTP requests in Python. It supports various HTTP methods, handles parameters, headers, cookies, and provides facilities for robust error handling. With its intuitive API, <code>requests</code> is an excellent choice for interacting with web services and APIs.</p> <p>For more detailed information and advanced usage, refer to the Requests documentation.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/","title":"Web Scraping with Scrapy","text":"<p>Web scraping is a technique used to extract data from websites. Scrapy is a powerful and flexible web scraping framework for Python that simplifies the process of scraping data from websites. This report provides a detailed guide on how to use Scrapy to scrape web data, including installation, basic concepts, and example usage.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#introduction","title":"Introduction","text":"<p>Scrapy is an open-source web crawling framework written in Python. It is used for extracting data from websites, processing it as per requirements, and storing it in various formats. Scrapy provides a convenient way to handle requests, navigate through pages, and extract data.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#installation","title":"Installation","text":"<p>To start using Scrapy, you need to have Python installed on your system. You can then install Scrapy using pip:</p> <pre><code>pip install scrapy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/scrapy/#creating-a-scrapy-project","title":"Creating a Scrapy Project","text":"<p>Once Scrapy is installed, you can create a new project using the <code>scrapy startproject</code> command. This command creates a directory structure for your project.</p> <pre><code>scrapy startproject myproject\n</code></pre> <p>This creates a project directory called <code>myproject</code> with the following structure:</p> <pre><code>myproject/\n    scrapy.cfg\n    myproject/\n        __init__.py\n        items.py\n        middlewares.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/scrapy/#defining-spiders","title":"Defining Spiders","text":"<p>A spider is a class that Scrapy uses to scrape information from a website. You define a spider by creating a new Python file in the <code>spiders</code> directory of your project. </p>"},{"location":"languages/python/libraries_frameworks/scrapy/#example-spider","title":"Example Spider","text":"<p>Here is an example of a spider that scrapes quotes from http://quotes.toscrape.com:</p> <p>Create a file named <code>quotes_spider.py</code> inside the <code>spiders</code> directory:</p> <pre><code>import scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = 'quotes'\n    start_urls = ['http://quotes.toscrape.com']\n\n    def parse(self, response):\n        for quote in response.css('div.quote'):\n            yield {\n                'text': quote.css('span.text::text').get(),\n                'author': quote.css('span small::text').get(),\n                'tags': quote.css('div.tags a.tag::text').getall(),\n            }\n</code></pre> <p>In this example: - <code>name</code> is the name of the spider. - <code>start_urls</code> contains the initial URLs to start crawling from. - <code>parse</code> method is where you define how to extract the data from the response.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#extracting-data","title":"Extracting Data","text":"<p>Scrapy provides several methods for extracting data from web pages. These include CSS selectors and XPath expressions.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#using-css-selectors","title":"Using CSS Selectors","text":"<pre><code>response.css('div.quote span.text::text').get()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/scrapy/#using-xpath-expressions","title":"Using XPath Expressions","text":"<pre><code>response.xpath('//div[@class=\"quote\"]/span[@class=\"text\"]/text()').get()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/scrapy/#handling-requests","title":"Handling Requests","text":"<p>Scrapy allows you to handle requests and responses efficiently. You can follow links to navigate through pages and scrape data.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#example-follow-pagination-links","title":"Example: Follow Pagination Links","text":"<pre><code>import scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = 'quotes'\n    start_urls = ['http://quotes.toscrape.com']\n\n    def parse(self, response):\n        for quote in response.css('div.quote'):\n            yield {\n                'text': quote.css('span.text::text').get(),\n                'author': quote.css('span small::text').get(),\n                'tags': quote.css('div.tags a.tag::text').getall(),\n            }\n\n        # Follow pagination links\n        next_page = response.css('li.next a::attr(href)').get()\n        if next_page is not None:\n            yield response.follow(next_page, self.parse)\n</code></pre> <p>In this example, after scraping the quotes on the current page, the spider follows the pagination link to scrape the next page.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#storing-data","title":"Storing Data","text":"<p>Scrapy allows you to store the scraped data in various formats such as JSON, CSV, or XML. You can specify the output format when running the spider.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#example-save-data-as-json","title":"Example: Save Data as JSON","text":"<p>Run the spider with:</p> <pre><code>scrapy crawl quotes -o quotes.json\n</code></pre> <p>This command runs the <code>quotes</code> spider and saves the scraped data into <code>quotes.json</code>.</p>"},{"location":"languages/python/libraries_frameworks/scrapy/#conclusion","title":"Conclusion","text":"<p>Scrapy is a powerful tool for web scraping and data extraction. It provides a comprehensive framework to handle requests, navigate through pages, and extract and store data efficiently. By understanding the basic concepts of Scrapy and utilizing its features, you can scrape data from virtually any website with ease.</p> <p>For more advanced usage, you can refer to the Scrapy documentation which covers additional topics like handling cookies, dealing with AJAX requests, and using Scrapy with other Python libraries.</p>"},{"location":"languages/python/libraries_frameworks/seaborn/","title":"Seaborn Module in Python: A Comprehensive Guide","text":"<p>Seaborn is a powerful Python visualization library based on matplotlib that provides a high-level interface for drawing attractive statistical graphics. This guide will cover the key features, functionalities, and examples to help you get started with Seaborn.</p>"},{"location":"languages/python/libraries_frameworks/seaborn/#introduction-to-seaborn","title":"Introduction to Seaborn","text":"<p>Seaborn is a library for making statistical graphics in Python. It builds on top of matplotlib and integrates closely with pandas data structures. Seaborn helps you explore and understand your data through visualization.</p> <p>Key features of Seaborn: - Built-in themes for styling matplotlib graphics - Tools for choosing color palettes to make plots visually appealing - Functions to visualize univariate and bivariate distributions - Tools to fit and visualize linear regression models - Functions to visualize matrices of data and hierarchical clustering</p>"},{"location":"languages/python/libraries_frameworks/seaborn/#installation","title":"Installation","text":"<p>To install Seaborn, you can use pip:</p> <pre><code>pip install seaborn\n</code></pre> <p>Or if you are using conda:</p> <pre><code>conda install seaborn\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#basic-plotting-functions","title":"Basic Plotting Functions","text":""},{"location":"languages/python/libraries_frameworks/seaborn/#scatter-plot","title":"Scatter Plot","text":"<p>A scatter plot is used to display the relationship between two continuous variables.</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create scatter plot\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#line-plot","title":"Line Plot","text":"<p>A line plot is useful for visualizing trends in data over time.</p> <pre><code># Create line plot\nsns.lineplot(data=tips, x=\"total_bill\", y=\"tip\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#bar-plot","title":"Bar Plot","text":"<p>A bar plot is used to compare the values of categorical data.</p> <pre><code># Create bar plot\nsns.barplot(data=tips, x=\"day\", y=\"total_bill\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#histogram","title":"Histogram","text":"<p>A histogram is used to visualize the distribution of a single variable.</p> <pre><code># Create histogram\nsns.histplot(data=tips, x=\"total_bill\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#statistical-plots","title":"Statistical Plots","text":""},{"location":"languages/python/libraries_frameworks/seaborn/#box-plot","title":"Box Plot","text":"<p>A box plot is used to display the distribution of data based on a five-number summary (minimum, first quartile, median, third quartile, and maximum).</p> <pre><code># Create box plot\nsns.boxplot(data=tips, x=\"day\", y=\"total_bill\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#violin-plot","title":"Violin Plot","text":"<p>A violin plot combines the benefits of a box plot and a density plot. It shows the distribution of the data across different categories.</p> <pre><code># Create violin plot\nsns.violinplot(data=tips, x=\"day\", y=\"total_bill\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#pair-plot","title":"Pair Plot","text":"<p>A pair plot is used to visualize the pairwise relationships in a dataset.</p> <pre><code># Create pair plot\nsns.pairplot(tips)\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#matrix-plots","title":"Matrix Plots","text":""},{"location":"languages/python/libraries_frameworks/seaborn/#heatmap","title":"Heatmap","text":"<p>A heatmap is used to visualize the magnitude of data values as colors in a matrix.</p> <pre><code># Create heatmap\nflights = sns.load_dataset(\"flights\")\nflights_pivot = flights.pivot(\"month\", \"year\", \"passengers\")\nsns.heatmap(flights_pivot, annot=True, fmt=\"d\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#regression-plots","title":"Regression Plots","text":"<p>Regression plots are used to estimate the relationship between two variables.</p> <pre><code># Create regression plot\nsns.regplot(data=tips, x=\"total_bill\", y=\"tip\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#customizing-plots","title":"Customizing Plots","text":"<p>Seaborn provides various options for customizing plots, including setting themes, choosing color palettes, and adding labels.</p>"},{"location":"languages/python/libraries_frameworks/seaborn/#setting-themes","title":"Setting Themes","text":"<pre><code># Set theme\nsns.set_theme(style=\"darkgrid\")\n\n# Create plot with theme\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#choosing-color-palettes","title":"Choosing Color Palettes","text":"<pre><code># Set color palette\nsns.set_palette(\"husl\")\n\n# Create plot with color palette\nsns.boxplot(data=tips, x=\"day\", y=\"total_bill\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#adding-labels","title":"Adding Labels","text":"<pre><code># Create plot with labels\nplot = sns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\nplot.set(title=\"Total Bill vs Tip\", xlabel=\"Total Bill\", ylabel=\"Tip\")\n\n# Display plot\nplt.show()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/seaborn/#conclusion","title":"Conclusion","text":"<p>Seaborn is a versatile library that simplifies the process of creating complex visualizations in Python. Its integration with pandas and its high-level interface make it an essential tool for data analysis and exploration. By using the various plotting functions and customization options, you can create informative and attractive visualizations to gain insights from your data.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/","title":"Python Selenium WebDriver Module Report","text":"<p>The <code>selenium</code> WebDriver module in Python provides a powerful tool for automating web browsers. It is commonly used for testing web applications, web scraping, and performing repetitive browser tasks. This report covers installation, basic usage, and practical examples to help you understand how to use Selenium WebDriver effectively.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#introduction","title":"Introduction","text":"<p>Selenium WebDriver is a tool for automating web applications for testing purposes, but it can also be used for automating any web-based tasks. It provides a way to control a browser programmatically, allowing you to interact with web elements, navigate through pages, and perform various tasks.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#installation","title":"Installation","text":"<p>To use Selenium WebDriver, you need to install the <code>selenium</code> library and download the appropriate WebDriver executable for your browser (e.g., ChromeDriver for Chrome, GeckoDriver for Firefox).</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#install-selenium","title":"Install Selenium","text":"<p>Install the Selenium package using pip:</p> <pre><code>pip install selenium\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#download-webdriver-executable","title":"Download WebDriver Executable","text":"<ul> <li>ChromeDriver: Download ChromeDriver</li> <li>GeckoDriver: Download GeckoDriver</li> <li>EdgeDriver: Download EdgeDriver</li> </ul> <p>Make sure to place the WebDriver executable in a directory included in your system's PATH or specify the path to the executable when initializing the WebDriver.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#basic-usage","title":"Basic Usage","text":"<p>Here\u2019s a basic overview of how to use Selenium WebDriver to automate browser tasks.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#example-code","title":"Example Code","text":"<pre><code>from selenium import webdriver\n\n# Initialize the WebDriver (Chrome in this case)\ndriver = webdriver.Chrome()\n\n# Open a webpage\ndriver.get('https://www.example.com')\n\n# Close the browser\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#setting-up-webdriver","title":"Setting Up WebDriver","text":"<p>To start using Selenium, you need to initialize a WebDriver instance. Below is an example of setting up Chrome WebDriver.</p> <pre><code>from selenium import webdriver\n\n# Set up Chrome WebDriver\ndriver = webdriver.Chrome(executable_path='/path/to/chromedriver')\n\n# Open a webpage\ndriver.get('https://www.example.com')\n</code></pre> <p>Replace <code>/path/to/chromedriver</code> with the path to the ChromeDriver executable on your system.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#navigating-pages","title":"Navigating Pages","text":"<p>You can navigate to different pages using WebDriver methods.</p> <pre><code>from selenium import webdriver\n\ndriver = webdriver.Chrome()\n\n# Open a page\ndriver.get('https://www.example.com')\n\n# Navigate to another page\ndriver.get('https://www.example.com/about')\n\n# Go back to the previous page\ndriver.back()\n\n# Go forward to the next page\ndriver.forward()\n\n# Refresh the current page\ndriver.refresh()\n\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#interacting-with-web-elements","title":"Interacting with Web Elements","text":"<p>Selenium allows you to interact with web elements like buttons, links, and text fields.</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\ndriver.get('https://www.example.com')\n\n# Find an element by its name attribute\nsearch_box = driver.find_element(By.NAME, 'q')\n\n# Enter text into the search box\nsearch_box.send_keys('Selenium WebDriver')\n\n# Submit the search form\nsearch_box.submit()\n\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#handling-forms","title":"Handling Forms","text":"<p>You can handle form submission and input elements with Selenium.</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\ndriver.get('https://www.example.com/login')\n\n# Find username and password fields\nusername = driver.find_element(By.NAME, 'username')\npassword = driver.find_element(By.NAME, 'password')\n\n# Enter credentials\nusername.send_keys('myusername')\npassword.send_keys('mypassword')\n\n# Submit the form\nlogin_button = driver.find_element(By.NAME, 'submit')\nlogin_button.click()\n\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#waiting-for-elements","title":"Waiting for Elements","text":"<p>Selenium provides mechanisms to wait for elements to appear or become clickable to handle dynamic content.</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Chrome()\n\ndriver.get('https://www.example.com')\n\n# Wait for an element to become clickable\nwait = WebDriverWait(driver, 10)\nelement = wait.until(EC.element_to_be_clickable((By.ID, 'submit-button')))\n\n# Click the element\nelement.click()\n\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#taking-screenshots","title":"Taking Screenshots","text":"<p>You can capture screenshots of the current browser window.</p> <pre><code>from selenium import webdriver\n\ndriver = webdriver.Chrome()\n\ndriver.get('https://www.example.com')\n\n# Capture screenshot\ndriver.save_screenshot('screenshot.png')\n\ndriver.quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#handling-common-issues","title":"Handling Common Issues","text":""},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#webdriver-not-found","title":"WebDriver Not Found","text":"<p>If you encounter a \"WebDriver not found\" error, ensure that the WebDriver executable is in your system\u2019s PATH or provide the correct path to the executable.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#element-not-found","title":"Element Not Found","text":"<p>If an element cannot be found, ensure that the element exists on the page and that your locator strategy (e.g., <code>By.ID</code>, <code>By.NAME</code>, <code>By.XPATH</code>) is correct.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#timeout-issues","title":"Timeout Issues","text":"<p>If you experience timeouts, consider increasing the wait time or using explicit waits to handle dynamic content properly.</p>"},{"location":"languages/python/libraries_frameworks/selenium_webdriver/#conclusion","title":"Conclusion","text":"<p>Selenium WebDriver is a powerful tool for automating web browsers. It supports a wide range of browser interactions, including navigating pages, interacting with web elements, handling forms, waiting for elements, and capturing screenshots. By understanding and using these features, you can effectively automate and test web applications.</p> <p>For more detailed information and advanced usage, refer to the Selenium documentation.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/","title":"Python Sphinx Module Detailed Report","text":""},{"location":"languages/python/libraries_frameworks/sphinx/#overview","title":"Overview","text":"<p>Sphinx is a powerful documentation generator for Python projects. It transforms reStructuredText files into various output formats, such as HTML, LaTeX, ePub, and more.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#features","title":"Features","text":"<ul> <li>Extensible: Supports numerous extensions.</li> <li>Theming: Customizable themes.</li> <li>Automatic Indexing: Generates indices and tables of contents.</li> <li>Code Syntax Highlighting: Highlights code in multiple languages.</li> <li>Autodoc: Automatically generates documentation from Python docstrings.</li> </ul>"},{"location":"languages/python/libraries_frameworks/sphinx/#installation","title":"Installation","text":"<p>Install Sphinx using pip: <pre><code>pip install sphinx\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/sphinx/#getting-started","title":"Getting Started","text":""},{"location":"languages/python/libraries_frameworks/sphinx/#initialize-sphinx-project","title":"Initialize Sphinx Project","text":"<p>Run the <code>sphinx-quickstart</code> command to set up a new Sphinx project: <pre><code>sphinx-quickstart\n</code></pre> This command will prompt you with several questions to configure your project.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#project-structure","title":"Project Structure","text":"<p>After initialization, your project structure will look like this: <pre><code>docs/\n\u251c\u2500\u2500 _build/\n\u251c\u2500\u2500 _static/\n\u251c\u2500\u2500 _templates/\n\u251c\u2500\u2500 conf.py\n\u251c\u2500\u2500 index.rst\n\u251c\u2500\u2500 modules.rst\n\u2514\u2500\u2500 Makefile\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/sphinx/#configuration","title":"Configuration","text":"<p>Edit the <code>conf.py</code> file to configure your Sphinx project. Common configurations include: - Project information - Sphinx extensions - Paths and directories</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#example-confpy","title":"Example <code>conf.py</code>","text":"<pre><code># Configuration file for the Sphinx documentation builder.\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath('../src'))\n\nproject = 'MyProject'\nauthor = 'MyName'\nrelease = '0.1'\n\nextensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.napoleon',\n]\n\ntemplates_path = ['_templates']\nexclude_patterns = []\n\nhtml_theme = 'alabaster'\nhtml_static_path = ['_static']\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sphinx/#writing-documentation","title":"Writing Documentation","text":""},{"location":"languages/python/libraries_frameworks/sphinx/#creating-rst-files","title":"Creating <code>.rst</code> Files","text":"<p>Sphinx uses reStructuredText (reST) by default. Create <code>.rst</code> files in your project to write documentation.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#example-indexrst","title":"Example <code>index.rst</code>","text":"<pre><code>.. MyProject documentation master file\n\nWelcome to MyProject's documentation!\n=====================================\n\nContents:\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   modules\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sphinx/#including-docstrings-with-autodoc","title":"Including Docstrings with Autodoc","text":"<p>The <code>sphinx.ext.autodoc</code> extension allows you to include docstrings from your Python code.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#enable-autodoc","title":"Enable Autodoc","text":"<p>Add <code>sphinx.ext.autodoc</code> to the <code>extensions</code> list in your <code>conf.py</code> file: <pre><code>extensions = ['sphinx.ext.autodoc']\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/sphinx/#using-autodoc","title":"Using Autodoc","text":"<p>You can include docstrings in your reST files using the <code>automodule</code> directive.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#example-modulesrst","title":"Example <code>modules.rst</code>","text":"<pre><code>MyModule\n========\n\n.. automodule:: mymodule\n   :members:\n   :undoc-members:\n   :show-inheritance:\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sphinx/#building-documentation","title":"Building Documentation","text":"<p>To build the documentation in HTML format, navigate to your project's root directory and run: <pre><code>make html\n</code></pre> The generated HTML files will be located in the <code>_build/html</code> directory.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#example-documenting-a-simple-python-module","title":"Example: Documenting a Simple Python Module","text":""},{"location":"languages/python/libraries_frameworks/sphinx/#python-module-mymodulepy","title":"Python Module (<code>mymodule.py</code>)","text":"<pre><code>\"\"\"\nMyModule\n========\n\nThis module provides an example class and functions.\n\"\"\"\n\nclass MyClass:\n    \"\"\"\n    A simple example class.\n\n    Attributes\n    ----------\n    value : int\n        The value of the class instance.\n    \"\"\"\n\n    def __init__(self, value):\n        \"\"\"\n        Initializes the MyClass instance with a value.\n\n        Parameters\n        ----------\n        value : int\n            The value to set.\n        \"\"\"\n        self.value = value\n\n    def increment(self):\n        \"\"\"\n        Increments the value by one.\n\n        Returns\n        -------\n        int\n            The incremented value.\n        \"\"\"\n        self.value += 1\n        return self.value\n\ndef add(a, b):\n    \"\"\"\n    Adds two numbers.\n\n    Parameters\n    ----------\n    a : int\n        The first number.\n    b : int\n        The second number.\n\n    Returns\n    -------\n    int\n        The sum of a and b.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sphinx/#modulesrst","title":"<code>modules.rst</code>","text":"<pre><code>MyModule\n========\n\n.. automodule:: mymodule\n   :members:\n   :undoc-members:\n   :show-inheritance:\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sphinx/#additional-tips","title":"Additional Tips","text":""},{"location":"languages/python/libraries_frameworks/sphinx/#using-sphinx-extensions","title":"Using Sphinx Extensions","text":"<p>Sphinx supports various extensions to enhance your documentation.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#napoleon-extension","title":"Napoleon Extension","text":"<p>The <code>sphinx.ext.napoleon</code> extension allows you to use Google style docstrings.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#enable-napoleon","title":"Enable Napoleon","text":"<p>Add <code>sphinx.ext.napoleon</code> to your <code>extensions</code> list in <code>conf.py</code>: <pre><code>extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/sphinx/#theming","title":"Theming","text":"<p>You can customize the appearance of your documentation using themes. The default theme is <code>alabaster</code>, but you can choose from many other themes.</p>"},{"location":"languages/python/libraries_frameworks/sphinx/#example-changing-theme","title":"Example: Changing Theme","text":"<p><pre><code>html_theme = 'sphinx_rtd_theme'\n</code></pre> Install the theme using pip: <pre><code>pip install sphinx_rtd_theme\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/sphinx/#conclusion","title":"Conclusion","text":"<p>Sphinx is a versatile tool for generating documentation for Python projects. By leveraging its features and extensions, you can create comprehensive and visually appealing documentation with ease.</p>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/","title":"SQLAlchemy Module in Python: A Comprehensive Guide","text":"<p>SQLAlchemy is a powerful SQL toolkit and Object-Relational Mapping (ORM) library for Python. It provides a full suite of well-known enterprise-level persistence patterns, designed for efficient and high-performing database access. This guide covers the core features, functionalities, and provides detailed examples to help you get started with SQLAlchemy.</p>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#introduction-to-sqlalchemy","title":"Introduction to SQLAlchemy","text":"<p>SQLAlchemy is designed to provide database-agnostic SQL and ORM capabilities, allowing developers to interact with a variety of databases using a consistent API. It aims to simplify database access and operations while offering powerful and flexible tools for database management.</p> <p>Key features of SQLAlchemy: - Comprehensive SQL Expression Language - High-performance ORM - Database-agnostic operations - Flexible and extensible architecture - Support for advanced database schema operations</p>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#installation","title":"Installation","text":"<p>To install SQLAlchemy, you can use pip:</p> <pre><code>pip install SQLAlchemy\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#core-concepts","title":"Core Concepts","text":""},{"location":"languages/python/libraries_frameworks/sqlalchemy/#engine","title":"Engine","text":"<p>The <code>Engine</code> is the starting point for any SQLAlchemy application, managing the database connection pool.</p> <pre><code>from sqlalchemy import create_engine\n\n# Create an engine\nengine = create_engine('sqlite:///example.db')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#session","title":"Session","text":"<p>The <code>Session</code> is used for ORM operations, representing a \u201cholding zone\u201d for all the objects loaded or associated with a database session.</p> <pre><code>from sqlalchemy.orm import sessionmaker\n\n# Create a configured \"Session\" class\nSession = sessionmaker(bind=engine)\n\n# Create a Session\nsession = Session()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#declarative-base","title":"Declarative Base","text":"<p>The <code>declarative_base</code> function sets up the base class for our classes definitions, establishing the foundation for ORM mappings.</p> <pre><code>from sqlalchemy.ext.declarative import declarative_base\n\n# Create a base class\nBase = declarative_base()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#defining-models","title":"Defining Models","text":"<p>Models are Python classes that represent database tables. They inherit from the base class created using <code>declarative_base</code>.</p> <pre><code>from sqlalchemy import Column, Integer, String\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    age = Column(Integer)\n\n    def __repr__(self):\n        return f\"&lt;User(name={self.name}, age={self.age})&gt;\"\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#creating-the-database","title":"Creating the Database","text":"<p>To create the database and the tables defined by the models, use the <code>create_all</code> method.</p> <pre><code>Base.metadata.create_all(engine)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#crud-operations","title":"CRUD Operations","text":""},{"location":"languages/python/libraries_frameworks/sqlalchemy/#create","title":"Create","text":"<p>To add new records to the database:</p> <pre><code># Create a new user instance\nnew_user = User(name='Alice', age=25)\n\n# Add the user to the session\nsession.add(new_user)\n\n# Commit the transaction\nsession.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#read","title":"Read","text":"<p>To query records from the database:</p> <pre><code># Query all users\nusers = session.query(User).all()\nfor user in users:\n    print(user)\n\n# Query a specific user by ID\nuser = session.query(User).filter_by(id=1).first()\nprint(user)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#update","title":"Update","text":"<p>To update existing records:</p> <pre><code># Query the user\nuser = session.query(User).filter_by(id=1).first()\n\n# Update the user's age\nuser.age = 26\n\n# Commit the transaction\nsession.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#delete","title":"Delete","text":"<p>To delete records from the database:</p> <pre><code># Query the user\nuser = session.query(User).filter_by(id=1).first()\n\n# Delete the user\nsession.delete(user)\n\n# Commit the transaction\nsession.commit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#querying-the-database","title":"Querying the Database","text":"<p>SQLAlchemy provides a powerful querying API:</p> <pre><code># Filter by age\nusers = session.query(User).filter(User.age &gt;= 20).all()\n\n# Order by age\nusers = session.query(User).order_by(User.age).all()\n\n# Limit results\nusers = session.query(User).limit(10).all()\n\n# Using SQL functions\nfrom sqlalchemy import func\nuser_count = session.query(func.count(User.id)).scalar()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#relationships","title":"Relationships","text":""},{"location":"languages/python/libraries_frameworks/sqlalchemy/#one-to-many","title":"One-to-Many","text":"<p>Define a one-to-many relationship between tables using <code>relationship</code> and <code>ForeignKey</code>.</p> <pre><code>from sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import relationship\n\nclass Address(Base):\n    __tablename__ = 'addresses'\n    id = Column(Integer, primary_key=True)\n    email = Column(String)\n    user_id = Column(Integer, ForeignKey('users.id'))\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n\nUser.addresses = relationship(\"Address\", order_by=Address.id, back_populates=\"user\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#many-to-many","title":"Many-to-Many","text":"<p>Define a many-to-many relationship using an association table.</p> <pre><code>from sqlalchemy import Table\n\nassociation_table = Table('association', Base.metadata,\n    Column('left_id', ForeignKey('left.id')),\n    Column('right_id', ForeignKey('right.id'))\n)\n\nclass Left(Base):\n    __tablename__ = 'left'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Right\", secondary=association_table, back_populates=\"parents\")\n\nclass Right(Base):\n    __tablename__ = 'right'\n    id = Column(Integer, primary_key=True)\n    parents = relationship(\"Left\", secondary=association_table, back_populates=\"children\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/sqlalchemy/#migrations-with-alembic","title":"Migrations with Alembic","text":"<p>Alembic is a lightweight database migration tool for use with SQLAlchemy.</p> <p>Install Alembic:</p> <pre><code>pip install alembic\n</code></pre> <p>Initialize Alembic:</p> <pre><code>alembic init alembic\n</code></pre> <p>Configure Alembic in <code>alembic.ini</code> and <code>env.py</code>, then create and apply migrations.</p>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#eager-loading","title":"Eager Loading","text":"<p>Eager loading loads related objects as part of the initial query.</p> <pre><code>from sqlalchemy.orm import joinedload\n\nusers = session.query(User).options(joinedload(User.addresses)).all()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#lazy-loading","title":"Lazy Loading","text":"<p>Lazy loading loads related objects on demand.</p> <pre><code># Define lazy loading in relationships\nUser.addresses = relationship(\"Address\", lazy='select')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#error-handling","title":"Error Handling","text":"<p>SQLAlchemy provides exceptions for various database errors.</p> <pre><code>from sqlalchemy.exc import IntegrityError\n\ntry:\n    session.add(new_user)\n    session.commit()\nexcept IntegrityError:\n    session.rollback()\n    print(\"Error: Could not add user\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlalchemy/#conclusion","title":"Conclusion","text":"<p>SQLAlchemy is a powerful and flexible ORM and SQL toolkit for Python, providing comprehensive tools for database access and management. By mastering its core features and functionalities, you can efficiently interact with databases and perform complex operations with ease. This guide should serve as a solid foundation for building database-driven applications using SQLAlchemy.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/","title":"Python <code>sqlite3</code> Module: Detailed Overview and Examples","text":"<p>The <code>sqlite3</code> module in Python provides a lightweight, disk-based database that doesn\u2019t require a separate server process. It allows you to work with SQLite databases directly from Python, making it ideal for small to medium-sized applications or for prototyping.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#importing-the-sqlite3-module","title":"Importing the <code>sqlite3</code> Module","text":"<p>To use the <code>sqlite3</code> module, you need to import it:</p> <pre><code>import sqlite3\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/sqlite3/#1-connecting-to-a-database","title":"1. Connecting to a Database","text":"<p>To interact with an SQLite database, you first need to establish a connection to it. If the database file does not exist, SQLite will create it.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to a database (or create it if it doesn't exist)\nconnection = sqlite3.connect('example.db')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#2-creating-a-table","title":"2. Creating a Table","text":"<p>Once connected, you can create tables using SQL commands.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_1","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Create a table\ncursor.execute('''\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT NOT NULL,\n    email TEXT NOT NULL\n)\n''')\n\n# Commit the transaction\nconnection.commit()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#3-inserting-data","title":"3. Inserting Data","text":"<p>You can insert data into tables using SQL <code>INSERT</code> statements.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_2","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Insert data into the table\ncursor.execute('''\nINSERT INTO users (username, email)\nVALUES (?, ?)\n''', ('john_doe', 'john.doe@example.com'))\n\n# Commit the transaction\nconnection.commit()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#4-querying-data","title":"4. Querying Data","text":"<p>To retrieve data from the database, use SQL <code>SELECT</code> statements.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_3","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Query data from the table\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n# Close the connection\nconnection.close()\n</code></pre> <p>Output:</p> <pre><code>(1, 'john_doe', 'john.doe@example.com')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#5-updating-data","title":"5. Updating Data","text":"<p>You can update existing records using SQL <code>UPDATE</code> statements.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_4","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Update data in the table\ncursor.execute('''\nUPDATE users\nSET email = ?\nWHERE username = ?\n''', ('john.newemail@example.com', 'john_doe'))\n\n# Commit the transaction\nconnection.commit()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#6-deleting-data","title":"6. Deleting Data","text":"<p>To remove records from a table, use SQL <code>DELETE</code> statements.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_5","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Delete data from the table\ncursor.execute('''\nDELETE FROM users\nWHERE username = ?\n''', ('john_doe',))\n\n# Commit the transaction\nconnection.commit()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#7-using-transactions","title":"7. Using Transactions","text":"<p>SQLite3 supports transactions, allowing you to commit or roll back changes.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_6","title":"Example","text":"<pre><code>import sqlite3\n\ntry:\n    # Connect to the database\n    connection = sqlite3.connect('example.db')\n    cursor = connection.cursor()\n\n    # Start a transaction\n    cursor.execute('BEGIN TRANSACTION')\n\n    # Insert data\n    cursor.execute('''\n    INSERT INTO users (username, email)\n    VALUES (?, ?)\n    ''', ('jane_doe', 'jane.doe@example.com'))\n\n    # Commit the transaction\n    connection.commit()\nexcept sqlite3.Error as e:\n    print(f\"Error: {e}\")\n    connection.rollback()\nfinally:\n    # Close the connection\n    connection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#8-using-parameterized-queries","title":"8. Using Parameterized Queries","text":"<p>Parameterized queries help prevent SQL injection and manage input data safely.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_7","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Use parameterized queries\ncursor.execute('''\nSELECT * FROM users WHERE username = ?\n''', ('jane_doe',))\n\n# Fetch and print the results\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#9-creating-and-using-indexes","title":"9. Creating and Using Indexes","text":"<p>Indexes improve query performance on large datasets.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_8","title":"Example","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconnection = sqlite3.connect('example.db')\ncursor = connection.cursor()\n\n# Create an index on the username column\ncursor.execute('''\nCREATE INDEX idx_username\nON users (username)\n''')\n\n# Commit the transaction\nconnection.commit()\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#10-handling-errors","title":"10. Handling Errors","text":"<p>Proper error handling ensures robustness when working with databases.</p>"},{"location":"languages/python/libraries_frameworks/sqlite3/#example_9","title":"Example","text":"<pre><code>import sqlite3\n\ntry:\n    # Connect to the database\n    connection = sqlite3.connect('example.db')\n    cursor = connection.cursor()\n\n    # Perform database operations\n    cursor.execute('''\n    INSERT INTO users (username, email)\n    VALUES (?, ?)\n    ''', ('error_test', 'error_test@example.com'))\n\n    # Commit the transaction\n    connection.commit()\nexcept sqlite3.Error as e:\n    print(f\"Error: {e}\")\nfinally:\n    # Close the connection\n    connection.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sqlite3/#conclusion","title":"Conclusion","text":"<p>The <code>sqlite3</code> module provides a straightforward interface for interacting with SQLite databases from Python. It supports a wide range of database operations, including connecting, creating tables, inserting, querying, updating, and deleting data. By understanding these core functionalities and incorporating error handling and transactions, you can effectively manage and manipulate SQLite databases in your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/subprocess/","title":"Python <code>subprocess</code> Module: Detailed Overview and Examples","text":"<p>The <code>subprocess</code> module in Python is used to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module is particularly useful for running shell commands, interacting with other programs, and managing processes.</p>"},{"location":"languages/python/libraries_frameworks/subprocess/#importing-the-subprocess-module","title":"Importing the <code>subprocess</code> Module","text":"<p>To use the <code>subprocess</code> module, you need to import it:</p> <pre><code>import subprocess\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#running-external-commands","title":"Running External Commands","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-running-a-simple-command","title":"Example: Running a Simple Command","text":"<pre><code>import subprocess\n\n# Run a simple command\nresult = subprocess.run(['ls', '-l'], capture_output=True, text=True)\n\n# Print the command's output\nprint(result.stdout)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#communicating-with-processes","title":"Communicating with Processes","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#sending-input-to-a-process","title":"Sending Input to a Process","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-sending-input-via-stdin","title":"Example: Sending Input via <code>stdin</code>","text":"<pre><code>import subprocess\n\n# Run a command that reads input\nproc = subprocess.Popen(['cat'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True)\n\n# Send input and get the output\noutput, _ = proc.communicate('Hello, World!')\nprint(output)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#capturing-output-and-error-streams","title":"Capturing Output and Error Streams","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#capturing-output-and-errors","title":"Capturing Output and Errors","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-capturing-both-output-and-errors","title":"Example: Capturing Both Output and Errors","text":"<pre><code>import subprocess\n\n# Run a command and capture its output and errors\nresult = subprocess.run(['ls', '-l'], capture_output=True, text=True)\n\n# Print the command's output\nprint('Output:')\nprint(result.stdout)\n\n# Print the command's error (if any)\nprint('Error:')\nprint(result.stderr)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#handling-errors","title":"Handling Errors","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-running-a-command-that-fails","title":"Example: Running a Command That Fails","text":"<pre><code>import subprocess\n\n# Run a command that fails\ntry:\n    result = subprocess.run(['ls', 'nonexistentfile'], capture_output=True, text=True, check=True)\nexcept subprocess.CalledProcessError as e:\n    print('Command failed with return code', e.returncode)\n    print('Error output:', e.stderr)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#process-management","title":"Process Management","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#running-commands-in-background","title":"Running Commands in Background","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-running-a-command-in-background","title":"Example: Running a Command in Background","text":"<pre><code>import subprocess\n\n# Run a command in background\nproc = subprocess.Popen(['sleep', '10'])\n\n# Check if the process is still running\nprint('Process is running:', proc.poll() is None)\n\n# Wait for the process to complete\nproc.wait()\nprint('Process finished')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#using-shell-commands","title":"Using Shell Commands","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#running-commands-in-shell","title":"Running Commands in Shell","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-running-a-command-with-shelltrue","title":"Example: Running a Command with Shell=True","text":"<pre><code>import subprocess\n\n# Run a shell command\nresult = subprocess.run('echo $HOME', shell=True, capture_output=True, text=True)\n\n# Print the command's output\nprint(result.stdout)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#avoiding-shell-injection","title":"Avoiding Shell Injection","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-avoiding-shell-injection-by-using-list-arguments","title":"Example: Avoiding Shell Injection by Using List Arguments","text":"<pre><code>import subprocess\n\n# Use list arguments instead of shell=True\nresult = subprocess.run(['echo', '$HOME'], capture_output=True, text=True)\n\n# Print the command's output\nprint(result.stdout)  # Output will not include the environment variable\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#advanced-features","title":"Advanced Features","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#using-subprocesspopen-for-more-control","title":"Using <code>subprocess.Popen</code> for More Control","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-using-subprocesspopen-for-streaming-output","title":"Example: Using <code>subprocess.Popen</code> for Streaming Output","text":"<pre><code>import subprocess\n\n# Run a command and stream its output\nproc = subprocess.Popen(['ping', 'localhost'], stdout=subprocess.PIPE, text=True)\n\n# Print the output line by line\nfor line in proc.stdout:\n    print(line, end='')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-modifying-environment-variables","title":"Example: Modifying Environment Variables","text":"<pre><code>import subprocess\nimport os\n\n# Define new environment variables\nenv = os.environ.copy()\nenv['MY_VAR'] = 'value'\n\n# Run a command with modified environment\nresult = subprocess.run(['printenv', 'MY_VAR'], capture_output=True, text=True, env=env)\n\n# Print the command's output\nprint(result.stdout.strip())\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#redirecting-output-to-files","title":"Redirecting Output to Files","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-redirecting-output-to-a-file","title":"Example: Redirecting Output to a File","text":"<pre><code>import subprocess\n\n# Run a command and redirect its output to a file\nwith open('output.txt', 'w') as f:\n    subprocess.run(['ls', '-l'], stdout=f)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/subprocess/#example-1-running-a-system-command-and-parsing-output","title":"Example 1: Running a System Command and Parsing Output","text":"<pre><code>import subprocess\n\n# Run a system command\nresult = subprocess.run(['df', '-h'], capture_output=True, text=True)\n\n# Print and parse the output\nfor line in result.stdout.splitlines():\n    print(line)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#example-2-downloading-a-file-using-curl","title":"Example 2: Downloading a File Using <code>curl</code>","text":"<pre><code>import subprocess\n\n# Download a file using curl\nurl = 'http://example.com/file.txt'\nfilename = 'file.txt'\n\nsubprocess.run(['curl', '-o', filename, url])\nprint(f'Downloaded {filename}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#example-3-running-a-python-script","title":"Example 3: Running a Python Script","text":"<pre><code>import subprocess\n\n# Run a Python script\nresult = subprocess.run(['python3', 'script.py'], capture_output=True, text=True)\n\n# Print the script's output\nprint(result.stdout)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/subprocess/#conclusion","title":"Conclusion","text":"<p>The <code>subprocess</code> module provides a robust interface for running and interacting with external processes. By using functions such as <code>subprocess.run()</code>, <code>subprocess.Popen()</code>, and handling process input/output, you can perform a wide range of tasks from simple command execution to complex process management. Understanding how to effectively use <code>subprocess</code> will enable you to integrate and automate system-level tasks within your Python programs.</p>"},{"location":"languages/python/libraries_frameworks/sys/","title":"Python sys Module: A Comprehensive Guide","text":"<p>The <code>sys</code> module in Python provides access to some variables and functions that interact with the Python interpreter. It is a built-in module that includes functionalities for manipulating the Python runtime environment, handling command-line arguments, and managing standard input and output. This guide covers the key features and functionalities of the <code>sys</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/sys/#introduction-to-sys","title":"Introduction to sys","text":"<p>The <code>sys</code> module provides a range of functions and variables that are used to interact with the Python interpreter. It is a powerful tool for managing the Python environment and performing system-level operations.</p>"},{"location":"languages/python/libraries_frameworks/sys/#installation","title":"Installation","text":"<p>The <code>sys</code> module is a built-in module in Python, so you do not need to install it separately. It is available by default in the Python standard library.</p>"},{"location":"languages/python/libraries_frameworks/sys/#system-specific-parameters-and-functions","title":"System-Specific Parameters and Functions","text":"<p>The <code>sys</code> module provides access to system-specific parameters and functions.</p>"},{"location":"languages/python/libraries_frameworks/sys/#accessing-system-information","title":"Accessing System Information","text":"<pre><code>import sys\n\n# Print the Python version\nprint(f'Python version: {sys.version}')\n\n# Print the platform\nprint(f'Platform: {sys.platform}')\n\n# Print the executable path\nprint(f'Python executable path: {sys.executable}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#maximum-recursion-depth","title":"Maximum Recursion Depth","text":"<pre><code>import sys\n\n# Get the maximum recursion depth\nmax_depth = sys.getrecursionlimit()\nprint(f'Maximum recursion depth: {max_depth}')\n\n# Set a new recursion depth\nsys.setrecursionlimit(2000)\nprint(f'New maximum recursion depth: {sys.getrecursionlimit()}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#command-line-arguments","title":"Command-Line Arguments","text":"<p>The <code>sys</code> module allows you to access command-line arguments passed to a script.</p>"},{"location":"languages/python/libraries_frameworks/sys/#accessing-command-line-arguments","title":"Accessing Command-Line Arguments","text":"<pre><code>import sys\n\n# Print command-line arguments\nprint('Command-line arguments:')\nfor arg in sys.argv:\n    print(arg)\n</code></pre> <p>To test this, save the script as <code>example.py</code> and run it from the command line with additional arguments:</p> <pre><code>python example.py arg1 arg2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#example-output","title":"Example Output","text":"<pre><code>Command-line arguments:\nexample.py\narg1\narg2\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#standard-input-and-output","title":"Standard Input and Output","text":"<p>The <code>sys</code> module provides access to standard input, output, and error streams.</p>"},{"location":"languages/python/libraries_frameworks/sys/#redirecting-standard-output","title":"Redirecting Standard Output","text":"<pre><code>import sys\n\n# Redirect standard output to a file\nwith open('output.txt', 'w') as f:\n    sys.stdout = f\n    print('This will be written to the file')\n\n# Restore standard output to the console\nsys.stdout = sys.__stdout__\nprint('This will be printed to the console')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#reading-from-standard-input","title":"Reading from Standard Input","text":"<pre><code>import sys\n\n# Read from standard input\nprint('Enter something:')\nuser_input = sys.stdin.readline()\nprint(f'You entered: {user_input.strip()}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#exit-and-error-handling","title":"Exit and Error Handling","text":"<p>The <code>sys</code> module provides functions for exiting a program and handling errors.</p>"},{"location":"languages/python/libraries_frameworks/sys/#exiting-a-program","title":"Exiting a Program","text":"<pre><code>import sys\n\n# Exit the program with a status code\nsys.exit('Exiting the program')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#handling-errors","title":"Handling Errors","text":"<pre><code>import sys\n\ntry:\n    # Raise an exception\n    1 / 0\nexcept Exception as e:\n    # Print the error to standard error\n    print(f'An error occurred: {e}', file=sys.stderr)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#path-management","title":"Path Management","text":"<p>The <code>sys</code> module allows you to manipulate the module search path.</p>"},{"location":"languages/python/libraries_frameworks/sys/#modifying-the-module-search-path","title":"Modifying the Module Search Path","text":"<pre><code>import sys\nimport os\n\n# Print the current module search path\nprint('Original module search path:')\nprint(sys.path)\n\n# Add a new directory to the module search path\nsys.path.append('/path/to/your/module')\n\n# Print the modified module search path\nprint('Modified module search path:')\nprint(sys.path)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#customizing-the-python-runtime","title":"Customizing the Python Runtime","text":"<p>The <code>sys</code> module provides tools for customizing the Python runtime environment.</p>"},{"location":"languages/python/libraries_frameworks/sys/#setting-the-recursion-limit","title":"Setting the Recursion Limit","text":"<pre><code>import sys\n\n# Set a custom recursion limit\nsys.setrecursionlimit(1500)\nprint(f'Recursion limit set to: {sys.getrecursionlimit()}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#customizing-the-path-for-module-loading","title":"Customizing the Path for Module Loading","text":"<pre><code>import sys\nimport os\n\n# Add a directory to the module search path\nnew_path = os.path.abspath('path/to/your/modules')\nsys.path.insert(0, new_path)\n\n# Import a module from the new path\n# import mymodule  # This will import from the new path if it exists\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#error-handling","title":"Error Handling","text":"<p>Handling errors effectively ensures your code behaves correctly even when unexpected conditions arise.</p> <pre><code>import sys\n\ntry:\n    # Some code that might raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f'Error: {e}', file=sys.stderr)\nfinally:\n    print('Cleaning up...')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/sys/#conclusion","title":"Conclusion","text":"<p>The <code>sys</code> module is an essential part of Python's standard library, offering functionalities for interacting with the Python interpreter, handling system-specific parameters, and managing input and output streams. With the examples provided, you should have a solid understanding of how to use <code>sys</code> for various tasks in your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/tabulate/","title":"Python Tabulate Module Detailed Report","text":""},{"location":"languages/python/libraries_frameworks/tabulate/#overview","title":"Overview","text":"<p><code>tabulate</code> is a Python library used to pretty-print tabular data in various formats, including plain text, grid, HTML, and more. It's especially useful for displaying data in a human-readable format, making it ideal for command-line interfaces, logging, and generating reports.</p>"},{"location":"languages/python/libraries_frameworks/tabulate/#features","title":"Features","text":"<ul> <li>Simple Interface: Easy-to-use functions for creating tables.</li> <li>Multiple Formats: Supports a variety of output formats.</li> <li>Customizable: Allows customization of table appearance.</li> <li>Supports Data Structures: Works with lists, dictionaries, NumPy arrays, and pandas DataFrames.</li> </ul>"},{"location":"languages/python/libraries_frameworks/tabulate/#installation","title":"Installation","text":"<p>Install <code>tabulate</code> using pip: <pre><code>pip install tabulate\n</code></pre></p>"},{"location":"languages/python/libraries_frameworks/tabulate/#getting-started","title":"Getting Started","text":""},{"location":"languages/python/libraries_frameworks/tabulate/#basic-usage","title":"Basic Usage","text":"<p>The primary function provided by the <code>tabulate</code> module is <code>tabulate()</code>. It takes a list of lists (or other data structures) as input and returns a formatted table as a string.</p>"},{"location":"languages/python/libraries_frameworks/tabulate/#example","title":"Example","text":"<pre><code>from tabulate import tabulate\n\ndata = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"],\n    [\"Charlie\", 35, \"Chicago\"]\n]\n\ntable = tabulate(data, headers=\"firstrow\")\nprint(table)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#output","title":"Output","text":"<pre><code>Name      Age  City       \n------  -----  -----------\nAlice      30  New York   \nBob        25  Los Angeles\nCharlie    35  Chicago    \n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#table-formats","title":"Table Formats","text":"<p><code>tabulate</code> supports various table formats. You can specify the format using the <code>tablefmt</code> parameter.</p>"},{"location":"languages/python/libraries_frameworks/tabulate/#available-formats","title":"Available Formats","text":"<ul> <li><code>plain</code></li> <li><code>simple</code></li> <li><code>github</code></li> <li><code>grid</code></li> <li><code>fancy_grid</code></li> <li><code>pipe</code></li> <li><code>orgtbl</code></li> <li><code>jira</code></li> <li><code>presto</code></li> <li><code>pretty</code></li> <li><code>psql</code></li> <li><code>rst</code></li> <li><code>mediawiki</code></li> <li><code>moinmoin</code></li> <li><code>youtrack</code></li> <li><code>html</code></li> <li><code>unsafehtml</code></li> <li><code>latex</code></li> <li><code>latex_raw</code></li> <li><code>latex_booktabs</code></li> <li><code>latex_longtable</code></li> <li><code>tsv</code></li> </ul>"},{"location":"languages/python/libraries_frameworks/tabulate/#example-with-different-formats","title":"Example with Different Formats","text":"<pre><code>from tabulate import tabulate\n\ndata = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"],\n    [\"Charlie\", 35, \"Chicago\"]\n]\n\n# Plain format\nprint(tabulate(data, headers=\"firstrow\", tablefmt=\"plain\"))\n\n# Grid format\nprint(tabulate(data, headers=\"firstrow\", tablefmt=\"grid\"))\n\n# HTML format\nprint(tabulate(data, headers=\"firstrow\", tablefmt=\"html\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#output_1","title":"Output","text":""},{"location":"languages/python/libraries_frameworks/tabulate/#plain-format","title":"Plain Format","text":"<pre><code>Name    Age  City\nAlice    30  New York\nBob      25  Los Angeles\nCharlie  35  Chicago\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#grid-format","title":"Grid Format","text":"<pre><code>+---------+-----+-------------+\n| Name    | Age | City        |\n+---------+-----+-------------+\n| Alice   |  30 | New York    |\n| Bob     |  25 | Los Angeles |\n| Charlie |  35 | Chicago     |\n+---------+-----+-------------+\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#html-format","title":"HTML Format","text":"<pre><code>&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;&lt;th&gt;Name    &lt;/th&gt;&lt;th&gt;  Age&lt;/th&gt;&lt;th&gt;City       &lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;&lt;td&gt;Alice   &lt;/td&gt;&lt;td&gt;   30&lt;/td&gt;&lt;td&gt;New York   &lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Bob     &lt;/td&gt;&lt;td&gt;   25&lt;/td&gt;&lt;td&gt;Los Angeles&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;Charlie &lt;/td&gt;&lt;td&gt;   35&lt;/td&gt;&lt;td&gt;Chicago    &lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#working-with-different-data-structures","title":"Working with Different Data Structures","text":""},{"location":"languages/python/libraries_frameworks/tabulate/#lists-of-lists","title":"Lists of Lists","text":"<pre><code>data = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"]\n]\n\nprint(tabulate(data, headers=\"firstrow\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#lists-of-dictionaries","title":"Lists of Dictionaries","text":"<pre><code>data = [\n    {\"Name\": \"Alice\", \"Age\": 30, \"City\": \"New York\"},\n    {\"Name\": \"Bob\", \"Age\": 25, \"City\": \"Los Angeles\"}\n]\n\nprint(tabulate(data, headers=\"keys\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#numpy-arrays","title":"NumPy Arrays","text":"<pre><code>import numpy as np\nfrom tabulate import tabulate\n\ndata = np.array([\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"]\n])\n\nprint(tabulate(data, headers=\"firstrow\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#pandas-dataframes","title":"pandas DataFrames","text":"<pre><code>import pandas as pd\nfrom tabulate import tabulate\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\"],\n    \"Age\": [30, 25],\n    \"City\": [\"New York\", \"Los Angeles\"]\n}\n\ndf = pd.DataFrame(data)\nprint(tabulate(df, headers=\"keys\", tablefmt=\"grid\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#output-for-dataframe","title":"Output for DataFrame","text":"<pre><code>+----+-------+-----+-------------+\n|    | Name  | Age | City        |\n+====+=======+=====+=============+\n|  0 | Alice |  30 | New York    |\n|  1 | Bob   |  25 | Los Angeles |\n+----+-------+-----+-------------+\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#customizing-table-appearance","title":"Customizing Table Appearance","text":"<p>You can customize the table appearance using various parameters.</p>"},{"location":"languages/python/libraries_frameworks/tabulate/#aligning-columns","title":"Aligning Columns","text":"<pre><code>data = [\n    [\"Name\", \"Age\", \"City\"],\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"]\n]\n\nprint(tabulate(data, headers=\"firstrow\", colalign=(\"left\", \"center\", \"right\")))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#adding-row-numbers","title":"Adding Row Numbers","text":"<pre><code>data = [\n    [\"Alice\", 30, \"New York\"],\n    [\"Bob\", 25, \"Los Angeles\"]\n]\n\nprint(tabulate(data, headers=[\"Name\", \"Age\", \"City\"], showindex=\"always\"))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#output-with-row-numbers","title":"Output with Row Numbers","text":"<pre><code>  #  Name      Age  City       \n---  ------  -----  -----------\n  0  Alice      30  New York   \n  1  Bob        25  Los Angeles\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tabulate/#conclusion","title":"Conclusion","text":"<p>The <code>tabulate</code> module in Python is a versatile tool for creating and displaying tables in a readable format. Its ability to handle different data structures and formats, along with customization options, makes it a valuable asset for generating reports, displaying logs, and more.</p> <p>This report provides a comprehensive overview of using the <code>tabulate</code> module, complete with practical examples to help you get started.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/","title":"Python <code>tkinter</code> Module: Detailed Overview and Examples","text":"<p>The <code>tkinter</code> module in Python provides a standard interface to the Tk GUI toolkit. It is used to create graphical user interfaces (GUIs) and is included with Python's standard library. <code>tkinter</code> is ideal for creating desktop applications with windows, buttons, labels, and other widgets.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#importing-the-tkinter-module","title":"Importing the <code>tkinter</code> Module","text":"<p>To use <code>tkinter</code>, import it as follows:</p> <pre><code>import tkinter as tk\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#key-components","title":"Key Components","text":""},{"location":"languages/python/libraries_frameworks/tkinter/#1-creating-the-main-window","title":"1. Creating the Main Window","text":"<p>The main window is the root of the GUI application.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(\"My Tkinter Application\")\nroot.geometry(\"400x300\")  # Width x Height\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#2-widgets","title":"2. Widgets","text":""},{"location":"languages/python/libraries_frameworks/tkinter/#labels","title":"Labels","text":"<p>Labels display text or images. </p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_1","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a label widget\nlabel = tk.Label(root, text=\"Hello, Tkinter!\")\nlabel.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#buttons","title":"Buttons","text":"<p>Buttons trigger actions when clicked.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_2","title":"Example","text":"<pre><code>import tkinter as tk\n\ndef on_button_click():\n    print(\"Button clicked!\")\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a button widget\nbutton = tk.Button(root, text=\"Click Me\", command=on_button_click)\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#entry","title":"Entry","text":"<p>Entry widgets allow user input in a single line.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_3","title":"Example","text":"<pre><code>import tkinter as tk\n\ndef show_entry_value():\n    print(entry.get())\n\n# Create the main window\nroot = tk.Tk()\n\n# Create an entry widget\nentry = tk.Entry(root)\nentry.pack()\n\n# Create a button to show entry value\nbutton = tk.Button(root, text=\"Show Entry\", command=show_entry_value)\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#text","title":"Text","text":"<p>Text widgets allow multi-line text input and display.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_4","title":"Example","text":"<pre><code>import tkinter as tk\n\ndef show_text_value():\n    print(text.get(\"1.0\", tk.END))\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a text widget\ntext = tk.Text(root, height=5, width=40)\ntext.pack()\n\n# Create a button to show text value\nbutton = tk.Button(root, text=\"Show Text\", command=show_text_value)\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#3-layout-management","title":"3. Layout Management","text":""},{"location":"languages/python/libraries_frameworks/tkinter/#pack","title":"Pack","text":"<p>The <code>pack</code> geometry manager organizes widgets in blocks before placing them in the parent widget.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_5","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Create widgets\nlabel1 = tk.Label(root, text=\"Label 1\")\nlabel2 = tk.Label(root, text=\"Label 2\")\nbutton = tk.Button(root, text=\"Button\")\n\n# Use pack to place widgets\nlabel1.pack()\nlabel2.pack()\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#grid","title":"Grid","text":"<p>The <code>grid</code> geometry manager organizes widgets in a table-like structure.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_6","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Create widgets\nlabel1 = tk.Label(root, text=\"Name\")\nlabel2 = tk.Label(root, text=\"Age\")\nentry1 = tk.Entry(root)\nentry2 = tk.Entry(root)\n\n# Use grid to place widgets\nlabel1.grid(row=0, column=0)\nlabel2.grid(row=1, column=0)\nentry1.grid(row=0, column=1)\nentry2.grid(row=1, column=1)\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#place","title":"Place","text":"<p>The <code>place</code> geometry manager places widgets at an absolute position.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_7","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Create widgets\nlabel = tk.Label(root, text=\"This is placed at (100, 50)\")\nlabel.place(x=100, y=50)\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#4-menus","title":"4. Menus","text":"<p>Menus can be added to the application for additional options.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_8","title":"Example","text":"<pre><code>import tkinter as tk\n\ndef on_file_open():\n    print(\"File opened\")\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a menu bar\nmenu_bar = tk.Menu(root)\nroot.config(menu=menu_bar)\n\n# Create a file menu\nfile_menu = tk.Menu(menu_bar, tearoff=0)\nmenu_bar.add_cascade(label=\"File\", menu=file_menu)\nfile_menu.add_command(label=\"Open\", command=on_file_open)\nfile_menu.add_separator()\nfile_menu.add_command(label=\"Exit\", command=root.quit)\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#5-dialogs","title":"5. Dialogs","text":"<p>Dialogs are used to display messages and prompt for user input.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#message-box","title":"Message Box","text":""},{"location":"languages/python/libraries_frameworks/tkinter/#example_9","title":"Example","text":"<pre><code>import tkinter as tk\nfrom tkinter import messagebox\n\ndef show_message():\n    messagebox.showinfo(\"Message\", \"This is an information message.\")\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a button to show a message box\nbutton = tk.Button(root, text=\"Show Message\", command=show_message)\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#file-dialog","title":"File Dialog","text":""},{"location":"languages/python/libraries_frameworks/tkinter/#example_10","title":"Example","text":"<pre><code>import tkinter as tk\nfrom tkinter import filedialog\n\ndef open_file():\n    file_path = filedialog.askopenfilename()\n    print(f\"File selected: {file_path}\")\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a button to open a file dialog\nbutton = tk.Button(root, text=\"Open File\", command=open_file)\nbutton.pack()\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#6-canvas","title":"6. Canvas","text":"<p>The <code>Canvas</code> widget allows you to draw shapes, lines, and other custom graphics.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_11","title":"Example","text":"<pre><code>import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\n\n# Create a canvas widget\ncanvas = tk.Canvas(root, width=400, height=300)\ncanvas.pack()\n\n# Draw shapes on the canvas\ncanvas.create_line(0, 0, 400, 300, fill=\"blue\")\ncanvas.create_rectangle(50, 50, 150, 150, fill=\"red\")\ncanvas.create_oval(200, 100, 300, 200, fill=\"green\")\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#7-event-handling","title":"7. Event Handling","text":"<p>You can bind events to widgets to handle user interactions.</p>"},{"location":"languages/python/libraries_frameworks/tkinter/#example_12","title":"Example","text":"<pre><code>import tkinter as tk\n\ndef on_key_press(event):\n    print(f\"Key pressed: {event.keysym}\")\n\n# Create the main window\nroot = tk.Tk()\n\n# Bind the key press event to the on_key_press function\nroot.bind(\"&lt;KeyPress&gt;\", on_key_press)\n\n# Run the application\nroot.mainloop()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/tkinter/#conclusion","title":"Conclusion","text":"<p>The <code>tkinter</code> module provides a robust toolkit for creating graphical user interfaces in Python. With its wide range of widgets, layout managers, and event handling capabilities, you can build complex and interactive desktop applications. Whether you need to create simple tools or sophisticated applications, <code>tkinter</code> offers the tools to get the job done efficiently.</p>"},{"location":"languages/python/libraries_frameworks/turtle/","title":"Python Turtle Module Report","text":"<p>The <code>turtle</code> module in Python provides a way to draw graphics and create simple visual programs. It is a popular tool for introducing programming concepts and graphical thinking. The module is named after the \"turtle\" graphics used in the Logo programming language. This report covers the <code>turtle</code> module's concepts, basic usage, and practical examples.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#introduction","title":"Introduction","text":"<p>The <code>turtle</code> module is a standard Python library that provides a simple and interactive way to draw shapes, patterns, and images using a turtle cursor. The turtle moves around the screen according to commands and draws lines as it moves.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#installation","title":"Installation","text":"<p>The <code>turtle</code> module is included with Python's standard library, so you don't need to install it separately. It is available with any standard Python installation.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#basic-usage","title":"Basic Usage","text":"<p>To use the <code>turtle</code> module, you need to import it and create a turtle object. The turtle object can then be used to move around the screen and draw shapes.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-code","title":"Example Code","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\nscreen.title(\"Turtle Graphics\")\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\nmy_turtle.shape(\"turtle\")  # Change the shape to a turtle\n\n# Move the turtle forward\nmy_turtle.forward(100)\n\n# Turn the turtle\nmy_turtle.right(90)\n\n# Move the turtle forward again\nmy_turtle.forward(100)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#examples","title":"Examples","text":""},{"location":"languages/python/libraries_frameworks/turtle/#drawing-shapes","title":"Drawing Shapes","text":"<p>You can use the <code>turtle</code> module to draw various shapes by controlling the turtle's movements.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-drawing-a-square","title":"Example: Drawing a Square","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw a square\nfor _ in range(4):\n    my_turtle.forward(100)\n    my_turtle.right(90)\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#example-drawing-a-triangle","title":"Example: Drawing a Triangle","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw a triangle\nfor _ in range(3):\n    my_turtle.forward(100)\n    my_turtle.left(120)\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#creating-patterns","title":"Creating Patterns","text":"<p>You can create intricate patterns by combining basic shapes and loops.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-drawing-a-star","title":"Example: Drawing a Star","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw a star\nfor _ in range(5):\n    my_turtle.forward(100)\n    my_turtle.right(144)\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#example-drawing-a-spiral","title":"Example: Drawing a Spiral","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw a spiral\nfor i in range(100):\n    my_turtle.forward(i * 2)\n    my_turtle.left(45)\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#using-colors-and-styles","title":"Using Colors and Styles","text":"<p>The <code>turtle</code> module allows you to set colors, fill shapes, and change the pen size.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-using-colors","title":"Example: Using Colors","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Set pen color\nmy_turtle.pencolor(\"blue\")\n\n# Draw a circle with red fill\nmy_turtle.fillcolor(\"red\")\nmy_turtle.begin_fill()\nmy_turtle.circle(100)\nmy_turtle.end_fill()\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#example-changing-pen-size","title":"Example: Changing Pen Size","text":"<pre><code>import turtle\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Set pen size\nmy_turtle.pensize(5)\n\n# Draw a square\nfor _ in range(4):\n    my_turtle.forward(100)\n    my_turtle.right(90)\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#handling-events","title":"Handling Events","text":"<p>The <code>turtle</code> module supports event handling to create interactive graphics.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-handling-click-events","title":"Example: Handling Click Events","text":"<pre><code>import turtle\n\n# Define a function to be called when the screen is clicked\ndef on_click(x, y):\n    my_turtle.goto(x, y)\n\n# Create a screen object\nscreen = turtle.Screen()\nscreen.title(\"Click to Move Turtle\")\nscreen.onclick(on_click)\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#using-the-turtle-module-for-animation","title":"Using the Turtle Module for Animation","text":"<p>You can use loops and delays to create animations with the turtle module.</p>"},{"location":"languages/python/libraries_frameworks/turtle/#example-simple-animation","title":"Example: Simple Animation","text":"<pre><code>import turtle\nimport time\n\n# Create a turtle object\nmy_turtle = turtle.Turtle()\n\n# Draw an animated square\nfor _ in range(36):\n    for _ in range(4):\n        my_turtle.forward(100)\n        my_turtle.right(90)\n    my_turtle.right(10)  # Rotate the entire square\n\n    time.sleep(0.1)  # Add a small delay\n\n# Close the window when clicked\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle/#best-practices","title":"Best Practices","text":"<ol> <li>Use Meaningful Names: Name your turtle objects and functions descriptively to make your code more readable.</li> <li>Organize Code into Functions: For complex drawings or animations, break your code into functions to improve clarity and reusability.</li> <li>Avoid Overlapping Commands: Ensure that your turtle commands do not overlap or conflict to prevent unexpected results.</li> <li>Control Speed and Delay: Use <code>speed()</code> and <code>delay()</code> methods to control the drawing speed and animation timing.</li> <li>Use Comments: Comment your code to explain the purpose of each section, especially for more complex drawings and animations.</li> </ol>"},{"location":"languages/python/libraries_frameworks/turtle/#conclusion","title":"Conclusion","text":"<p>The <code>turtle</code> module in Python is an excellent tool for learning programming concepts and creating graphical projects. By understanding how to use turtles to draw shapes, patterns, and animations, you can develop a deeper appreciation for programming and problem-solving. The module's simplicity and interactivity make it a valuable resource for beginners and educators.</p> <p>For more information, refer to the Python Turtle documentation.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/","title":"Python Turtle Graphics Module: A Comprehensive Guide","text":"<p>The <code>turtle</code> module in Python provides a way to draw shapes and create graphics using a turtle that moves around the screen. It is an excellent tool for teaching programming concepts, making interactive visualizations, and creating simple graphical applications. This guide covers the key features and functionalities of the <code>turtle</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#introduction-to-turtle-graphics","title":"Introduction to Turtle Graphics","text":"<p>The <code>turtle</code> module allows you to control a turtle that moves around the screen, drawing lines and shapes based on the turtle's path. The module is named after the turtle graphics system used in the Logo programming language.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#installation","title":"Installation","text":"<p>The <code>turtle</code> module is included with Python\u2019s standard library, so you don't need to install it separately. You can start using it immediately after importing.</p> <pre><code>import turtle\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#basic-turtle-operations","title":"Basic Turtle Operations","text":""},{"location":"languages/python/libraries_frameworks/turtle_graphics/#creating-a-turtle-screen","title":"Creating a Turtle Screen","text":"<p>To start drawing, you first need to create a screen object.</p> <pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Set the background color\nscreen.bgcolor(\"white\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#creating-a-turtle","title":"Creating a Turtle","text":"<p>You can create a turtle object that will perform the drawing.</p> <pre><code># Create a turtle object\npen = turtle.Turtle()\n\n# Set the turtle\u2019s shape and color\npen.shape(\"turtle\")\npen.color(\"black\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-with-the-turtle","title":"Drawing with the Turtle","text":"<p>The turtle can move forward, backward, turn, and draw shapes based on its movement.</p> <pre><code># Draw a line\npen.forward(100)  # Move forward by 100 units\n\n# Turn the turtle\npen.right(90)  # Turn right by 90 degrees\n\n# Draw another line\npen.forward(100)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-shapes","title":"Drawing Shapes","text":"<p>The <code>turtle</code> module provides methods to draw various shapes.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-a-square","title":"Drawing a Square","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Draw a square\nfor _ in range(4):\n    pen.forward(100)\n    pen.right(90)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-a-circle","title":"Drawing a Circle","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Draw a circle\npen.circle(100)  # Draw a circle with radius 100\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-a-triangle","title":"Drawing a Triangle","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Draw a triangle\nfor _ in range(3):\n    pen.forward(100)\n    pen.left(120)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#turtle-movement","title":"Turtle Movement","text":"<p>The turtle can move in various ways, including forward, backward, and turning.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#moving-forward-and-backward","title":"Moving Forward and Backward","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Move forward and backward\npen.forward(150)\npen.backward(150)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#turning-the-turtle","title":"Turning the Turtle","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Turn the turtle\npen.right(90)  # Turn right by 90 degrees\npen.forward(100)\npen.left(90)   # Turn left by 90 degrees\npen.forward(100)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#turtle-customization","title":"Turtle Customization","text":"<p>You can customize the turtle\u2019s appearance and drawing style.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#changing-turtle-color-and-shape","title":"Changing Turtle Color and Shape","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Customize the turtle\npen.color(\"blue\")\npen.shape(\"turtle\")\n\n# Draw a shape\npen.forward(100)\npen.right(90)\npen.forward(100)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#changing-pen-size","title":"Changing Pen Size","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Customize the pen\npen.pensize(5)  # Set the pen size to 5\n\n# Draw a line\npen.forward(200)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#event-handling","title":"Event Handling","text":"<p>The <code>turtle</code> module supports event handling for interactive applications.</p>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#handling-mouse-clicks","title":"Handling Mouse Clicks","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Define the function to be called on click\ndef on_click(x, y):\n    print(f\"Clicked at: ({x}, {y})\")\n\n# Set up event handling\nscreen.onclick(on_click)\n\n# Keep the window open\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#handling-keyboard-input","title":"Handling Keyboard Input","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Define functions to handle key presses\ndef move_forward():\n    pen.forward(100)\n\ndef turn_left():\n    pen.left(90)\n\n# Set up key bindings\nscreen.listen()\nscreen.onkey(move_forward, \"Up\")\nscreen.onkey(turn_left, \"Left\")\n\n# Keep the window open\nturtle.done()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#advanced-drawing-techniques","title":"Advanced Drawing Techniques","text":""},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-a-spirograph","title":"Drawing a Spirograph","text":"<pre><code>import turtle\nimport math\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Draw a spirograph\npen.speed(0)  # Fastest speed\nfor angle in range(0, 360, 5):\n    pen.forward(math.sin(math.radians(angle)) * 100)\n    pen.right(10)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#drawing-a-spiral","title":"Drawing a Spiral","text":"<pre><code>import turtle\n\n# Create a screen object\nscreen = turtle.Screen()\n\n# Create a turtle object\npen = turtle.Turtle()\n\n# Draw a spiral\npen.speed(0)  # Fastest speed\nfor i in range(100):\n    pen.forward(i * 10)\n    pen.right(144)\n\n# Close the window when clicked\nscreen.exitonclick()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/turtle_graphics/#conclusion","title":"Conclusion","text":"<p>The <code>turtle</code> module provides a versatile and fun way to create graphics and visualize concepts in Python. With its simple commands for drawing shapes, handling events, and customizing the drawing environment, it is an excellent tool for beginners and educators. By experimenting with the provided examples and exploring further, you can create engaging and interactive graphical applications using Python's <code>turtle</code> module.</p>"},{"location":"languages/python/libraries_frameworks/urllib/","title":"Python <code>urllib</code> Module: Detailed Overview and Examples","text":"<p>The <code>urllib</code> module in Python is a package that collects several modules for working with URLs, including retrieving data, parsing URLs, and managing requests. This module is included in the Python standard library and provides a high-level interface for fetching data across the web.</p>"},{"location":"languages/python/libraries_frameworks/urllib/#importing-urllib-module","title":"Importing <code>urllib</code> Module","text":"<p>To use <code>urllib</code>, you typically need to import submodules. Here are the primary submodules:</p> <pre><code>import urllib.request\nimport urllib.parse\nimport urllib.error\nimport urllib.robotparser\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#retrieving-data-from-urls","title":"Retrieving Data from URLs","text":""},{"location":"languages/python/libraries_frameworks/urllib/#using-urllibrequest","title":"Using <code>urllib.request</code>","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-simple-get-request","title":"Example: Simple GET Request","text":"<pre><code>import urllib.request\n\n# Define the URL\nurl = 'http://www.example.com'\n\n# Open the URL and retrieve data\nresponse = urllib.request.urlopen(url)\ndata = response.read()\nprint(data.decode('utf-8'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#handling-errors","title":"Handling Errors","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-handling-http-errors","title":"Example: Handling HTTP Errors","text":"<pre><code>import urllib.request\nimport urllib.error\n\nurl = 'http://www.example.com/nonexistentpage'\n\ntry:\n    response = urllib.request.urlopen(url)\nexcept urllib.error.HTTPError as e:\n    print(f'HTTP error: {e.code}')\nexcept urllib.error.URLError as e:\n    print(f'URL error: {e.reason}')\nelse:\n    data = response.read()\n    print(data.decode('utf-8'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#sending-data-to-the-server","title":"Sending Data to the Server","text":""},{"location":"languages/python/libraries_frameworks/urllib/#using-urllibparse-to-encode-data","title":"Using <code>urllib.parse</code> to Encode Data","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-sending-a-post-request","title":"Example: Sending a POST Request","text":"<pre><code>import urllib.request\nimport urllib.parse\n\nurl = 'http://www.example.com/login'\nvalues = {'username': 'user', 'password': 'pass'}\n\n# Encode the data\ndata = urllib.parse.urlencode(values).encode('utf-8')\n\n# Send the POST request\nresponse = urllib.request.urlopen(url, data)\nprint(response.read().decode('utf-8'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#parsing-urls","title":"Parsing URLs","text":""},{"location":"languages/python/libraries_frameworks/urllib/#using-urllibparse","title":"Using <code>urllib.parse</code>","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-parsing-and-building-urls","title":"Example: Parsing and Building URLs","text":"<pre><code>from urllib.parse import urlparse, urlunparse, urlencode, parse_qs, urljoin\n\n# Parse a URL\nparsed_url = urlparse('http://www.example.com/path?name=John&amp;age=30')\nprint(parsed_url)\n\n# Build a URL\ndata = {'name': 'John', 'age': '30'}\nquery_string = urlencode(data)\nurl = urlunparse(('http', 'www.example.com', '/path', '', query_string, ''))\nprint(url)\n\n# Parse query string\nparsed_qs = parse_qs(parsed_url.query)\nprint(parsed_qs)\n\n# Join URLs\nbase_url = 'http://www.example.com/path/'\nrelative_url = 'subpath/file.html'\nfull_url = urljoin(base_url, relative_url)\nprint(full_url)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#working-with-headers","title":"Working with Headers","text":""},{"location":"languages/python/libraries_frameworks/urllib/#adding-headers-to-requests","title":"Adding Headers to Requests","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-adding-custom-headers","title":"Example: Adding Custom Headers","text":"<pre><code>import urllib.request\n\nurl = 'http://www.example.com'\n\n# Create a request object\nreq = urllib.request.Request(url)\n\n# Add headers\nreq.add_header('User-Agent', 'Mozilla/5.0')\n\n# Send the request\nresponse = urllib.request.urlopen(req)\nprint(response.read().decode('utf-8'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#handling-cookies","title":"Handling Cookies","text":""},{"location":"languages/python/libraries_frameworks/urllib/#using-httpcookiejar-with-urllib","title":"Using <code>http.cookiejar</code> with <code>urllib</code>","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-managing-cookies","title":"Example: Managing Cookies","text":"<pre><code>import urllib.request\nimport http.cookiejar\n\n# Create a cookie jar\ncookie_jar = http.cookiejar.CookieJar()\n\n# Create an opener with cookie support\nopener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookie_jar))\n\n# Use the opener to open a URL\nresponse = opener.open('http://www.example.com')\n\n# Print cookies\nfor cookie in cookie_jar:\n    print(f'Cookie: {cookie.name}={cookie.value}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#working-with-robotstxt","title":"Working with Robots.txt","text":""},{"location":"languages/python/libraries_frameworks/urllib/#using-urllibrobotparser","title":"Using <code>urllib.robotparser</code>","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-checking-url-access","title":"Example: Checking URL Access","text":"<pre><code>import urllib.robotparser\n\n# Create a robot parser object\nrp = urllib.robotparser.RobotFileParser()\n\n# Set the URL to the robots.txt file\nrp.set_url('http://www.example.com/robots.txt')\nrp.read()\n\n# Check if a URL can be fetched\nurl = 'http://www.example.com/somepage.html'\nuser_agent = 'Mozilla/5.0'\ncan_fetch = rp.can_fetch(user_agent, url)\nprint(f'Can fetch: {can_fetch}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/libraries_frameworks/urllib/#example-1-downloading-an-image","title":"Example 1: Downloading an Image","text":"<pre><code>import urllib.request\n\nurl = 'http://www.example.com/image.jpg'\nfilename = 'image.jpg'\n\n# Download the image\nurllib.request.urlretrieve(url, filename)\nprint(f'Downloaded {filename}')\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#example-2-web-scraping-with-beautifulsoup-and-urllib","title":"Example 2: Web Scraping with <code>BeautifulSoup</code> and <code>urllib</code>","text":"<pre><code>import urllib.request\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\n# Fetch the webpage\nresponse = urllib.request.urlopen(url)\nhtml = response.read()\n\n# Parse the HTML\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Find all links\nlinks = soup.find_all('a')\nfor link in links:\n    print(link.get('href'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#example-3-handling-json-data","title":"Example 3: Handling JSON Data","text":"<pre><code>import urllib.request\nimport json\n\nurl = 'https://api.example.com/data'\n\n# Fetch the JSON data\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read().decode('utf-8'))\n\n# Print the JSON data\nprint(json.dumps(data, indent=4))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/urllib/#conclusion","title":"Conclusion","text":"<p>The <code>urllib</code> module in Python is a comprehensive tool for working with URLs and handling web-related tasks. It supports a variety of operations, including fetching data, handling errors, managing headers and cookies, parsing URLs, and checking access permissions with <code>robots.txt</code>. By leveraging the functionalities provided by <code>urllib</code>, you can efficiently perform a wide range of web-related tasks in your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/","title":"Python virtualenv Module: A Comprehensive Guide","text":"<p>The <code>virtualenv</code> module is a tool for creating isolated Python environments. This is useful for managing dependencies and avoiding conflicts between different projects. This guide covers the key features and functionalities of the <code>virtualenv</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#introduction-to-virtualenv","title":"Introduction to virtualenv","text":"<p><code>virtualenv</code> is a Python package that provides a way to create isolated Python environments. This ensures that dependencies for different projects do not interfere with each other, making it easier to manage project-specific packages and versions.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#installation","title":"Installation","text":"<p>To use <code>virtualenv</code>, you need to install it via pip. Install it with the following command:</p> <pre><code>pip install virtualenv\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<p>Creating a virtual environment involves using the <code>virtualenv</code> command followed by the name of the directory where the environment will be created.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#example","title":"Example","text":"<pre><code># Create a new virtual environment in a directory called 'myenv'\nvirtualenv myenv\n</code></pre> <p>This command creates a new directory called <code>myenv</code> containing a copy of the Python interpreter and a local <code>pip</code> installation.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#activating-and-deactivating-environments","title":"Activating and Deactivating Environments","text":"<p>Once a virtual environment is created, you need to activate it to start using it.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#activating-the-environment","title":"Activating the Environment","text":""},{"location":"languages/python/libraries_frameworks/virtualenv/#on-windows","title":"On Windows","text":"<pre><code># Activate the virtual environment on Windows\nmyenv\\Scripts\\activate\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#on-macoslinux","title":"On macOS/Linux","text":"<pre><code># Activate the virtual environment on macOS/Linux\nsource myenv/bin/activate\n</code></pre> <p>After activation, your shell prompt will change to indicate that the virtual environment is active.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#deactivating-the-environment","title":"Deactivating the Environment","text":"<p>To deactivate the virtual environment and return to the system\u2019s default Python environment, use the following command:</p> <pre><code>deactivate\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#managing-dependencies","title":"Managing Dependencies","text":"<p>With a virtual environment activated, you can manage dependencies using <code>pip</code>.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#installing-packages","title":"Installing Packages","text":"<pre><code># Install a package into the virtual environment\npip install requests\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#listing-installed-packages","title":"Listing Installed Packages","text":"<pre><code># List all installed packages in the virtual environment\npip list\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#uninstalling-packages","title":"Uninstalling Packages","text":"<pre><code># Uninstall a package from the virtual environment\npip uninstall requests\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#freezing-dependencies","title":"Freezing Dependencies","text":"<p>To save the current environment\u2019s dependencies to a file, use:</p> <pre><code># Freeze the environment's dependencies to a file\npip freeze &gt; requirements.txt\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#installing-from-requirements-file","title":"Installing from Requirements File","text":"<p>To install packages from a <code>requirements.txt</code> file:</p> <pre><code># Install packages from requirements.txt\npip install -r requirements.txt\n</code></pre>"},{"location":"languages/python/libraries_frameworks/virtualenv/#using-different-python-versions","title":"Using Different Python Versions","text":"<p><code>virtualenv</code> allows you to specify a different Python interpreter for the virtual environment.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#example_1","title":"Example","text":"<pre><code># Create a virtual environment using Python 3.8\nvirtualenv -p python3.8 myenv\n</code></pre> <p>This creates a virtual environment with Python 3.8 instead of the default Python version.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#removing-a-virtual-environment","title":"Removing a Virtual Environment","text":"<p>To remove a virtual environment, simply delete its directory:</p> <pre><code># Remove the virtual environment directory\nrm -rf myenv\n</code></pre> <p>This will delete the <code>myenv</code> directory and all its contents, effectively removing the virtual environment.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":""},{"location":"languages/python/libraries_frameworks/virtualenv/#issue-command-not-found","title":"Issue: Command Not Found","text":"<p>If you receive an error like <code>command not found</code>, ensure that <code>virtualenv</code> is installed and accessible. You may need to check your PATH environment variable or install <code>virtualenv</code> if it\u2019s not already installed.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#issue-activation-script-not-found","title":"Issue: Activation Script Not Found","text":"<p>Ensure you are using the correct path for the activation script:</p> <ul> <li>On Windows: <code>myenv\\Scripts\\activate</code></li> <li>On macOS/Linux: <code>source myenv/bin/activate</code></li> </ul> <p>If the activation script is not found, confirm that the virtual environment was created successfully.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#issue-permissions-error","title":"Issue: Permissions Error","text":"<p>If you encounter permissions errors, check the permissions of the directories and files involved. You may need to run commands with elevated privileges or adjust directory permissions.</p>"},{"location":"languages/python/libraries_frameworks/virtualenv/#conclusion","title":"Conclusion","text":"<p>The <code>virtualenv</code> module is a powerful tool for managing isolated Python environments, making it easier to handle project-specific dependencies and avoid conflicts. With the examples provided, you should be able to create, manage, and delete virtual environments effectively, as well as handle common issues that may arise.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/","title":"Python <code>webbrowser</code> Module: Detailed Overview and Examples","text":"<p>The <code>webbrowser</code> module in Python provides a high-level interface to allow displaying web-based documents to users. It is a simple and efficient way to open web pages in the default web browser of the system. This module is part of the Python standard library, so you do not need to install any additional packages to use it.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#importing-the-webbrowser-module","title":"Importing the <code>webbrowser</code> Module","text":"<p>To use the functions and methods from the <code>webbrowser</code> module, you need to import it:</p> <pre><code>import webbrowser\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#key-functions-and-methods","title":"Key Functions and Methods","text":""},{"location":"languages/python/libraries_frameworks/webbrowser/#1-opening-urls","title":"1. Opening URLs","text":""},{"location":"languages/python/libraries_frameworks/webbrowser/#webbrowseropenurl-new0-autoraisetrue","title":"<code>webbrowser.open(url, new=0, autoraise=True)</code>","text":"<p>Opens the URL in the default web browser. The <code>new</code> parameter specifies how the URL should be opened: - <code>0</code>: Opens in the same browser window (default). - <code>1</code>: Opens in a new browser window. - <code>2</code>: Opens in a new browser tab.</p> <p>The <code>autoraise</code> parameter determines whether the window is raised if possible (default is <code>True</code>).</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example","title":"Example","text":"<pre><code>import webbrowser\n\n# Open a URL in the default web browser\nwebbrowser.open(\"http://www.python.org\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#webbrowseropen_newurl","title":"<code>webbrowser.open_new(url)</code>","text":"<p>Opens the URL in a new browser window.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_1","title":"Example","text":"<pre><code>import webbrowser\n\n# Open a URL in a new browser window\nwebbrowser.open_new(\"http://www.python.org\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#webbrowseropen_new_taburl","title":"<code>webbrowser.open_new_tab(url)</code>","text":"<p>Opens the URL in a new browser tab.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_2","title":"Example","text":"<pre><code>import webbrowser\n\n# Open a URL in a new browser tab\nwebbrowser.open_new_tab(\"http://www.python.org\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#2-registering-and-using-specific-browsers","title":"2. Registering and Using Specific Browsers","text":""},{"location":"languages/python/libraries_frameworks/webbrowser/#webbrowsergetusingnone","title":"<code>webbrowser.get(using=None)</code>","text":"<p>Returns a controller object for the browser type specified by the <code>using</code> parameter. If <code>using</code> is <code>None</code>, it returns the default browser controller.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_3","title":"Example","text":"<pre><code>import webbrowser\n\n# Get the default browser controller\nbrowser = webbrowser.get()\nbrowser.open(\"http://www.python.org\")\n</code></pre> <p>You can specify a particular browser by passing a string identifier to the <code>using</code> parameter:</p> <ul> <li><code>\"firefox\"</code> or <code>\"mozilla\"</code></li> <li><code>\"opera\"</code></li> <li><code>\"safari\"</code></li> <li><code>\"google-chrome\"</code> or <code>\"chrome\"</code></li> <li><code>\"lynx\"</code></li> </ul>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_4","title":"Example","text":"<pre><code>import webbrowser\n\n# Open a URL in Firefox\nfirefox = webbrowser.get(\"firefox\")\nfirefox.open(\"http://www.python.org\")\n\n# Open a URL in Google Chrome\nchrome = webbrowser.get(\"google-chrome\")\nchrome.open(\"http://www.python.org\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#3-background-process-control","title":"3. Background Process Control","text":"<p>When opening a URL, the web browser can be controlled to run in the background without blocking the main script.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_5","title":"Example","text":"<pre><code>import webbrowser\n\n# Open a URL and continue running the script\nwebbrowser.open(\"http://www.python.org\")\nprint(\"URL opened in the background\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#4-using-context-managers","title":"4. Using Context Managers","text":"<p>The <code>webbrowser</code> module can be used with context managers for more advanced browser control.</p>"},{"location":"languages/python/libraries_frameworks/webbrowser/#example_6","title":"Example","text":"<pre><code>import webbrowser\nfrom contextlib import contextmanager\n\n@contextmanager\ndef open_browser(url):\n    try:\n        webbrowser.open(url)\n        yield\n    finally:\n        print(\"Browser opened with URL:\", url)\n\n# Use the context manager to open a URL\nwith open_browser(\"http://www.python.org\"):\n    print(\"Doing other tasks while browser is open\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/webbrowser/#conclusion","title":"Conclusion","text":"<p>The <code>webbrowser</code> module in Python provides a straightforward and effective way to interact with web browsers programmatically. It allows you to open URLs in the default or specified web browsers, manage browser tabs and windows, and integrate web access into your Python scripts. This module is particularly useful for applications that need to display web content, automate web tasks, or provide seamless web integration.</p> <p>With the examples and functions covered in this report, you should be able to leverage the <code>webbrowser</code> module to create scripts and applications that interact with web browsers efficiently.</p>"},{"location":"languages/python/libraries_frameworks/win32/","title":"Python Win32 Module: A Comprehensive Guide","text":"<p>The <code>pywin32</code> module provides a set of Python extensions for Windows that allows you to interact with Windows APIs and COM objects. This guide will cover the key features and functionalities of the <code>pywin32</code> module, and provide detailed examples to help you leverage it effectively.</p>"},{"location":"languages/python/libraries_frameworks/win32/#introduction-to-pywin32","title":"Introduction to pywin32","text":"<p>The <code>pywin32</code> module provides a set of Python extensions for interacting with Windows APIs and COM objects. It allows Python scripts to perform operations such as manipulating the Windows registry, interacting with COM components, accessing environment variables, and more.</p>"},{"location":"languages/python/libraries_frameworks/win32/#installation","title":"Installation","text":"<p>To install the <code>pywin32</code> module, you can use pip:</p> <pre><code>pip install pywin32\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#working-with-windows-apis","title":"Working with Windows APIs","text":""},{"location":"languages/python/libraries_frameworks/win32/#accessing-environment-variables","title":"Accessing Environment Variables","text":"<p>You can access and manipulate environment variables using the <code>win32api</code> module.</p> <pre><code>import win32api\n\n# Get an environment variable\npath = win32api.GetEnvironmentVariable(\"PATH\")\nprint(f\"PATH: {path}\")\n\n# Set an environment variable\nwin32api.SetEnvironmentVariable(\"MY_VAR\", \"my_value\")\n\n# Get the updated environment variable\nmy_var = win32api.GetEnvironmentVariable(\"MY_VAR\")\nprint(f\"MY_VAR: {my_var}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#working-with-registry","title":"Working with Registry","text":"<p>The <code>win32reg</code> module allows you to interact with the Windows registry.</p> <pre><code>import win32reg\n\n# Open a registry key\nkey = win32reg.OpenKey(win32reg.HKEY_CURRENT_USER, r\"Software\\MyApp\", 0, win32reg.KEY_WRITE)\n\n# Set a registry value\nwin32reg.SetValueEx(key, \"MyValue\", 0, win32reg.REG_SZ, \"Some data\")\n\n# Query a registry value\nvalue, regtype = win32reg.QueryValueEx(key, \"MyValue\")\nprint(f\"MyValue: {value}\")\n\n# Close the registry key\nwin32reg.CloseKey(key)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#file-and-directory-operations","title":"File and Directory Operations","text":"<p>You can perform file and directory operations using the <code>win32file</code> and <code>win32api</code> modules.</p> <pre><code>import win32file\nimport os\n\n# Create a new directory\nos.makedirs(\"C:\\\\temp\\\\mydir\", exist_ok=True)\n\n# Create a new file\nwith open(\"C:\\\\temp\\\\mydir\\\\myfile.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n\n# Rename a file\nwin32file.MoveFile(\"C:\\\\temp\\\\mydir\\\\myfile.txt\", \"C:\\\\temp\\\\mydir\\\\myrenamedfile.txt\")\n\n# Delete a file\nos.remove(\"C:\\\\temp\\\\mydir\\\\myrenamedfile.txt\")\n\n# Delete a directory\nos.rmdir(\"C:\\\\temp\\\\mydir\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#com-programming","title":"COM Programming","text":""},{"location":"languages/python/libraries_frameworks/win32/#creating-com-objects","title":"Creating COM Objects","text":"<p>You can create and interact with COM objects using the <code>win32com.client</code> module.</p> <pre><code>import win32com.client\n\n# Create a COM object for Excel\nexcel = win32com.client.Dispatch(\"Excel.Application\")\n\n# Make Excel visible\nexcel.Visible = True\n\n# Add a new workbook\nworkbook = excel.Workbooks.Add()\n\n# Access the active worksheet\nsheet = workbook.ActiveSheet\n\n# Write data to a cell\nsheet.Cells(1, 1).Value = \"Hello, COM!\"\n\n# Save the workbook\nworkbook.SaveAs(r\"C:\\temp\\example.xlsx\")\n\n# Quit Excel\nexcel.Quit()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#accessing-com-services","title":"Accessing COM Services","text":"<p>You can access and interact with various COM services provided by Windows.</p> <pre><code>import win32com.client\n\n# Create a COM object for Windows Script Host\nwsh = win32com.client.Dispatch(\"WScript.Shell\")\n\n# Run a command\nwsh.Run(\"notepad.exe\")\n\n# Access environment variables\nenv_var = wsh.ExpandEnvironmentStrings(\"%TEMP%\")\nprint(f\"TEMP: {env_var}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#windows-event-logs","title":"Windows Event Logs","text":"<p>You can access and manage Windows event logs using the <code>win32evtlog</code> module.</p> <pre><code>import win32evtlog\n\n# Open the application log\nserver = 'localhost'\nlog_type = 'Application'\nlog_handle = win32evtlog.OpenEventLog(server, log_type)\n\n# Read the most recent 10 events\nevents = win32evtlog.ReadEventLog(log_handle, win32evtlog.EVENTLOG_BACKWARDS_READ, 0, 10)\nfor event in events:\n    print(f\"Event ID: {event.EventID}, Source: {event.SourceName}, Message: {event.StringInserts}\")\n\n# Close the event log handle\nwin32evtlog.CloseEventLog(log_handle)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#handling-windows-services","title":"Handling Windows Services","text":"<p>You can manage Windows services using the <code>win32service</code> and <code>win32serviceutil</code> modules.</p> <pre><code>import win32serviceutil\n\n# Query the status of a service\nservice_name = \"wuauserv\"  # Windows Update service\nstatus = win32serviceutil.QueryServiceStatus(service_name)\nprint(f\"Service '{service_name}' status: {status}\")\n\n# Start a service\nwin32serviceutil.StartService(service_name)\nprint(f\"Service '{service_name}' started.\")\n\n# Stop a service\nwin32serviceutil.StopService(service_name)\nprint(f\"Service '{service_name}' stopped.\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#error-handling","title":"Error Handling","text":"<p>Proper error handling ensures that your scripts manage exceptions and provide useful feedback.</p> <pre><code>import win32api\nimport win32file\n\ntry:\n    # Attempt to create a file\n    handle = win32file.CreateFile(\n        r\"C:\\temp\\myfile.txt\",\n        win32file.GENERIC_WRITE,\n        0,\n        None,\n        win32file.CREATE_NEW,\n        win32file.FILE_ATTRIBUTE_NORMAL,\n        None\n    )\nexcept win32api.error as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    if 'handle' in locals():\n        win32file.CloseHandle(handle)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/win32/#conclusion","title":"Conclusion","text":"<p>The <code>pywin32</code> module provides powerful extensions for interacting with Windows APIs and COM objects, making it a valuable tool for Windows-specific automation and scripting tasks. This guide covers basic to advanced functionalities of <code>pywin32</code>, including environment variable access, registry operations, file and directory management, COM programming, event logs, and Windows services. By mastering these features, you can leverage Python to automate and enhance your Windows environment effectively.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/","title":"Python <code>wsgi</code> Module Report","text":""},{"location":"languages/python/libraries_frameworks/wsgi/#introduction","title":"Introduction","text":"<p>The Web Server Gateway Interface (WSGI) is a standard interface between web servers and Python web applications. The <code>wsgi</code> module in Python facilitates this interaction by providing a standard interface for web server communication. This report covers the WSGI specification, its usage, and practical examples for implementing a WSGI application.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#wsgi-overview","title":"WSGI Overview","text":"<p>WSGI is a specification that defines a standard interface between web servers and Python web applications or frameworks. It enables compatibility across various web servers and frameworks by ensuring they communicate in a consistent manner.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#key-concepts","title":"Key Concepts","text":"<ol> <li>WSGI Application: A callable (usually a function) that takes two arguments: <code>environ</code> and <code>start_response</code>. It returns an iterable yielding the response body.</li> <li>WSGI Server: A server that communicates with the WSGI application using the WSGI standard.</li> </ol>"},{"location":"languages/python/libraries_frameworks/wsgi/#installation","title":"Installation","text":"<p>WSGI is a specification, not a module, so it does not require installation. However, you will need a WSGI-compatible server and a framework or library to create a WSGI application. Popular WSGI servers include:</p> <ul> <li>Gunicorn: <code>pip install gunicorn</code></li> <li>uWSGI: <code>pip install uwsgi</code></li> <li>waitress: <code>pip install waitress</code></li> </ul>"},{"location":"languages/python/libraries_frameworks/wsgi/#basic-wsgi-application","title":"Basic WSGI Application","text":"<p>A WSGI application is a simple Python callable. Here\u2019s a basic example of a WSGI application:</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#example-simple-wsgi-application","title":"Example: Simple WSGI Application","text":"<pre><code>def simple_app(environ, start_response):\n    # Define the response status and headers\n    status = '200 OK'\n    headers = [('Content-type', 'text/plain')]\n    start_response(status, headers)\n\n    # Return the response body\n    return [b\"Hello, World!\"]\n</code></pre> <p>In this example: - <code>simple_app</code> is a WSGI application callable. - <code>environ</code> is a dictionary containing CGI-like environment variables. - <code>start_response</code> is a callable used to set the response status and headers. - The function returns a list containing the body of the response.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#running-a-wsgi-application","title":"Running a WSGI Application","text":"<p>To run a WSGI application, you need a WSGI server. Here's how you can run the above example using different WSGI servers:</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#example-running-with-gunicorn","title":"Example: Running with Gunicorn","text":"<ol> <li>Save the WSGI application in a file, e.g., <code>app.py</code>.</li> <li>Run Gunicorn from the command line:</li> </ol> <pre><code>gunicorn app:simple_app\n</code></pre> <p>In this command: - <code>app</code> refers to the module (<code>app.py</code>). - <code>simple_app</code> is the callable within the module.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#example-running-with-waitress","title":"Example: Running with Waitress","text":"<ol> <li>Save the WSGI application in a file, e.g., <code>app.py</code>.</li> <li>Create a separate script to run Waitress:</li> </ol> <pre><code>from waitress import serve\nfrom app import simple_app\n\nserve(simple_app, host='0.0.0.0', port=8080)\n</code></pre> <ol> <li>Run the script:</li> </ol> <pre><code>python waitress_server.py\n</code></pre>"},{"location":"languages/python/libraries_frameworks/wsgi/#advanced-wsgi-application","title":"Advanced WSGI Application","text":""},{"location":"languages/python/libraries_frameworks/wsgi/#example-wsgi-application-with-dynamic-content","title":"Example: WSGI Application with Dynamic Content","text":"<pre><code>def dynamic_app(environ, start_response):\n    path = environ.get('PATH_INFO', '/')\n    if path == '/':\n        response_body = b\"Welcome to the homepage!\"\n    elif path == '/about':\n        response_body = b\"This is the about page.\"\n    else:\n        response_body = b\"404 Not Found\"\n        status = '404 Not Found'\n        headers = [('Content-type', 'text/plain')]\n        start_response(status, headers)\n        return [response_body]\n\n    status = '200 OK'\n    headers = [('Content-type', 'text/plain')]\n    start_response(status, headers)\n    return [response_body]\n</code></pre> <p>In this example: - The application serves different content based on the URL path (<code>/</code> or <code>/about</code>). - It handles a 404 Not Found response for other paths.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#example-wsgi-application-with-custom-headers","title":"Example: WSGI Application with Custom Headers","text":"<pre><code>def header_app(environ, start_response):\n    status = '200 OK'\n    headers = [\n        ('Content-type', 'text/plain'),\n        ('X-Custom-Header', 'MyCustomValue')\n    ]\n    start_response(status, headers)\n\n    response_body = b\"Response with custom headers.\"\n    return [response_body]\n</code></pre> <p>In this example: - The application includes a custom header (<code>X-Custom-Header</code>) in the response.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#best-practices","title":"Best Practices","text":"<ol> <li>Maintain Simplicity: Keep WSGI applications simple and focused on handling HTTP requests and responses.</li> <li>Use Middleware: Leverage WSGI middleware to handle common tasks such as logging, authentication, and URL routing.</li> <li>Optimize Performance: Ensure that the WSGI application is optimized for performance, especially when handling high traffic.</li> </ol>"},{"location":"languages/python/libraries_frameworks/wsgi/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Improper Error Handling: Ensure proper handling of errors and exceptions to avoid crashing the server or returning incorrect responses.</li> <li>Blocking Operations: Avoid blocking operations in the WSGI application, as they can impact performance and responsiveness.</li> </ol>"},{"location":"languages/python/libraries_frameworks/wsgi/#conclusion","title":"Conclusion","text":"<p>The WSGI module is essential for Python web development, providing a standardized interface for communication between web servers and Python web applications. By adhering to the WSGI specification, developers can build interoperable and scalable web applications using various WSGI-compatible servers and frameworks.</p>"},{"location":"languages/python/libraries_frameworks/wsgi/#references","title":"References","text":"<ul> <li>WSGI Specification - Official WSGI specification.</li> <li>Gunicorn Documentation - Documentation for Gunicorn, a popular WSGI server.</li> <li>Waitress Documentation - Documentation for Waitress, a WSGI server for production use.</li> </ul>"},{"location":"languages/python/libraries_frameworks/xlrd/","title":"Python xlrd Module: A Comprehensive Guide","text":"<p>The <code>xlrd</code> module in Python is used for reading data from Excel files (<code>.xls</code> and <code>.xlsx</code>). It allows you to extract information from spreadsheets in a programmatic way. This guide covers the key features and functionalities of the <code>xlrd</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/xlrd/#introduction-to-xlrd","title":"Introduction to xlrd","text":"<p>The <code>xlrd</code> module allows you to read data from Excel files. It supports older <code>.xls</code> files and newer <code>.xlsx</code> files, though the latter requires a version of <code>xlrd</code> that includes support for newer file formats.</p>"},{"location":"languages/python/libraries_frameworks/xlrd/#installation","title":"Installation","text":"<p>To use <code>xlrd</code>, you need to install it via pip. You can install it with the following command:</p> <pre><code>pip install xlrd\n</code></pre> <p>Note: As of <code>xlrd</code> version 2.0.0, support for <code>.xlsx</code> files has been removed. To handle <code>.xlsx</code> files, you might need to use other libraries like <code>openpyxl</code> or <code>pandas</code>. For <code>.xls</code> files, <code>xlrd</code> is still appropriate.</p>"},{"location":"languages/python/libraries_frameworks/xlrd/#reading-excel-files","title":"Reading Excel Files","text":"<p>To read data from an Excel file, you first need to open it using <code>xlrd</code> and then access the worksheets.</p> <pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#accessing-worksheet-data","title":"Accessing Worksheet Data","text":"<p>You can access worksheet data and get information about the sheet, such as its name and the number of rows and columns.</p> <pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n\n# Get sheet name\nprint(\"Sheet name:\", sheet.name)\n\n# Get number of rows and columns\nprint(\"Number of rows:\", sheet.nrows)\nprint(\"Number of columns:\", sheet.ncols)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#reading-cell-values","title":"Reading Cell Values","text":"<p>To read the value of a specific cell, use the <code>cell_value()</code> method.</p> <pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n\n# Read the value of a specific cell\nvalue = sheet.cell_value(0, 0)  # Read value from first row, first column\nprint(\"Cell value:\", value)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#handling-formulas","title":"Handling Formulas","text":"<p><code>xlrd</code> does not evaluate formulas; it only reads the formula string. To handle formulas, you need to parse the formula string yourself or use other libraries that can evaluate formulas.</p> <pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example_with_formula.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n\n# Read the formula string from a cell\nformula = sheet.cell_formula(0, 1)  # Read formula from first row, second column\nprint(\"Cell formula:\", formula)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#iterating-over-rows-and-columns","title":"Iterating Over Rows and Columns","text":"<p>You can iterate over rows and columns to read data from multiple cells.</p>"},{"location":"languages/python/libraries_frameworks/xlrd/#iterating-over-rows","title":"Iterating Over Rows","text":"<pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n\n# Iterate over rows\nfor row_num in range(sheet.nrows):\n    row = sheet.row_values(row_num)\n    print(\"Row {}: {}\".format(row_num, row))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#iterating-over-columns","title":"Iterating Over Columns","text":"<pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access the first sheet\nsheet = workbook.sheet_by_index(0)\n\n# Iterate over columns\nfor col_num in range(sheet.ncols):\n    col = sheet.col_values(col_num)\n    print(\"Column {}: {}\".format(col_num, col))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#handling-multiple-sheets","title":"Handling Multiple Sheets","text":"<p>You can work with multiple sheets by accessing them by name or index.</p>"},{"location":"languages/python/libraries_frameworks/xlrd/#accessing-sheets-by-name","title":"Accessing Sheets by Name","text":"<pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# Access a sheet by name\nsheet = workbook.sheet_by_name('Sheet1')\nprint(\"Sheet name:\", sheet.name)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#listing-all-sheet-names","title":"Listing All Sheet Names","text":"<pre><code>import xlrd\n\n# Open the Excel file\nworkbook = xlrd.open_workbook('example.xls')\n\n# List all sheet names\nsheet_names = workbook.sheet_names()\nprint(\"Sheet names:\", sheet_names)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#error-handling","title":"Error Handling","text":"<p>Handling errors is important when dealing with file operations and data extraction.</p> <pre><code>import xlrd\n\ntry:\n    # Open the Excel file\n    workbook = xlrd.open_workbook('example.xls')\n\n    # Access the first sheet\n    sheet = workbook.sheet_by_index(0)\n\n    # Read the value of a specific cell\n    value = sheet.cell_value(0, 0)\n    print(\"Cell value:\", value)\n\nexcept FileNotFoundError:\n    print(\"The file was not found.\")\n\nexcept xlrd.biffh.XLRDError as e:\n    print(f\"An error occurred while reading the Excel file: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlrd/#conclusion","title":"Conclusion","text":"<p>The <code>xlrd</code> module is a useful tool for reading data from Excel files. It provides a straightforward way to access and extract information from <code>.xls</code> files, although support for <code>.xlsx</code> files has been removed in recent versions. For more advanced features or <code>.xlsx</code> support, consider using libraries like <code>openpyxl</code> or <code>pandas</code>. By understanding the key functionalities of <code>xlrd</code>, you can effectively work with Excel files and integrate them into your Python applications.</p>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/","title":"Python XlsxWriter Module: A Comprehensive Guide","text":"<p>The <code>XlsxWriter</code> module in Python is a powerful library used to create Excel files (<code>.xlsx</code>) from Python applications. It allows you to generate Excel files with various features like formatting, charts, and formulas. This guide covers the key features and functionalities of the <code>XlsxWriter</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#introduction-to-xlsxwriter","title":"Introduction to XlsxWriter","text":"<p>The <code>XlsxWriter</code> module provides a way to create Excel files with a wide range of features, including formatting, charts, and formulas. It is particularly useful for generating reports and data analysis outputs in Excel format.</p>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#installation","title":"Installation","text":"<p>To use <code>XlsxWriter</code>, you need to install it via pip. You can install it with the following command:</p> <pre><code>pip install XlsxWriter\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#creating-a-workbook-and-worksheet","title":"Creating a Workbook and Worksheet","text":"<p>To start creating an Excel file, you first need to create a <code>Workbook</code> object and then add <code>Worksheet</code> objects to it.</p> <pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('example.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#writing-data-to-excel","title":"Writing Data to Excel","text":"<p>You can write data to specific cells in the worksheet using the <code>write()</code> method.</p> <pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('example.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Write data to cells\nworksheet.write('A1', 'Hello')\nworksheet.write('A2', 'World')\nworksheet.write(1, 0, 'Python')  # Row, Column, Data\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#formatting-cells","title":"Formatting Cells","text":"<p>The <code>XlsxWriter</code> module allows you to format cells with various styles such as bold, italic, and color.</p> <pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('formatted.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Define a format\nbold_format = workbook.add_format({'bold': True, 'font_color': 'blue'})\n\n# Apply the format\nworksheet.write('A1', 'Bold Blue Text', bold_format)\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#adding-charts","title":"Adding Charts","text":"<p>You can add various types of charts to your Excel file, such as line charts, bar charts, and pie charts.</p>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#creating-a-line-chart","title":"Creating a Line Chart","text":"<pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('chart.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Write some data\ndata = [\n    ['Month', 'Sales'],\n    ['Jan', 100],\n    ['Feb', 150],\n    ['Mar', 200],\n]\n\nworksheet.write_row('A1', data[0])\nworksheet.write_column('A2', [row[0] for row in data[1:]])\nworksheet.write_column('B2', [row[1] for row in data[1:]])\n\n# Create a chart object\nchart = workbook.add_chart({'type': 'line'})\n\n# Add data to the chart\nchart.add_series({'values': '=Sheet1!$B$2:$B$4', 'name': 'Sales'})\n\n# Insert the chart into the worksheet\nworksheet.insert_chart('D2', chart)\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#using-formulas","title":"Using Formulas","text":"<p>You can use Excel formulas within your <code>XlsxWriter</code> file.</p> <pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('formulas.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Write some data\nworksheet.write('A1', 10)\nworksheet.write('A2', 20)\n\n# Write a formula\nworksheet.write_formula('A3', '=A1 + A2')\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#adding-images","title":"Adding Images","text":"<p>You can add images to your Excel file.</p> <pre><code>import xlsxwriter\n\n# Create a workbook and add a worksheet\nworkbook = xlsxwriter.Workbook('image.xlsx')\nworksheet = workbook.add_worksheet()\n\n# Insert an image\nworksheet.insert_image('B2', 'logo.png')\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#handling-multiple-sheets","title":"Handling Multiple Sheets","text":"<p>You can create and manage multiple sheets within a single workbook.</p> <pre><code>import xlsxwriter\n\n# Create a workbook\nworkbook = xlsxwriter.Workbook('multiple_sheets.xlsx')\n\n# Add multiple worksheets\nworksheet1 = workbook.add_worksheet('Sheet1')\nworksheet2 = workbook.add_worksheet('Sheet2')\n\n# Write data to sheets\nworksheet1.write('A1', 'Data in Sheet1')\nworksheet2.write('A1', 'Data in Sheet2')\n\n# Close the workbook\nworkbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#error-handling","title":"Error Handling","text":"<p>Handling errors ensures that your application can manage issues gracefully.</p> <pre><code>import xlsxwriter\n\ntry:\n    # Create a workbook and add a worksheet\n    workbook = xlsxwriter.Workbook('example.xlsx')\n    worksheet = workbook.add_worksheet()\n\n    # Write data to a cell\n    worksheet.write('A1', 'Hello')\n\n    # Try an invalid operation\n    worksheet.write('A1', 'Hello', None)  # Invalid format\n\nexcept xlsxwriter.exceptions.XlsxWriterException as e:\n    print(f\"An error occurred: {e}\")\n\nfinally:\n    # Close the workbook if it was created\n    workbook.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlsxwriter/#conclusion","title":"Conclusion","text":"<p>The <code>XlsxWriter</code> module provides a comprehensive set of tools for creating and customizing Excel files in Python. With its support for cell formatting, charts, formulas, and images, it is a versatile library for generating reports and data analysis outputs. By understanding and utilizing these features, you can effectively create sophisticated Excel documents tailored to your needs.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/","title":"Python xlwings Module: A Comprehensive Guide","text":"<p>The <code>xlwings</code> module in Python provides an interface to interact with Excel from Python, allowing you to automate Excel tasks, manipulate spreadsheets, and create complex workflows. It can read from and write to Excel files and interact with Excel applications in real-time. This guide covers the key features and functionalities of the <code>xlwings</code> module with detailed examples.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#introduction-to-xlwings","title":"Introduction to xlwings","text":"<p><code>xlwings</code> is a Python library that allows you to interact with Excel applications. It supports both reading from and writing to Excel files, and can be used for automating tasks, generating reports, and integrating Python code with Excel workflows. It works with Excel for Windows and Mac.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#installation","title":"Installation","text":"<p>To use <code>xlwings</code>, you need to install it via pip. You can install it with the following command:</p> <pre><code>pip install xlwings\n</code></pre> <p>Additionally, you need to have Excel installed on your machine since <code>xlwings</code> uses Excel's COM interface.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/python/libraries_frameworks/xlwings/#opening-an-excel-workbook","title":"Opening an Excel Workbook","text":"<p>To start working with Excel files, you first need to open a workbook.</p> <pre><code>import xlwings as xw\n\n# Open an existing workbook\nwb = xw.Book('example.xlsx')\n\n# Create a new workbook\nwb = xw.Book()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#accessing-a-worksheet","title":"Accessing a Worksheet","text":"<p>To interact with a specific worksheet in a workbook:</p> <pre><code># Access a specific sheet\nsheet = wb.sheets['Sheet1']\n\n# Access the active sheet\nsheet = wb.sheets.active\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#reading-and-writing-data","title":"Reading and Writing Data","text":""},{"location":"languages/python/libraries_frameworks/xlwings/#writing-data-to-a-worksheet","title":"Writing Data to a Worksheet","text":"<p>You can write data to specific cells or ranges.</p> <pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Write data to cells\nsheet.range('A1').value = 'Hello'\nsheet.range('B1').value = 123\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#reading-data-from-a-worksheet","title":"Reading Data from a Worksheet","text":"<p>You can read values from cells or ranges.</p> <pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Read data from cells\nvalue_a1 = sheet.range('A1').value\nvalue_b1 = sheet.range('B1').value\n\nprint(f\"A1: {value_a1}, B1: {value_b1}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#formatting-cells","title":"Formatting Cells","text":"<p>You can apply formatting to cells, such as changing font style, color, and more.</p> <pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Apply formatting\ncell = sheet.range('A1')\ncell.value = 'Formatted Text'\ncell.api.Font.Bold = True\ncell.api.Font.Color = 0xFF0000  # Red color\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#creating-and-manipulating-charts","title":"Creating and Manipulating Charts","text":"<p>You can create and modify charts within Excel using <code>xlwings</code>.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#creating-a-chart","title":"Creating a Chart","text":"<pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Create a chart\nchart = sheet.charts.add()\nchart.chart_type = 'column_clustered'\n\n# Set chart data\nchart.set_source_data(sheet.range('A1:B10'))\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#modifying-an-existing-chart","title":"Modifying an Existing Chart","text":"<pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Access an existing chart\nchart = sheet.charts['Chart 1']\n\n# Modify chart properties\nchart.chart_type = 'line'\nchart.api.ChartTitle.Text = 'Updated Chart Title'\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#using-udfs-user-defined-functions","title":"Using UDFs (User-Defined Functions)","text":"<p><code>xlwings</code> allows you to create User-Defined Functions (UDFs) that can be used directly in Excel formulas.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#defining-a-udf","title":"Defining a UDF","text":"<pre><code>import xlwings as xw\n\n@xw.func\ndef add_numbers(a, b):\n    return a + b\n</code></pre> <p>To use this UDF, save the script and then call <code>add_numbers</code> in an Excel cell like a standard formula.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#handling-excel-workbooks-and-worksheets","title":"Handling Excel Workbooks and Worksheets","text":""},{"location":"languages/python/libraries_frameworks/xlwings/#saving-a-workbook","title":"Saving a Workbook","text":"<p>To save changes to a workbook:</p> <pre><code>import xlwings as xw\n\n# Open a workbook\nwb = xw.Book('example.xlsx')\n\n# Save the workbook\nwb.save('example_modified.xlsx')\n\n# Save and close the workbook\nwb.close()\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#closing-a-workbook","title":"Closing a Workbook","text":"<p>To close a workbook without saving:</p> <pre><code>import xlwings as xw\n\n# Open a workbook\nwb = xw.Book('example.xlsx')\n\n# Close the workbook without saving\nwb.close(save_changes=False)\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#working-with-excel-tables","title":"Working with Excel Tables","text":"<p>You can interact with Excel tables and ranges.</p>"},{"location":"languages/python/libraries_frameworks/xlwings/#adding-data-to-a-table","title":"Adding Data to a Table","text":"<pre><code>import xlwings as xw\n\n# Open a workbook and access a sheet\nwb = xw.Book('example.xlsx')\nsheet = wb.sheets['Sheet1']\n\n# Define data\ndata = [['Name', 'Age'], ['Alice', 30], ['Bob', 25]]\n\n# Write data to range\nsheet.range('A1').value = data\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#error-handling","title":"Error Handling","text":"<p>Handling errors is crucial when working with file operations and Excel automation.</p> <pre><code>import xlwings as xw\n\ntry:\n    # Open a workbook\n    wb = xw.Book('nonexistent.xlsx')\n\nexcept FileNotFoundError:\n    print(\"The specified file does not exist.\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"languages/python/libraries_frameworks/xlwings/#conclusion","title":"Conclusion","text":"<p>The <code>xlwings</code> module provides a comprehensive way to interact with Excel files from Python, allowing you to automate tasks, manipulate data, and integrate Python code with Excel workflows. With support for reading and writing data, formatting cells, creating charts, and defining UDFs, <code>xlwings</code> is a powerful tool for Excel automation and data analysis. By understanding and utilizing its features, you can effectively manage and enhance your Excel-based tasks.</p>"},{"location":"languages/python/tutorials/","title":"Welcome to the Python End-to-End Guide","text":"<p>Welcome to the Python End-to-End Guide! This comprehensive resource is designed to take you from the basics of Python programming to advanced concepts and practical applications. Whether you are a beginner just starting your journey or an experienced developer looking to refine your skills, this guide covers a wide array of topics to help you become proficient in Python and its ecosystem.</p>"},{"location":"languages/python/tutorials/#contents","title":"Contents","text":"<ol> <li> <p>Quick Reference    A handy reference for Python syntax and core concepts, providing a quick overview of the language's features.</p> </li> <li> <p>About Python    An introduction to Python, its history, and its significance in the programming world.</p> </li> <li> <p>Data Types    Learn about the various data types in Python, including integers, floats, strings, and more.</p> </li> <li> <p>Indentations    Understand the importance of indentation in Python for defining code blocks and maintaining readability.</p> </li> <li> <p>Comments and Documentation    Discover how to write effective comments and documentation to enhance code readability and maintainability.</p> </li> <li> <p>Enums    Explore enumerations in Python for creating a set of symbolic names bound to unique, constant values.</p> </li> <li> <p>Operators    A detailed overview of various operators in Python, including arithmetic, logical, and comparison operators.</p> </li> <li> <p>Variable Scopes and Binding    Learn about variable scopes, binding, and how they affect the visibility and lifetime of variables in Python.</p> </li> <li> <p>Comparisons    Understand how to perform comparisons between values and objects in Python.</p> </li> <li> <p>Conditions     Explore how to use conditional statements to control the flow of your Python programs.</p> </li> <li> <p>Loops     Learn about looping constructs in Python, including <code>for</code> and <code>while</code> loops, for repetitive tasks.</p> </li> <li> <p>Data Structures     An overview of Python\u2019s built-in data structures, including lists, tuples, sets, and dictionaries.</p> </li> <li> <p>Indexing and Slicing     Discover how to access and manipulate elements in sequences using indexing and slicing techniques.</p> </li> <li> <p>IO Operations     Learn about input and output operations in Python, including reading from and writing to files.</p> </li> <li> <p>Iterators and Iterables     Explore the concepts of iterators and iterables, and how they facilitate looping through data collections.</p> </li> <li> <p>Functions     Understand how to define and use functions in Python, including parameters, return values, and scope.</p> </li> <li> <p>Decorators and Generators     Learn about decorators for modifying functions and generators for creating iterators with simple syntax.</p> </li> <li> <p>Classes     An introduction to object-oriented programming in Python, covering class definition, attributes, and methods.</p> </li> <li> <p>Dataclass     Discover the <code>dataclass</code> feature in Python for simplifying class creation and improving readability.</p> </li> <li> <p>Metaclass     Explore metaclasses for customizing class creation and behavior in Python.</p> </li> <li> <p>Regular Expressions     Learn how to use regular expressions in Python for pattern matching and string manipulation.</p> </li> <li> <p>Copy     Understand the difference between shallow and deep copying of objects in Python.</p> </li> <li> <p>Exception Handling     Learn how to handle exceptions gracefully in Python using try, except, and finally blocks.</p> </li> <li> <p>Context Manager     Discover how to use context managers for resource management and ensuring proper cleanup.</p> </li> <li> <p>Command Line Arguments     Learn how to handle command-line arguments in Python scripts for user input.</p> </li> <li> <p>Packages     Understand how to create and use packages in Python for better code organization and reuse.</p> </li> <li> <p>Type Hints     Explore type hints for improving code readability and enabling static type checking in Python.</p> </li> <li> <p>Importance of <code>setup.py</code>     Learn about the <code>setup.py</code> file and its role in packaging and distributing Python projects.</p> </li> <li> <p>Object-Oriented Programming     A deeper dive into object-oriented programming concepts, including inheritance, encapsulation, and polymorphism.</p> </li> <li> <p>Exec vs Eval     Understand the differences between the <code>exec</code> and <code>eval</code> functions in Python and their use cases.</p> </li> <li> <p>Args vs Kwargs     Learn how to use <code>*args</code> and <code>**kwargs</code> for passing variable-length arguments to functions.</p> </li> <li> <p>Garbage Collection     Explore how Python manages memory and handles garbage collection automatically.</p> </li> <li> <p>Multiprocessing     Learn about the multiprocessing module for concurrent execution of processes in Python.</p> </li> <li> <p>Multiprocess Pool     Discover how to use a pool of worker processes for parallel execution of tasks.</p> </li> <li> <p>Multithreading     Understand how to implement multithreading in Python to perform concurrent operations.</p> </li> <li> <p>Concurrency     Explore concepts of concurrency and how to manage multiple tasks simultaneously in Python.</p> </li> <li> <p>Global Interpreter Lock     Learn about the Global Interpreter Lock (GIL) and its implications for threading in Python.</p> </li> <li> <p>Parallel Computation     Discover techniques for achieving parallel computation in Python to optimize performance.</p> </li> <li> <p>Sockets     Understand socket programming in Python for network communication.</p> </li> <li> <p>Web Sockets     Explore web socket programming for real-time communication between clients and servers.</p> </li> <li> <p>Networking     A guide to networking concepts in Python, including protocols and client-server architecture.</p> </li> <li> <p>Descriptors     Learn about descriptors in Python and how they enable advanced attribute management.</p> </li> <li> <p>Temporary File     Discover how to create and manage temporary files in Python using the tempfile module.</p> </li> <li> <p>ZipFile and TarFile     Understand how to work with zip and tar files in Python for compression and archiving.</p> </li> <li> <p>Alternatives to Switch Statement     Explore alternatives to the switch statement in Python, including if-elif-else chains and dictionaries.</p> </li> <li> <p>Byte Code vs Source Code     Learn about the differences between bytecode and source code, and how Python compiles code.</p> </li> <li> <p>Abstract Base Class     Discover the concept of abstract base classes (ABCs) and how they facilitate polymorphism.</p> </li> <li> <p>Immutable vs Mutable Datatypes     Understand the differences between mutable and immutable data types in Python and their implications.</p> </li> <li> <p>Templates     Learn how to use templates in Python for dynamic content generation and rendering.</p> </li> <li> <p>Python Persistence     Explore methods for data persistence in Python, including serialization and databases.</p> </li> <li> <p>Virtual Environments     Discover how to create and manage virtual environments in Python to isolate project dependencies.</p> </li> <li> <p>Audio Processing with Pyglet     Learn how to use the Pyglet library for audio processing and playback in Python.</p> </li> <li> <p>Python with C#     Explore interoperability between Python and C#, including how to call C# code from Python.</p> </li> <li> <p>Extensions with Python     Understand how to create extensions in Python to add functionality or integrate with C/C++ libraries.</p> </li> <li> <p>Unit Testing     Learn about unit testing in Python using the <code>unittest</code> framework to ensure code quality.</p> </li> <li> <p>Profiling     Discover techniques for profiling Python code to identify performance bottlenecks.</p> </li> <li> <p>Performance Optimization     Explore best practices for optimizing Python code for better performance.</p> </li> <li> <p>Security and Cryptography     Understand the principles of security and cryptography in Python to protect sensitive data.</p> </li> <li> <p>Shell Connection with Python     Learn how to interact with the shell and execute commands from Python scripts.</p> </li> </ol>"},{"location":"languages/python/tutorials/basics/","title":"Python Basics","text":""},{"location":"languages/python/tutorials/basics/#overview","title":"Overview","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. This document covers the basics of Python programming, including syntax, data types, and control structures.</p>"},{"location":"languages/python/tutorials/basics/#hello-world","title":"Hello World","text":"<p>The classic first program in any language is to print \"Hello, World!\" to the console.</p> <pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"languages/python/tutorials/basics/#variables-and-data-types","title":"Variables and Data Types","text":""},{"location":"languages/python/tutorials/basics/#variables","title":"Variables","text":"<p>Variables store data that can be used and manipulated in your programs.</p> <pre><code>x = 10\nname = \"Alice\"\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example","title":"Example","text":"<pre><code>age = 25\nprint(age)  # Output: 25\n</code></pre>"},{"location":"languages/python/tutorials/basics/#data-types","title":"Data Types","text":"<p>Python supports several data types, including integers, floats, strings, and booleans.</p> <ul> <li>Integer: <code>int</code></li> <li>Float: <code>float</code></li> <li>String: <code>str</code></li> <li>Boolean: <code>bool</code></li> </ul>"},{"location":"languages/python/tutorials/basics/#example_1","title":"Example","text":"<pre><code>integer_num = 10\nfloat_num = 10.5\nstring_value = \"Hello\"\nboolean_value = True\n\nprint(type(integer_num))  # Output: &lt;class 'int'&gt;\nprint(type(float_num))    # Output: &lt;class 'float'&gt;\nprint(type(string_value)) # Output: &lt;class 'str'&gt;\nprint(type(boolean_value))# Output: &lt;class 'bool'&gt;\n</code></pre>"},{"location":"languages/python/tutorials/basics/#operators","title":"Operators","text":""},{"location":"languages/python/tutorials/basics/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Multiplication: <code>*</code></li> <li>Division: <code>/</code></li> <li>Modulus: <code>%</code></li> <li>Exponentiation: <code>**</code></li> <li>Floor Division: <code>//</code></li> </ul>"},{"location":"languages/python/tutorials/basics/#example_2","title":"Example","text":"<pre><code>a = 10\nb = 3\n\nprint(a + b)  # Output: 13\nprint(a - b)  # Output: 7\nprint(a * b)  # Output: 30\nprint(a / b)  # Output: 3.3333...\nprint(a % b)  # Output: 1\nprint(a ** b) # Output: 1000\nprint(a // b) # Output: 3\n</code></pre>"},{"location":"languages/python/tutorials/basics/#comparison-operators","title":"Comparison Operators","text":"<ul> <li>Equal to: <code>==</code></li> <li>Not equal to: <code>!=</code></li> <li>Greater than: <code>&gt;</code></li> <li>Less than: <code>&lt;</code></li> <li>Greater than or equal to: <code>&gt;=</code></li> <li>Less than or equal to: <code>&lt;=</code></li> </ul>"},{"location":"languages/python/tutorials/basics/#example_3","title":"Example","text":"<pre><code>x = 10\ny = 20\n\nprint(x == y)  # Output: False\nprint(x != y)  # Output: True\nprint(x &gt; y)   # Output: False\nprint(x &lt; y)   # Output: True\nprint(x &gt;= y)  # Output: False\nprint(x &lt;= y)  # Output: True\n</code></pre>"},{"location":"languages/python/tutorials/basics/#control-structures","title":"Control Structures","text":""},{"location":"languages/python/tutorials/basics/#conditional-statements","title":"Conditional Statements","text":"<p>Use <code>if</code>, <code>elif</code>, and <code>else</code> for decision-making.</p> <pre><code>x = 10\n\nif x &gt; 0:\n    print(\"x is positive\")\nelif x == 0:\n    print(\"x is zero\")\nelse:\n    print(\"x is negative\")\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_4","title":"Example","text":"<pre><code>number = 7\n\nif number % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n# Output: Odd\n</code></pre>"},{"location":"languages/python/tutorials/basics/#loops","title":"Loops","text":""},{"location":"languages/python/tutorials/basics/#for-loop","title":"<code>for</code> Loop","text":"<p>Iterate over a sequence (e.g., list, tuple, string).</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_5","title":"Example","text":"<pre><code>for i in [1, 2, 3, 4, 5]:\n    print(i)\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n</code></pre>"},{"location":"languages/python/tutorials/basics/#while-loop","title":"<code>while</code> Loop","text":"<p>Repeat while a condition is true.</p> <pre><code>count = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_6","title":"Example","text":"<pre><code>num = 1\nwhile num &lt;= 5:\n    print(num)\n    num += 1\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n</code></pre>"},{"location":"languages/python/tutorials/basics/#functions","title":"Functions","text":"<p>Functions group reusable code. Use the <code>def</code> keyword to define a function.</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_7","title":"Example","text":"<pre><code>def add(x, y):\n    return x + y\n\nresult = add(10, 5)\nprint(result)  # Output: 15\n</code></pre>"},{"location":"languages/python/tutorials/basics/#lists","title":"Lists","text":"<p>Lists store multiple items in a single variable. Lists are ordered and mutable.</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_8","title":"Example","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\nprint(numbers[0])  # Output: 1\nprint(numbers[1:3])# Output: [2, 3]\n</code></pre>"},{"location":"languages/python/tutorials/basics/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries store key-value pairs. They are unordered and mutable.</p> <pre><code>person = {\"name\": \"Alice\", \"age\": 25}\n</code></pre>"},{"location":"languages/python/tutorials/basics/#example_9","title":"Example","text":"<pre><code>student = {\"name\": \"John\", \"grade\": \"A\"}\nprint(student[\"name\"])  # Output: John\n</code></pre>"},{"location":"languages/python/tutorials/basics/#summary","title":"Summary","text":"<p>This document covers fundamental Python concepts, including variables, data types, operators, control structures, functions, lists, and dictionaries. Python\u2019s simplicity and readability make it a great choice for both beginners and experienced developers. For more in-depth information, refer to the official Python documentation.</p>"},{"location":"languages/python/tutorials/general/","title":"Why Python?","text":"<p>Python is a versatile and powerful programming language known for its ease of use and broad applicability. Here are some key reasons why Python is favored by developers:</p>"},{"location":"languages/python/tutorials/general/#advantages","title":"Advantages","text":"<ul> <li>Software Quality: Python promotes clean and readable code, which enhances software quality.</li> <li>Developer Productivity: Python\u2019s simple syntax and high-level data structures lead to faster development times.</li> <li>Program Portability: Python programs can run on various operating systems with little to no modification.</li> <li>Support Libraries: Python boasts a vast standard library and extensive third-party libraries.</li> <li>Component Integration: Python excels in integrating various components and systems.</li> <li>Enjoyment: The language\u2019s readability and simplicity contribute to an enjoyable coding experience.</li> <li>Open Source: Python is freely available and open for contribution.</li> <li>Object-Oriented and Functional: Python supports multiple programming paradigms, including object-oriented and functional programming.</li> <li>Free and Portable: Python is freely available and portable across different platforms.</li> <li>Dynamic Typing and Automatic Memory Management: Python\u2019s dynamic typing and garbage collection simplify development.</li> <li>Programming-in-the-Large Support: Python includes support for large-scale programming.</li> <li>Built-in Object Types and Tools: Python offers built-in data types and utilities for various tasks.</li> <li>Library Utilities and Third-Party Utilities: Numerous libraries and utilities extend Python\u2019s capabilities.</li> <li>Mixable: Python can be easily integrated with other languages and technologies.</li> </ul> <p>Python is commonly defined as an object-oriented scripting language but is actually a general-purpose programming language that blends procedural, functional, and object-oriented paradigms.</p>"},{"location":"languages/python/tutorials/general/#cons","title":"Cons","text":"<ul> <li>Execution Speed: Python is generally slower compared to compiled languages like C++.</li> <li>Intangible Bits: Some aspects of Python's performance and behavior may be less predictable.</li> </ul>"},{"location":"languages/python/tutorials/general/#users","title":"Users","text":"<p>Python is widely used by major organizations and platforms, including: - Google - YouTube - Dropbox - Google App Engine - Maya - NSA</p>"},{"location":"languages/python/tutorials/general/#uses","title":"Uses","text":"<p>Python is employed in a variety of domains, such as: - System Programming - GUI Development - Internet Scripting - Component Integration - Database Programming - Rapid Prototyping - Numeric and Scientific Programming - Gaming - Image Processing - Data Mining - Robotics - Excel Automation</p>"},{"location":"languages/python/tutorials/general/#python-interpreter","title":"Python Interpreter","text":"<ul> <li>.pyc Files: Compiled Python files stored in the <code>__pycache__</code> directory.</li> <li>Python Virtual Machine (PVM): The runtime engine that reads and executes bytecode line by line.</li> </ul>"},{"location":"languages/python/tutorials/general/#variations","title":"Variations","text":"<ul> <li>CPython: The standard and most widely used implementation of Python.</li> <li>Jython: Python implemented for the Java platform.</li> <li>IronPython: Python for the .NET framework.</li> <li>Stackless Python: A variant of Python designed for concurrency.</li> <li>PyPy: A Python implementation optimized for speed.</li> </ul>"},{"location":"languages/python/tutorials/general/#python-objects","title":"Python Objects","text":"<p>Python supports various object types:</p> <ul> <li>Numbers: Integers and floats.</li> <li>Strings: Text data.</li> <li>Lists: Ordered collections.</li> <li>Dictionaries: Key-value pairs.</li> <li>Tuples: Immutable ordered collections.</li> <li>Files: File handling.</li> <li>Sets: Unordered collections of unique items.</li> <li>Other Core Types: Boolean, None, and various types.</li> <li>Program Unit Types: Functions, modules, and classes.</li> <li>Implementation-Related Types: Compiled code and stack tracebacks.</li> </ul>"},{"location":"languages/python/tutorials/general/#getting-help","title":"Getting Help","text":"<p>To access Python documentation and help: <pre><code>python -m pydoc -b\n</code></pre></p>"},{"location":"languages/python/tutorials/general/#scopes","title":"Scopes","text":"<p>Python uses different scopes to determine the visibility of variables:</p> <ul> <li>L (Local): Variables defined within a function.</li> <li>E (Enclosed): Variables in enclosing functions.</li> <li>G (Global): Variables defined at the module level.</li> <li>B (Built-in): Python\u2019s built-in names.</li> </ul>"},{"location":"languages/python/tutorials/general/#arguments","title":"Arguments","text":"<p>Python functions can accept various types of arguments:</p> <ul> <li>Positional Arguments: Standard arguments.</li> <li>Keyword Arguments: Arguments passed by name.</li> <li>Default Arguments: Arguments with default values.</li> <li>Varargs Collecting: Variable-length argument lists (<code>*args</code>).</li> <li>Varargs Unpacking: Unpacking variable-length arguments.</li> <li>Keyword-Only Arguments: Arguments that must be passed by keyword.</li> </ul>"},{"location":"languages/python/tutorials/general/#generators","title":"Generators","text":"<p>If a function uses <code>yield</code> as a return statement, it is called a generator.</p> <pre><code>def count_up_to(max):\n    count = 1\n    while count &lt;= max:\n        yield count\n        count += 1\n</code></pre> <p>This document provides a comprehensive overview of Python's features, usage, and related concepts. For more detailed information, refer to the official Python documentation.</p>"},{"location":"languages/python/tutorials/datastructures/","title":"Welcome to the Python Data Structures Guide","text":"<p>Welcome to the Python Data Structures Guide! This resource provides a detailed exploration of essential data structures that are foundational for organizing and storing data in Python. Understanding these structures is crucial for efficient data management and algorithm implementation, enabling you to write more effective and performant code.</p>"},{"location":"languages/python/tutorials/datastructures/#contents","title":"Contents","text":"<ol> <li> <p>Arrays    Discover arrays, a fundamental data structure that stores elements of the same type in a contiguous block of memory. This section covers how to create and manipulate arrays in Python, including indexing, slicing, and common operations to efficiently manage collections of data.</p> </li> <li> <p>Linked List    Explore linked lists, a dynamic data structure consisting of nodes where each node points to the next. This section discusses the advantages of linked lists over arrays, how to create, traverse, and manipulate linked lists, and the various types, such as singly linked lists and doubly linked lists.</p> </li> </ol>"},{"location":"languages/python/tutorials/datastructures/arrays/","title":"Python Arrays and Multidimensional Arrays","text":"<p>Arrays in Python, provided by the <code>array</code> module, allow you to work with homogeneous data efficiently. For multidimensional arrays, NumPy is the most common library used due to its comprehensive support for various array operations.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#1-python-arrays","title":"1. Python Arrays","text":"<p>The <code>array</code> module provides a way to create arrays with elements of the same type.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#11-the-array-module","title":"1.1. The <code>array</code> Module","text":"<p>To use arrays, you need to import the <code>array</code> module:</p> <pre><code>import array\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#12-creating-an-array","title":"1.2. Creating an Array","text":"<p>You can create an array by specifying the type code and the list of elements.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#syntax","title":"Syntax:","text":"<pre><code>array.array(typecode, [elements])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#example","title":"Example:","text":"<pre><code>import array\n\n# Create an array of integers\narr = array.array('i', [1, 2, 3, 4, 5])\nprint(arr)\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#output","title":"Output:","text":"<pre><code>array('i', [1, 2, 3, 4, 5])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#13-array-operations","title":"1.3. Array Operations","text":""},{"location":"languages/python/tutorials/datastructures/arrays/#accessing-elements","title":"Accessing Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4, 5])\nprint(arr[0])  # Output: 1\nprint(arr[3])  # Output: 4\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#modifying-elements","title":"Modifying Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4, 5])\narr[2] = 10\nprint(arr)  # Output: array('i', [1, 2, 10, 4, 5])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#appending-elements","title":"Appending Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3])\narr.append(4)\nprint(arr)  # Output: array('i', [1, 2, 3, 4])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#inserting-elements","title":"Inserting Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 4])\narr.insert(2, 3)\nprint(arr)  # Output: array('i', [1, 2, 3, 4])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#removing-elements","title":"Removing Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4])\narr.remove(3)\nprint(arr)  # Output: array('i', [1, 2, 4])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#popping-elements","title":"Popping Elements","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4])\npopped_element = arr.pop()\nprint(popped_element)  # Output: 4\nprint(arr)  # Output: array('i', [1, 2, 3])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#array-length","title":"Array Length","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4, 5])\nprint(len(arr))  # Output: 5\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#14-array-iteration","title":"1.4. Array Iteration","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3, 4, 5])\nfor elem in arr:\n    print(elem)\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#output_1","title":"Output:","text":"<pre><code>1\n2\n3\n4\n5\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#15-array-conversion","title":"1.5. Array Conversion","text":""},{"location":"languages/python/tutorials/datastructures/arrays/#array-to-list","title":"Array to List","text":"<pre><code>import array\n\narr = array.array('i', [1, 2, 3])\nlist_from_array = arr.tolist()\nprint(list_from_array)  # Output: [1, 2, 3]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#list-to-array","title":"List to Array","text":"<pre><code>import array\n\nlist_data = [1, 2, 3]\narr_from_list = array.array('i', list_data)\nprint(arr_from_list)  # Output: array('i', [1, 2, 3])\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#2-multidimensional-arrays","title":"2. Multidimensional Arrays","text":"<p>For multidimensional arrays, the <code>numpy</code> library is widely used. NumPy provides support for arrays with multiple dimensions and offers many powerful operations.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#21-installing-numpy","title":"2.1. Installing NumPy","text":"<p>To use NumPy, you need to install it first:</p> <pre><code>pip install numpy\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#22-creating-multidimensional-arrays","title":"2.2. Creating Multidimensional Arrays","text":"<p>You can create multidimensional arrays using NumPy's <code>array()</code> function.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#example_1","title":"Example:","text":"<pre><code>import numpy as np\n\n# Create a 2D array (matrix)\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr)\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#output_2","title":"Output:","text":"<pre><code>[[1 2 3]\n [4 5 6]]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#23-operations-on-multidimensional-arrays","title":"2.3. Operations on Multidimensional Arrays","text":""},{"location":"languages/python/tutorials/datastructures/arrays/#accessing-elements_1","title":"Accessing Elements","text":"<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr[0, 1])  # Output: 2\nprint(arr[1, 2])  # Output: 6\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#modifying-elements_1","title":"Modifying Elements","text":"<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\narr[0, 1] = 10\nprint(arr)  # Output: [[ 1 10  3]\n            #          [ 4  5  6]]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#slicing-arrays","title":"Slicing Arrays","text":"<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr[0:2, 1:3])  # Output: [[2 3]\n                     #          [5 6]]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#array-operations","title":"Array Operations","text":"<pre><code>import numpy as np\n\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\n\n# Addition\nprint(arr1 + arr2)  # Output: [[ 6  8]\n                     #          [10 12]]\n\n# Multiplication\nprint(arr1 * arr2)  # Output: [[ 5 12]\n                     #          [21 32]]\n\n# Dot product\nprint(np.dot(arr1, arr2))  # Output: [[19 22]\n                            #          [43 50]]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#24-multidimensional-array-functions","title":"2.4. Multidimensional Array Functions","text":""},{"location":"languages/python/tutorials/datastructures/arrays/#reshaping-arrays","title":"Reshaping Arrays","text":"<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nreshaped_arr = arr.reshape((3, 2))\nprint(reshaped_arr)  # Output: [[1 2]\n                      #          [3 4]\n                      #          [5 6]]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#flattening-arrays","title":"Flattening Arrays","text":"<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6]])\nflattened_arr = arr.flatten()\nprint(flattened_arr)  # Output: [1 2 3 4 5 6]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#3-operations-with-different-data-types","title":"3. Operations with Different Data Types","text":""},{"location":"languages/python/tutorials/datastructures/arrays/#31-arrays-with-different-data-types","title":"3.1. Arrays with Different Data Types","text":"<p>Arrays can hold different data types, but with NumPy, you need to specify the dtype during array creation.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#example_2","title":"Example:","text":"<pre><code>import numpy as np\n\n# Create an array with floats\narr_float = np.array([1.1, 2.2, 3.3], dtype=float)\nprint(arr_float)  # Output: [1.1 2.2 3.3]\n\n# Create an array with integers\narr_int = np.array([1, 2, 3], dtype=int)\nprint(arr_int)  # Output: [1 2 3]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#32-mixed-data-types","title":"3.2. Mixed Data Types","text":"<p>NumPy arrays cannot hold mixed data types in a single array. For such cases, Python lists or objects are preferred.</p>"},{"location":"languages/python/tutorials/datastructures/arrays/#example_3","title":"Example:","text":"<pre><code>import numpy as np\n\n# Create an array with objects (mixed types)\narr_mixed = np.array([1, \"string\", 3.0], dtype=object)\nprint(arr_mixed)  # Output: [1 'string' 3.0]\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/arrays/#conclusion","title":"Conclusion","text":"<p>Python arrays and multidimensional arrays are essential for managing and manipulating data. The <code>array</code> module provides basic array functionalities, while NumPy offers extensive support for multidimensional arrays and a wide range of operations. Understanding how to use these tools effectively will help you handle various data processing tasks efficiently.</p>"},{"location":"languages/python/tutorials/datastructures/linked_list/","title":"Implementing a Linked List in Python","text":"<p>A linked list is a linear data structure where each element is a separate object, called a node. Each node contains two components: data and a reference (or link) to the next node in the sequence. This structure allows for efficient insertion and deletion of elements.</p>"},{"location":"languages/python/tutorials/datastructures/linked_list/#components-of-a-linked-list","title":"Components of a Linked List","text":"<ul> <li>Node: The building block of a linked list, containing data and a reference to the next node.</li> <li>LinkedList: A class that manages the nodes, providing methods to manipulate the list.</li> </ul>"},{"location":"languages/python/tutorials/datastructures/linked_list/#implementing-a-node-class","title":"Implementing a Node Class","text":"<p>The <code>Node</code> class represents each node in the linked list.</p> <pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/linked_list/#example","title":"Example","text":"<pre><code>node1 = Node(5)\nnode2 = Node(10)\nnode1.next = node2\n\nprint(node1.data)  # Output: 5\nprint(node1.next.data)  # Output: 10\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/linked_list/#implementing-a-linkedlist-class","title":"Implementing a LinkedList Class","text":"<p>The <code>LinkedList</code> class manages the nodes and provides methods to manipulate the linked list.</p>"},{"location":"languages/python/tutorials/datastructures/linked_list/#basic-methods","title":"Basic Methods","text":"<ul> <li><code>__init__</code>: Initializes an empty linked list.</li> <li><code>append</code>: Adds a new node at the end of the list.</li> <li><code>prepend</code>: Adds a new node at the beginning of the list.</li> <li><code>insert_after_node</code>: Inserts a new node after a given node.</li> <li><code>delete_node</code>: Deletes a node with a specific value.</li> <li><code>print_list</code>: Prints the entire linked list.</li> </ul> <pre><code>class LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last_node = self.head\n        while last_node.next:\n            last_node = last_node.next\n        last_node.next = new_node\n\n    def prepend(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_after_node(self, prev_node, data):\n        if not prev_node:\n            print(\"Previous node must be in the list.\")\n            return\n        new_node = Node(data)\n        new_node.next = prev_node.next\n        prev_node.next = new_node\n\n    def delete_node(self, key):\n        current_node = self.head\n        if current_node and current_node.data == key:\n            self.head = current_node.next\n            current_node = None\n            return\n        prev = None\n        while current_node and current_node.data != key:\n            prev = current_node\n            current_node = current_node.next\n        if current_node is None:\n            return\n        prev.next = current_node.next\n        current_node = None\n\n    def print_list(self):\n        current_node = self.head\n        while current_node:\n            print(current_node.data)\n            current_node = current_node.next\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/linked_list/#example-usage","title":"Example Usage","text":"<pre><code>llist = LinkedList()\nllist.append(1)\nllist.append(2)\nllist.append(3)\n\nllist.prepend(0)\n\nllist.insert_after_node(llist.head.next, 1.5)\n\nllist.print_list()\n# Output:\n# 0\n# 1\n# 1.5\n# 2\n# 3\n\nllist.delete_node(1.5)\nllist.print_list()\n# Output:\n# 0\n# 1\n# 2\n# 3\n</code></pre>"},{"location":"languages/python/tutorials/datastructures/linked_list/#conclusion","title":"Conclusion","text":"<p>Implementing a linked list in Python provides an excellent understanding of fundamental data structures. The <code>Node</code> class represents each element in the list, while the <code>LinkedList</code> class provides methods to manipulate the list, including appending, prepending, inserting, deleting, and printing nodes. This implementation can be extended with additional features such as reversing the list, finding the length, and more.</p>"},{"location":"languages/python/tutorials/datatypes/","title":"Welcome to the Python Data Types Guide","text":"<p>Welcome to the Python Data Types Guide! This comprehensive resource will help you understand the various data types available in Python and how to use them effectively in your programming tasks. Mastering data types is essential for building robust applications, as they dictate how data is stored, manipulated, and processed.</p>"},{"location":"languages/python/tutorials/datatypes/#contents","title":"Contents","text":"<ol> <li> <p>Numbers    Explore the different types of numeric data in Python, including integers, floats, and complex numbers. This section covers how to perform mathematical operations on these data types and highlights their characteristics.</p> </li> <li> <p>Strings    Delve into strings, the fundamental data type for representing text in Python. This section explains how to create, manipulate, and perform operations on strings, including escaping characters and string concatenation.</p> </li> <li> <p>String Formatting    Learn about various methods for formatting strings in Python, including f-strings, the <code>format()</code> method, and the older <code>%</code> formatting. This section provides examples to help you present data clearly and dynamically.</p> </li> <li> <p>String Methods    Discover the built-in string methods available in Python, such as <code>upper()</code>, <code>lower()</code>, <code>replace()</code>, and many others. This section includes practical examples demonstrating how to use these methods to manipulate and analyze strings effectively.</p> </li> <li> <p>List    Understand lists, one of the most versatile data types in Python. This section covers how to create and manipulate lists, including adding, removing, and accessing elements, as well as the characteristics that make lists powerful.</p> </li> <li> <p>List Comprehension    Explore list comprehension, a concise way to create lists based on existing lists. This section provides examples of how to write and use list comprehensions to simplify your code and improve readability.</p> </li> <li> <p>Dictionary    Learn about dictionaries, a powerful data type for storing key-value pairs in Python. This section covers how to create, access, and manipulate dictionaries, including common methods and use cases.</p> </li> <li> <p>Tuple    Discover tuples, an immutable data type in Python. This section explains how to create and use tuples, highlighting their advantages and scenarios where they are preferable to lists.</p> </li> <li> <p>Set    Explore sets, a data type that stores unique elements. This section covers how to create and manipulate sets, including their properties and applications in eliminating duplicates.</p> </li> <li> <p>Set Operations     Delve into set operations, including union, intersection, difference, and symmetric difference. This section provides examples to illustrate how to perform these operations and utilize sets effectively in your code.</p> </li> </ol>"},{"location":"languages/python/tutorials/datatypes/dictionary/","title":"Dictionary Data Type in Python","text":"<p>Dictionaries are mutable, unordered collections of key-value pairs. Each key is unique and maps to a value, allowing for efficient data retrieval and manipulation.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#1-creating-dictionaries","title":"1. Creating Dictionaries","text":"<p>Dictionaries can be created using curly braces <code>{}</code> with key-value pairs or the <code>dict()</code> function.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example","title":"Example:","text":"<pre><code># Creating a dictionary using curly braces\ndict1 = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Creating a dictionary using the dict() function\ndict2 = dict(name=\"Bob\", age=30, city=\"Los Angeles\")\n\n# Creating an empty dictionary\nempty_dict = {}\n\nprint(\"Dictionary 1:\", dict1)\nprint(\"Dictionary 2:\", dict2)\nprint(\"Empty dictionary:\", empty_dict)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output","title":"Output:","text":"<pre><code>Dictionary 1: {'name': 'Alice', 'age': 25, 'city': 'New York'}\nDictionary 2: {'name': 'Bob', 'age': 30, 'city': 'Los Angeles'}\nEmpty dictionary: {}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#2-accessing-dictionary-elements","title":"2. Accessing Dictionary Elements","text":"<p>Dictionary elements can be accessed using keys.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example_1","title":"Example:","text":"<pre><code>dict1 = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Accessing elements by key\nname = dict1[\"name\"]\nage = dict1.get(\"age\")\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output_1","title":"Output:","text":"<pre><code>Name: Alice\nAge: 25\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#3-modifying-dictionaries","title":"3. Modifying Dictionaries","text":"<p>Dictionaries are mutable, meaning their elements can be changed, added, or removed.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example_2","title":"Example:","text":"<pre><code>dict1 = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Modifying an element\ndict1[\"age\"] = 26\n\n# Adding a new element\ndict1[\"profession\"] = \"Engineer\"\n\n# Removing an element\ndel dict1[\"city\"]\n\nprint(\"Modified dictionary:\", dict1)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output_2","title":"Output:","text":"<pre><code>Modified dictionary: {'name': 'Alice', 'age': 26, 'profession': 'Engineer'}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#4-dictionary-methods","title":"4. Dictionary Methods","text":"<p>Python provides various methods to perform operations on dictionaries, such as <code>keys()</code>, <code>values()</code>, <code>items()</code>, <code>update()</code>, and <code>pop()</code>.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example_3","title":"Example:","text":"<pre><code>dict1 = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Getting all keys\nkeys = dict1.keys()\n\n# Getting all values\nvalues = dict1.values()\n\n# Getting all key-value pairs\nitems = dict1.items()\n\n# Updating a dictionary with another dictionary\ndict2 = {\"age\": 26, \"profession\": \"Engineer\"}\ndict1.update(dict2)\n\n# Removing an element and returning its value\nremoved_value = dict1.pop(\"city\", \"Not Found\")\n\nprint(\"Keys:\", keys)\nprint(\"Values:\", values)\nprint(\"Items:\", items)\nprint(\"Updated dictionary:\", dict1)\nprint(\"Removed value:\", removed_value)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output_3","title":"Output:","text":"<pre><code>Keys: dict_keys(['name', 'age', 'city'])\nValues: dict_values(['Alice', 25, 'New York'])\nItems: dict_items([('name', 'Alice'), ('age', 25), ('city', 'New York')])\nUpdated dictionary: {'name': 'Alice', 'age': 26, 'profession': 'Engineer'}\nRemoved value: Not Found\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#5-dictionary-comprehensions","title":"5. Dictionary Comprehensions","text":"<p>Dictionary comprehensions provide a concise way to create dictionaries.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example_4","title":"Example:","text":"<pre><code># Creating a dictionary using dictionary comprehension\nsquares = {x: x*x for x in range(6)}\n\nprint(\"Squares dictionary:\", squares)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output_4","title":"Output:","text":"<pre><code>Squares dictionary: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#6-nested-dictionaries","title":"6. Nested Dictionaries","text":"<p>Dictionaries can contain other dictionaries, allowing for the creation of nested structures.</p>"},{"location":"languages/python/tutorials/datatypes/dictionary/#example_5","title":"Example:","text":"<pre><code># Creating a nested dictionary\nnested_dict = {\n    \"person1\": {\"name\": \"Alice\", \"age\": 25},\n    \"person2\": {\"name\": \"Bob\", \"age\": 30}\n}\n\n# Accessing elements in a nested dictionary\nperson1_name = nested_dict[\"person1\"][\"name\"]\nperson2_age = nested_dict[\"person2\"][\"age\"]\n\nprint(\"Nested dictionary:\", nested_dict)\nprint(\"Person1 name:\", person1_name)\nprint(\"Person2 age:\", person2_age)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#output_5","title":"Output:","text":"<pre><code>Nested dictionary: {'person1': {'name': 'Alice', 'age': 25}, 'person2': {'name': 'Bob', 'age': 30}}\nPerson1 name: Alice\nPerson2 age: 30\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/dictionary/#conclusion","title":"Conclusion","text":"<p>Dictionaries in Python are a powerful data type for storing and manipulating key-value pairs. Understanding how to create, access, modify, and utilize dictionaries is crucial for effective programming in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how dictionaries work and how to apply these techniques in your Python projects.</p>"},{"location":"languages/python/tutorials/datatypes/list/","title":"List Data Type in Python","text":"<p>Lists are an ordered, mutable, and dynamic collection of elements in Python. They can store elements of different data types, including integers, floats, strings, and even other lists.</p>"},{"location":"languages/python/tutorials/datatypes/list/#1-creating-lists","title":"1. Creating Lists","text":"<p>Lists can be created using square brackets <code>[]</code> or the <code>list()</code> function.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example","title":"Example:","text":"<pre><code># Creating a list using square brackets\nlist1 = [1, 2, 3, 4, 5]\n\n# Creating a list using the list() function\nlist2 = list([\"a\", \"b\", \"c\", \"d\"])\n\n# Creating an empty list\nempty_list = []\n\nprint(\"List1:\", list1)\nprint(\"List2:\", list2)\nprint(\"Empty list:\", empty_list)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output","title":"Output:","text":"<pre><code>List1: [1, 2, 3, 4, 5]\nList2: ['a', 'b', 'c', 'd']\nEmpty list: []\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#2-accessing-list-elements","title":"2. Accessing List Elements","text":"<p>List elements can be accessed by indexing and slicing.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example_1","title":"Example:","text":"<pre><code>list1 = [10, 20, 30, 40, 50]\n\n# Indexing\nfirst_element = list1[0]\nlast_element = list1[-1]\n\n# Slicing\nsub_list = list1[1:4]\n\nprint(\"First element:\", first_element)\nprint(\"Last element:\", last_element)\nprint(\"Sub-list:\", sub_list)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output_1","title":"Output:","text":"<pre><code>First element: 10\nLast element: 50\nSub-list: [20, 30, 40]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#3-modifying-lists","title":"3. Modifying Lists","text":"<p>Lists are mutable, meaning their elements can be changed.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example_2","title":"Example:","text":"<pre><code>list1 = [1, 2, 3, 4, 5]\n\n# Modifying an element\nlist1[2] = 10\n\n# Appending an element\nlist1.append(6)\n\n# Inserting an element\nlist1.insert(1, 15)\n\nprint(\"Modified list:\", list1)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output_2","title":"Output:","text":"<pre><code>Modified list: [1, 15, 2, 10, 4, 5, 6]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#4-removing-elements-from-lists","title":"4. Removing Elements from Lists","text":"<p>Elements can be removed from a list using the <code>remove()</code>, <code>pop()</code>, and <code>clear()</code> methods.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example_3","title":"Example:","text":"<pre><code>list1 = [1, 2, 3, 4, 5]\n\n# Removing an element by value\nlist1.remove(3)\n\n# Removing an element by index\nremoved_element = list1.pop(1)\n\n# Clearing the entire list\nlist1.clear()\n\nprint(\"List after removal:\", list1)\nprint(\"Removed element:\", removed_element)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output_3","title":"Output:","text":"<pre><code>List after removal: []\nRemoved element: 2\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#5-list-methods","title":"5. List Methods","text":"<p>Python provides various methods to perform operations on lists, such as <code>sort()</code>, <code>reverse()</code>, <code>count()</code>, and <code>index()</code>.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example_4","title":"Example:","text":"<pre><code>list1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n\n# Sorting the list\nlist1.sort()\n\n# Reversing the list\nlist1.reverse()\n\n# Counting occurrences of an element\ncount_of_fives = list1.count(5)\n\n# Finding the index of the first occurrence of an element\nindex_of_nine = list1.index(9)\n\nprint(\"Sorted and reversed list:\", list1)\nprint(\"Count of 5s:\", count_of_fives)\nprint(\"Index of 9:\", index_of_nine)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output_4","title":"Output:","text":"<pre><code>Sorted and reversed list: [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]\nCount of 5s: 3\nIndex of 9: 0\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#6-nested-lists","title":"6. Nested Lists","text":"<p>Lists can contain other lists, allowing for the creation of nested or multi-dimensional lists.</p>"},{"location":"languages/python/tutorials/datatypes/list/#example_5","title":"Example:","text":"<pre><code>nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Accessing elements in a nested list\nfirst_inner_list = nested_list[0]\nelement_in_second_inner_list = nested_list[1][2]\n\nprint(\"Nested list:\", nested_list)\nprint(\"First inner list:\", first_inner_list)\nprint(\"Element in second inner list:\", element_in_second_inner_list)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#output_5","title":"Output:","text":"<pre><code>Nested list: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nFirst inner list: [1, 2, 3]\nElement in second inner list: 6\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list/#conclusion","title":"Conclusion","text":"<p>Lists in Python are a flexible and powerful data type, allowing for dynamic storage and manipulation of elements. Understanding how to create, access, modify, and utilize lists is crucial for effective programming in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how lists work and how to apply these techniques in your Python projects.</p>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/","title":"Python List Comprehensions","text":"<p>List comprehensions provide a concise way to create lists in Python. They consist of brackets containing an expression followed by a <code>for</code> clause, and can include multiple <code>for</code> or <code>if</code> clauses. The result will be a new list resulting from evaluating the expression in the context of the <code>for</code> and <code>if</code> clauses.</p>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax of a list comprehension is:</p> <pre><code>[expression for item in iterable if condition]\n</code></pre> <ul> <li><code>expression</code> is the value to be added to the new list.</li> <li><code>item</code> is the variable that takes the value of the current element from the iterable.</li> <li><code>iterable</code> can be any Python iterable (e.g., list, tuple, string).</li> <li><code>condition</code> is optional and filters the elements added to the new list.</li> </ul>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#examples","title":"Examples","text":""},{"location":"languages/python/tutorials/datatypes/list_comprehension/#example-1-simple-list-comprehension","title":"Example 1: Simple List Comprehension","text":"<p>Create a list of squares for numbers from 1 to 10:</p> <pre><code>squares = [x**2 for x in range(1, 11)]\nprint(squares)\n</code></pre> <p>Output:</p> <pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#example-2-list-comprehension-with-condition","title":"Example 2: List Comprehension with Condition","text":"<p>Create a list of even numbers from 1 to 10:</p> <pre><code>evens = [x for x in range(1, 11) if x % 2 == 0]\nprint(evens)\n</code></pre> <p>Output:</p> <pre><code>[2, 4, 6, 8, 10]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#example-3-nested-list-comprehension","title":"Example 3: Nested List Comprehension","text":"<p>Flatten a 2D list (list of lists):</p> <pre><code>matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)\n</code></pre> <p>Output:</p> <pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#example-4-list-comprehension-with-function","title":"Example 4: List Comprehension with Function","text":"<p>Create a list of lengths of each word in a list:</p> <pre><code>words = [\"hello\", \"world\", \"python\", \"list\", \"comprehension\"]\nlengths = [len(word) for word in words]\nprint(lengths)\n</code></pre> <p>Output:</p> <pre><code>[5, 5, 6, 4, 13]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#example-5-multiple-conditions-in-list-comprehension","title":"Example 5: Multiple Conditions in List Comprehension","text":"<p>Create a list of numbers from 1 to 30 that are divisible by both 2 and 3:</p> <pre><code>divisible_by_2_and_3 = [x for x in range(1, 31) if x % 2 == 0 and x % 3 == 0]\nprint(divisible_by_2_and_3)\n</code></pre> <p>Output:</p> <pre><code>[6, 12, 18, 24, 30]\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#advantages-of-list-comprehensions","title":"Advantages of List Comprehensions","text":"<ol> <li>Concise: List comprehensions can often replace several lines of code with a single line.</li> <li>Readable: For those familiar with the syntax, list comprehensions can be more readable and expressive.</li> <li>Efficient: List comprehensions are generally faster than traditional for-loops because they are optimized for performance.</li> </ol>"},{"location":"languages/python/tutorials/datatypes/list_comprehension/#conclusion","title":"Conclusion","text":"<p>List comprehensions are a powerful feature in Python that can simplify code and improve readability. By using them appropriately, you can create efficient and concise code for generating lists.</p>"},{"location":"languages/python/tutorials/datatypes/number/","title":"Numeric Data Types in Python","text":"<p>Python provides several built-in numeric data types to handle various kinds of numerical data. These data types are primarily used for arithmetic operations and to perform mathematical calculations.</p>"},{"location":"languages/python/tutorials/datatypes/number/#1-integer-int","title":"1. Integer (<code>int</code>)","text":"<p>Integers are whole numbers that can be positive, negative, or zero, without a fractional part.</p>"},{"location":"languages/python/tutorials/datatypes/number/#example","title":"Example:","text":"<pre><code># Declaring integer variables\na = 10\nb = -5\nc = 0\n\n# Performing arithmetic operations\nsum_ab = a + b  # Addition\ndiff_ab = a - b  # Subtraction\nprod_ab = a * b  # Multiplication\nquot_ab = a // b  # Floor Division\n\nprint(\"Sum:\", sum_ab)\nprint(\"Difference:\", diff_ab)\nprint(\"Product:\", prod_ab)\nprint(\"Quotient:\", quot_ab)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#output","title":"Output:","text":"<pre><code>Sum: 5\nDifference: 15\nProduct: -50\nQuotient: -2\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#2-float-float","title":"2. Float (<code>float</code>)","text":"<p>Float represents real numbers that contain a decimal point. They are used for representing fractional values.</p>"},{"location":"languages/python/tutorials/datatypes/number/#example_1","title":"Example:","text":"<pre><code># Declaring float variables\nx = 10.5\ny = -3.2\nz = 0.0\n\n# Performing arithmetic operations\nsum_xy = x + y  # Addition\ndiff_xy = x - y  # Subtraction\nprod_xy = x * y  # Multiplication\nquot_xy = x / y  # Division\n\nprint(\"Sum:\", sum_xy)\nprint(\"Difference:\", diff_xy)\nprint(\"Product:\", prod_xy)\nprint(\"Quotient:\", quot_xy)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#output_1","title":"Output:","text":"<pre><code>Sum: 7.3\nDifference: 13.7\nProduct: -33.6\nQuotient: -3.28125\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#3-complex-complex","title":"3. Complex (<code>complex</code>)","text":"<p>Complex numbers consist of a real part and an imaginary part. In Python, they are written in the form <code>a + bj</code>, where <code>a</code> is the real part and <code>b</code> is the imaginary part.</p>"},{"location":"languages/python/tutorials/datatypes/number/#example_2","title":"Example:","text":"<pre><code># Declaring complex variables\np = 2 + 3j\nq = 1 - 4j\n\n# Performing arithmetic operations\nsum_pq = p + q  # Addition\ndiff_pq = p - q  # Subtraction\nprod_pq = p * q  # Multiplication\nquot_pq = p / q  # Division\n\nprint(\"Sum:\", sum_pq)\nprint(\"Difference:\", diff_pq)\nprint(\"Product:\", prod_pq)\nprint(\"Quotient:\", quot_pq)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#output_2","title":"Output:","text":"<pre><code>Sum: (3-1j)\nDifference: (1+7j)\nProduct: (14-5j)\nQuotient: (-0.6470588235294118+0.5882352941176471j)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/number/#conclusion","title":"Conclusion","text":"<p>Python's numeric data types provide a robust way to handle various types of numerical data. Understanding how to use <code>int</code>, <code>float</code>, and <code>complex</code> types effectively is crucial for performing mathematical operations and numerical computations in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how these numeric data types work and how to apply them in your Python programs.</p>"},{"location":"languages/python/tutorials/datatypes/set/","title":"Set Data Type in Python","text":"<p>Sets are an unordered collection of unique elements. They are commonly used to eliminate duplicate values and perform mathematical set operations like union, intersection, and difference.</p>"},{"location":"languages/python/tutorials/datatypes/set/#1-creating-sets","title":"1. Creating Sets","text":"<p>Sets can be created using curly braces <code>{}</code> or the <code>set()</code> function.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example","title":"Example:","text":"<pre><code># Using curly braces\nset1 = {1, 2, 3, 4, 5}\n\n# Using the set() function\nset2 = set([3, 4, 5, 6, 7])\n\nprint(\"Set1:\", set1)\nprint(\"Set2:\", set2)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output","title":"Output:","text":"<pre><code>Set1: {1, 2, 3, 4, 5}\nSet2: {3, 4, 5, 6, 7}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#2-adding-and-removing-elements","title":"2. Adding and Removing Elements","text":"<p>Elements can be added to a set using the <code>add()</code> method and removed using the <code>remove()</code> or <code>discard()</code> methods.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_1","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\n\n# Adding elements\nset1.add(4)\nset1.add(5)\n\n# Removing elements\nset1.remove(2)  # Raises KeyError if element not found\nset1.discard(3)  # Does not raise an error if element not found\n\nprint(\"Updated Set:\", set1)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_1","title":"Output:","text":"<pre><code>Updated Set: {1, 4, 5}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#3-set-operations","title":"3. Set Operations","text":""},{"location":"languages/python/tutorials/datatypes/set/#31-union","title":"3.1 Union","text":"<p>The union of two sets is a set containing all elements from both sets.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_2","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nunion_set = set1.union(set2)\n# or using the | operator\nunion_set_operator = set1 | set2\n\nprint(\"Union:\", union_set)\nprint(\"Union (operator):\", union_set_operator)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_2","title":"Output:","text":"<pre><code>Union: {1, 2, 3, 4, 5}\nUnion (operator): {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#32-intersection","title":"3.2 Intersection","text":"<p>The intersection of two sets is a set containing only the elements that are in both sets.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_3","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nintersection_set = set1.intersection(set2)\n# or using the &amp; operator\nintersection_set_operator = set1 &amp; set2\n\nprint(\"Intersection:\", intersection_set)\nprint(\"Intersection (operator):\", intersection_set_operator)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_3","title":"Output:","text":"<pre><code>Intersection: {3}\nIntersection (operator): {3}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#33-difference","title":"3.3 Difference","text":"<p>The difference between two sets is a set containing the elements that are in the first set but not in the second.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_4","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\ndifference_set = set1.difference(set2)\n# or using the - operator\ndifference_set_operator = set1 - set2\n\nprint(\"Difference:\", difference_set)\nprint(\"Difference (operator):\", difference_set_operator)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_4","title":"Output:","text":"<pre><code>Difference: {1, 2}\nDifference (operator): {1, 2}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#34-symmetric-difference","title":"3.4 Symmetric Difference","text":"<p>The symmetric difference between two sets is a set containing elements that are in either of the sets but not in both.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_5","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\nsymmetric_difference_set = set1.symmetric_difference(set2)\n# or using the ^ operator\nsymmetric_difference_set_operator = set1 ^ set2\n\nprint(\"Symmetric Difference:\", symmetric_difference_set)\nprint(\"Symmetric Difference (operator):\", symmetric_difference_set_operator)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_5","title":"Output:","text":"<pre><code>Symmetric Difference: {1, 2, 4, 5}\nSymmetric Difference (operator): {1, 2, 4, 5}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#4-set-membership","title":"4. Set Membership","text":"<p>You can check if an element is in a set using the <code>in</code> keyword.</p>"},{"location":"languages/python/tutorials/datatypes/set/#example_6","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4, 5}\n\nprint(3 in set1)  # True\nprint(6 in set1)  # False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#output_6","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set/#conclusion","title":"Conclusion","text":"<p>Sets in Python are a powerful data type for managing collections of unique elements and performing mathematical set operations. Understanding how to create, modify, and utilize sets is essential for efficient programming in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how sets work and how to apply these techniques in your Python projects.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/","title":"Python Set Operations","text":"<p>Sets in Python are unordered collections of unique elements. They support various operations that allow for efficient manipulation of data. The primary operations include union, intersection, difference, symmetric difference, and subset operations.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#1-creating-sets","title":"1. Creating Sets","text":"<p>Sets can be created using curly braces <code>{}</code> or the <code>set()</code> function.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example","title":"Example:","text":"<pre><code># Creating sets using curly braces\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Creating an empty set\nempty_set = set()\n\nprint(\"Set 1:\", set1)\nprint(\"Set 2:\", set2)\nprint(\"Empty set:\", empty_set)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output","title":"Output:","text":"<pre><code>Set 1: {1, 2, 3, 4}\nSet 2: {3, 4, 5, 6}\nEmpty set: set()\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#2-adding-and-removing-elements","title":"2. Adding and Removing Elements","text":"<p>Sets allow adding and removing elements with the <code>add()</code>, <code>remove()</code>, and <code>discard()</code> methods.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_1","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\n\n# Adding an element\nset1.add(5)\nprint(\"After adding 5:\", set1)\n\n# Removing an element (raises KeyError if the element is not found)\nset1.remove(3)\nprint(\"After removing 3:\", set1)\n\n# Removing an element (does not raise an error if the element is not found)\nset1.discard(10)\nprint(\"After discarding 10:\", set1)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_1","title":"Output:","text":"<pre><code>After adding 5: {1, 2, 4, 5}\nAfter removing 3: {1, 2, 4, 5}\nAfter discarding 10: {1, 2, 4, 5}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#3-set-operations","title":"3. Set Operations","text":"<p>Sets support several operations such as union, intersection, difference, and symmetric difference.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#31-union","title":"3.1 Union","text":"<p>The union of two sets contains all elements from both sets.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_2","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Union of set1 and set2\nunion_set = set1 | set2\nprint(\"Union:\", union_set)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_2","title":"Output:","text":"<pre><code>Union: {1, 2, 3, 4, 5, 6}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#32-intersection","title":"3.2 Intersection","text":"<p>The intersection of two sets contains only elements that are in both sets.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_3","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Intersection of set1 and set2\nintersection_set = set1 &amp; set2\nprint(\"Intersection:\", intersection_set)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_3","title":"Output:","text":"<pre><code>Intersection: {3, 4}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#33-difference","title":"3.3 Difference","text":"<p>The difference between two sets contains elements that are in the first set but not in the second set.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_4","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Difference between set1 and set2\ndifference_set = set1 - set2\nprint(\"Difference:\", difference_set)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_4","title":"Output:","text":"<pre><code>Difference: {1, 2}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#34-symmetric-difference","title":"3.4 Symmetric Difference","text":"<p>The symmetric difference of two sets contains elements that are in either set but not in both.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_5","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Symmetric difference between set1 and set2\nsymmetric_difference_set = set1 ^ set2\nprint(\"Symmetric Difference:\", symmetric_difference_set)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_5","title":"Output:","text":"<pre><code>Symmetric Difference: {1, 2, 5, 6}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#4-subset-and-superset-operations","title":"4. Subset and Superset Operations","text":"<p>Sets can be checked for subset and superset relationships using <code>issubset()</code> and <code>issuperset()</code> methods.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_6","title":"Example:","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\n\n# Checking if set1 is a subset of set2\nprint(\"set1 is a subset of set2:\", set1.issubset(set2))\n\n# Checking if set2 is a superset of set1\nprint(\"set2 is a superset of set1:\", set2.issuperset(set1))\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_6","title":"Output:","text":"<pre><code>set1 is a subset of set2: True\nset2 is a superset of set1: True\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#5-set-comprehensions","title":"5. Set Comprehensions","text":"<p>Sets can be created using comprehensions, similar to list comprehensions.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_7","title":"Example:","text":"<pre><code># Creating a set using set comprehension\nsquared_numbers = {x**2 for x in range(6)}\nprint(\"Squared numbers:\", squared_numbers)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_7","title":"Output:","text":"<pre><code>Squared numbers: {0, 1, 4, 9, 16, 25}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#6-set-methods","title":"6. Set Methods","text":"<p>Sets provide several useful methods, including <code>copy()</code>, <code>clear()</code>, and <code>pop()</code>.</p>"},{"location":"languages/python/tutorials/datatypes/set_operations/#example_8","title":"Example:","text":"<pre><code>set1 = {1, 2, 3, 4}\n\n# Copying a set\nset_copy = set1.copy()\nprint(\"Copy of set1:\", set_copy)\n\n# Clearing a set\nset1.clear()\nprint(\"After clearing set1:\", set1)\n\n# Popping an element (removes and returns an arbitrary element)\nset2 = {1, 2, 3}\npopped_element = set2.pop()\nprint(\"Popped element:\", popped_element)\nprint(\"After popping:\", set2)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#output_8","title":"Output:","text":"<pre><code>Copy of set1: {1, 2, 3, 4}\nAfter clearing set1: set()\nPopped element: 1\nAfter popping: {2, 3}\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/set_operations/#conclusion","title":"Conclusion","text":"<p>Sets in Python provide a versatile and efficient way to handle collections of unique elements. They support various operations such as union, intersection, difference, and symmetric difference, which are useful for data manipulation and analysis. Understanding and utilizing set operations can greatly enhance your programming capabilities.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how to work with sets in Python and leverage their capabilities in your projects.</p>"},{"location":"languages/python/tutorials/datatypes/string/","title":"String Data Type in Python","text":"<p>Strings are a sequence of characters used to store and manipulate text. In Python, strings are created by enclosing characters within single quotes (<code>'</code>) or double quotes (<code>\"</code>). Python also provides a rich set of methods for string manipulation.</p>"},{"location":"languages/python/tutorials/datatypes/string/#1-creating-strings","title":"1. Creating Strings","text":"<p>Strings can be created using single or double quotes.</p>"},{"location":"languages/python/tutorials/datatypes/string/#example","title":"Example:","text":"<pre><code># Using single quotes\nstr1 = 'Hello, World!'\n\n# Using double quotes\nstr2 = \"Python is awesome!\"\n\nprint(str1)\nprint(str2)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output","title":"Output:","text":"<pre><code>Hello, World!\nPython is awesome!\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#2-multiline-strings","title":"2. Multiline Strings","text":"<p>Multiline strings can be created using triple quotes (<code>'''</code> or <code>\"\"\"</code>).</p>"},{"location":"languages/python/tutorials/datatypes/string/#example_1","title":"Example:","text":"<pre><code># Using triple single quotes\nmultiline_str1 = '''This is a\nmultiline string.'''\n\n# Using triple double quotes\nmultiline_str2 = \"\"\"This is another\nexample of a multiline string.\"\"\"\n\nprint(multiline_str1)\nprint(multiline_str2)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output_1","title":"Output:","text":"<pre><code>This is a\nmultiline string.\nThis is another\nexample of a multiline string.\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#3-string-concatenation","title":"3. String Concatenation","text":"<p>Strings can be concatenated using the <code>+</code> operator.</p>"},{"location":"languages/python/tutorials/datatypes/string/#example_2","title":"Example:","text":"<pre><code>str1 = \"Hello\"\nstr2 = \"World\"\n\n# Concatenating strings\nconcatenated_str = str1 + \", \" + str2 + \"!\"\n\nprint(concatenated_str)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output_2","title":"Output:","text":"<pre><code>Hello, World!\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#4-string-repetition","title":"4. String Repetition","text":"<p>Strings can be repeated using the <code>*</code> operator.</p>"},{"location":"languages/python/tutorials/datatypes/string/#example_3","title":"Example:","text":"<pre><code>str1 = \"Python \"\n\n# Repeating the string\nrepeated_str = str1 * 3\n\nprint(repeated_str)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output_3","title":"Output:","text":"<pre><code>Python Python Python \n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#5-string-indexing-and-slicing","title":"5. String Indexing and Slicing","text":"<p>Strings can be indexed and sliced to access specific characters or substrings.</p>"},{"location":"languages/python/tutorials/datatypes/string/#example_4","title":"Example:","text":"<pre><code>str1 = \"Hello, World!\"\n\n# Indexing\nfirst_char = str1[0]\nlast_char = str1[-1]\n\n# Slicing\nsubstring = str1[7:12]\n\nprint(\"First character:\", first_char)\nprint(\"Last character:\", last_char)\nprint(\"Substring:\", substring)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output_4","title":"Output:","text":"<pre><code>First character: H\nLast character: !\nSubstring: World\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#6-string-methods","title":"6. String Methods","text":"<p>Python provides various string methods for common operations such as changing case, trimming whitespace, finding substrings, and more.</p>"},{"location":"languages/python/tutorials/datatypes/string/#example_5","title":"Example:","text":"<pre><code>str1 = \"  Hello, World!  \"\n\n# Changing case\nupper_str = str1.upper()\nlower_str = str1.lower()\n\n# Trimming whitespace\ntrimmed_str = str1.strip()\n\n# Finding a substring\nindex_of_world = str1.find(\"World\")\n\nprint(\"Uppercase:\", upper_str)\nprint(\"Lowercase:\", lower_str)\nprint(\"Trimmed:\", trimmed_str)\nprint(\"Index of 'World':\", index_of_world)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#output_5","title":"Output:","text":"<pre><code>Uppercase:   HELLO, WORLD!  \nLowercase:   hello, world!  \nTrimmed: Hello, World!\nIndex of 'World': 8\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string/#conclusion","title":"Conclusion","text":"<p>Strings in Python are versatile and come with a rich set of built-in methods that make text manipulation easy and efficient. Understanding how to create, index, slice, and manipulate strings is essential for effective programming in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how to work with strings and apply these techniques in your Python projects.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/","title":"Python String Formatting: Overview and Examples","text":"<p>String formatting in Python allows you to create formatted strings, which can be especially useful for generating output, logging, and creating user-friendly messages. Python provides several ways to format strings, each with its own use cases and advantages.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#1-old-style-formatting-operator","title":"1. Old-Style Formatting (<code>%</code> Operator)","text":"<p>Old-style formatting uses the <code>%</code> operator to format strings. It is reminiscent of the <code>printf</code> style found in C.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#basic-example","title":"Basic Example","text":"<pre><code>name = \"Alice\"\nage = 30\nformatted_string = \"Name: %s, Age: %d\" % (name, age)\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#formatting-with-padding-and-alignment","title":"Formatting with Padding and Alignment","text":"<pre><code>number = 42\nformatted_string = \"Number: %-10d\" % number  # Left-aligned with padding\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Number: 42        \n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#2-strformat-method","title":"2. <code>str.format()</code> Method","text":"<p>The <code>str.format()</code> method provides more control and flexibility for string formatting. You can use curly braces <code>{}</code> as placeholders.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#basic-example_1","title":"Basic Example","text":"<pre><code>name = \"Alice\"\nage = 30\nformatted_string = \"Name: {}, Age: {}\".format(name, age)\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#positional-and-keyword-arguments","title":"Positional and Keyword Arguments","text":"<pre><code>formatted_string = \"Name: {0}, Age: {1}\".format(name, age)\nformatted_string = \"Name: {name}, Age: {age}\".format(name=name, age=age)\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\nName: Alice, Age: 30\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#formatting-with-specifiers","title":"Formatting with Specifiers","text":"<pre><code>number = 1234.56789\nformatted_string = \"Number: {:.2f}\".format(number)  # Two decimal places\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Number: 1234.57\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#padding-and-alignment","title":"Padding and Alignment","text":"<pre><code>formatted_string = \"{:&lt;10} | {:^10} | {:&gt;10}\".format(\"left\", \"center\", \"right\")\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>left      |   center   |      right\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#3-f-strings-formatted-string-literals","title":"3. f-Strings (Formatted String Literals)","text":"<p>Introduced in Python 3.6, f-strings provide a concise and readable way to format strings. They are prefixed with the letter <code>f</code> and allow embedded expressions inside curly braces <code>{}</code>.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#basic-example_2","title":"Basic Example","text":"<pre><code>name = \"Alice\"\nage = 30\nformatted_string = f\"Name: {name}, Age: {age}\"\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#expressions-inside-f-strings","title":"Expressions Inside f-Strings","text":"<pre><code>import math\nradius = 5\nformatted_string = f\"Area of circle with radius {radius} is {math.pi * radius**2:.2f}\"\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Area of circle with radius 5 is 78.54\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#padding-and-alignment-with-f-strings","title":"Padding and Alignment with f-Strings","text":"<pre><code>formatted_string = f\"|{'left':&lt;10}|{'center':^10}|{'right':&gt;10}|\"\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>|left      |  center  |     right|\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#4-string-template-class","title":"4. String Template Class","text":"<p>The <code>string</code> module provides a <code>Template</code> class for simpler string substitutions.</p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#basic-example_3","title":"Basic Example","text":"<pre><code>from string import Template\n\ntemplate = Template(\"Name: $name, Age: $age\")\nformatted_string = template.substitute(name=\"Alice\", age=30)\nprint(formatted_string)\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\n</code></pre></p>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#safe-substitution","title":"Safe Substitution","text":"<pre><code>template = Template(\"Name: $name, Age: $age\")\nformatted_string = template.safe_substitute(name=\"Alice\")  # Age is missing\nprint(formatted_string)  # Outputs: Name: Alice, Age: $age\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_formatter/#conclusion","title":"Conclusion","text":"<p>Python offers several ways to format strings, each with its own advantages:</p> <ul> <li>Old-style formatting (<code>%</code> operator) is familiar to those coming from C-style languages but is less flexible.</li> <li><code>str.format()</code> method provides more control and is widely used in Python 2 and 3.</li> <li>f-Strings (formatted string literals) offer a concise and readable way to embed expressions and are the preferred method in Python 3.6 and later.</li> <li><code>string.Template</code> provides a simpler way to substitute placeholders, useful for basic replacements.</li> </ul> <p>Understanding these methods allows you to choose the most appropriate one for your needs, making your code more readable and maintainable.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/","title":"Python String Methods: Detailed Overview and Examples","text":"<p>Python provides a rich set of built-in methods for string manipulation. These methods allow you to perform a variety of operations on strings, such as searching, replacing, and formatting. Understanding these methods can greatly enhance your ability to work with text data in Python.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#1-strupper","title":"1. <code>str.upper()</code>","text":"<p>Returns a copy of the string with all characters converted to uppercase.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example","title":"Example","text":"<pre><code>text = \"hello world\"\nupper_text = text.upper()\nprint(upper_text)  # Output: HELLO WORLD\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#2-strlower","title":"2. <code>str.lower()</code>","text":"<p>Returns a copy of the string with all characters converted to lowercase.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_1","title":"Example","text":"<pre><code>text = \"HELLO WORLD\"\nlower_text = text.lower()\nprint(lower_text)  # Output: hello world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#3-strtitle","title":"3. <code>str.title()</code>","text":"<p>Returns a copy of the string with the first character of each word capitalized.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_2","title":"Example","text":"<pre><code>text = \"hello world\"\ntitle_text = text.title()\nprint(title_text)  # Output: Hello World\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#4-strcapitalize","title":"4. <code>str.capitalize()</code>","text":"<p>Returns a copy of the string with the first character capitalized and the rest in lowercase.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_3","title":"Example","text":"<pre><code>text = \"hello world\"\ncapitalized_text = text.capitalize()\nprint(capitalized_text)  # Output: Hello world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#5-strstrip","title":"5. <code>str.strip()</code>","text":"<p>Returns a copy of the string with leading and trailing whitespace removed. It can also remove other specified characters.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_4","title":"Example","text":"<pre><code>text = \"   hello world   \"\nstripped_text = text.strip()\nprint(stripped_text)  # Output: hello world\n\ntext_with_chars = \"###hello world###\"\nstripped_chars = text_with_chars.strip(\"#\")\nprint(stripped_chars)  # Output: hello world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#6-strlstrip","title":"6. <code>str.lstrip()</code>","text":"<p>Returns a copy of the string with leading whitespace (or other specified characters) removed.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_5","title":"Example","text":"<pre><code>text = \"   hello world\"\nleft_stripped = text.lstrip()\nprint(left_stripped)  # Output: hello world\n\ntext_with_chars = \"###hello world\"\nleft_stripped_chars = text_with_chars.lstrip(\"#\")\nprint(left_stripped_chars)  # Output: hello world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#7-strrstrip","title":"7. <code>str.rstrip()</code>","text":"<p>Returns a copy of the string with trailing whitespace (or other specified characters) removed.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_6","title":"Example","text":"<pre><code>text = \"hello world   \"\nright_stripped = text.rstrip()\nprint(right_stripped)  # Output: hello world\n\ntext_with_chars = \"hello world###\"\nright_stripped_chars = text_with_chars.rstrip(\"#\")\nprint(right_stripped_chars)  # Output: hello world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#8-strreplaceold-new-count","title":"8. <code>str.replace(old, new[, count])</code>","text":"<p>Returns a copy of the string with all occurrences of <code>old</code> replaced by <code>new</code>. Optionally, you can specify the number of replacements with <code>count</code>.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_7","title":"Example","text":"<pre><code>text = \"hello world\"\nreplaced_text = text.replace(\"world\", \"Python\")\nprint(replaced_text)  # Output: hello Python\n\nlimited_replacement = text.replace(\"o\", \"0\", 1)\nprint(limited_replacement)  # Output: hell0 world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#9-strsplitsep-maxsplit","title":"9. <code>str.split([sep[, maxsplit]])</code>","text":"<p>Returns a list of the words in the string, separated by <code>sep</code>. Optionally, you can specify the maximum number of splits with <code>maxsplit</code>.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_8","title":"Example","text":"<pre><code>text = \"hello world\"\nsplit_text = text.split()\nprint(split_text)  # Output: ['hello', 'world']\n\ntext_with_limit = \"one,two,three,four\"\nsplit_with_limit = text_with_limit.split(\",\", 2)\nprint(split_with_limit)  # Output: ['one', 'two', 'three,four']\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#10-strjoiniterable","title":"10. <code>str.join(iterable)</code>","text":"<p>Returns a string that is the concatenation of the strings in the <code>iterable</code>, separated by the string on which <code>join</code> was called.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_9","title":"Example","text":"<pre><code>words = [\"hello\", \"world\"]\njoined_text = \" \".join(words)\nprint(joined_text)  # Output: hello world\n\ncomma_joined = \",\".join(words)\nprint(comma_joined)  # Output: hello,world\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#11-strfindsub-start-end","title":"11. <code>str.find(sub[, start[, end]])</code>","text":"<p>Returns the lowest index in the string where substring <code>sub</code> is found. Returns <code>-1</code> if the substring is not found. Optionally, you can specify the <code>start</code> and <code>end</code> indices.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_10","title":"Example","text":"<pre><code>text = \"hello world\"\nindex = text.find(\"world\")\nprint(index)  # Output: 6\n\nnot_found = text.find(\"Python\")\nprint(not_found)  # Output: -1\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#12-strrfindsub-start-end","title":"12. <code>str.rfind(sub[, start[, end]])</code>","text":"<p>Returns the highest index in the string where substring <code>sub</code> is found. Returns <code>-1</code> if the substring is not found. Optionally, you can specify the <code>start</code> and <code>end</code> indices.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_11","title":"Example","text":"<pre><code>text = \"hello world, world\"\nindex = text.rfind(\"world\")\nprint(index)  # Output: 13\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#13-strstartswithprefix-start-end","title":"13. <code>str.startswith(prefix[, start[, end]])</code>","text":"<p>Returns <code>True</code> if the string starts with the specified <code>prefix</code>. Optionally, you can specify the <code>start</code> and <code>end</code> indices.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_12","title":"Example","text":"<pre><code>text = \"hello world\"\nstarts_with_hello = text.startswith(\"hello\")\nprint(starts_with_hello)  # Output: True\n\nstarts_with_world = text.startswith(\"world\")\nprint(starts_with_world)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#14-strendswithsuffix-start-end","title":"14. <code>str.endswith(suffix[, start[, end]])</code>","text":"<p>Returns <code>True</code> if the string ends with the specified <code>suffix</code>. Optionally, you can specify the <code>start</code> and <code>end</code> indices.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_13","title":"Example","text":"<pre><code>text = \"hello world\"\nends_with_world = text.endswith(\"world\")\nprint(ends_with_world)  # Output: True\n\nends_with_hello = text.endswith(\"hello\")\nprint(ends_with_hello)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#15-strisdigit","title":"15. <code>str.isdigit()</code>","text":"<p>Returns <code>True</code> if all characters in the string are digits.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_14","title":"Example","text":"<pre><code>text = \"12345\"\nis_digit = text.isdigit()\nprint(is_digit)  # Output: True\n\nnon_digit_text = \"123a5\"\nis_digit = non_digit_text.isdigit()\nprint(is_digit)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#16-strisalpha","title":"16. <code>str.isalpha()</code>","text":"<p>Returns <code>True</code> if all characters in the string are alphabetic.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_15","title":"Example","text":"<pre><code>text = \"hello\"\nis_alpha = text.isalpha()\nprint(is_alpha)  # Output: True\n\nnon_alpha_text = \"hello1\"\nis_alpha = non_alpha_text.isalpha()\nprint(is_alpha)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#17-strisnumeric","title":"17. <code>str.isnumeric()</code>","text":"<p>Returns <code>True</code> if all characters in the string are numeric characters.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_16","title":"Example","text":"<pre><code>text = \"12345\"\nis_numeric = text.isnumeric()\nprint(is_numeric)  # Output: True\n\nnon_numeric_text = \"123a5\"\nis_numeric = non_numeric_text.isnumeric()\nprint(is_numeric)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#18-strisspace","title":"18. <code>str.isspace()</code>","text":"<p>Returns <code>True</code> if all characters in the string are whitespace characters.</p>"},{"location":"languages/python/tutorials/datatypes/string_methods/#example_17","title":"Example","text":"<pre><code>text = \"   \"\nis_space = text.isspace()\nprint(is_space)  # Output: True\n\nnon_space_text = \" hello \"\nis_space = non_space_text.isspace()\nprint(is_space)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/string_methods/#conclusion","title":"Conclusion","text":"<p>Python's string methods provide a comprehensive set of tools for string manipulation. Whether you need to modify, search, or analyze text, these methods make it easy to perform common tasks efficiently. Familiarity with these methods enhances your ability to handle text data effectively and write more readable and maintainable code.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/","title":"Tuple Data Type in Python","text":"<p>Tuples are immutable sequences in Python, meaning once a tuple is created, its elements cannot be modified. Tuples are often used to group related data together and ensure that the data remains constant.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#1-creating-tuples","title":"1. Creating Tuples","text":"<p>Tuples can be created by placing a comma-separated sequence of values inside parentheses <code>()</code>.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example","title":"Example:","text":"<pre><code># Creating a tuple\ntuple1 = (1, 2, 3, 4, 5)\n\n# Creating a tuple without parentheses\ntuple2 = 1, 2, 3, 4, 5\n\n# Creating an empty tuple\nempty_tuple = ()\n\n# Creating a single-element tuple\nsingle_element_tuple = (1,)\n\nprint(\"Tuple1:\", tuple1)\nprint(\"Tuple2:\", tuple2)\nprint(\"Empty tuple:\", empty_tuple)\nprint(\"Single element tuple:\", single_element_tuple)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output","title":"Output:","text":"<pre><code>Tuple1: (1, 2, 3, 4, 5)\nTuple2: (1, 2, 3, 4, 5)\nEmpty tuple: ()\nSingle element tuple: (1,)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#2-accessing-tuple-elements","title":"2. Accessing Tuple Elements","text":"<p>Tuple elements can be accessed by indexing and slicing, similar to lists.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example_1","title":"Example:","text":"<pre><code>tuple1 = (10, 20, 30, 40, 50)\n\n# Indexing\nfirst_element = tuple1[0]\nlast_element = tuple1[-1]\n\n# Slicing\nsub_tuple = tuple1[1:4]\n\nprint(\"First element:\", first_element)\nprint(\"Last element:\", last_element)\nprint(\"Sub-tuple:\", sub_tuple)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output_1","title":"Output:","text":"<pre><code>First element: 10\nLast element: 50\nSub-tuple: (20, 30, 40)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#3-tuple-unpacking","title":"3. Tuple Unpacking","text":"<p>Tuple unpacking allows you to assign the elements of a tuple to multiple variables in a single statement.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example_2","title":"Example:","text":"<pre><code>tuple1 = (1, 2, 3)\n\n# Tuple unpacking\na, b, c = tuple1\n\nprint(\"a:\", a)\nprint(\"b:\", b)\nprint(\"c:\", c)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output_2","title":"Output:","text":"<pre><code>a: 1\nb: 2\nc: 3\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#4-tuple-methods","title":"4. Tuple Methods","text":"<p>Tuples have only two built-in methods: <code>count()</code> and <code>index()</code>.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example_3","title":"Example:","text":"<pre><code>tuple1 = (1, 2, 3, 2, 4, 2, 5)\n\n# Count the number of occurrences of an element\ncount_of_twos = tuple1.count(2)\n\n# Find the index of the first occurrence of an element\nindex_of_three = tuple1.index(3)\n\nprint(\"Count of 2s:\", count_of_twos)\nprint(\"Index of 3:\", index_of_three)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output_3","title":"Output:","text":"<pre><code>Count of 2s: 3\nIndex of 3: 2\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#5-nesting-tuples","title":"5. Nesting Tuples","text":"<p>Tuples can contain other tuples, allowing for nested structures.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example_4","title":"Example:","text":"<pre><code># Nesting tuples\nnested_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n\n# Accessing elements in a nested tuple\nfirst_tuple = nested_tuple[0]\nsecond_element_of_first_tuple = nested_tuple[0][1]\n\nprint(\"Nested tuple:\", nested_tuple)\nprint(\"First tuple:\", first_tuple)\nprint(\"Second element of first tuple:\", second_element_of_first_tuple)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output_4","title":"Output:","text":"<pre><code>Nested tuple: ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nFirst tuple: (1, 2, 3)\nSecond element of first tuple: 2\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#6-immutability-of-tuples","title":"6. Immutability of Tuples","text":"<p>Once a tuple is created, its elements cannot be changed. Any attempt to modify a tuple will result in a <code>TypeError</code>.</p>"},{"location":"languages/python/tutorials/datatypes/tuple/#example_5","title":"Example:","text":"<pre><code>tuple1 = (1, 2, 3)\n\ntry:\n    tuple1[0] = 10\nexcept TypeError as e:\n    print(\"Error:\", e)\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#output_5","title":"Output:","text":"<pre><code>Error: 'tuple' object does not support item assignment\n</code></pre>"},{"location":"languages/python/tutorials/datatypes/tuple/#conclusion","title":"Conclusion","text":"<p>Tuples in Python are a versatile and immutable data type, making them ideal for storing constant data. Understanding how to create, access, unpack, and utilize tuples is crucial for effective programming in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how tuples work and how to apply these techniques in your Python projects.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/","title":"Block Indentation in Python","text":"<p>Python uses indentation to define the structure and flow of code blocks. Indentation is crucial for defining the start and end of blocks such as loops, conditionals, functions, and classes. Consistent indentation is essential for the correct execution of a Python program.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#1-importance-of-indentation","title":"1. Importance of Indentation","text":"<p>In Python, indentation is not just for readability; it is part of the syntax. Each indentation level is typically 4 spaces.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example","title":"Example:","text":"<pre><code># Correct indentation\nif True:\n    print(\"This is correctly indented\")\n\n# Incorrect indentation\nif True:\nprint(\"This will cause an IndentationError\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#2-indentation-in-control-structures","title":"2. Indentation in Control Structures","text":""},{"location":"languages/python/tutorials/getting_started/block_indentation/#21-if-else-statements","title":"2.1 If-Else Statements","text":"<p>Indentation is used to define the code blocks for <code>if</code>, <code>elif</code>, and <code>else</code> statements.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example_1","title":"Example:","text":"<pre><code>x = 10\n\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output","title":"Output:","text":"<pre><code>x is greater than 5\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#22-loops","title":"2.2 Loops","text":"<p>Indentation is also used to define the code blocks within loops.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example-with-for-loop","title":"Example with <code>for</code> loop:","text":"<pre><code>for i in range(5):\n    print(i)\n    if i == 3:\n        print(\"Reached 3\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output_1","title":"Output:","text":"<pre><code>0\n1\n2\n3\nReached 3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example-with-while-loop","title":"Example with <code>while</code> loop:","text":"<pre><code>i = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output_2","title":"Output:","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#3-indentation-in-functions","title":"3. Indentation in Functions","text":"<p>Function definitions and the code within functions are also defined by indentation.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example_2","title":"Example:","text":"<pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n    if name == \"Alice\":\n        print(\"Welcome back, Alice!\")\n    else:\n        print(\"Nice to meet you!\")\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output_3","title":"Output:","text":"<pre><code>Hello, Alice!\nWelcome back, Alice!\nHello, Bob!\nNice to meet you!\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#4-indentation-in-classes","title":"4. Indentation in Classes","text":"<p>Class definitions and methods within classes are indented similarly.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example_3","title":"Example:","text":"<pre><code>class Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        print(f\"{self.name} makes a sound\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(f\"{self.name} barks\")\n\ndog = Dog(\"Buddy\")\ndog.speak()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output_4","title":"Output:","text":"<pre><code>Buddy barks\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#5-nesting-and-indentation","title":"5. Nesting and Indentation","text":"<p>Nested structures require additional levels of indentation.</p>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#example_4","title":"Example:","text":"<pre><code>x = 10\n\nif x &gt; 5:\n    print(\"x is greater than 5\")\n    for i in range(3):\n        print(i)\n        if i == 2:\n            print(\"Reached 2\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#output_5","title":"Output:","text":"<pre><code>x is greater than 5\n0\n1\n2\nReached 2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#6-common-indentation-errors","title":"6. Common Indentation Errors","text":""},{"location":"languages/python/tutorials/getting_started/block_indentation/#example_5","title":"Example:","text":"<pre><code>x = 10\n\nif x &gt; 5:\nprint(\"This will cause an IndentationError\")  # Incorrect indentation\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#error-message","title":"Error Message:","text":"<pre><code>IndentationError: expected an indented block\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/block_indentation/#conclusion","title":"Conclusion","text":"<p>Indentation in Python is crucial for defining the structure and flow of your code. Proper indentation enhances readability and ensures that your code executes correctly. By practicing the examples provided, you can gain a deeper understanding of how indentation works in Python and how to apply it effectively in your projects.</p>"},{"location":"languages/python/tutorials/getting_started/classes/","title":"Python Classes: Overview and Examples","text":"<p>This report provides a comprehensive overview of Python classes, including bound, unbound, and static methods, inheritance, monkey patching, new-style and old-style classes, class compositions, singleton classes, descriptors, dotted lookups, and data classes.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#classes-in-python","title":"Classes in Python","text":"<p>Classes are blueprints for creating objects. They encapsulate data for the object and methods to manipulate that data.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#basic-class-definition","title":"Basic Class Definition","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n\np = Person(\"Alice\", 30)\nprint(p.greet())\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#bound-unbound-and-static-methods","title":"Bound, Unbound, and Static Methods","text":""},{"location":"languages/python/tutorials/getting_started/classes/#bound-methods","title":"Bound Methods","text":"<p>A bound method is a method that is associated with an instance of a class.</p> <pre><code>class Example:\n    def bound_method(self):\n        return \"This is a bound method.\"\n\ne = Example()\nprint(e.bound_method())  # Bound method called on instance\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#unbound-methods","title":"Unbound Methods","text":"<p>In Python 3, there are no true unbound methods. However, in Python 2, an unbound method is one that is not bound to an instance.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#static-methods","title":"Static Methods","text":"<p>Static methods do not depend on class or instance variables. They are defined using the <code>@staticmethod</code> decorator.</p> <pre><code>class Example:\n    @staticmethod\n    def static_method():\n        return \"This is a static method.\"\n\nprint(Example.static_method())  # Static method called on class\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#inheritance","title":"Inheritance","text":"<p>Inheritance allows a class to inherit attributes and methods from another class.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-single-inheritance","title":"Example: Single Inheritance","text":"<pre><code>class Animal:\n    def speak(self):\n        return \"Animal speaks\"\n\nclass Dog(Animal):\n    def bark(self):\n        return \"Dog barks\"\n\nd = Dog()\nprint(d.speak())  # Inherited method\nprint(d.bark())   # Method of subclass\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#example-multiple-inheritance","title":"Example: Multiple Inheritance","text":"<pre><code>class A:\n    def method_a(self):\n        return \"Method A\"\n\nclass B:\n    def method_b(self):\n        return \"Method B\"\n\nclass C(A, B):\n    pass\n\nc = C()\nprint(c.method_a())  # Method from class A\nprint(c.method_b())  # Method from class B\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#monkey-patching","title":"Monkey Patching","text":"<p>Monkey patching refers to modifying or extending a module or class at runtime.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-monkey-patching","title":"Example: Monkey Patching","text":"<pre><code>class MyClass:\n    def greet(self):\n        return \"Hello!\"\n\ndef new_greet(self):\n    return \"Hi there!\"\n\n# Patch the greet method\nMyClass.greet = new_greet\n\nobj = MyClass()\nprint(obj.greet())  # Output: Hi there!\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#new-style-and-old-style-classes","title":"New-Style and Old-Style Classes","text":""},{"location":"languages/python/tutorials/getting_started/classes/#old-style-classes-python-2-only","title":"Old-Style Classes (Python 2 only)","text":"<p>Old-style classes do not inherit from <code>object</code>.</p> <pre><code>class OldStyleClass:\n    pass\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#new-style-classes","title":"New-Style Classes","text":"<p>New-style classes inherit from <code>object</code>. They provide a more consistent object model.</p> <pre><code>class NewStyleClass(object):\n    pass\n</code></pre> <p>In Python 3, all classes are new-style classes.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#class-compositions","title":"Class Compositions","text":"<p>Class composition is a design principle where one class contains an instance of another class.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-class-composition","title":"Example: Class Composition","text":"<pre><code>class Engine:\n    def start(self):\n        return \"Engine starts\"\n\nclass Car:\n    def __init__(self):\n        self.engine = Engine()\n\n    def start(self):\n        return self.engine.start() + \" and Car starts\"\n\nc = Car()\nprint(c.start())\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#singleton-class","title":"Singleton Class","text":"<p>A singleton class ensures that only one instance of the class is created.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-singleton-pattern","title":"Example: Singleton Pattern","text":"<pre><code>class Singleton:\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls, *args, **kwargs)\n        return cls._instance\n\nsingleton1 = Singleton()\nsingleton2 = Singleton()\n\nprint(singleton1 is singleton2)  # Output: True\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#descriptors-and-dotted-lookups","title":"Descriptors and Dotted Lookups","text":"<p>Descriptors are objects that define how attributes are accessed or modified. They are used to create managed attributes.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-descriptor","title":"Example: Descriptor","text":"<pre><code>class Descriptor:\n    def __get__(self, instance, owner):\n        return \"Descriptor value\"\n\nclass MyClass:\n    attr = Descriptor()\n\nobj = MyClass()\nprint(obj.attr)  # Output: Descriptor value\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#dotted-lookups","title":"Dotted Lookups","text":"<p>Dotted lookups refer to accessing attributes and methods using dot notation.</p> <pre><code>class Example:\n    def method(self):\n        return \"Method called\"\n\ne = Example()\nprint(e.method())  # Output: Method called\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#data-classes","title":"Data Classes","text":"<p>Data classes are a feature introduced in Python 3.7 to simplify the creation of classes that are primarily used to store data.</p>"},{"location":"languages/python/tutorials/getting_started/classes/#example-data-class","title":"Example: Data Class","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person(name=\"Alice\", age=30)\nprint(p)           # Output: Person(name='Alice', age=30)\nprint(p.name)      # Output: Alice\nprint(p.age)       # Output: 30\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/classes/#conclusion","title":"Conclusion","text":"<p>Understanding Python classes and their associated features\u2014such as methods, inheritance, monkey patching, class types, composition, singletons, descriptors, and data classes\u2014is essential for writing efficient and maintainable object-oriented code. These concepts provide powerful tools for structuring and managing complex systems in Python.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/","title":"Commandline arguments","text":"<p># Parsing Command Line Arguments in Python: Detailed Overview and Examples</p> <p>Parsing command line arguments allows Python scripts to accept input from users when executed from the terminal. Python provides several ways to handle command line arguments, each suited to different use cases. This report covers the most common methods for parsing command line arguments, including <code>sys.argv</code>, <code>argparse</code>, <code>optparse</code>, and <code>click</code>.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#1-using-sysargv","title":"1. Using <code>sys.argv</code>","text":"<p>The <code>sys</code> module provides a straightforward way to access command line arguments via <code>sys.argv</code>. This approach is useful for simple scripts with minimal argument parsing requirements.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#example-basic-argument-parsing-with-sysargv","title":"Example: Basic Argument Parsing with <code>sys.argv</code>","text":"<pre><code>import sys\n\n# Print all command line arguments\nprint('Arguments:', sys.argv)\n\n# Access individual arguments\nif len(sys.argv) &gt; 1:\n    print('First argument:', sys.argv[1])\nelse:\n    print('No arguments provided.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#how-to-run","title":"How to Run","text":"<pre><code>python script.py arg1 arg2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#output","title":"Output","text":"<pre><code>Arguments: ['script.py', 'arg1', 'arg2']\nFirst argument: arg1\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#2-using-argparse","title":"2. Using <code>argparse</code>","text":"<p>The <code>argparse</code> module provides a more powerful and flexible way to parse command line arguments. It supports features like argument type checking, default values, and help messages.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#example-parsing-arguments-with-argparse","title":"Example: Parsing Arguments with <code>argparse</code>","text":"<pre><code>import argparse\n\n# Create the parser\nparser = argparse.ArgumentParser(description='Process some integers.')\n\n# Add arguments\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\n                    help='an integer for the accumulator')\nparser.add_argument('--sum', dest='accumulate', action='store_const',\n                    default=max, const=sum,\n                    help='sum the integers (default: find the max)')\n\n# Parse the arguments\nargs = parser.parse_args()\n\n# Print the result\nprint(args.accumulate(args.integers))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#how-to-run_1","title":"How to Run","text":"<pre><code>python script.py 1 2 3 4 --sum\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#output_1","title":"Output","text":"<pre><code>10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#features-of-argparse","title":"Features of <code>argparse</code>","text":"<ul> <li>Positional Arguments: Required and ordered arguments.</li> <li>Optional Arguments: Arguments with default values and flags.</li> <li>Type Checking: Automatically converts argument values to the specified type.</li> <li>Help Messages: Automatically generated help and usage messages.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#3-using-optparse","title":"3. Using <code>optparse</code>","text":"<p>The <code>optparse</code> module was used in earlier Python versions for command line argument parsing but has been deprecated since Python 3.2. It is recommended to use <code>argparse</code> instead.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#example-basic-argument-parsing-with-optparse","title":"Example: Basic Argument Parsing with <code>optparse</code>","text":"<pre><code>from optparse import OptionParser\n\n# Create the parser\nparser = OptionParser(usage=\"usage: %prog [options] arg1 arg2\")\n\n# Add options\nparser.add_option(\"-s\", \"--sum\", action=\"store_true\", dest=\"sum\",\n                  default=False, help=\"sum the integers\")\n\n# Parse the arguments\n(options, args) = parser.parse_args()\n\n# Print the result\nif options.sum:\n    result = sum(int(arg) for arg in args)\n    print(f'Sum: {result}')\nelse:\n    print(f'Arguments: {args}')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#how-to-run_2","title":"How to Run","text":"<pre><code>python script.py -s 1 2 3 4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#output_2","title":"Output","text":"<pre><code>Sum: 10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#4-using-click","title":"4. Using <code>click</code>","text":"<p>The <code>click</code> module is a modern alternative for building command line interfaces. It provides a decorator-based approach to define commands and options.</p>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#example-parsing-arguments-with-click","title":"Example: Parsing Arguments with <code>click</code>","text":"<pre><code>import click\n\n@click.command()\n@click.argument('integers', type=int, nargs=-1)\n@click.option('--sum', is_flag=True, help='Sum the integers')\ndef process_numbers(integers, sum):\n    if sum:\n        print(f'Sum: {sum(integers)}')\n    else:\n        print(f'Arguments: {integers}')\n\nif __name__ == '__main__':\n    process_numbers()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#how-to-run_3","title":"How to Run","text":"<pre><code>python script.py 1 2 3 4 --sum\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#output_3","title":"Output","text":"<pre><code>Sum: 10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#features-of-click","title":"Features of <code>click</code>","text":"<ul> <li>Decorators: Use <code>@click.command()</code> and <code>@click.option()</code> to define commands and options.</li> <li>Type Conversion: Automatically handles type conversion and validation.</li> <li>Help Generation: Automatically generates help messages and usage instructions.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/commandline_arguments/#summary","title":"Summary","text":"<p>Parsing command line arguments in Python can be achieved through various methods, each suited to different needs:</p> <ul> <li><code>sys.argv</code>: Simple and direct access to command line arguments, suitable for basic scripts.</li> <li><code>argparse</code>: A powerful and flexible module for complex argument parsing, with support for types, defaults, and help messages.</li> <li><code>optparse</code>: Deprecated in favor of <code>argparse</code>, but still available in older Python versions.</li> <li><code>click</code>: A modern and user-friendly module for creating command line interfaces with decorators and built-in features.</li> </ul> <p>Choosing the right tool depends on the complexity of your argument parsing needs and the features you require. For most use cases, <code>argparse</code> and <code>click</code> offer robust solutions for handling command line arguments in Python.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/","title":"Python Comments and Documentation","text":"<p>Comments and documentation are essential for making code readable and maintainable. They help explain the purpose of code, provide context, and can be used to disable code during testing or debugging.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#1-single-line-comments","title":"1. Single-Line Comments","text":"<p>Single-line comments in Python start with the <code>#</code> symbol. Everything after <code>#</code> on the same line is considered a comment and is ignored by the interpreter.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example","title":"Example:","text":"<pre><code># This is a single-line comment\nprint(\"Hello, World!\")  # This comment is inline with code\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#output","title":"Output:","text":"<pre><code>Hello, World!\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#2-multi-line-comments","title":"2. Multi-Line Comments","text":"<p>Multi-line comments can be created using a series of single-line comments or using triple quotes. Triple quotes are more commonly used for multi-line comments.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example_1","title":"Example:","text":"<pre><code># This is a multi-line comment\n# It spans multiple lines\n# Each line starts with a hash symbol\n\n\"\"\"\nThis is another way to create multi-line comments.\nIt uses triple quotes and can span multiple lines.\n\"\"\"\nprint(\"Multi-line comments in Python\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#output_1","title":"Output:","text":"<pre><code>Multi-line comments in Python\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#3-docstrings","title":"3. Docstrings","text":"<p>Docstrings (documentation strings) are a special kind of comment used to document modules, classes, functions, and methods. They are written using triple quotes and are the first statement in a module, class, function, or method.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#31-module-docstrings","title":"3.1 Module Docstrings","text":"<p>Module docstrings describe the contents of a module.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example_2","title":"Example:","text":"<pre><code>\"\"\"\nThis module demonstrates the use of docstrings.\nIt includes examples of module, class, and function docstrings.\n\"\"\"\n\ndef example_function():\n    \"\"\"This function prints a simple message.\"\"\"\n    print(\"Hello from example_function!\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#32-class-docstrings","title":"3.2 Class Docstrings","text":"<p>Class docstrings describe the purpose and behavior of a class.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example_3","title":"Example:","text":"<pre><code>class ExampleClass:\n    \"\"\"\n    This class demonstrates the use of class docstrings.\n\n    Attributes:\n        attr1 (str): Description of attribute 1.\n        attr2 (int): Description of attribute 2.\n    \"\"\"\n\n    def __init__(self, attr1, attr2):\n        \"\"\"\n        The constructor for ExampleClass.\n\n        Parameters:\n           attr1 (str): Description of attribute 1.\n           attr2 (int): Description of attribute 2.\n        \"\"\"\n        self.attr1 = attr1\n        self.attr2 = attr2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#33-function-and-method-docstrings","title":"3.3 Function and Method Docstrings","text":"<p>Function and method docstrings describe what the function or method does, its parameters, and return values.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example_4","title":"Example:","text":"<pre><code>def add(a, b):\n    \"\"\"\n    Adds two numbers.\n\n    Parameters:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        int or float: The sum of the two numbers.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example-of-a-method-docstring-in-a-class","title":"Example of a method docstring in a class:","text":"<pre><code>class MathOperations:\n    \"\"\"\n    A class to perform basic math operations.\n    \"\"\"\n\n    def multiply(self, a, b):\n        \"\"\"\n        Multiplies two numbers.\n\n        Parameters:\n            a (int or float): The first number.\n            b (int or float): The second number.\n\n        Returns:\n            int or float: The product of the two numbers.\n        \"\"\"\n        return a * b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#4-accessing-docstrings","title":"4. Accessing Docstrings","text":"<p>Docstrings can be accessed using the <code>__doc__</code> attribute of a module, class, function, or method.</p>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#example_5","title":"Example:","text":"<pre><code>def example_function():\n    \"\"\"This function prints a simple message.\"\"\"\n    print(\"Hello from example_function!\")\n\nprint(example_function.__doc__)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#output_2","title":"Output:","text":"<pre><code>This function prints a simple message.\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comments_documentation/#conclusion","title":"Conclusion","text":"<p>Comments and documentation are critical for writing clear and maintainable code. Single-line comments and multi-line comments help explain specific parts of the code, while docstrings provide comprehensive documentation for modules, classes, and functions. Using comments and docstrings effectively can greatly enhance the readability and usability of your code.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how to use comments and docstrings in Python to document your code effectively.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/","title":"Python Comparisons","text":"<p>Comparison operators in Python are used to compare values and determine the relationship between them. They return boolean values (<code>True</code> or <code>False</code>) based on the result of the comparison.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#1-comparison-operators","title":"1. Comparison Operators","text":""},{"location":"languages/python/tutorials/getting_started/comparisons/#11-equal-to","title":"1.1. Equal to (<code>==</code>)","text":"<p>Checks if two values are equal.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax","title":"Syntax:","text":"<pre><code>a == b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example","title":"Example:","text":"<pre><code>a = 10\nb = 10\nprint(a == b)  # True\n\nc = 5\nprint(a == c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#12-not-equal-to","title":"1.2. Not equal to (<code>!=</code>)","text":"<p>Checks if two values are not equal.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax_1","title":"Syntax:","text":"<pre><code>a != b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_1","title":"Example:","text":"<pre><code>a = 10\nb = 5\nprint(a != b)  # True\n\nc = 10\nprint(a != c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_1","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#13-greater-than","title":"1.3. Greater than (<code>&gt;</code>)","text":"<p>Checks if the value on the left is greater than the value on the right.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax_2","title":"Syntax:","text":"<pre><code>a &gt; b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_2","title":"Example:","text":"<pre><code>a = 15\nb = 10\nprint(a &gt; b)  # True\n\nc = 20\nprint(a &gt; c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_2","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#14-less-than","title":"1.4. Less than (<code>&lt;</code>)","text":"<p>Checks if the value on the left is less than the value on the right.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax_3","title":"Syntax:","text":"<pre><code>a &lt; b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_3","title":"Example:","text":"<pre><code>a = 5\nb = 10\nprint(a &lt; b)  # True\n\nc = 3\nprint(a &lt; c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_3","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#15-greater-than-or-equal-to","title":"1.5. Greater than or equal to (<code>&gt;=</code>)","text":"<p>Checks if the value on the left is greater than or equal to the value on the right.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax_4","title":"Syntax:","text":"<pre><code>a &gt;= b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_4","title":"Example:","text":"<pre><code>a = 10\nb = 10\nprint(a &gt;= b)  # True\n\nc = 15\nprint(a &gt;= c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_4","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#16-less-than-or-equal-to","title":"1.6. Less than or equal to (<code>&lt;=</code>)","text":"<p>Checks if the value on the left is less than or equal to the value on the right.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#syntax_5","title":"Syntax:","text":"<pre><code>a &lt;= b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_5","title":"Example:","text":"<pre><code>a = 5\nb = 5\nprint(a &lt;= b)  # True\n\nc = 3\nprint(a &lt;= c)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_5","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#2-chained-comparisons","title":"2. Chained Comparisons","text":"<p>Python allows chaining multiple comparison operators to form more complex conditions.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_6","title":"Example:","text":"<pre><code>x = 10\nprint(5 &lt; x &lt; 15)  # True\nprint(15 &lt; x &lt; 20)  # False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_6","title":"Output:","text":"<pre><code>True\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#explanation","title":"Explanation:","text":"<ul> <li>The first comparison <code>5 &lt; x &lt; 15</code> checks if <code>x</code> is between <code>5</code> and <code>15</code>.</li> <li>The second comparison <code>15 &lt; x &lt; 20</code> checks if <code>x</code> is between <code>15</code> and <code>20</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/comparisons/#3-comparison-with-strings","title":"3. Comparison with Strings","text":"<p>Comparison operators can also be used with strings, where they compare lexicographically.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_7","title":"Example:","text":"<pre><code>str1 = \"apple\"\nstr2 = \"banana\"\nprint(str1 &lt; str2)  # True\n\nstr3 = \"apple\"\nprint(str1 == str3)  # True\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_7","title":"Output:","text":"<pre><code>True\nTrue\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#explanation_1","title":"Explanation:","text":"<ul> <li>Strings are compared based on their lexicographic order (alphabetical order), so <code>\"apple\"</code> is less than <code>\"banana\"</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/comparisons/#4-comparison-with-lists-and-other-data-structures","title":"4. Comparison with Lists and Other Data Structures","text":"<p>Comparison operators can be used to compare lists and other data structures, typically comparing them element-wise.</p>"},{"location":"languages/python/tutorials/getting_started/comparisons/#example_8","title":"Example:","text":"<pre><code>list1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nlist3 = [1, 2, 4]\n\nprint(list1 == list2)  # True\nprint(list1 != list3)  # True\nprint(list1 &lt; list3)   # True\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#output_8","title":"Output:","text":"<pre><code>True\nTrue\nTrue\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/comparisons/#explanation_2","title":"Explanation:","text":"<ul> <li><code>list1</code> is equal to <code>list2</code> because they contain the same elements in the same order.</li> <li><code>list1</code> is not equal to <code>list3</code> because the elements differ.</li> <li>The comparison <code>list1 &lt; list3</code> checks the lists element-wise and determines that <code>[1, 2, 3]</code> is less than <code>[1, 2, 4]</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/comparisons/#conclusion","title":"Conclusion","text":"<p>Python comparison operators are essential for evaluating relationships between values. They allow you to make decisions and control the flow of execution in your programs. By understanding and using these operators effectively, you can write more flexible and dynamic code.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/","title":"Python Conditional Statements","text":"<p>Conditional statements in Python allow you to execute different blocks of code based on certain conditions. They are fundamental for making decisions in your programs and controlling the flow of execution.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#1-if-statement","title":"1. <code>if</code> Statement","text":"<p>The <code>if</code> statement evaluates a condition and executes a block of code if the condition is <code>True</code>.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#basic-syntax","title":"Basic Syntax:","text":"<pre><code>if condition:\n    # Code block to execute\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#example","title":"Example:","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output","title":"Output:","text":"<pre><code>x is greater than 5\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation","title":"Explanation:","text":"<ul> <li>The condition <code>x &gt; 5</code> is <code>True</code>, so the code block inside the <code>if</code> statement is executed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#2-if-else-statement","title":"2. <code>if-else</code> Statement","text":"<p>The <code>if-else</code> statement allows you to execute one block of code if the condition is <code>True</code>, and a different block if the condition is <code>False</code>.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#basic-syntax_1","title":"Basic Syntax:","text":"<pre><code>if condition:\n    # Code block to execute if condition is True\nelse:\n    # Code block to execute if condition is False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#example_1","title":"Example:","text":"<pre><code>x = 3\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output_1","title":"Output:","text":"<pre><code>x is 5 or less\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation_1","title":"Explanation:","text":"<ul> <li>The condition <code>x &gt; 5</code> is <code>False</code>, so the code block in the <code>else</code> statement is executed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#3-if-elif-else-statement","title":"3. <code>if-elif-else</code> Statement","text":"<p>The <code>if-elif-else</code> statement allows you to check multiple conditions in sequence. If the first condition is <code>False</code>, the next <code>elif</code> condition is checked, and so on. If none of the conditions are <code>True</code>, the <code>else</code> block is executed.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#basic-syntax_2","title":"Basic Syntax:","text":"<pre><code>if condition1:\n    # Code block to execute if condition1 is True\nelif condition2:\n    # Code block to execute if condition1 is False and condition2 is True\nelse:\n    # Code block to execute if all conditions are False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#example_2","title":"Example:","text":"<pre><code>x = 7\nif x &gt; 10:\n    print(\"x is greater than 10\")\nelif x &gt; 5:\n    print(\"x is greater than 5 but not greater than 10\")\nelse:\n    print(\"x is 5 or less\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output_2","title":"Output:","text":"<pre><code>x is greater than 5 but not greater than 10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation_2","title":"Explanation:","text":"<ul> <li>The first condition <code>x &gt; 10</code> is <code>False</code>, so the <code>elif</code> condition <code>x &gt; 5</code> is checked and found to be <code>True</code>. The corresponding code block is executed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#4-nested-conditional-statements","title":"4. Nested Conditional Statements","text":"<p>You can nest <code>if</code>, <code>elif</code>, and <code>else</code> statements inside each other to handle more complex conditions.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#example_3","title":"Example:","text":"<pre><code>x = 15\nif x &gt; 10:\n    if x &gt; 20:\n        print(\"x is greater than 20\")\n    else:\n        print(\"x is greater than 10 but not greater than 20\")\nelse:\n    print(\"x is 10 or less\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output_3","title":"Output:","text":"<pre><code>x is greater than 10 but not greater than 20\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation_3","title":"Explanation:","text":"<ul> <li>The outer <code>if</code> condition <code>x &gt; 10</code> is <code>True</code>, so the nested <code>if-else</code> statement is evaluated. The nested condition <code>x &gt; 20</code> is <code>False</code>, so the corresponding <code>else</code> block is executed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#5-ternary-operator-conditional-expression","title":"5. Ternary Operator (Conditional Expression)","text":"<p>Python supports a shorthand for <code>if-else</code> statements known as the ternary operator. It allows you to assign values based on a condition in a single line.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#basic-syntax_3","title":"Basic Syntax:","text":"<pre><code>value = true_value if condition else false_value\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#example_4","title":"Example:","text":"<pre><code>x = 10\nresult = \"Even\" if x % 2 == 0 else \"Odd\"\nprint(result)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output_4","title":"Output:","text":"<pre><code>Even\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation_4","title":"Explanation:","text":"<ul> <li>The condition <code>x % 2 == 0</code> checks if <code>x</code> is even. Since it is true, <code>result</code> is assigned <code>\"Even\"</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#6-conditional-statements-with-multiple-conditions","title":"6. Conditional Statements with Multiple Conditions","text":"<p>You can combine multiple conditions using logical operators like <code>and</code>, <code>or</code>, and <code>not</code>.</p>"},{"location":"languages/python/tutorials/getting_started/conditions/#example_5","title":"Example:","text":"<pre><code>x = 15\ny = 20\nif x &gt; 10 and y &lt; 25:\n    print(\"Both conditions are met\")\nelse:\n    print(\"One or both conditions are not met\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#output_5","title":"Output:","text":"<pre><code>Both conditions are met\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/conditions/#explanation_5","title":"Explanation:","text":"<ul> <li>Both conditions <code>x &gt; 10</code> and <code>y &lt; 25</code> are <code>True</code>, so the code block inside the <code>if</code> statement is executed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/conditions/#conclusion","title":"Conclusion","text":"<p>Conditional statements in Python are powerful tools for making decisions and controlling the flow of execution in your programs. By understanding how to use <code>if</code>, <code>if-else</code>, and <code>if-elif-else</code> statements, as well as nested conditions and the ternary operator, you can write more dynamic and flexible code.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/","title":"Python Context Managers: Detailed Overview and Examples","text":"<p>Context managers in Python are a powerful feature that allows you to manage resources efficiently. They are commonly used to handle resource management tasks, such as opening files or acquiring locks, and ensure that resources are properly cleaned up after use.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#what-is-a-context-manager","title":"What is a Context Manager?","text":"<p>A context manager is an object that defines the runtime context for a block of code. It is used with the <code>with</code> statement to ensure that resources are properly managed, even if an exception occurs.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#how-context-managers-work","title":"How Context Managers Work","text":"<p>Context managers implement two special methods: - <code>__enter__</code>: This method is called when the execution flow enters the context of the <code>with</code> statement. - <code>__exit__</code>: This method is called when the execution flow exits the context of the <code>with</code> statement.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#using-context-managers-with-the-with-statement","title":"Using Context Managers with the <code>with</code> Statement","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#example-basic-file-handling","title":"Example: Basic File Handling","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#using-a-context-manager-for-file-operations","title":"Using a Context Manager for File Operations","text":"<pre><code># Open a file and automatically close it when done\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n</code></pre> <p>In this example, the file is opened and read within the <code>with</code> block, and it is automatically closed once the block is exited, even if an exception occurs.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#creating-custom-context-managers","title":"Creating Custom Context Managers","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#using-a-class-based-context-manager","title":"Using a Class-Based Context Manager","text":"<p>To create a custom context manager, you can define a class with <code>__enter__</code> and <code>__exit__</code> methods.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#example-custom-context-manager-class","title":"Example: Custom Context Manager Class","text":"<pre><code>class MyContextManager:\n    def __enter__(self):\n        print('Entering the context.')\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Exiting the context.')\n        # Handle exception if necessary\n        if exc_type:\n            print(f'Exception type: {exc_type}')\n            print(f'Exception value: {exc_value}')\n        return True  # Suppress the exception if True\n\nwith MyContextManager() as manager:\n    print('Inside the context.')\n    # Uncomment the following line to see exception handling in action\n    # raise ValueError('An error occurred!')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/context_managers/#using-a-generator-based-context-manager","title":"Using a Generator-Based Context Manager","text":"<p>You can also create context managers using generator functions with the <code>contextlib</code> module.</p>"},{"location":"languages/python/tutorials/getting_started/context_managers/#example-custom-context-manager-with-a-generator","title":"Example: Custom Context Manager with a Generator","text":"<pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef my_context_manager():\n    print('Entering the context.')\n    try:\n        yield\n    finally:\n        print('Exiting the context.')\n\nwith my_context_manager():\n    print('Inside the context.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/context_managers/#practical-use-cases","title":"Practical Use Cases","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#example-1-database-connection","title":"Example 1: Database Connection","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#using-context-managers-to-manage-database-connections","title":"Using Context Managers to Manage Database Connections","text":"<pre><code>import sqlite3\n\nclass DatabaseConnection:\n    def __enter__(self):\n        self.connection = sqlite3.connect('example.db')\n        self.cursor = self.connection.cursor()\n        return self.cursor\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.connection.commit()\n        self.connection.close()\n\nwith DatabaseConnection() as cursor:\n    cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)')\n    cursor.execute('INSERT INTO users (name) VALUES (?)', ('Alice',))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/context_managers/#example-2-lock-management","title":"Example 2: Lock Management","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#using-context-managers-for-thread-synchronization","title":"Using Context Managers for Thread Synchronization","text":"<pre><code>import threading\n\nlock = threading.Lock()\n\ndef thread_task():\n    with lock:\n        print('Lock acquired by thread.')\n        # Perform thread-safe operations\n\nthreads = [threading.Thread(target=thread_task) for _ in range(5)]\n\nfor thread in threads:\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/context_managers/#example-3-resource-cleanup","title":"Example 3: Resource Cleanup","text":""},{"location":"languages/python/tutorials/getting_started/context_managers/#using-context-managers-for-cleanup-tasks","title":"Using Context Managers for Cleanup Tasks","text":"<pre><code>class Resource:\n    def __enter__(self):\n        print('Acquiring resource.')\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Releasing resource.')\n\nwith Resource() as resource:\n    print('Using resource.')\n    # Resource is automatically cleaned up after this block\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/context_managers/#summary","title":"Summary","text":"<p>Context managers in Python provide a robust and convenient way to manage resources, handle cleanup tasks, and ensure that resources are properly released. By using the <code>with</code> statement, you can simplify resource management and make your code more reliable and readable. You can create custom context managers using classes or generators, and apply them to a variety of scenarios, such as file handling, database connections, thread synchronization, and more.</p>"},{"location":"languages/python/tutorials/getting_started/copy/","title":"Python Different Types of Copies: Detailed Overview and Examples","text":"<p>In Python, copying objects can be done in several ways, depending on whether you need a shallow copy or a deep copy. Understanding these concepts is crucial for managing mutable objects and avoiding unintended side effects in your code.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#shallow-copy-vs-deep-copy","title":"Shallow Copy vs. Deep Copy","text":""},{"location":"languages/python/tutorials/getting_started/copy/#shallow-copy","title":"Shallow Copy","text":"<p>A shallow copy creates a new object but inserts references into it to the objects found in the original. It means that while the new object is distinct from the original, the contents (i.e., objects referenced) are shared.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#example-shallow-copy-with-lists","title":"Example: Shallow Copy with Lists","text":"<pre><code>import copy\n\noriginal_list = [1, [2, 3], 4]\n\n# Create a shallow copy of the list\nshallow_copied_list = copy.copy(original_list)\n\n# Modify the nested list\nshallow_copied_list[1][0] = 'changed'\n\nprint('Original list:', original_list)       # Output: [1, ['changed', 3], 4]\nprint('Shallow copied list:', shallow_copied_list)  # Output: [1, ['changed', 3], 4]\n</code></pre> <p>In this example, modifying the nested list in the shallow copy also affects the original list because both lists share the same nested objects.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#deep-copy","title":"Deep Copy","text":"<p>A deep copy creates a new object and recursively copies all objects found in the original, resulting in a completely independent copy. Changes to the deep copy do not affect the original object.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#example-deep-copy-with-lists","title":"Example: Deep Copy with Lists","text":"<pre><code>import copy\n\noriginal_list = [1, [2, 3], 4]\n\n# Create a deep copy of the list\ndeep_copied_list = copy.deepcopy(original_list)\n\n# Modify the nested list\ndeep_copied_list[1][0] = 'changed'\n\nprint('Original list:', original_list)       # Output: [1, [2, 3], 4]\nprint('Deep copied list:', deep_copied_list)  # Output: [1, ['changed', 3], 4]\n</code></pre> <p>In this example, modifying the nested list in the deep copy does not affect the original list because they are completely independent.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#copying-built-in-data-types","title":"Copying Built-in Data Types","text":""},{"location":"languages/python/tutorials/getting_started/copy/#copying-simple-data-types","title":"Copying Simple Data Types","text":"<p>Simple data types like integers and strings are immutable, so copying them does not require special handling. Assigning them to a new variable creates a new reference.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#example-copying-integers-and-strings","title":"Example: Copying Integers and Strings","text":"<pre><code>a = 10\nb = a  # Copying integer\n\ns1 = 'hello'\ns2 = s1  # Copying string\n\nprint(a, b)  # Output: 10 10\nprint(s1, s2)  # Output: hello hello\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/copy/#copying-mutable-data-types","title":"Copying Mutable Data Types","text":"<p>Mutable data types like lists, dictionaries, and sets require careful handling when copying.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#example-copying-lists","title":"Example: Copying Lists","text":"<pre><code>original_list = [1, 2, 3]\n\n# Shallow copy\nshallow_copied_list = original_list.copy()\n\n# Deep copy\ndeep_copied_list = copy.deepcopy(original_list)\n\nprint('Original list:', original_list)\nprint('Shallow copied list:', shallow_copied_list)\nprint('Deep copied list:', deep_copied_list)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/copy/#example-copying-dictionaries","title":"Example: Copying Dictionaries","text":"<pre><code>original_dict = {'a': 1, 'b': [2, 3]}\n\n# Shallow copy\nshallow_copied_dict = original_dict.copy()\n\n# Deep copy\ndeep_copied_dict = copy.deepcopy(original_dict)\n\n# Modify the nested list\nshallow_copied_dict['b'][0] = 'changed'\n\nprint('Original dict:', original_dict)\nprint('Shallow copied dict:', shallow_copied_dict)\nprint('Deep copied dict:', deep_copied_dict)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/copy/#copying-custom-objects","title":"Copying Custom Objects","text":""},{"location":"languages/python/tutorials/getting_started/copy/#implementing-custom-copy-methods","title":"Implementing Custom Copy Methods","text":"<p>You can control how custom objects are copied by implementing <code>__copy__</code> and <code>__deepcopy__</code> methods.</p>"},{"location":"languages/python/tutorials/getting_started/copy/#example-custom-copy-methods","title":"Example: Custom Copy Methods","text":"<pre><code>import copy\n\nclass CustomObject:\n    def __init__(self, data):\n        self.data = data\n\n    def __copy__(self):\n        # Create a shallow copy\n        new_copy = type(self)(self.data)\n        return new_copy\n\n    def __deepcopy__(self, memo):\n        # Create a deep copy\n        new_copy = type(self)(copy.deepcopy(self.data, memo))\n        return new_copy\n\n# Create an instance of CustomObject\noriginal_obj = CustomObject([1, 2, 3])\n\n# Shallow copy\nshallow_copied_obj = copy.copy(original_obj)\n\n# Deep copy\ndeep_copied_obj = copy.deepcopy(original_obj)\n\n# Modify the data in the shallow copy\nshallow_copied_obj.data[0] = 'changed'\n\nprint('Original object data:', original_obj.data)\nprint('Shallow copied object data:', shallow_copied_obj.data)\nprint('Deep copied object data:', deep_copied_obj.data)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/copy/#when-to-use-each-type-of-copy","title":"When to Use Each Type of Copy","text":"<ul> <li>Shallow Copy: Use when you need a new object with the same references to mutable objects as the original.</li> <li>Deep Copy: Use when you need a completely independent copy of the original object and its nested objects.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/copy/#summary","title":"Summary","text":"<p>Understanding the difference between shallow and deep copies is crucial for effective resource management and avoiding unintended side effects in your code. Shallow copies duplicate the outer container but share nested objects, while deep copies create a completely independent copy of the entire object hierarchy. By utilizing Python\u2019s <code>copy</code> module and custom copy methods, you can manage complex data structures and ensure your programs behave as expected.</p>"},{"location":"languages/python/tutorials/getting_started/dataclass/","title":"Python <code>@dataclass</code> Decorator: Detailed Overview and Examples","text":"<p>The <code>@dataclass</code> decorator in Python, introduced in Python 3.7, provides a convenient way to create classes that are primarily used for storing data. It automatically generates special methods like <code>__init__()</code>, <code>__repr__()</code>, <code>__eq__()</code>, and <code>__hash__()</code> based on the class attributes. This reduces boilerplate code and simplifies class definitions.</p>"},{"location":"languages/python/tutorials/getting_started/dataclass/#basic-usage","title":"Basic Usage","text":"<p>To use the <code>@dataclass</code> decorator, you need to import it from the <code>dataclasses</code> module and apply it to your class.</p>"},{"location":"languages/python/tutorials/getting_started/dataclass/#example-basic-data-class","title":"Example: Basic Data Class","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person(name=\"Alice\", age=30)\nprint(p)  # Output: Person(name='Alice', age=30)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#generated-methods","title":"Generated Methods","text":"<p>The <code>@dataclass</code> decorator automatically generates several methods:</p>"},{"location":"languages/python/tutorials/getting_started/dataclass/#__init__","title":"<code>__init__()</code>","text":"<p>The <code>__init__</code> method is automatically created, allowing you to instantiate the class with the specified attributes.</p> <pre><code>@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person(name=\"Alice\", age=30)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#__repr__","title":"<code>__repr__()</code>","text":"<p>The <code>__repr__</code> method provides a string representation of the object, useful for debugging.</p> <pre><code>p = Person(name=\"Alice\", age=30)\nprint(p)  # Output: Person(name='Alice', age=30)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#__eq__","title":"<code>__eq__()</code>","text":"<p>The <code>__eq__</code> method compares two instances of the class to check for equality based on their attributes.</p> <pre><code>p1 = Person(name=\"Alice\", age=30)\np2 = Person(name=\"Alice\", age=30)\np3 = Person(name=\"Bob\", age=25)\n\nprint(p1 == p2)  # Output: True\nprint(p1 == p3)  # Output: False\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#__hash__","title":"<code>__hash__()</code>","text":"<p>The <code>__hash__</code> method allows instances of the data class to be used as dictionary keys or elements of sets.</p> <pre><code>person_set = {Person(name=\"Alice\", age=30), Person(name=\"Bob\", age=25)}\nprint(len(person_set))  # Output: 2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#customizing-data-classes","title":"Customizing Data Classes","text":""},{"location":"languages/python/tutorials/getting_started/dataclass/#default-values","title":"Default Values","text":"<p>You can provide default values for attributes.</p> <pre><code>@dataclass\nclass Person:\n    name: str\n    age: int = 0\n\np1 = Person(name=\"Alice\")\np2 = Person(name=\"Bob\", age=25)\n\nprint(p1)  # Output: Person(name='Alice', age=0)\nprint(p2)  # Output: Person(name='Bob', age=25)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#default-factory","title":"Default Factory","text":"<p>For mutable default values, such as lists or dictionaries, use <code>field(default_factory=...)</code> to avoid mutable default arguments.</p> <pre><code>from dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass Team:\n    name: str\n    members: List[str] = field(default_factory=list)\n\nteam = Team(name=\"Developers\")\nprint(team)  # Output: Team(name='Developers', members=[])\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#immutable-data-classes","title":"Immutable Data Classes","text":"<p>To make a data class immutable, use the <code>frozen=True</code> parameter. This makes instances of the class hashable and their attributes read-only.</p> <pre><code>@dataclass(frozen=True)\nclass Point:\n    x: int\n    y: int\n\np1 = Point(1, 2)\nprint(p1.x)  # Output: 1\n# p1.x = 3  # Raises dataclasses.FrozenInstanceError\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#custom-methods","title":"Custom Methods","text":"<p>You can still define custom methods within a data class.</p> <pre><code>@dataclass\nclass Rectangle:\n    width: float\n    height: float\n\n    def area(self) -&gt; float:\n        return self.width * self.height\n\nr = Rectangle(width=5, height=10)\nprint(r.area())  # Output: 50\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#inheritance-with-data-classes","title":"Inheritance with Data Classes","text":"<p>Data classes support inheritance, allowing you to create subclasses with additional or modified attributes.</p>"},{"location":"languages/python/tutorials/getting_started/dataclass/#example-inheritance","title":"Example: Inheritance","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Animal:\n    name: str\n\n@dataclass\nclass Dog(Animal):\n    breed: str\n\nd = Dog(name=\"Buddy\", breed=\"Golden Retriever\")\nprint(d)  # Output: Dog(name='Buddy', breed='Golden Retriever')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/dataclass/#conclusion","title":"Conclusion","text":"<p>The <code>@dataclass</code> decorator in Python provides a powerful and convenient way to define classes that are primarily used to store data. By automatically generating common methods and supporting features like default values, immutable instances, and inheritance, <code>@dataclass</code> simplifies the creation and management of data-centric classes. This leads to cleaner, more readable code and reduces boilerplate in your Python programs.</p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/","title":"Python Decorators and Generators: Overview and Examples","text":"<p>This report covers the concepts of decorators and generators in Python, explaining how they work and providing suitable examples for each.</p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#decorators","title":"Decorators","text":"<p>Decorators are a way to modify or enhance the behavior of functions or methods. They are commonly used for logging, enforcing access control and authentication, instrumentation, caching, and more. Decorators are applied to functions or methods using the <code>@</code> symbol.</p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#basic-decorator-example","title":"Basic Decorator Example","text":"<p>A simple decorator that prints a message before and after a function is called.</p> <pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n</code></pre> <p>Output: <pre><code>Something is happening before the function is called.\nHello!\nSomething is happening after the function is called.\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#decorator-with-arguments","title":"Decorator with Arguments","text":"<p>A decorator that accepts arguments.</p> <pre><code>def repeat(num_times):\n    def decorator_repeat(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator_repeat\n\n@repeat(num_times=3)\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> <p>Output: <pre><code>Hello, Alice!\nHello, Alice!\nHello, Alice!\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#class-decorators","title":"Class Decorators","text":"<p>Decorators can also be applied to classes.</p> <pre><code>def decorator(cls):\n    class NewClass(cls):\n        def __init__(self, *args, **kwargs):\n            self._original = cls(*args, **kwargs)\n\n        def __getattr__(self, name):\n            return getattr(self._original, name)\n\n        def __str__(self):\n            return f\"Decorated {self._original}\"\n\n    return NewClass\n\n@decorator\nclass MyClass:\n    def __str__(self):\n        return \"MyClass instance\"\n\ninstance = MyClass()\nprint(instance)\n</code></pre> <p>Output: <pre><code>Decorated MyClass instance\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#generators","title":"Generators","text":"<p>Generators are a simple way to create iterators. They are written like regular functions but use the <code>yield</code> statement to return data one piece at a time, suspending the function's state between each <code>yield</code> and resuming from that state on the next call.</p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#simple-generator-example","title":"Simple Generator Example","text":"<p>A generator function that yields numbers from 0 to 2.</p> <pre><code>def simple_generator():\n    yield 0\n    yield 1\n    yield 2\n\ngen = simple_generator()\nfor value in gen:\n    print(value)\n</code></pre> <p>Output: <pre><code>0\n1\n2\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#generator-for-fibonacci-sequence","title":"Generator for Fibonacci Sequence","text":"<p>A generator function to yield Fibonacci numbers.</p> <pre><code>def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfib_gen = fibonacci(5)\nfor value in fib_gen:\n    print(value)\n</code></pre> <p>Output: <pre><code>0\n1\n1\n2\n3\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#generator-expressions","title":"Generator Expressions","text":"<p>Generator expressions provide an easy way to create generators. They are similar to list comprehensions but use parentheses instead of square brackets.</p> <pre><code>gen_expr = (x * x for x in range(5))\nfor value in gen_expr:\n    print(value)\n</code></pre> <p>Output: <pre><code>0\n1\n4\n9\n16\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#using-yield-from","title":"Using <code>yield from</code>","text":"<p>The <code>yield from</code> statement allows a generator to delegate part of its operations to another generator.</p> <pre><code>def generator1():\n    yield from range(3)\n\ndef generator2():\n    yield from generator1()\n    yield from range(3, 6)\n\nfor value in generator2():\n    print(value)\n</code></pre> <p>Output: <pre><code>0\n1\n2\n3\n4\n5\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/decorators_generators/#conclusion","title":"Conclusion","text":"<p>Python decorators and generators are powerful tools for enhancing and simplifying code. Decorators allow you to modify or extend the behavior of functions and methods in a clean and readable way, while generators provide a memory-efficient way to iterate over large data sets or infinite sequences. Understanding and using these concepts can greatly improve the flexibility and efficiency of your Python programs.</p>"},{"location":"languages/python/tutorials/getting_started/enums/","title":"Python Enums","text":"<p>Enums (Enumerations) are a distinct data type consisting of a set of named values called members. In Python, enums are defined using the <code>Enum</code> class in the <code>enum</code> module. Enums are useful for representing a collection of related constants and making the code more readable and maintainable.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#1-defining-enums","title":"1. Defining Enums","text":"<p>Enums can be defined by subclassing the <code>Enum</code> class and defining class attributes.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED)\nprint(Color.GREEN)\nprint(Color.BLUE)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output","title":"Output:","text":"<pre><code>Color.RED\nColor.GREEN\nColor.BLUE\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#2-accessing-enum-members","title":"2. Accessing Enum Members","text":"<p>Enum members can be accessed by name or value.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_1","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Access by name\nprint(Color.RED)\n\n# Access by value\nprint(Color(2))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_1","title":"Output:","text":"<pre><code>Color.RED\nColor.GREEN\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#3-iterating-over-enum-members","title":"3. Iterating Over Enum Members","text":"<p>You can iterate over enum members using a for loop.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_2","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Iterating over enum members\nfor color in Color:\n    print(color)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_2","title":"Output:","text":"<pre><code>Color.RED\nColor.GREEN\nColor.BLUE\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#4-enum-member-attributes","title":"4. Enum Member Attributes","text":"<p>Enum members have two main attributes: <code>name</code> and <code>value</code>.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_3","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Accessing name and value attributes\nprint(Color.RED.name)\nprint(Color.RED.value)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_3","title":"Output:","text":"<pre><code>RED\n1\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#5-comparing-enums","title":"5. Comparing Enums","text":"<p>Enums can be compared using identity and equality operators.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_4","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Comparing enums\nprint(Color.RED == Color.RED)\nprint(Color.RED == Color.GREEN)\nprint(Color.RED is Color.RED)\nprint(Color.RED is Color.GREEN)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_4","title":"Output:","text":"<pre><code>True\nFalse\nTrue\nFalse\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#6-extending-enums","title":"6. Extending Enums","text":"<p>You can extend enums by defining additional methods and properties.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_5","title":"Example:","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n    def describe(self):\n        return f\"{self.name} is color number {self.value}\"\n\nprint(Color.RED.describe())\nprint(Color.GREEN.describe())\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_5","title":"Output:","text":"<pre><code>RED is color number 1\nGREEN is color number 2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#7-auto-numbered-enums","title":"7. Auto-Numbered Enums","text":"<p>The <code>auto()</code> function can be used to automatically assign values to enum members.</p>"},{"location":"languages/python/tutorials/getting_started/enums/#example_6","title":"Example:","text":"<pre><code>from enum import Enum, auto\n\nclass Color(Enum):\n    RED = auto()\n    GREEN = auto()\n    BLUE = auto()\n\nprint(Color.RED.value)\nprint(Color.GREEN.value)\nprint(Color.BLUE.value)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#output_6","title":"Output:","text":"<pre><code>1\n2\n3\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/enums/#conclusion","title":"Conclusion","text":"<p>Enums in Python are a powerful feature for creating readable and maintainable code. They allow you to define a set of named values, which can be accessed, iterated over, and compared easily. By practicing the examples provided, you can gain a deeper understanding of how to use enums effectively in your Python projects.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/","title":"Python Exception Handling: Detailed Overview and Examples","text":"<p>Exception handling in Python is a mechanism to handle errors and exceptional conditions that occur during the execution of a program. It allows you to gracefully manage errors, ensuring that your program can continue running or terminate in a controlled manner.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#basic-concepts","title":"Basic Concepts","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#what-is-an-exception","title":"What is an Exception?","text":"<p>An exception is an event that disrupts the normal flow of a program. It typically indicates an error condition or an unusual situation. Examples include division by zero, file not found, or invalid user input.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#try-and-except-block","title":"Try and Except Block","text":"<p>The core structure for handling exceptions is the <code>try</code> and <code>except</code> block. </p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-basic-exception-handling","title":"Example: Basic Exception Handling","text":"<pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('You cannot divide by zero!')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#multiple-exceptions","title":"Multiple Exceptions","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#handling-multiple-exceptions","title":"Handling Multiple Exceptions","text":"<p>You can handle multiple exceptions using multiple <code>except</code> blocks.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-handling-multiple-exceptions","title":"Example: Handling Multiple Exceptions","text":"<pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('You cannot divide by zero!')\nexcept FileNotFoundError:\n    print('The file was not found!')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#handling-multiple-exceptions-in-a-single-block","title":"Handling Multiple Exceptions in a Single Block","text":"<p>You can also handle multiple exceptions in a single <code>except</code> block.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-single-block-for-multiple-exceptions","title":"Example: Single Block for Multiple Exceptions","text":"<pre><code>try:\n    result = 10 / 0\nexcept (ZeroDivisionError, FileNotFoundError) as e:\n    print(f'An error occurred: {e}')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#the-else-and-finally-clauses","title":"The <code>else</code> and <code>finally</code> Clauses","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#using-the-else-clause","title":"Using the <code>else</code> Clause","text":"<p>The <code>else</code> clause runs if the <code>try</code> block did not raise an exception.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-using-else","title":"Example: Using <code>else</code>","text":"<pre><code>try:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print('You cannot divide by zero!')\nelse:\n    print('Division successful!')\n    print(f'Result is: {result}')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#using-the-finally-clause","title":"Using the <code>finally</code> Clause","text":"<p>The <code>finally</code> clause runs regardless of whether an exception was raised or not. It is often used for cleanup actions.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-using-finally","title":"Example: Using <code>finally</code>","text":"<pre><code>try:\n    file = open('example.txt', 'r')\n    data = file.read()\nexcept FileNotFoundError:\n    print('The file was not found!')\nfinally:\n    file.close()\n    print('File closed.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#raising-exceptions","title":"Raising Exceptions","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#raising-exceptions-manually","title":"Raising Exceptions Manually","text":"<p>You can raise exceptions manually using the <code>raise</code> keyword.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-raising-exceptions","title":"Example: Raising Exceptions","text":"<pre><code>def divide(a, b):\n    if b == 0:\n        raise ValueError('The divisor cannot be zero.')\n    return a / b\n\ntry:\n    result = divide(10, 0)\nexcept ValueError as e:\n    print(e)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#custom-exceptions","title":"Custom Exceptions","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#creating-custom-exceptions","title":"Creating Custom Exceptions","text":"<p>You can define your own exceptions by subclassing the built-in <code>Exception</code> class.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-custom-exception","title":"Example: Custom Exception","text":"<pre><code>class CustomError(Exception):\n    pass\n\ndef do_something():\n    raise CustomError('This is a custom error.')\n\ntry:\n    do_something()\nexcept CustomError as e:\n    print(e)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#exception-chaining","title":"Exception Chaining","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#using-raise-to-re-raise-exceptions","title":"Using <code>raise</code> to Re-raise Exceptions","text":"<p>You can re-raise the original exception in an <code>except</code> block to preserve the original traceback.</p>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-exception-chaining","title":"Example: Exception Chaining","text":"<pre><code>def function1():\n    try:\n        raise ValueError('An error occurred in function1.')\n    except ValueError:\n        print('Handling error in function1.')\n        raise\n\ntry:\n    function1()\nexcept ValueError:\n    print('Caught an exception in the outer block.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-1-handling-user-input","title":"Example 1: Handling User Input","text":"<pre><code>while True:\n    try:\n        number = int(input('Enter a number: '))\n        print(f'You entered: {number}')\n        break\n    except ValueError:\n        print('Invalid input! Please enter a valid integer.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-2-file-operations-with-exception-handling","title":"Example 2: File Operations with Exception Handling","text":"<pre><code>filename = 'data.txt'\n\ntry:\n    with open(filename, 'r') as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print(f'The file {filename} was not found.')\nexcept IOError:\n    print('An I/O error occurred while reading the file.')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#example-3-handling-multiple-errors","title":"Example 3: Handling Multiple Errors","text":"<pre><code>def process_data(data):\n    try:\n        # Simulate processing\n        if not data:\n            raise ValueError('Data is empty.')\n        result = int(data) / 2\n    except ValueError as ve:\n        print(f'ValueError: {ve}')\n    except ZeroDivisionError:\n        print('ZeroDivisionError occurred.')\n    else:\n        print(f'Processing result: {result}')\n    finally:\n        print('Processing complete.')\n\nprocess_data('10')\nprocess_data('')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/exception_handling/#conclusion","title":"Conclusion","text":"<p>Python's exception handling provides a robust mechanism for managing errors and exceptional conditions that arise during program execution. By using <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> blocks, you can handle errors gracefully, ensuring that your program can deal with unexpected situations effectively. Custom exceptions and exception chaining further enhance your ability to manage and debug complex error scenarios.</p>"},{"location":"languages/python/tutorials/getting_started/functions/","title":"Python Functions: Overview and Examples","text":"<p>This report covers various types of functions in Python, including regular functions, lambda functions, nested functions, recursive functions, iterable and dictionary unpacking in functions, list arguments in function calls, and higher-order functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code>.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#regular-functions","title":"Regular Functions","text":"<p>Functions in Python are defined using the <code>def</code> keyword. They can take arguments and return a value using the <code>return</code> keyword.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-simple-function","title":"Example: Simple Function","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#lambda-functions","title":"Lambda Functions","text":"<p>Lambda functions are anonymous functions defined using the <code>lambda</code> keyword. They are typically used for short, simple operations.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-lambda-function","title":"Example: Lambda Function","text":"<pre><code>add = lambda x, y: x + y\nprint(add(3, 5))  # Output: 8\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#nested-functions","title":"Nested Functions","text":"<p>A nested function is a function defined inside another function. They are used to encapsulate functionality within a specific scope.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-nested-function","title":"Example: Nested Function","text":"<pre><code>def outer_function(text):\n    def inner_function():\n        print(text)\n    inner_function()\n\nouter_function(\"Hello from the outer function!\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#recursive-functions","title":"Recursive Functions","text":"<p>A recursive function is a function that calls itself to solve a problem.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-factorial-function","title":"Example: Factorial Function","text":"<pre><code>def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))  # Output: 120\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#iterable-and-dictionary-unpacking-in-functions","title":"Iterable and Dictionary Unpacking in Functions","text":"<p>You can unpack iterables and dictionaries when passing them as arguments to functions.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-iterable-unpacking","title":"Example: Iterable Unpacking","text":"<pre><code>def sum_numbers(a, b, c):\n    return a + b + c\n\nnumbers = [1, 2, 3]\nprint(sum_numbers(*numbers))  # Output: 6\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#example-dictionary-unpacking","title":"Example: Dictionary Unpacking","text":"<pre><code>def display_info(name, age):\n    return f\"Name: {name}, Age: {age}\"\n\ninfo = {'name': 'Alice', 'age': 30}\nprint(display_info(**info))  # Output: Name: Alice, Age: 30\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#list-arguments-in-function-call","title":"List Arguments in Function Call","text":"<p>You can pass a list of arguments to a function using the <code>*</code> operator.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-list-arguments","title":"Example: List Arguments","text":"<pre><code>def multiply(*args):\n    result = 1\n    for num in args:\n        result *= num\n    return result\n\nprint(multiply(1, 2, 3, 4))  # Output: 24\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#higher-order-functions","title":"Higher-order Functions","text":""},{"location":"languages/python/tutorials/getting_started/functions/#map-function","title":"<code>map()</code> Function","text":"<p>The <code>map()</code> function applies a given function to all items in an iterable.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-map","title":"Example: <code>map()</code>","text":"<pre><code>numbers = [1, 2, 3, 4]\nsquared = map(lambda x: x ** 2, numbers)\nprint(list(squared))  # Output: [1, 4, 9, 16]\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#reduce-function","title":"<code>reduce()</code> Function","text":"<p>The <code>reduce()</code> function applies a given function cumulatively to the items of an iterable.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-reduce","title":"Example: <code>reduce()</code>","text":"<pre><code>from functools import reduce\n\nnumbers = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product)  # Output: 24\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#filter-function","title":"<code>filter()</code> Function","text":"<p>The <code>filter()</code> function filters items in an iterable based on a given function.</p>"},{"location":"languages/python/tutorials/getting_started/functions/#example-filter","title":"Example: <code>filter()</code>","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6]\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(list(even_numbers))  # Output: [2, 4, 6]\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/functions/#conclusion","title":"Conclusion","text":"<p>Python functions are versatile and powerful, enabling you to encapsulate logic, create reusable code, and perform complex operations succinctly. Regular functions, lambda functions, nested functions, and recursive functions offer various ways to implement functionality. Unpacking iterables and dictionaries, using list arguments, and leveraging higher-order functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code> provide additional flexibility and efficiency in handling data. Understanding and mastering these concepts are essential for effective Python programming.</p>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/","title":"Python Indexing and Slicing","text":"<p>Indexing and slicing are powerful features in Python that allow you to access and manipulate sequences such as lists, tuples, and strings. Understanding these concepts is essential for efficient data handling.</p>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#indexing","title":"Indexing","text":"<p>Indexing allows you to access individual elements of a sequence. Python uses zero-based indexing, meaning the first element has an index of 0, the second element has an index of 1, and so on.</p>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-1-indexing-a-list","title":"Example 1: Indexing a List","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nprint(fruits[0])  # Output: apple\nprint(fruits[2])  # Output: cherry\nprint(fruits[-1]) # Output: elderberry\n</code></pre> <ul> <li><code>fruits[0]</code> accesses the first element.</li> <li><code>fruits[2]</code> accesses the third element.</li> <li><code>fruits[-1]</code> accesses the last element (negative indexing starts from the end).</li> </ul>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-2-indexing-a-string","title":"Example 2: Indexing a String","text":"<pre><code>word = \"Python\"\nprint(word[0])   # Output: P\nprint(word[3])   # Output: h\nprint(word[-1])  # Output: n\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#slicing","title":"Slicing","text":"<p>Slicing allows you to access a subset of elements from a sequence. The basic syntax is <code>sequence[start:stop:step]</code>.</p> <ul> <li><code>start</code> is the index where the slice begins (inclusive).</li> <li><code>stop</code> is the index where the slice ends (exclusive).</li> <li><code>step</code> is the interval between elements in the slice (optional).</li> </ul>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-3-slicing-a-list","title":"Example 3: Slicing a List","text":"<pre><code>numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers[2:5])    # Output: [2, 3, 4]\nprint(numbers[:4])     # Output: [0, 1, 2, 3]\nprint(numbers[5:])     # Output: [5, 6, 7, 8, 9]\nprint(numbers[::2])    # Output: [0, 2, 4, 6, 8]\nprint(numbers[1:7:2])  # Output: [1, 3, 5]\nprint(numbers[::-1])   # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-4-slicing-a-string","title":"Example 4: Slicing a String","text":"<pre><code>text = \"slicing\"\nprint(text[1:4])    # Output: lic\nprint(text[:3])     # Output: sli\nprint(text[3:])     # Output: cing\nprint(text[::2])    # Output: sicn\nprint(text[::-1])   # Output: gnicils\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#advanced-slicing-techniques","title":"Advanced Slicing Techniques","text":""},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-5-slicing-with-negative-indices","title":"Example 5: Slicing with Negative Indices","text":"<pre><code>data = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(data[-7:-2])   # Output: [30, 40, 50, 60, 70]\nprint(data[-3:])     # Output: [70, 80, 90]\nprint(data[:-5])     # Output: [10, 20, 30, 40]\nprint(data[-5:-1:2]) # Output: [50, 70]\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#example-6-multi-dimensional-slicing","title":"Example 6: Multi-dimensional Slicing","text":"<pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matrix[0])         # Output: [1, 2, 3] (first row)\nprint(matrix[1][2])      # Output: 6 (element in the second row, third column)\nprint([row[1] for row in matrix]) # Output: [2, 5, 8] (second column)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/indexing_and_slicing/#conclusion","title":"Conclusion","text":"<p>Indexing and slicing are fundamental techniques in Python that enable efficient and concise manipulation of sequences. Mastery of these concepts can significantly improve your ability to work with lists, strings, and other iterable objects in Python.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/","title":"Python Basic Input and Output Operations","text":"<p>Python provides various functions for basic input and output operations. These operations allow users to interact with programs by entering data and receiving feedback.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#input-operations","title":"Input Operations","text":""},{"location":"languages/python/tutorials/getting_started/input_output_operations/#input-function","title":"<code>input()</code> Function","text":"<p>The <code>input()</code> function reads a line from the user's input, typically via the keyboard, and returns it as a string.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-1-reading-a-string","title":"Example 1: Reading a String","text":"<pre><code>name = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-2-reading-an-integer","title":"Example 2: Reading an Integer","text":"<p>To read an integer, you need to convert the input string to an integer using <code>int()</code>.</p> <pre><code>age = int(input(\"Enter your age: \"))\nprint(f\"You are {age} years old.\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-3-reading-a-float","title":"Example 3: Reading a Float","text":"<p>To read a floating-point number, use the <code>float()</code> function.</p> <pre><code>height = float(input(\"Enter your height in meters: \"))\nprint(f\"Your height is {height} meters.\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#output-operations","title":"Output Operations","text":""},{"location":"languages/python/tutorials/getting_started/input_output_operations/#print-function","title":"<code>print()</code> Function","text":"<p>The <code>print()</code> function outputs data to the standard output (usually the console).</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-1-printing-a-string","title":"Example 1: Printing a String","text":"<pre><code>print(\"Hello, world!\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-2-printing-variables","title":"Example 2: Printing Variables","text":"<p>You can print multiple variables by separating them with commas.</p> <pre><code>name = \"Alice\"\nage = 25\nprint(\"Name:\", name, \"Age:\", age)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-3-formatted-string-literals-f-strings","title":"Example 3: Formatted String Literals (f-strings)","text":"<p>Using f-strings (available in Python 3.6 and later) for formatted output.</p> <pre><code>name = \"Bob\"\nage = 30\nprint(f\"Name: {name}, Age: {age}\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-4-string-formatting-with-format","title":"Example 4: String Formatting with <code>format()</code>","text":"<p>You can use the <code>format()</code> method for string formatting.</p> <pre><code>name = \"Charlie\"\nage = 35\nprint(\"Name: {}, Age: {}\".format(name, age))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#advanced-input-and-output","title":"Advanced Input and Output","text":""},{"location":"languages/python/tutorials/getting_started/input_output_operations/#reading-multiple-inputs","title":"Reading Multiple Inputs","text":"<p>You can read multiple inputs in a single line using the <code>split()</code> method.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-1-reading-two-integers","title":"Example 1: Reading Two Integers","text":"<pre><code>x, y = map(int, input(\"Enter two integers separated by space: \").split())\nprint(f\"x: {x}, y: {y}\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#writing-to-a-file","title":"Writing to a File","text":"<p>You can write data to a file using the <code>write()</code> method of a file object.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-2-writing-to-a-text-file","title":"Example 2: Writing to a Text File","text":"<pre><code>with open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, file!\\n\")\n    file.write(\"This is a new line.\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#reading-from-a-file","title":"Reading from a File","text":"<p>You can read data from a file using the <code>read()</code> method.</p>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#example-3-reading-a-text-file","title":"Example 3: Reading a Text File","text":"<pre><code>with open(\"output.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/input_output_operations/#conclusion","title":"Conclusion","text":"<p>Basic input and output operations in Python are essential for creating interactive programs. The <code>input()</code> function allows for user input, while the <code>print()</code> function provides output capabilities. For more advanced needs, Python also supports file operations, enabling reading from and writing to files. Mastery of these operations is fundamental for effective programming in Python.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/","title":"Python Iterators and Iterables","text":"<p>In Python, understanding the concepts of iterators and iterables is crucial for efficient looping and data manipulation. This report covers the basics of iterators and iterables, how to create them, and their common usage.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#iterables","title":"Iterables","text":"<p>An iterable is any Python object capable of returning its members one at a time, allowing it to be looped over in a for-loop. Common examples include lists, tuples, dictionaries, sets, and strings.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-1-lists","title":"Example 1: Lists","text":"<pre><code>my_list = [1, 2, 3, 4, 5]\nfor item in my_list:\n    print(item)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-2-strings","title":"Example 2: Strings","text":"<pre><code>my_string = \"Hello\"\nfor char in my_string:\n    print(char)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-3-dictionaries","title":"Example 3: Dictionaries","text":"<pre><code>my_dict = {'a': 1, 'b': 2, 'c': 3}\nfor key in my_dict:\n    print(f\"{key}: {my_dict[key]}\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#iterators","title":"Iterators","text":"<p>An iterator is an object that contains a countable number of values. It implements two methods: - <code>__iter__()</code> which returns the iterator object itself. - <code>__next__()</code> which returns the next value and raises a <code>StopIteration</code> exception when no more items are available.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#creating-an-iterator","title":"Creating an Iterator","text":"<p>You can create an iterator from any iterable using the <code>iter()</code> function.</p> <pre><code>my_list = [1, 2, 3]\nmy_iterator = iter(my_list)\n\nprint(next(my_iterator))  # Output: 1\nprint(next(my_iterator))  # Output: 2\nprint(next(my_iterator))  # Output: 3\n</code></pre> <p>If you call <code>next()</code> when no items are left, a <code>StopIteration</code> exception is raised.</p> <pre><code>print(next(my_iterator))  # Raises StopIteration\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#building-custom-iterators","title":"Building Custom Iterators","text":"<p>You can create custom iterators by defining a class that implements the <code>__iter__()</code> and <code>__next__()</code> methods.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-custom-range-iterator","title":"Example: Custom Range Iterator","text":"<pre><code>class MyRange:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __iter__(self):\n        self.current = self.start\n        return self\n\n    def __next__(self):\n        if self.current &lt; self.end:\n            num = self.current\n            self.current += 1\n            return num\n        else:\n            raise StopIteration\n\nmy_range = MyRange(1, 5)\nfor num in my_range:\n    print(num)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#itertools-module","title":"Itertools Module","text":"<p>Python's <code>itertools</code> module provides several functions that return iterators for efficient looping.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-1-count","title":"Example 1: <code>count()</code>","text":"<p>Infinite counting from a specified number.</p> <pre><code>import itertools\n\ncounter = itertools.count(start=5, step=2)\nprint(next(counter))  # Output: 5\nprint(next(counter))  # Output: 7\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-2-cycle","title":"Example 2: <code>cycle()</code>","text":"<p>Infinite cycling through an iterable.</p> <pre><code>cycler = itertools.cycle(['A', 'B', 'C'])\nprint(next(cycler))  # Output: A\nprint(next(cycler))  # Output: B\nprint(next(cycler))  # Output: C\nprint(next(cycler))  # Output: A\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-3-repeat","title":"Example 3: <code>repeat()</code>","text":"<p>Repeats an object, either indefinitely or a specified number of times.</p> <pre><code>repeater = itertools.repeat('Hello', 3)\nfor item in repeater:\n    print(item)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#generators","title":"Generators","text":"<p>Generators are a simple way to create iterators using functions and the <code>yield</code> statement.</p>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-simple-generator","title":"Example: Simple Generator","text":"<pre><code>def my_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = my_generator()\nprint(next(gen))  # Output: 1\nprint(next(gen))  # Output: 2\nprint(next(gen))  # Output: 3\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#example-fibonacci-generator","title":"Example: Fibonacci Generator","text":"<pre><code>def fibonacci(n):\n    a, b = 0, 1\n    count = 0\n    while count &lt; n:\n        yield a\n        a, b = b, a + b\n        count += 1\n\nfib = fibonacci(5)\nfor num in fib:\n    print(num)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/iterators/#conclusion","title":"Conclusion","text":"<p>Understanding iterators and iterables is essential for efficient data manipulation in Python. Iterables allow for easy looping, while iterators provide a protocol for iterating through elements. Custom iterators and generators offer flexible and memory-efficient ways to handle sequences of data. The <code>itertools</code> module further extends these capabilities with powerful iterator functions. Mastery of these concepts is key to writing effective and efficient Python code.</p>"},{"location":"languages/python/tutorials/getting_started/loops/","title":"Python Loops","text":"<p>Loops in Python are used to execute a block of code repeatedly based on a condition or for iterating over a sequence. They are essential for performing repetitive tasks efficiently.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#1-for-loop","title":"1. <code>for</code> Loop","text":"<p>The <code>for</code> loop in Python is used to iterate over a sequence (like a list, tuple, dictionary, set, or string) or other iterable objects.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#basic-syntax","title":"Basic Syntax:","text":"<pre><code>for variable in sequence:\n    # Code block to execute\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#example","title":"Example:","text":""},{"location":"languages/python/tutorials/getting_started/loops/#iterating-over-a-list","title":"Iterating over a List","text":"<pre><code>fruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output","title":"Output:","text":"<pre><code>apple\nbanana\ncherry\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation","title":"Explanation:","text":"<ul> <li>The <code>for</code> loop iterates over each item in the <code>fruits</code> list and prints it.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#iterating-over-a-range","title":"Iterating over a Range","text":"<pre><code>for i in range(5):\n    print(i)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_1","title":"Output:","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_1","title":"Explanation:","text":"<ul> <li>The <code>range(5)</code> generates numbers from <code>0</code> to <code>4</code>, and the loop prints each number.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#iterating-over-a-dictionary","title":"Iterating over a Dictionary","text":"<pre><code>person = {'name': 'Alice', 'age': 25, 'city': 'New York'}\nfor key, value in person.items():\n    print(key, value)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_2","title":"Output:","text":"<pre><code>name Alice\nage 25\ncity New York\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_2","title":"Explanation:","text":"<ul> <li>The <code>items()</code> method returns key-value pairs of the dictionary, which are iterated and printed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#2-while-loop","title":"2. <code>while</code> Loop","text":"<p>The <code>while</code> loop in Python continues to execute a block of code as long as a specified condition is <code>True</code>.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#basic-syntax_1","title":"Basic Syntax:","text":"<pre><code>while condition:\n    # Code block to execute\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#example_1","title":"Example:","text":""},{"location":"languages/python/tutorials/getting_started/loops/#basic-while-loop","title":"Basic <code>while</code> Loop","text":"<pre><code>count = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_3","title":"Output:","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_3","title":"Explanation:","text":"<ul> <li>The loop continues as long as <code>count</code> is less than <code>5</code>. The <code>count</code> variable is incremented in each iteration.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#while-loop-with-break","title":"<code>while</code> Loop with <code>break</code>","text":"<pre><code>count = 0\nwhile True:\n    if count &gt;= 5:\n        break\n    print(count)\n    count += 1\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_4","title":"Output:","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_4","title":"Explanation:","text":"<ul> <li>The <code>while True</code> loop runs indefinitely but is terminated by the <code>break</code> statement when <code>count</code> reaches <code>5</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#while-loop-with-continue","title":"<code>while</code> Loop with <code>continue</code>","text":"<pre><code>count = 0\nwhile count &lt; 5:\n    count += 1\n    if count % 2 == 0:\n        continue\n    print(count)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_5","title":"Output:","text":"<pre><code>1\n3\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_5","title":"Explanation:","text":"<ul> <li>The <code>continue</code> statement skips the rest of the code in the loop for even values of <code>count</code>, so only odd numbers are printed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#3-nested-loops","title":"3. Nested Loops","text":"<p>Loops can be nested within each other to perform more complex iterations.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#example_2","title":"Example:","text":""},{"location":"languages/python/tutorials/getting_started/loops/#nested-for-loops","title":"Nested <code>for</code> Loops","text":"<pre><code>for i in range(3):\n    for j in range(3):\n        print(f\"i={i}, j={j}\")\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_6","title":"Output:","text":"<pre><code>i=0, j=0\ni=0, j=1\ni=0, j=2\ni=1, j=0\ni=1, j=1\ni=1, j=2\ni=2, j=0\ni=2, j=1\ni=2, j=2\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_6","title":"Explanation:","text":"<ul> <li>The outer loop runs 3 times, and for each iteration of the outer loop, the inner loop runs 3 times.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#4-loop-control-statements","title":"4. Loop Control Statements","text":""},{"location":"languages/python/tutorials/getting_started/loops/#41-break","title":"4.1. <code>break</code>","text":"<p>The <code>break</code> statement terminates the loop prematurely.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#example_3","title":"Example:","text":"<pre><code>for i in range(10):\n    if i == 5:\n        break\n    print(i)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_7","title":"Output:","text":"<pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_7","title":"Explanation:","text":"<ul> <li>The loop breaks when <code>i</code> equals <code>5</code>, so only numbers from <code>0</code> to <code>4</code> are printed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#42-continue","title":"4.2. <code>continue</code>","text":"<p>The <code>continue</code> statement skips the current iteration and moves to the next iteration.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#example_4","title":"Example:","text":"<pre><code>for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#output_8","title":"Output:","text":"<pre><code>1\n3\n5\n7\n9\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_8","title":"Explanation:","text":"<ul> <li>Even numbers are skipped due to the <code>continue</code> statement, so only odd numbers are printed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#43-pass","title":"4.3. <code>pass</code>","text":"<p>The <code>pass</code> statement is a placeholder that does nothing and is used when a statement is syntactically required but no action is needed.</p>"},{"location":"languages/python/tutorials/getting_started/loops/#example_5","title":"Example:","text":"<pre><code>for i in range(3):\n    pass  # No operation performed\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/loops/#explanation_9","title":"Explanation:","text":"<ul> <li>The <code>pass</code> statement does nothing; the loop executes without performing any actions.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/loops/#conclusion","title":"Conclusion","text":"<p>Loops in Python are powerful constructs for executing repetitive tasks and iterating over sequences. By understanding the <code>for</code> and <code>while</code> loops, as well as loop control statements like <code>break</code>, <code>continue</code>, and <code>pass</code>, you can write efficient and effective code for various programming tasks.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/","title":"Python Metaclasses: Detailed Overview and Examples","text":"<p>Metaclasses in Python are a complex but powerful feature that allows you to modify or extend the behavior of classes. They can be used to control the creation, modification, and behavior of classes themselves. Understanding metaclasses is crucial for advanced Python programming, especially when dealing with frameworks or designing complex systems.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#what-is-a-metaclass","title":"What is a Metaclass?","text":"<p>A metaclass is a class of a class that defines how a class behaves. Just as a class defines how instances of the class behave, a metaclass defines how classes themselves behave. In Python, the default metaclass is <code>type</code>, but you can define your own to customize class creation and behavior.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#basic-metaclass","title":"Basic Metaclass","text":""},{"location":"languages/python/tutorials/getting_started/metaclass/#example-basic-metaclass","title":"Example: Basic Metaclass","text":"<pre><code>class MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        print(f\"Creating class {name}\")\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=MyMeta):\n    pass\n</code></pre> <p>Output: <pre><code>Creating class MyClass\n</code></pre></p> <p>In this example, <code>MyMeta</code> is a metaclass that overrides the <code>__new__</code> method to print a message whenever a new class is created using this metaclass.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#metaclass-methods","title":"Metaclass Methods","text":""},{"location":"languages/python/tutorials/getting_started/metaclass/#__new__","title":"<code>__new__()</code>","text":"<p>The <code>__new__</code> method in a metaclass is responsible for creating a new class. It is called before <code>__init__</code>.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#__init__","title":"<code>__init__()</code>","text":"<p>The <code>__init__</code> method in a metaclass initializes the new class after it has been created. It is similar to the <code>__init__</code> method of regular classes but operates on classes.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#example-metaclass-with-__init__","title":"Example: Metaclass with <code>__init__</code>","text":"<pre><code>class MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        print(f\"Creating class {name}\")\n        return super().__new__(cls, name, bases, dct)\n\n    def __init__(cls, name, bases, dct):\n        print(f\"Initializing class {name}\")\n        super().__init__(name, bases, dct)\n\nclass MyClass(metaclass=MyMeta):\n    pass\n</code></pre> <p>Output: <pre><code>Creating class MyClass\nInitializing class MyClass\n</code></pre></p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#customizing-class-creation","title":"Customizing Class Creation","text":"<p>Metaclasses allow you to customize the class creation process by modifying class attributes or methods.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#example-adding-attributes","title":"Example: Adding Attributes","text":"<pre><code>class AddAttributesMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct['added_attr'] = 'This is an added attribute'\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=AddAttributesMeta):\n    pass\n\nprint(hasattr(MyClass, 'added_attr'))  # Output: True\nprint(MyClass.added_attr)              # Output: This is an added attribute\n</code></pre> <p>In this example, the <code>AddAttributesMeta</code> metaclass adds an attribute to the class it creates.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#metaclass-inheritance","title":"Metaclass Inheritance","text":"<p>Metaclasses can also be inherited, allowing for more complex customization.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#example-inheriting-metaclasses","title":"Example: Inheriting Metaclasses","text":"<pre><code>class BaseMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct['base_attr'] = 'Base attribute'\n        return super().__new__(cls, name, bases, dct)\n\nclass DerivedMeta(BaseMeta):\n    def __new__(cls, name, bases, dct):\n        dct['derived_attr'] = 'Derived attribute'\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=DerivedMeta):\n    pass\n\nprint(hasattr(MyClass, 'base_attr'))   # Output: True\nprint(MyClass.base_attr)               # Output: Base attribute\nprint(hasattr(MyClass, 'derived_attr'))# Output: True\nprint(MyClass.derived_attr)            # Output: Derived attribute\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/metaclass/#using-metaclasses-for-singleton-pattern","title":"Using Metaclasses for Singleton Pattern","text":"<p>Metaclasses can be used to enforce the Singleton design pattern, ensuring that only one instance of a class is created.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#example-singleton-metaclass","title":"Example: Singleton Metaclass","text":"<pre><code>class SingletonMeta(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass SingletonClass(metaclass=SingletonMeta):\n    pass\n\nsingleton1 = SingletonClass()\nsingleton2 = SingletonClass()\n\nprint(singleton1 is singleton2)  # Output: True\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/metaclass/#metaclasses-in-frameworks","title":"Metaclasses in Frameworks","text":"<p>Metaclasses are often used in frameworks and libraries to automatically create or modify classes in a consistent way.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#example-django-orm","title":"Example: Django ORM","text":"<p>In Django, metaclasses are used to define models and their behavior automatically. For instance, Django's <code>ModelBase</code> metaclass is used to define how model classes interact with the database.</p>"},{"location":"languages/python/tutorials/getting_started/metaclass/#conclusion","title":"Conclusion","text":"<p>Metaclasses provide a powerful mechanism for customizing and controlling the creation and behavior of classes in Python. They allow for advanced programming techniques such as automatic class generation, Singleton patterns, and more. While they can be complex, understanding and using metaclasses can greatly enhance your ability to design flexible and powerful systems in Python.</p>"},{"location":"languages/python/tutorials/getting_started/oops/","title":"Python Object-Oriented Programming (OOP) Concepts Report","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure code in a way that is both reusable and easier to understand. Python supports OOP principles such as encapsulation, inheritance, and polymorphism. This report provides a detailed overview of these concepts with suitable examples.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#introduction","title":"Introduction","text":"<p>Object-Oriented Programming (OOP) is a paradigm that organizes code into objects, which can hold both data and methods. The primary goals of OOP are to improve code organization, enhance code reuse, and facilitate maintenance.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"languages/python/tutorials/getting_started/oops/#defining-a-class","title":"Defining a Class","text":"<p>A class is a blueprint for creating objects. It defines a set of attributes and methods that the objects created from the class will have.</p> <pre><code>class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        return f\"{self.name} barks!\"\n\n    def get_age(self):\n        return self.age\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#creating-objects","title":"Creating Objects","text":"<p>An object is an instance of a class. Once a class is defined, you can create objects of that class.</p> <pre><code># Create an instance of Dog\nmy_dog = Dog(name=\"Buddy\", age=5)\n\n# Access attributes and methods\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.bark())  # Output: Buddy barks!\nprint(my_dog.get_age())  # Output: 5\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation refers to the bundling of data with the methods that operate on that data. It also involves restricting direct access to some of the object's components.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#private-and-protected-members","title":"Private and Protected Members","text":"<p>In Python, attributes and methods can be made private or protected by prefixing them with an underscore or double underscore.</p> <pre><code>class Car:\n    def __init__(self, make, model):\n        self.make = make  # public attribute\n        self._model = model  # protected attribute\n        self.__year = 2022  # private attribute\n\n    def get_year(self):\n        return self.__year\n\n    def __update_year(self, year):\n        self.__year = year\n\ncar = Car(\"Toyota\", \"Corolla\")\nprint(car.make)  # Output: Toyota\nprint(car._model)  # Output: Corolla\nprint(car.get_year())  # Output: 2022\n# print(car.__year)  # AttributeError\n# car.__update_year(2023)  # AttributeError\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#inheritance","title":"Inheritance","text":"<p>Inheritance allows one class (the child or subclass) to inherit attributes and methods from another class (the parent or superclass). This promotes code reuse and hierarchical class organization.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#basic-inheritance","title":"Basic Inheritance","text":"<pre><code>class Animal:\n    def speak(self):\n        return \"Animal speaks\"\n\nclass Cat(Animal):\n    def meow(self):\n        return \"Cat meows\"\n\n# Create an instance of Cat\nmy_cat = Cat()\nprint(my_cat.speak())  # Output: Animal speaks\nprint(my_cat.meow())  # Output: Cat meows\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#method-overriding","title":"Method Overriding","text":"<p>In method overriding, a subclass provides a specific implementation of a method that is already defined in its superclass.</p> <pre><code>class Animal:\n    def speak(self):\n        return \"Animal speaks\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Dog barks\"\n\n# Create an instance of Dog\nmy_dog = Dog()\nprint(my_dog.speak())  # Output: Dog barks\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism allows objects of different classes to be treated as objects of a common superclass. It also enables methods to do different things based on the object it is acting upon.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#method-overloading","title":"Method Overloading","text":"<p>Python does not support method overloading (same method name with different signatures) directly, but you can achieve similar behavior using default arguments.</p> <pre><code>class MathOperations:\n    def add(self, a, b, c=0):\n        return a + b + c\n\nmath_op = MathOperations()\nprint(math_op.add(2, 3))  # Output: 5\nprint(math_op.add(2, 3, 4))  # Output: 9\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#method-overriding_1","title":"Method Overriding","text":"<p>Method overriding is when a subclass provides a specific implementation of a method that is already defined in its superclass.</p> <pre><code>class Shape:\n    def area(self):\n        return 0\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n# Create an instance of Rectangle\nrectangle = Rectangle(5, 10)\nprint(rectangle.area())  # Output: 50\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#abstraction","title":"Abstraction","text":"<p>Abstraction is the concept of hiding the complex implementation details and showing only the necessary features of an object. This is typically achieved using abstract classes and methods.</p>"},{"location":"languages/python/tutorials/getting_started/oops/#abstract-classes-and-methods","title":"Abstract Classes and Methods","text":"<p>Abstract classes cannot be instantiated and are meant to be subclassed. They can contain abstract methods that must be implemented by subclasses.</p> <pre><code>from abc import ABC, abstractmethod\n\nclass AbstractShape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(AbstractShape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius ** 2)\n\n# Create an instance of Circle\ncircle = Circle(5)\nprint(circle.area())  # Output: 78.5\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/oops/#best-practices","title":"Best Practices","text":"<ol> <li>Use Meaningful Class Names: Class names should be descriptive and convey the purpose of the class.</li> <li>Encapsulate Data: Use private or protected members to hide internal state and provide public methods for accessing and modifying data.</li> <li>Prefer Composition Over Inheritance: Use composition to achieve code reuse when possible, as it provides more flexibility than inheritance.</li> <li>Keep Methods Short and Focused: Each method should perform a single responsibility and be easy to understand.</li> <li>Use Abstract Classes Wisely: Use abstract classes and methods to define a clear interface for subclasses and to enforce implementation.</li> </ol>"},{"location":"languages/python/tutorials/getting_started/oops/#conclusion","title":"Conclusion","text":"<p>Python's Object-Oriented Programming features, such as classes, objects, encapsulation, inheritance, polymorphism, and abstraction, provide a robust framework for building modular and maintainable code. Understanding and applying these concepts effectively can lead to better code organization, reusability, and scalability.</p> <p>For more information and advanced topics, refer to the Python documentation on classes and objects.</p>"},{"location":"languages/python/tutorials/getting_started/packages/","title":"Creating Python Packages: Detailed Overview and Examples","text":"<p>Creating Python packages is an essential skill for organizing and distributing Python code. A package is a directory containing modules and a special file named <code>__init__.py</code>. This report provides a detailed guide on creating and managing Python packages, including the necessary directory structure, packaging, and distribution.</p>"},{"location":"languages/python/tutorials/getting_started/packages/#1-understanding-python-packages","title":"1. Understanding Python Packages","text":"<p>A Python package is a directory containing Python modules and a special <code>__init__.py</code> file, which makes the directory recognizable as a package. Packages help in organizing code into modules and sub-packages, making it easier to manage and reuse.</p>"},{"location":"languages/python/tutorials/getting_started/packages/#basic-package-structure","title":"Basic Package Structure","text":"<pre><code>my_package/\n\u2502\n\u251c\u2500\u2500 my_module.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 sub_package/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 sub_module.py\n\u2514\u2500\u2500 setup.py\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#2-creating-a-basic-package","title":"2. Creating a Basic Package","text":""},{"location":"languages/python/tutorials/getting_started/packages/#example-simple-package-structure","title":"Example: Simple Package Structure","text":"<ol> <li>Create the Package Directory</li> </ol> <p>Create a directory for your package:</p> <pre><code>mkdir my_package\ncd my_package\n</code></pre> <ol> <li>Add Modules and Sub-packages</li> </ol> <p>Create Python files inside the package directory:</p> <pre><code># my_package/my_module.py\ndef hello():\n    return \"Hello from my_module!\"\n\n# my_package/sub_package/sub_module.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <ol> <li>Create <code>__init__.py</code></li> </ol> <p>Create an <code>__init__.py</code> file to mark the directory as a package:</p> <pre><code># my_package/__init__.py\nfrom .my_module import hello\nfrom .sub_package.sub_module import greet\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#3-adding-metadata-with-setuppy","title":"3. Adding Metadata with <code>setup.py</code>","text":"<p>The <code>setup.py</code> file is used to define the package metadata and configuration needed for distribution.</p>"},{"location":"languages/python/tutorials/getting_started/packages/#example-setuppy-file","title":"Example: <code>setup.py</code> File","text":"<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='my_package',\n    version='0.1',\n    description='A sample Python package',\n    author='Your Name',\n    author_email='yourname@example.com',\n    url='https://github.com/yourusername/my_package',\n    packages=find_packages(),\n    install_requires=[],\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n    ],\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#key-parameters","title":"Key Parameters","text":"<ul> <li><code>name</code>: The name of the package.</li> <li><code>version</code>: The version number of the package.</li> <li><code>description</code>: A short description of the package.</li> <li><code>author</code> and <code>author_email</code>: Contact information for the package author.</li> <li><code>url</code>: The URL for the project\u2019s homepage or repository.</li> <li><code>packages</code>: Specifies which packages to include.</li> <li><code>install_requires</code>: Lists dependencies required by the package.</li> <li><code>classifiers</code>: Provides metadata about the package\u2019s compatibility and licensing.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/packages/#4-building-and-distributing-your-package","title":"4. Building and Distributing Your Package","text":""},{"location":"languages/python/tutorials/getting_started/packages/#building-the-package","title":"Building the Package","text":"<p>To build the package distribution archives, use the following commands:</p> <pre><code>python setup.py sdist bdist_wheel\n</code></pre> <ul> <li><code>sdist</code> generates a source distribution.</li> <li><code>bdist_wheel</code> generates a wheel distribution.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/packages/#installing-the-package-locally","title":"Installing the Package Locally","text":"<p>To install the package locally for testing:</p> <pre><code>pip install .\n</code></pre> <p>This command installs the package from the current directory.</p>"},{"location":"languages/python/tutorials/getting_started/packages/#uploading-to-pypi","title":"Uploading to PyPI","text":"<p>To distribute your package publicly, upload it to PyPI (Python Package Index):</p> <ol> <li>Install <code>twine</code></li> </ol> <pre><code>pip install twine\n</code></pre> <ol> <li>Upload the Package</li> </ol> <pre><code>twine upload dist/*\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#5-package-example-with-extra-features","title":"5. Package Example with Extra Features","text":""},{"location":"languages/python/tutorials/getting_started/packages/#adding-data-files","title":"Adding Data Files","text":"<p>If your package includes non-Python files, specify them using <code>package_data</code> or <code>data_files</code>:</p> <pre><code>setup(\n    ...\n    package_data={\n        'my_package': ['data/*.dat'],\n    },\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#including-scripts","title":"Including Scripts","text":"<p>If your package includes executable scripts, define them using the <code>entry_points</code> argument:</p> <pre><code>setup(\n    ...\n    entry_points={\n        'console_scripts': [\n            'my_command=my_package.cli:main',\n        ],\n    },\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#defining-dependencies","title":"Defining Dependencies","text":"<p>List external dependencies in the <code>install_requires</code> argument:</p> <pre><code>setup(\n    ...\n    install_requires=[\n        'numpy&gt;=1.18.0',\n        'requests&gt;=2.24.0',\n    ],\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#6-creating-a-package-with-pyprojecttoml","title":"6. Creating a Package with <code>pyproject.toml</code>","text":"<p>As an alternative to <code>setup.py</code>, you can use <code>pyproject.toml</code> for packaging configuration:</p>"},{"location":"languages/python/tutorials/getting_started/packages/#example-pyprojecttoml","title":"Example: <code>pyproject.toml</code>","text":"<pre><code>[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"my_package\"\nversion = \"0.1\"\ndescription = \"A sample Python package\"\nauthors = [{name = \"Your Name\", email = \"yourname@example.com\"}]\ndependencies = []\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#building-with-pyprojecttoml","title":"Building with <code>pyproject.toml</code>","text":"<p>To build the package with <code>pyproject.toml</code>:</p> <pre><code>python -m build\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/packages/#summary","title":"Summary","text":"<p>Creating a Python package involves organizing your code into a structured directory, defining metadata and configuration in <code>setup.py</code> or <code>pyproject.toml</code>, and building and distributing the package. By following these steps, you can create well-organized, reusable Python packages and share them with the Python community or use them in your projects.</p>"},{"location":"languages/python/tutorials/getting_started/regexp/","title":"Python Regular Expressions: Detailed Overview and Examples","text":"<p>Regular expressions (regex) are sequences of characters that define search patterns, primarily used for string matching and manipulation. Python's <code>re</code> module provides a powerful interface for working with regular expressions.</p>"},{"location":"languages/python/tutorials/getting_started/regexp/#importing-the-re-module","title":"Importing the <code>re</code> Module","text":"<p>To use regular expressions in Python, you need to import the <code>re</code> module:</p> <pre><code>import re\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#basic-operations","title":"Basic Operations","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#searching-for-patterns","title":"Searching for Patterns","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example","title":"Example","text":"<pre><code>import re\n\n# Define a pattern\npattern = r'\\d+'\n\n# Search for the pattern in a string\nresult = re.search(pattern, 'The price is 100 dollars')\nprint(result.group())  # Output: 100\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#finding-all-matches","title":"Finding All Matches","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_1","title":"Example","text":"<pre><code>import re\n\n# Define a pattern\npattern = r'\\d+'\n\n# Find all matches in a string\nresult = re.findall(pattern, 'The price is 100 dollars and the tax is 20 dollars')\nprint(result)  # Output: ['100', '20']\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#splitting-strings","title":"Splitting Strings","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_2","title":"Example","text":"<pre><code>import re\n\n# Define a pattern\npattern = r'\\s+'\n\n# Split a string by the pattern\nresult = re.split(pattern, 'This is a test')\nprint(result)  # Output: ['This', 'is', 'a', 'test']\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#replacing-patterns","title":"Replacing Patterns","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_3","title":"Example","text":"<pre><code>import re\n\n# Define a pattern\npattern = r'\\d+'\n\n# Replace the pattern with a new string\nresult = re.sub(pattern, 'XXX', 'The price is 100 dollars')\nprint(result)  # Output: The price is XXX dollars\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#regular-expression-patterns","title":"Regular Expression Patterns","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#special-characters","title":"Special Characters","text":"<ul> <li><code>.</code>: Matches any character except a newline.</li> <li><code>^</code>: Matches the start of a string.</li> <li><code>$</code>: Matches the end of a string.</li> <li><code>*</code>: Matches 0 or more repetitions of the preceding pattern.</li> <li><code>+</code>: Matches 1 or more repetitions of the preceding pattern.</li> <li><code>?</code>: Matches 0 or 1 repetition of the preceding pattern.</li> <li><code>{m}</code>: Matches exactly m repetitions of the preceding pattern.</li> <li><code>{m,n}</code>: Matches between m and n repetitions of the preceding pattern.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/regexp/#character-classes","title":"Character Classes","text":"<ul> <li><code>[abc]</code>: Matches any one of the characters a, b, or c.</li> <li><code>[^abc]</code>: Matches any character except a, b, or c.</li> <li><code>[a-z]</code>: Matches any lowercase letter.</li> <li><code>[A-Z]</code>: Matches any uppercase letter.</li> <li><code>[0-9]</code>: Matches any digit.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/regexp/#predefined-character-classes","title":"Predefined Character Classes","text":"<ul> <li><code>\\d</code>: Matches any digit; equivalent to <code>[0-9]</code>.</li> <li><code>\\D</code>: Matches any non-digit; equivalent to <code>[^0-9]</code>.</li> <li><code>\\w</code>: Matches any word character (alphanumeric plus underscore); equivalent to <code>[a-zA-Z0-9_]</code>.</li> <li><code>\\W</code>: Matches any non-word character; equivalent to <code>[^a-zA-Z0-9_]</code>.</li> <li><code>\\s</code>: Matches any whitespace character (space, tab, newline).</li> <li><code>\\S</code>: Matches any non-whitespace character.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/regexp/#anchors","title":"Anchors","text":"<ul> <li><code>\\b</code>: Matches a word boundary.</li> <li><code>\\B</code>: Matches a non-word boundary.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/regexp/#compiling-regular-expressions","title":"Compiling Regular Expressions","text":"<p>You can compile a regular expression pattern into a regex object for repeated use.</p>"},{"location":"languages/python/tutorials/getting_started/regexp/#example_4","title":"Example","text":"<pre><code>import re\n\n# Compile a pattern\npattern = re.compile(r'\\d+')\n\n# Use the compiled pattern\nresult = pattern.search('The price is 100 dollars')\nprint(result.group())  # Output: 100\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#grouping-and-capturing","title":"Grouping and Capturing","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#using-groups","title":"Using Groups","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_5","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with groups\npattern = r'(\\d+)\\s+(\\w+)'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '100 dollars')\nprint(result.group(1))  # Output: 100\nprint(result.group(2))  # Output: dollars\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#named-groups","title":"Named Groups","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_6","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with named groups\npattern = r'(?P&lt;price&gt;\\d+)\\s+(?P&lt;currency&gt;\\w+)'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '100 dollars')\nprint(result.group('price'))  # Output: 100\nprint(result.group('currency'))  # Output: dollars\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#lookahead-and-lookbehind","title":"Lookahead and Lookbehind","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#positive-lookahead","title":"Positive Lookahead","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_7","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with positive lookahead\npattern = r'\\d+(?=\\sdollars)'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '100 dollars')\nprint(result.group())  # Output: 100\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#negative-lookahead","title":"Negative Lookahead","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_8","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with negative lookahead\npattern = r'\\d+(?!\\sdollars)'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '100 euros')\nprint(result.group())  # Output: 100\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#positive-lookbehind","title":"Positive Lookbehind","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_9","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with positive lookbehind\npattern = r'(?&lt;=\\d\\s)euros'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '100 euros')\nprint(result.group())  # Output: euros\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#negative-lookbehind","title":"Negative Lookbehind","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example_10","title":"Example","text":"<pre><code>import re\n\n# Define a pattern with negative lookbehind\npattern = r'(?&lt;!100\\s)euros'\n\n# Search for the pattern in a string\nresult = re.search(pattern, '200 euros')\nprint(result.group())  # Output: euros\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#practical-examples","title":"Practical Examples","text":""},{"location":"languages/python/tutorials/getting_started/regexp/#example-1-email-validation","title":"Example 1: Email Validation","text":"<pre><code>import re\n\n# Define a pattern for email validation\npattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n\n# Validate an email\nemail = 'example@example.com'\nif re.match(pattern, email):\n    print('Valid email')\nelse:\n    print('Invalid email')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#example-2-phone-number-validation","title":"Example 2: Phone Number Validation","text":"<pre><code>import re\n\n# Define a pattern for phone number validation\npattern = r'^\\+?\\d{1,3}?[-.\\s]?\\(?\\d{1,4}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$'\n\n# Validate a phone number\nphone_number = '+1 (123) 456-7890'\nif re.match(pattern, phone_number):\n    print('Valid phone number')\nelse:\n    print('Invalid phone number')\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#example-3-url-extraction","title":"Example 3: URL Extraction","text":"<pre><code>import re\n\n# Define a pattern for URL extraction\npattern = r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+'\n\n# Extract URLs from a string\ntext = 'Visit https://example.com and http://example.org for more information.'\nurls = re.findall(pattern, text)\nprint(urls)  # Output: ['https://example.com', 'http://example.org']\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/regexp/#conclusion","title":"Conclusion","text":"<p>The <code>re</code> module in Python provides a powerful set of tools for working with regular expressions. By mastering the various patterns and techniques outlined in this report, you can effectively search, manipulate, and validate strings in your Python programs. Regular expressions are a versatile tool that can help you handle a wide range of text processing tasks efficiently.</p>"},{"location":"languages/python/tutorials/getting_started/setup/","title":"Importance of <code>setup.py</code> File in Python Projects","text":"<p>The <code>setup.py</code> file is a critical component in Python projects, especially when distributing and installing packages. It is used by tools like <code>setuptools</code> and <code>distutils</code> to package Python code, manage dependencies, and define project metadata. This report will detail the significance of the <code>setup.py</code> file and provide examples to illustrate its use.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#what-is-setuppy","title":"What is <code>setup.py</code>?","text":"<p>The <code>setup.py</code> file is a Python script located in the root directory of a Python project. It serves as the build script for setuptools, a library used to create and distribute Python packages. This file contains configuration information about the package, including metadata, dependencies, and package details.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#basic-structure-of-setuppy","title":"Basic Structure of <code>setup.py</code>","text":"<p>Here\u2019s a simple example of a <code>setup.py</code> file:</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='my_package',\n    version='0.1',\n    description='A sample Python package',\n    author='Your Name',\n    author_email='yourname@example.com',\n    url='https://github.com/yourusername/my_package',\n    packages=find_packages(),\n    install_requires=[\n        'numpy',\n        'requests',\n    ],\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n    ],\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#key-components-of-setuppy","title":"Key Components of <code>setup.py</code>","text":""},{"location":"languages/python/tutorials/getting_started/setup/#1-metadata","title":"1. Metadata","text":"<p>Metadata provides information about the package. It includes:</p> <ul> <li><code>name</code>: The name of the package.</li> <li><code>version</code>: The current version of the package.</li> <li><code>description</code>: A brief summary of the package.</li> <li><code>author</code> and <code>author_email</code>: The author\u2019s name and email address.</li> <li><code>url</code>: The URL for the project\u2019s homepage or repository.</li> <li><code>license</code>: The license under which the package is distributed.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/setup/#example","title":"Example","text":"<pre><code>setup(\n    name='my_package',\n    version='0.1',\n    description='A sample Python package',\n    author='Your Name',\n    author_email='yourname@example.com',\n    url='https://github.com/yourusername/my_package',\n    license='MIT',\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#2-packages","title":"2. Packages","text":"<p>The <code>packages</code> argument specifies the Python packages to include. You can use <code>find_packages()</code> to automatically discover all packages and subpackages.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_1","title":"Example","text":"<pre><code>from setuptools import find_packages\n\nsetup(\n    ...\n    packages=find_packages(),  # Automatically find all packages\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#3-dependencies","title":"3. Dependencies","text":"<p>The <code>install_requires</code> argument lists the dependencies that need to be installed along with the package.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_2","title":"Example","text":"<pre><code>setup(\n    ...\n    install_requires=[\n        'numpy',\n        'requests',\n    ],\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#4-classifiers","title":"4. Classifiers","text":"<p>Classifiers provide metadata about the package in a standardized way. They are used by package repositories like PyPI to categorize and filter packages.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_3","title":"Example","text":"<pre><code>setup(\n    ...\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n    ],\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#why-setuppy-is-important","title":"Why <code>setup.py</code> is Important","text":""},{"location":"languages/python/tutorials/getting_started/setup/#1-package-distribution","title":"1. Package Distribution","text":"<p>The <code>setup.py</code> file is essential for distributing Python packages. It allows you to build and upload your package to repositories like PyPI (Python Package Index), making it accessible to other developers.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example-command","title":"Example Command","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre> <p>This command generates distribution archives that can be uploaded to PyPI.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#2-dependency-management","title":"2. Dependency Management","text":"<p>The <code>install_requires</code> parameter in <code>setup.py</code> ensures that all necessary dependencies are installed when your package is installed. This helps prevent issues related to missing or incompatible libraries.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#3-standardization","title":"3. Standardization","text":"<p>Using <code>setup.py</code> follows Python\u2019s packaging standards, making it easier for other developers to understand and use your package. It provides a consistent way to configure and manage Python projects.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#4-integration-with-tools","title":"4. Integration with Tools","text":"<p>Many tools and services, such as CI/CD pipelines, package repositories, and development environments, rely on <code>setup.py</code> to gather metadata and manage dependencies.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#5-versioning","title":"5. Versioning","text":"<p>Managing version numbers in <code>setup.py</code> helps track changes and updates to your package. This is crucial for version control and release management.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#advanced-usage","title":"Advanced Usage","text":""},{"location":"languages/python/tutorials/getting_started/setup/#1-entry-points","title":"1. Entry Points","text":"<p>You can define entry points for your package, which specify scripts or commands to be installed.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_4","title":"Example","text":"<pre><code>setup(\n    ...\n    entry_points={\n        'console_scripts': [\n            'my_command=my_package.module:main_function',\n        ],\n    },\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#2-data-files","title":"2. Data Files","text":"<p>Include non-Python files in your package using the <code>package_data</code> or <code>data_files</code> arguments.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_5","title":"Example","text":"<pre><code>setup(\n    ...\n    package_data={\n        'my_package': ['data/*.dat'],\n    },\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#3-custom-commands","title":"3. Custom Commands","text":"<p>You can define custom commands by subclassing <code>setuptools.Command</code>.</p>"},{"location":"languages/python/tutorials/getting_started/setup/#example_6","title":"Example","text":"<pre><code>from setuptools import setup, Command\n\nclass CustomCommand(Command):\n    description = 'A custom command'\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        print('Running custom command')\n\nsetup(\n    ...\n    cmdclass={\n        'custom_command': CustomCommand,\n    },\n)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/setup/#summary","title":"Summary","text":"<p>The <code>setup.py</code> file is a fundamental part of Python project management, enabling the creation, distribution, and installation of packages. It provides crucial metadata, manages dependencies, and ensures standardization across the Python ecosystem. By understanding and properly configuring <code>setup.py</code>, you can effectively manage your Python projects and contribute to a well-structured and maintainable codebase.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/","title":"Python Type Hints: Detailed Overview and Examples","text":"<p>Type hints, introduced in PEP 484, are a feature in Python that allow you to annotate the types of variables, function parameters, and return values. They help improve code readability, provide better tooling support, and aid in catching type-related errors during development.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#what-are-type-hints","title":"What are Type Hints?","text":"<p>Type hints are a way to specify the expected types of variables, function parameters, and return values. They do not enforce type checking at runtime but are used by tools such as linters and IDEs to provide type checking and code suggestions.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#basic-syntax","title":"Basic Syntax","text":"<p>Type hints use the <code>typing</code> module and are added as comments or annotations to your code.</p> <pre><code># Example of type hints in a function signature\ndef add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/type_hints/#function-annotations","title":"Function Annotations","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#annotating-function-parameters-and-return-types","title":"Annotating Function Parameters and Return Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-function-with-type-hints","title":"Example: Function with Type Hints","text":"<pre><code>def greet(name: str) -&gt; str:\n    return f'Hello, {name}!'\n</code></pre> <p>In this example, <code>name</code> is expected to be a <code>str</code>, and the function is expected to return a <code>str</code>.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#using-type-hints-with-default-values","title":"Using Type Hints with Default Values","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-function-with-default-parameter","title":"Example: Function with Default Parameter","text":"<pre><code>def repeat(message: str, times: int = 1) -&gt; str:\n    return message * times\n</code></pre> <p>Here, <code>message</code> is a <code>str</code>, <code>times</code> is an <code>int</code> with a default value of <code>1</code>, and the function returns a <code>str</code>.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#type-hinting-for-variables","title":"Type Hinting for Variables","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#annotating-variable-types","title":"Annotating Variable Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-variable-annotations","title":"Example: Variable Annotations","text":"<pre><code>from typing import List\n\n# Annotating a list of integers\nnumbers: List[int] = [1, 2, 3, 4, 5]\n</code></pre> <p>In this example, <code>numbers</code> is a list where each element is of type <code>int</code>.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#complex-data-types","title":"Complex Data Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#using-typing-for-collections","title":"Using Typing for Collections","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-annotating-lists-tuples-and-dictionaries","title":"Example: Annotating Lists, Tuples, and Dictionaries","text":"<pre><code>from typing import List, Tuple, Dict\n\ndef process_data(data: List[int]) -&gt; Tuple[int, int]:\n    return min(data), max(data)\n\ndef user_info() -&gt; Dict[str, str]:\n    return {'name': 'Alice', 'age': '30'}\n</code></pre> <p>In this example, <code>process_data</code> takes a list of integers and returns a tuple of two integers. <code>user_info</code> returns a dictionary with string keys and values.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#union-types","title":"Union Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-using-union-for-multiple-possible-types","title":"Example: Using <code>Union</code> for Multiple Possible Types","text":"<pre><code>from typing import Union\n\ndef stringify(value: Union[int, float]) -&gt; str:\n    return str(value)\n</code></pre> <p>Here, <code>value</code> can be either an <code>int</code> or a <code>float</code>, and the function returns a <code>str</code>.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#type-aliases","title":"Type Aliases","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#creating-custom-type-aliases","title":"Creating Custom Type Aliases","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-defining-type-aliases","title":"Example: Defining Type Aliases","text":"<pre><code>from typing import List, Dict\n\n# Define a type alias for a list of dictionaries\nUserList = List[Dict[str, str]]\n\ndef get_users() -&gt; UserList:\n    return [{'name': 'Alice', 'email': 'alice@example.com'}]\n</code></pre> <p>In this example, <code>UserList</code> is an alias for a list of dictionaries with string keys and values.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#optional-types","title":"Optional Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#using-optional-for-nullable-types","title":"Using <code>Optional</code> for Nullable Types","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-optional-type-hint","title":"Example: Optional Type Hint","text":"<pre><code>from typing import Optional\n\ndef find_item(id: int) -&gt; Optional[str]:\n    items = {1: 'apple', 2: 'banana'}\n    return items.get(id)\n</code></pre> <p>Here, <code>find_item</code> returns either a <code>str</code> or <code>None</code> if the item is not found.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#type-hinting-for-classes","title":"Type Hinting for Classes","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#annotating-methods-and-attributes","title":"Annotating Methods and Attributes","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-type-hints-in-classes","title":"Example: Type Hints in Classes","text":"<pre><code>class Person:\n    def __init__(self, name: str, age: int) -&gt; None:\n        self.name: str = name\n        self.age: int = age\n\n    def birthday(self) -&gt; None:\n        self.age += 1\n</code></pre> <p>In this example, <code>name</code> and <code>age</code> are annotated as <code>str</code> and <code>int</code>, respectively. The <code>birthday</code> method does not return any value (<code>None</code>).</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#generics","title":"Generics","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#using-generics-for-type-safety","title":"Using Generics for Type Safety","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#example-defining-a-generic-class","title":"Example: Defining a Generic Class","text":"<pre><code>from typing import TypeVar, Generic, List\n\nT = TypeVar('T')\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        self.items: List[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self.items.append(item)\n\n    def pop(self) -&gt; T:\n        return self.items.pop()\n</code></pre> <p>In this example, <code>Stack</code> is a generic class that can hold items of any type.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#type-checking-with-mypy","title":"Type Checking with <code>mypy</code>","text":""},{"location":"languages/python/tutorials/getting_started/type_hints/#using-mypy-for-static-type-checking","title":"Using <code>mypy</code> for Static Type Checking","text":"<p>You can use <code>mypy</code> to perform static type checking based on the type hints provided in your code.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#example-running-mypy","title":"Example: Running <code>mypy</code>","text":"<ol> <li>Install <code>mypy</code> using pip:</li> </ol> <pre><code>pip install mypy\n</code></pre> <ol> <li>Run <code>mypy</code> on your script:</li> </ol> <pre><code>mypy script.py\n</code></pre> <p><code>mypy</code> will analyze your code and report any type errors or inconsistencies.</p>"},{"location":"languages/python/tutorials/getting_started/type_hints/#summary","title":"Summary","text":"<p>Type hints in Python provide a way to annotate the types of variables, function parameters, and return values, enhancing code readability and enabling better tooling support. By using type hints, you can make your code more robust, maintainable, and easier to understand. With tools like <code>mypy</code>, you can perform static type checking to catch type-related errors before runtime. Whether you are working with simple data types or complex class structures, type hints offer a flexible and powerful way to manage types in your Python code.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/","title":"Python Variable Scope and Binding","text":"<p>Variable scope and binding in Python determine where variables can be accessed and how their values are assigned or modified within different parts of a program. Understanding these concepts is essential for managing data effectively and avoiding common bugs related to variable accessibility.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#1-variable-scope","title":"1. Variable Scope","text":"<p>Variable scope refers to the visibility and accessibility of variables in different parts of a program. In Python, scopes are categorized into four types:</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#11-local-scope","title":"1.1. Local Scope","text":"<p>Variables defined within a function are in the local scope of that function. They are only accessible within that function.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example","title":"Example:","text":"<pre><code>def my_function():\n    local_var = \"I am local\"\n    print(local_var)\n\nmy_function()\n# print(local_var)  # This will raise a NameError\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output","title":"Output:","text":"<pre><code>I am local\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation","title":"Explanation:","text":"<ul> <li><code>local_var</code> is defined inside <code>my_function()</code> and can only be accessed within this function. Accessing it outside the function will result in a <code>NameError</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#12-enclosing-nonlocal-scope","title":"1.2. Enclosing (Nonlocal) Scope","text":"<p>This scope refers to variables in the enclosing functions' scope. It applies to nested functions where an inner function refers to variables in the outer function.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_1","title":"Example:","text":"<pre><code>def outer_function():\n    outer_var = \"I am from outer function\"\n\n    def inner_function():\n        print(outer_var)\n\n    inner_function()\n\nouter_function()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_1","title":"Output:","text":"<pre><code>I am from outer function\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_1","title":"Explanation:","text":"<ul> <li><code>outer_var</code> is in the enclosing scope of <code>inner_function()</code> and can be accessed by it.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#13-global-scope","title":"1.3. Global Scope","text":"<p>Variables defined at the top level of a module or script are in the global scope. They are accessible from any function within the same module.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_2","title":"Example:","text":"<pre><code>global_var = \"I am global\"\n\ndef my_function():\n    print(global_var)\n\nmy_function()\nprint(global_var)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_2","title":"Output:","text":"<pre><code>I am global\nI am global\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_2","title":"Explanation:","text":"<ul> <li><code>global_var</code> is accessible both inside and outside the function <code>my_function()</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#14-built-in-scope","title":"1.4. Built-in Scope","text":"<p>This scope contains built-in names and functions provided by Python, like <code>len()</code>, <code>print()</code>, and <code>range()</code>. These are always available in any Python program.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_3","title":"Example:","text":"<pre><code>print(len(\"Hello\"))\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_3","title":"Output:","text":"<pre><code>5\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_3","title":"Explanation:","text":"<ul> <li>The <code>len()</code> function is part of Python's built-in scope and can be used globally.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#2-variable-binding","title":"2. Variable Binding","text":"<p>Variable binding refers to the association of a variable with a value or object. In Python, variable binding follows these rules:</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#21-binding-in-local-scope","title":"2.1. Binding in Local Scope","text":"<p>Variables are created and bound to values when they are assigned within a local scope.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_4","title":"Example:","text":"<pre><code>def my_function():\n    local_var = 10\n    print(local_var)\n\nmy_function()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_4","title":"Output:","text":"<pre><code>10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_4","title":"Explanation:","text":"<ul> <li><code>local_var</code> is bound to the value <code>10</code> within <code>my_function()</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#22-binding-in-global-scope","title":"2.2. Binding in Global Scope","text":"<p>Variables can be bound in the global scope and then accessed or modified by functions using the <code>global</code> keyword.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_5","title":"Example:","text":"<pre><code>global_var = 5\n\ndef modify_global():\n    global global_var\n    global_var = 10\n\nmodify_global()\nprint(global_var)\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_5","title":"Output:","text":"<pre><code>10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_5","title":"Explanation:","text":"<ul> <li>The <code>global</code> keyword allows the function to modify the <code>global_var</code> defined outside the function.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#23-binding-in-enclosing-scope","title":"2.3. Binding in Enclosing Scope","text":"<p>Variables in an enclosing (nonlocal) scope can be bound and accessed by nested functions using the <code>nonlocal</code> keyword.</p>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#example_6","title":"Example:","text":"<pre><code>def outer_function():\n    outer_var = 5\n\n    def inner_function():\n        nonlocal outer_var\n        outer_var = 10\n\n    inner_function()\n    print(outer_var)\n\nouter_function()\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#output_6","title":"Output:","text":"<pre><code>10\n</code></pre>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#explanation_6","title":"Explanation:","text":"<ul> <li>The <code>nonlocal</code> keyword allows <code>inner_function()</code> to modify the <code>outer_var</code> defined in <code>outer_function()</code>.</li> </ul>"},{"location":"languages/python/tutorials/getting_started/variable_scope_binding/#conclusion","title":"Conclusion","text":"<p>Understanding variable scope and binding in Python helps manage how and where variables can be accessed and modified. By properly using local, enclosing, global, and built-in scopes, and correctly binding variables, you can write clearer, more reliable code and avoid common pitfalls related to variable accessibility.</p>"},{"location":"languages/python/tutorials/operators/","title":"Welcome to Python Operators Notes","text":"<p>Welcome to the Python Operators Notes! This resource provides a comprehensive overview of the different types of operators available in Python, which are essential for performing various operations in your code. Understanding operators and their usage is crucial for writing efficient and effective Python programs, whether you're performing mathematical calculations, manipulating data, or controlling program flow.</p>"},{"location":"languages/python/tutorials/operators/#contents","title":"Contents","text":"<ol> <li> <p>Mathematical Operators    Dive into the world of mathematical operators in Python, including addition, subtraction, multiplication, division, and more. This section covers how to use these operators for performing arithmetic calculations, as well as their behavior with different data types.</p> </li> <li> <p>Bitwise Operators    Explore bitwise operators that allow you to perform operations on binary representations of integers. This section discusses AND, OR, XOR, NOT, and shift operators, providing examples and explanations of their use cases in low-level programming tasks.</p> </li> <li> <p>Boolean Operators    Understand the logical operations available in Python, such as AND, OR, and NOT. This section explains how to use Boolean operators for evaluating conditions, combining multiple expressions, and controlling the flow of your programs based on logical conditions.</p> </li> <li> <p>Operator Precedence    Learn about operator precedence and associativity rules in Python, which determine the order in which operators are evaluated in expressions. This section includes examples to illustrate how precedence affects the results of complex expressions and how to use parentheses to override default behavior.</p> </li> </ol>"},{"location":"languages/python/tutorials/operators/bitwise/","title":"Python Bitwise Operators","text":"<p>Bitwise operators in Python perform operations on the binary representations of integers. These operators work at the bit level, providing a means to perform low-level operations efficiently.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#1-bitwise-and","title":"1. Bitwise AND (<code>&amp;</code>)","text":"<p>Performs a bitwise AND operation, which results in a binary number where each bit is set to <code>1</code> if both corresponding bits of the operands are <code>1</code>.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a &amp; b\nprint(\"Bitwise AND:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output","title":"Output:","text":"<pre><code>Bitwise AND: 1\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li><code>0011</code> (3 in decimal)</li> <li>Result of <code>AND</code>: <code>0001</code> (1 in decimal)</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#2-bitwise-or","title":"2. Bitwise OR (<code>|</code>)","text":"<p>Performs a bitwise OR operation, which results in a binary number where each bit is set to <code>1</code> if at least one of the corresponding bits of the operands is <code>1</code>.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_1","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a | b\nprint(\"Bitwise OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_1","title":"Output:","text":"<pre><code>Bitwise OR: 7\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_1","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li><code>0011</code> (3 in decimal)</li> <li>Result of <code>OR</code>: <code>0111</code> (7 in decimal)</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#3-bitwise-xor","title":"3. Bitwise XOR (<code>^</code>)","text":"<p>Performs a bitwise XOR operation, which results in a binary number where each bit is set to <code>1</code> if exactly one of the corresponding bits of the operands is <code>1</code>.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_2","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a ^ b\nprint(\"Bitwise XOR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_2","title":"Output:","text":"<pre><code>Bitwise XOR: 6\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_2","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li><code>0011</code> (3 in decimal)</li> <li>Result of <code>XOR</code>: <code>0110</code> (6 in decimal)</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#4-bitwise-not","title":"4. Bitwise NOT (<code>~</code>)","text":"<p>Performs a bitwise NOT operation, which inverts all the bits of the operand. It results in the one's complement of the number.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_3","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = ~a\nprint(\"Bitwise NOT:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_3","title":"Output:","text":"<pre><code>Bitwise NOT: -6\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_3","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li><code>NOT</code> operation flips all bits: <code>1010</code></li> <li>In Python, this results in <code>-6</code> due to two's complement representation.</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#5-left-shift","title":"5. Left Shift (<code>&lt;&lt;</code>)","text":"<p>Shifts the bits of the number to the left by the specified number of positions. This is equivalent to multiplying the number by <code>2</code> raised to the power of the shift amount.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_4","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = a &lt;&lt; 1\nprint(\"Left Shift:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_4","title":"Output:","text":"<pre><code>Left Shift: 10\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_4","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li>Left shift by 1 position: <code>1010</code> (10 in decimal)</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#6-right-shift","title":"6. Right Shift (<code>&gt;&gt;</code>)","text":"<p>Shifts the bits of the number to the right by the specified number of positions. This is equivalent to integer division by <code>2</code> raised to the power of the shift amount.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_5","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = a &gt;&gt; 1\nprint(\"Right Shift:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_5","title":"Output:","text":"<pre><code>Right Shift: 2\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_5","title":"Explanation:","text":"<ul> <li><code>0101</code> (5 in decimal)</li> <li>Right shift by 1 position: <code>0010</code> (2 in decimal)</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#7-bitwise-operations-on-negative-numbers","title":"7. Bitwise Operations on Negative Numbers","text":"<p>Bitwise operations can also be applied to negative numbers, which are represented using two's complement in Python.</p>"},{"location":"languages/python/tutorials/operators/bitwise/#example_6","title":"Example:","text":"<pre><code>a = -5   # Binary: 11111111111111111111111111111111 (32-bit representation)\nb = 3\nprint(\"Bitwise AND with negative number:\", a &amp; b)\nprint(\"Bitwise OR with negative number:\", a | b)\nprint(\"Bitwise XOR with negative number:\", a ^ b)\nprint(\"Bitwise NOT with negative number:\", ~a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#output_6","title":"Output:","text":"<pre><code>Bitwise AND with negative number: 1\nBitwise OR with negative number: -3\nBitwise XOR with negative number: -4\nBitwise NOT with negative number: 4\n</code></pre>"},{"location":"languages/python/tutorials/operators/bitwise/#explanation_6","title":"Explanation:","text":"<ul> <li>For <code>-5</code>, the two's complement binary representation affects the result of bitwise operations.</li> </ul>"},{"location":"languages/python/tutorials/operators/bitwise/#conclusion","title":"Conclusion","text":"<p>Bitwise operators in Python provide a powerful way to perform low-level operations on integer data. Understanding these operators is essential for tasks that require efficient manipulation of data at the bit level, such as cryptography, networking, and low-level programming.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how to use bitwise operators effectively in your Python programs.</p>"},{"location":"languages/python/tutorials/operators/boolean/","title":"Python Boolean Operators","text":"<p>Boolean operators in Python are used to perform logical operations on boolean values (<code>True</code> and <code>False</code>). These operators are essential for control flow and conditional statements in programming.</p>"},{"location":"languages/python/tutorials/operators/boolean/#1-logical-and-and","title":"1. Logical AND (<code>and</code>)","text":"<p>The <code>and</code> operator returns <code>True</code> if both operands are <code>True</code>; otherwise, it returns <code>False</code>.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example","title":"Example:","text":"<pre><code>a = True\nb = False\nresult = a and b\nprint(\"Logical AND:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output","title":"Output:","text":"<pre><code>Logical AND: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation","title":"Explanation:","text":"<ul> <li>Both <code>a</code> and <code>b</code> need to be <code>True</code> for the result to be <code>True</code>. Since <code>b</code> is <code>False</code>, the result is <code>False</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#2-logical-or-or","title":"2. Logical OR (<code>or</code>)","text":"<p>The <code>or</code> operator returns <code>True</code> if at least one of the operands is <code>True</code>; otherwise, it returns <code>False</code>.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example_1","title":"Example:","text":"<pre><code>a = True\nb = False\nresult = a or b\nprint(\"Logical OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output_1","title":"Output:","text":"<pre><code>Logical OR: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation_1","title":"Explanation:","text":"<ul> <li>At least one of <code>a</code> or <code>b</code> needs to be <code>True</code> for the result to be <code>True</code>. Since <code>a</code> is <code>True</code>, the result is <code>True</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#3-logical-not-not","title":"3. Logical NOT (<code>not</code>)","text":"<p>The <code>not</code> operator negates the boolean value of the operand. It returns <code>True</code> if the operand is <code>False</code> and <code>False</code> if the operand is <code>True</code>.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example_2","title":"Example:","text":"<pre><code>a = True\nresult = not a\nprint(\"Logical NOT:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output_2","title":"Output:","text":"<pre><code>Logical NOT: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation_2","title":"Explanation:","text":"<ul> <li>The <code>not</code> operator inverts the value of <code>a</code>. Since <code>a</code> is <code>True</code>, <code>not a</code> is <code>False</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#4-boolean-expression-evaluation","title":"4. Boolean Expression Evaluation","text":"<p>Boolean operators can be used to evaluate complex conditions by combining multiple boolean expressions.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example_3","title":"Example:","text":"<pre><code>a = 5\nb = 10\nc = 15\n\nresult = (a &lt; b) and (b &lt; c)\nprint(\"Combined Logical AND:\", result)\n\nresult = (a &gt; b) or (b &lt; c)\nprint(\"Combined Logical OR:\", result)\n\nresult = not (a &lt; b)\nprint(\"Logical NOT with Expression:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output_3","title":"Output:","text":"<pre><code>Combined Logical AND: True\nCombined Logical OR: True\nLogical NOT with Expression: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation_3","title":"Explanation:","text":"<ul> <li><code>(a &lt; b)</code> is <code>True</code> and <code>(b &lt; c)</code> is <code>True</code>, so <code>True and True</code> results in <code>True</code>.</li> <li><code>(a &gt; b)</code> is <code>False</code> but <code>(b &lt; c)</code> is <code>True</code>, so <code>False or True</code> results in <code>True</code>.</li> <li><code>not (a &lt; b)</code> is <code>not True</code>, which results in <code>False</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#5-short-circuit-evaluation","title":"5. Short-Circuit Evaluation","text":"<p>Python uses short-circuit evaluation for boolean expressions, meaning it stops evaluating as soon as the result is determined.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example_4","title":"Example:","text":"<pre><code>def func1():\n    print(\"func1 called\")\n    return True\n\ndef func2():\n    print(\"func2 called\")\n    return False\n\nresult = func1() or func2()\nprint(\"Result:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output_4","title":"Output:","text":"<pre><code>func1 called\nResult: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation_4","title":"Explanation:","text":"<ul> <li><code>func1()</code> returns <code>True</code>, so <code>func2()</code> is not called due to short-circuit evaluation in the <code>or</code> operation.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#6-boolean-conversion","title":"6. Boolean Conversion","text":"<p>Non-boolean values can be converted to boolean values using <code>bool()</code>.</p>"},{"location":"languages/python/tutorials/operators/boolean/#example_5","title":"Example:","text":"<pre><code>print(\"Boolean conversion of 0:\", bool(0))\nprint(\"Boolean conversion of 1:\", bool(1))\nprint(\"Boolean conversion of '':\", bool(''))\nprint(\"Boolean conversion of 'Hello':\", bool('Hello'))\nprint(\"Boolean conversion of []:\", bool([]))\nprint(\"Boolean conversion of [1, 2, 3]:\", bool([1, 2, 3]))\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#output_5","title":"Output:","text":"<pre><code>Boolean conversion of 0: False\nBoolean conversion of 1: True\nBoolean conversion of '': False\nBoolean conversion of 'Hello': True\nBoolean conversion of []: False\nBoolean conversion of [1, 2, 3]: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/boolean/#explanation_5","title":"Explanation:","text":"<ul> <li>Values like <code>0</code>, empty strings <code>''</code>, and empty lists <code>[]</code> are considered <code>False</code>.</li> <li>Non-zero numbers, non-empty strings, and non-empty lists are considered <code>True</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/boolean/#conclusion","title":"Conclusion","text":"<p>Boolean operators are fundamental in Python for making decisions and controlling the flow of a program. They allow for the evaluation of conditions and logical operations that are crucial for effective programming.</p> <p>By understanding and practicing these operators, you can create more complex and efficient logical conditions in your code.</p>"},{"location":"languages/python/tutorials/operators/math/","title":"Python Mathematical Operators","text":"<p>Python provides a range of mathematical operators for performing arithmetic operations, comparisons, and more. These operators can be used with various data types, including integers, floating-point numbers, and complex numbers.</p>"},{"location":"languages/python/tutorials/operators/math/#1-arithmetic-operators","title":"1. Arithmetic Operators","text":"<p>Arithmetic operators are used to perform basic mathematical operations.</p>"},{"location":"languages/python/tutorials/operators/math/#11-addition","title":"1.1 Addition (<code>+</code>)","text":"<p>Adds two numbers.</p>"},{"location":"languages/python/tutorials/operators/math/#example","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = a + b\nprint(\"Addition:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output","title":"Output:","text":"<pre><code>Addition: 15\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#12-subtraction-","title":"1.2 Subtraction (<code>-</code>)","text":"<p>Subtracts one number from another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_1","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = a - b\nprint(\"Subtraction:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_1","title":"Output:","text":"<pre><code>Subtraction: 5\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#13-multiplication","title":"1.3 Multiplication (<code>*</code>)","text":"<p>Multiplies two numbers.</p>"},{"location":"languages/python/tutorials/operators/math/#example_2","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = a * b\nprint(\"Multiplication:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_2","title":"Output:","text":"<pre><code>Multiplication: 50\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#14-division","title":"1.4 Division (<code>/</code>)","text":"<p>Divides one number by another, resulting in a floating-point number.</p>"},{"location":"languages/python/tutorials/operators/math/#example_3","title":"Example:","text":"<pre><code>a = 10\nb = 3\nresult = a / b\nprint(\"Division:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_3","title":"Output:","text":"<pre><code>Division: 3.3333333333333335\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#15-floor-division","title":"1.5 Floor Division (<code>//</code>)","text":"<p>Divides one number by another and returns the largest integer less than or equal to the result.</p>"},{"location":"languages/python/tutorials/operators/math/#example_4","title":"Example:","text":"<pre><code>a = 10\nb = 3\nresult = a // b\nprint(\"Floor Division:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_4","title":"Output:","text":"<pre><code>Floor Division: 3\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#16-modulus","title":"1.6 Modulus (<code>%</code>)","text":"<p>Returns the remainder of the division.</p>"},{"location":"languages/python/tutorials/operators/math/#example_5","title":"Example:","text":"<pre><code>a = 10\nb = 3\nresult = a % b\nprint(\"Modulus:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_5","title":"Output:","text":"<pre><code>Modulus: 1\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#17-exponentiation","title":"1.7 Exponentiation (<code>**</code>)","text":"<p>Raises one number to the power of another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_6","title":"Example:","text":"<pre><code>a = 2\nb = 3\nresult = a ** b\nprint(\"Exponentiation:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_6","title":"Output:","text":"<pre><code>Exponentiation: 8\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#2-comparison-operators","title":"2. Comparison Operators","text":"<p>Comparison operators are used to compare values and return boolean results.</p>"},{"location":"languages/python/tutorials/operators/math/#21-equal-to","title":"2.1 Equal to (<code>==</code>)","text":"<p>Checks if two values are equal.</p>"},{"location":"languages/python/tutorials/operators/math/#example_7","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = (a == b)\nprint(\"Equal to:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_7","title":"Output:","text":"<pre><code>Equal to: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#22-not-equal-to","title":"2.2 Not equal to (<code>!=</code>)","text":"<p>Checks if two values are not equal.</p>"},{"location":"languages/python/tutorials/operators/math/#example_8","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = (a != b)\nprint(\"Not equal to:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_8","title":"Output:","text":"<pre><code>Not equal to: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#23-greater-than","title":"2.3 Greater than (<code>&gt;</code>)","text":"<p>Checks if one value is greater than another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_9","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = (a &gt; b)\nprint(\"Greater than:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_9","title":"Output:","text":"<pre><code>Greater than: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#24-less-than","title":"2.4 Less than (<code>&lt;</code>)","text":"<p>Checks if one value is less than another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_10","title":"Example:","text":"<pre><code>a = 10\nb = 5\nresult = (a &lt; b)\nprint(\"Less than:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_10","title":"Output:","text":"<pre><code>Less than: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#25-greater-than-or-equal-to","title":"2.5 Greater than or equal to (<code>&gt;=</code>)","text":"<p>Checks if one value is greater than or equal to another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_11","title":"Example:","text":"<pre><code>a = 10\nb = 10\nresult = (a &gt;= b)\nprint(\"Greater than or equal to:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_11","title":"Output:","text":"<pre><code>Greater than or equal to: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#26-less-than-or-equal-to","title":"2.6 Less than or equal to (<code>&lt;=</code>)","text":"<p>Checks if one value is less than or equal to another.</p>"},{"location":"languages/python/tutorials/operators/math/#example_12","title":"Example:","text":"<pre><code>a = 10\nb = 10\nresult = (a &lt;= b)\nprint(\"Less than or equal to:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_12","title":"Output:","text":"<pre><code>Less than or equal to: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#3-assignment-operators","title":"3. Assignment Operators","text":"<p>Assignment operators are used to assign values to variables with operations.</p>"},{"location":"languages/python/tutorials/operators/math/#31-addition-assignment","title":"3.1 Addition Assignment (<code>+=</code>)","text":"<p>Adds and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_13","title":"Example:","text":"<pre><code>a = 10\na += 5\nprint(\"Addition Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_13","title":"Output:","text":"<pre><code>Addition Assignment: 15\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#32-subtraction-assignment-","title":"3.2 Subtraction Assignment (<code>-=</code>)","text":"<p>Subtracts and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_14","title":"Example:","text":"<pre><code>a = 10\na -= 5\nprint(\"Subtraction Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_14","title":"Output:","text":"<pre><code>Subtraction Assignment: 5\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#33-multiplication-assignment","title":"3.3 Multiplication Assignment (<code>*=</code>)","text":"<p>Multiplies and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_15","title":"Example:","text":"<pre><code>a = 10\na *= 5\nprint(\"Multiplication Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_15","title":"Output:","text":"<pre><code>Multiplication Assignment: 50\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#34-division-assignment","title":"3.4 Division Assignment (<code>/=</code>)","text":"<p>Divides and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_16","title":"Example:","text":"<pre><code>a = 10\na /= 5\nprint(\"Division Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_16","title":"Output:","text":"<pre><code>Division Assignment: 2.0\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#35-floor-division-assignment","title":"3.5 Floor Division Assignment (<code>//=</code>)","text":"<p>Floor divides and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_17","title":"Example:","text":"<pre><code>a = 10\na //= 3\nprint(\"Floor Division Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_17","title":"Output:","text":"<pre><code>Floor Division Assignment: 3\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#36-modulus-assignment","title":"3.6 Modulus Assignment (<code>%=</code>)","text":"<p>Applies modulus and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_18","title":"Example:","text":"<pre><code>a = 10\na %= 3\nprint(\"Modulus Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_18","title":"Output:","text":"<pre><code>Modulus Assignment: 1\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#37-exponentiation-assignment","title":"3.7 Exponentiation Assignment (<code>**=</code>)","text":"<p>Raises to the power and assigns the result to the variable.</p>"},{"location":"languages/python/tutorials/operators/math/#example_19","title":"Example:","text":"<pre><code>a = 2\na **= 3\nprint(\"Exponentiation Assignment:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_19","title":"Output:","text":"<pre><code>Exponentiation Assignment: 8\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#4-bitwise-operators","title":"4. Bitwise Operators","text":"<p>Bitwise operators perform operations on the binary representations of integers.</p>"},{"location":"languages/python/tutorials/operators/math/#41-and","title":"4.1 AND (<code>&amp;</code>)","text":"<p>Performs a bitwise AND operation.</p>"},{"location":"languages/python/tutorials/operators/math/#example_20","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a &amp; b\nprint(\"Bitwise AND:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_20","title":"Output:","text":"<pre><code>Bitwise AND: 1\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#42-or","title":"4.2 OR (<code>|</code>)","text":"<p>Performs a bitwise OR operation.</p>"},{"location":"languages/python/tutorials/operators/math/#example_21","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a | b\nprint(\"Bitwise OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_21","title":"Output:","text":"<pre><code>Bitwise OR: 7\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#43-xor","title":"4.3 XOR (<code>^</code>)","text":"<p>Performs a bitwise XOR operation.</p>"},{"location":"languages/python/tutorials/operators/math/#example_22","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nb = 3    # Binary: 0011\nresult = a ^ b\nprint(\"Bitwise XOR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_22","title":"Output:","text":"<pre><code>Bitwise XOR: 6\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#44-not","title":"4.4 NOT (<code>~</code>)","text":"<p>Performs a bitwise NOT operation (one's complement).</p>"},{"location":"languages/python/tutorials/operators/math/#example_23","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = ~a\nprint(\"Bitwise NOT:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_23","title":"Output:","text":"<pre><code>Bitwise NOT: -6\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#45-left-shift","title":"4.5 Left Shift (<code>&lt;&lt;</code>)","text":"<p>Shifts the bits of a number to the left.</p>"},{"location":"languages/python/tutorials/operators/math/#example_24","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = a &lt;&lt; 1\nprint(\"Left Shift:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_24","title":"Output:","text":"<pre><code>Left Shift: 10\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#46-right-shift","title":"4.6 Right Shift (<code>&gt;&gt;</code>)","text":"<p>Shifts the bits of a number to the right.</p>"},{"location":"languages/python/tutorials/operators/math/#example_25","title":"Example:","text":"<pre><code>a = 5    # Binary: 0101\nresult = a &gt;&gt; 1\nprint(\"Right Shift:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#output_25","title":"Output:","text":"<pre><code>Right Shift: 2\n</code></pre>"},{"location":"languages/python/tutorials/operators/math/#conclusion","title":"Conclusion","text":"<p>Python provides a rich set of mathematical operators for performing arithmetic, comparison, assignment, and bitwise operations. Understanding these operators and their usage can greatly enhance your ability to manipulate and analyze data in Python.</p> <p>By practicing the examples provided, you can gain a deeper understanding of how to use these operators effectively in your programming tasks.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/","title":"Python Operators Precedence","text":"<p>Operators precedence determines the order in which different operators are evaluated in an expression. Understanding operator precedence is crucial for writing correct and predictable code. </p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#operator-precedence-order","title":"Operator Precedence Order","text":"<p>Here\u2019s a summary of Python operator precedence from highest to lowest:</p> <ol> <li>Parentheses <code>()</code></li> <li>Exponentiation <code>**</code></li> <li>Unary Plus and Minus, Bitwise NOT <code>+x</code>, <code>-x</code>, <code>~x</code></li> <li>Multiplication, Division, Floor Division, Modulus <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></li> <li>Addition, Subtraction <code>+</code>, <code>-</code></li> <li>Bitwise Shift Operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Bitwise AND <code>&amp;</code></li> <li>Bitwise XOR <code>^</code></li> <li>Bitwise OR <code>|</code></li> <li>Comparison Operators <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li> <li>Boolean NOT <code>not</code></li> <li>Boolean AND <code>and</code></li> <li>Boolean OR <code>or</code></li> <li>Assignment Operators <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, etc.</li> </ol>"},{"location":"languages/python/tutorials/operators/operator_precedence/#1-parentheses","title":"1. Parentheses <code>()</code>","text":"<p>Parentheses have the highest precedence and are used to explicitly define the order of operations.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example","title":"Example:","text":"<pre><code>result = (3 + 5) * 2\nprint(\"Parentheses:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output","title":"Output:","text":"<pre><code>Parentheses: 16\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation","title":"Explanation:","text":"<ul> <li>The expression inside parentheses <code>(3 + 5)</code> is evaluated first, resulting in <code>8</code>.</li> <li>Then, <code>8 * 2</code> is evaluated to give <code>16</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#2-exponentiation","title":"2. Exponentiation <code>**</code>","text":"<p>Exponentiation has higher precedence than multiplication and division.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_1","title":"Example:","text":"<pre><code>result = 2 ** 3 ** 2\nprint(\"Exponentiation:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_1","title":"Output:","text":"<pre><code>Exponentiation: 512\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_1","title":"Explanation:","text":"<ul> <li>Exponentiation is evaluated from right to left, so <code>3 ** 2</code> is evaluated first, which is <code>9</code>.</li> <li>Then, <code>2 ** 9</code> results in <code>512</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#3-unary-plus-and-minus-bitwise-not-x-x-x","title":"3. Unary Plus and Minus, Bitwise NOT <code>+x</code>, <code>-x</code>, <code>~x</code>","text":"<p>Unary operations are evaluated before binary operations.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_2","title":"Example:","text":"<pre><code>result = -5 + 3\nprint(\"Unary Minus:\", result)\n\nresult = ~5\nprint(\"Bitwise NOT:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_2","title":"Output:","text":"<pre><code>Unary Minus: -2\nBitwise NOT: -6\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_2","title":"Explanation:","text":"<ul> <li><code>-5 + 3</code> evaluates to <code>-2</code>.</li> <li>Bitwise NOT of <code>5</code> is <code>-6</code> due to two's complement representation.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#4-multiplication-division-floor-division-modulus","title":"4. Multiplication, Division, Floor Division, Modulus <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>","text":"<p>These operators have higher precedence than addition and subtraction.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_3","title":"Example:","text":"<pre><code>result = 4 + 3 * 2\nprint(\"Multiplication:\", result)\n\nresult = 10 / 2 - 3\nprint(\"Division:\", result)\n\nresult = 10 // 3 % 2\nprint(\"Floor Division and Modulus:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_3","title":"Output:","text":"<pre><code>Multiplication: 10\nDivision: 2.0\nFloor Division and Modulus: 1\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_3","title":"Explanation:","text":"<ul> <li><code>3 * 2</code> is evaluated first, resulting in <code>6</code>, then <code>4 + 6</code> results in <code>10</code>.</li> <li><code>10 / 2</code> is evaluated first, resulting in <code>5.0</code>, then <code>5.0 - 3</code> results in <code>2.0</code>.</li> <li><code>10 // 3</code> results in <code>3</code>, then <code>3 % 2</code> results in <code>1</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#5-addition-subtraction-","title":"5. Addition, Subtraction <code>+</code>, <code>-</code>","text":"<p>These operators have lower precedence than multiplication and division.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_4","title":"Example:","text":"<pre><code>result = 5 + 3 - 2\nprint(\"Addition and Subtraction:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_4","title":"Output:","text":"<pre><code>Addition and Subtraction: 6\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_4","title":"Explanation:","text":"<ul> <li>Addition and subtraction are evaluated from left to right, so <code>5 + 3</code> results in <code>8</code>, then <code>8 - 2</code> results in <code>6</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#6-bitwise-shift-operators","title":"6. Bitwise Shift Operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>","text":"<p>Bitwise shift operators shift bits to the left or right.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_5","title":"Example:","text":"<pre><code>result = 2 &lt;&lt; 1\nprint(\"Left Shift:\", result)\n\nresult = 4 &gt;&gt; 1\nprint(\"Right Shift:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_5","title":"Output:","text":"<pre><code>Left Shift: 4\nRight Shift: 2\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_5","title":"Explanation:","text":"<ul> <li><code>2 &lt;&lt; 1</code> shifts <code>2</code> left by 1 position, resulting in <code>4</code>.</li> <li><code>4 &gt;&gt; 1</code> shifts <code>4</code> right by 1 position, resulting in <code>2</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#7-bitwise-and","title":"7. Bitwise AND <code>&amp;</code>","text":"<p>Bitwise AND has lower precedence than shift operators.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_6","title":"Example:","text":"<pre><code>result = 6 &amp; 3\nprint(\"Bitwise AND:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_6","title":"Output:","text":"<pre><code>Bitwise AND: 2\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_6","title":"Explanation:","text":"<ul> <li><code>6</code> (binary <code>0110</code>) AND <code>3</code> (binary <code>0011</code>) results in <code>2</code> (binary <code>0010</code>).</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#8-bitwise-xor","title":"8. Bitwise XOR <code>^</code>","text":"<p>Bitwise XOR has the same precedence level as Bitwise AND.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_7","title":"Example:","text":"<pre><code>result = 6 ^ 3\nprint(\"Bitwise XOR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_7","title":"Output:","text":"<pre><code>Bitwise XOR: 5\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_7","title":"Explanation:","text":"<ul> <li><code>6</code> (binary <code>0110</code>) XOR <code>3</code> (binary <code>0011</code>) results in <code>5</code> (binary <code>0101</code>).</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#9-bitwise-or","title":"9. Bitwise OR <code>|</code>","text":"<p>Bitwise OR has the same precedence level as Bitwise XOR.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_8","title":"Example:","text":"<pre><code>result = 6 | 3\nprint(\"Bitwise OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_8","title":"Output:","text":"<pre><code>Bitwise OR: 7\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_8","title":"Explanation:","text":"<ul> <li><code>6</code> (binary <code>0110</code>) OR <code>3</code> (binary <code>0011</code>) results in <code>7</code> (binary <code>0111</code>).</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#10-comparison-operators","title":"10. Comparison Operators <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>","text":"<p>Comparison operators have lower precedence than arithmetic operators.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_9","title":"Example:","text":"<pre><code>result = 5 &gt; 3 and 2 &lt; 4\nprint(\"Comparison Operators:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_9","title":"Output:","text":"<pre><code>Comparison Operators: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_9","title":"Explanation:","text":"<ul> <li>Both <code>5 &gt; 3</code> and <code>2 &lt; 4</code> are <code>True</code>, so <code>True and True</code> results in <code>True</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#11-boolean-not-not","title":"11. Boolean NOT <code>not</code>","text":"<p>The <code>not</code> operator has higher precedence than <code>and</code> and <code>or</code>.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_10","title":"Example:","text":"<pre><code>result = not (5 &gt; 3) and 2 &lt; 4\nprint(\"Boolean NOT:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_10","title":"Output:","text":"<pre><code>Boolean NOT: False\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_10","title":"Explanation:","text":"<ul> <li><code>not (5 &gt; 3)</code> evaluates to <code>False</code>, so <code>False and 2 &lt; 4</code> results in <code>False</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#12-boolean-and-and","title":"12. Boolean AND <code>and</code>","text":"<p>The <code>and</code> operator has higher precedence than <code>or</code>.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_11","title":"Example:","text":"<pre><code>result = True and False or True\nprint(\"Boolean AND and OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_11","title":"Output:","text":"<pre><code>Boolean AND and OR: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_11","title":"Explanation:","text":"<ul> <li><code>True and False</code> is <code>False</code>, and <code>False or True</code> is <code>True</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#13-boolean-or-or","title":"13. Boolean OR <code>or</code>","text":"<p>The <code>or</code> operator has the lowest precedence among boolean operators.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_12","title":"Example:","text":"<pre><code>result = False or True\nprint(\"Boolean OR:\", result)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_12","title":"Output:","text":"<pre><code>Boolean OR: True\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_12","title":"Explanation:","text":"<ul> <li><code>False or True</code> results in <code>True</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#14-assignment-operators-etc","title":"14. Assignment Operators <code>=</code>, <code>+=</code>, <code>-=</code>, etc.","text":"<p>Assignment operators have the lowest precedence among operators.</p>"},{"location":"languages/python/tutorials/operators/operator_precedence/#example_13","title":"Example:","text":"<pre><code>a = 5\na += 3\nprint(\"Assignment Operator:\", a)\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#output_13","title":"Output:","text":"<pre><code>Assignment Operator: 8\n</code></pre>"},{"location":"languages/python/tutorials/operators/operator_precedence/#explanation_13","title":"Explanation:","text":"<ul> <li><code>a += 3</code> is evaluated as <code>a = a + 3</code>, resulting in <code>8</code>.</li> </ul>"},{"location":"languages/python/tutorials/operators/operator_precedence/#conclusion","title":"Conclusion","text":"<p>Understanding operator precedence in Python is crucial for writing correct expressions and avoiding unexpected results. By practicing and applying these principles, you can ensure that your code behaves as intended and maintains clarity in complex expressions.</p>"},{"location":"languages/scala/","title":"Welcome to Scala Programming Languages Notes","text":"<p>Welcome to the Scala Programming Languages Notes! This collection serves as a comprehensive resource for anyone looking to master Scala, a versatile language known for its expressive syntax and powerful features that blend functional and object-oriented programming.</p>"},{"location":"languages/scala/#contents","title":"Contents","text":"<ol> <li>Tutorial    Dive into the tutorial section, where you will find step-by-step guides covering the essentials of Scala programming. From setting up your development environment to writing your first Scala application, this section will equip you with the knowledge to get started and succeed in your Scala programming journey.</li> </ol>"},{"location":"languages/scala/tutorial/","title":"Welcome to Scala Tutorials","text":"<p>Welcome to the Scala Tutorials! This guide is designed to help you learn Scala, a powerful programming language that combines object-oriented and functional programming paradigms. Whether you're a beginner or looking to deepen your understanding of Scala, these tutorials will provide you with the knowledge and practical skills you need.</p>"},{"location":"languages/scala/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    Begin your journey with the fundamental concepts of Scala. This section covers installation, syntax, data types, and basic programming constructs, helping you to set a solid foundation for more advanced topics.</li> </ol>"},{"location":"languages/scala/tutorial/basics/","title":"Scala Programming Language Tutorial","text":""},{"location":"languages/scala/tutorial/basics/#overview","title":"Overview","text":"<p>Scala is a high-level programming language that combines functional programming with object-oriented programming. It is known for its concise syntax, powerful type inference, and strong support for concurrent programming.</p>"},{"location":"languages/scala/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/scala/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple Scala program to print \"Hello, World!\" to the console.</p> <pre><code>object HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello, World!\")\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/scala/tutorial/basics/#data-types","title":"Data Types","text":""},{"location":"languages/scala/tutorial/basics/#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>Int: Integer type</li> <li>Double: Double precision floating-point type</li> <li>Char: Character type</li> <li>Boolean: Boolean type</li> </ul>"},{"location":"languages/scala/tutorial/basics/#example","title":"Example","text":"<pre><code>object DataTypes {\n  def main(args: Array[String]): Unit = {\n    val age: Int = 25\n    val height: Double = 5.9\n    val initial: Char = 'A'\n    val isStudent: Boolean = true\n\n    println(s\"Age: $age\")\n    println(s\"Height: $height\")\n    println(s\"Initial: $initial\")\n    println(s\"Is Student: $isStudent\")\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/scala/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>object IfElseExample {\n  def main(args: Array[String]): Unit = {\n    val score: Int = 85\n\n    if (score &gt;= 90) {\n      println(\"Grade: A\")\n    } else if (score &gt;= 80) {\n      println(\"Grade: B\")\n    } else {\n      println(\"Grade: C\")\n    }\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#match-expression","title":"Match Expression","text":"<pre><code>object MatchExample {\n  def main(args: Array[String]): Unit = {\n    val day: Int = 3\n\n    day match {\n      case 1 =&gt; println(\"Monday\")\n      case 2 =&gt; println(\"Tuesday\")\n      case 3 =&gt; println(\"Wednesday\")\n      case _ =&gt; println(\"Invalid day\")\n    }\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#functions","title":"Functions","text":""},{"location":"languages/scala/tutorial/basics/#function-definition","title":"Function Definition","text":"<pre><code>object FunctionsExample {\n  def greet(name: String): String = {\n    s\"Hello, $name!\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(greet(\"Alice\"))\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#function-with-multiple-parameters","title":"Function with Multiple Parameters","text":"<pre><code>object AddExample {\n  def add(a: Int, b: Int): Int = {\n    a + b\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(add(5, 7))\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"languages/scala/tutorial/basics/#defining-a-class","title":"Defining a Class","text":"<pre><code>class Person(val name: String, val age: Int) {\n  def introduce(): Unit = {\n    println(s\"Hi, my name is $name and I am $age years old.\")\n  }\n}\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    val person1 = new Person(\"Alice\", 30)\n    person1.introduce()\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#companion-object","title":"Companion Object","text":"<pre><code>class Circle(val radius: Double) {\n  def area(): Double = {\n    math.Pi * radius * radius\n  }\n}\n\nobject Circle {\n  def apply(radius: Double): Circle = new Circle(radius)\n}\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    val circle = Circle(5.0)\n    println(s\"Area of the circle: ${circle.area()}\")\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#inheritance-and-polymorphism","title":"Inheritance and Polymorphism","text":""},{"location":"languages/scala/tutorial/basics/#inheritance-example","title":"Inheritance Example","text":"<pre><code>class Animal {\n  def speak(): Unit = {\n    println(\"Animal makes a sound.\")\n  }\n}\n\nclass Dog extends Animal {\n  override def speak(): Unit = {\n    println(\"Dog barks.\")\n  }\n}\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    val myDog = new Dog()\n    myDog.speak()\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#polymorphism-example","title":"Polymorphism Example","text":"<pre><code>object PolymorphismExample {\n  def makeSound(animal: Animal): Unit = {\n    animal.speak()\n  }\n\n  def main(args: Array[String]): Unit = {\n    val dog = new Dog()\n    makeSound(dog) // Calls Dog's speak method\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#collections","title":"Collections","text":""},{"location":"languages/scala/tutorial/basics/#list","title":"List","text":"<pre><code>object ListExample {\n  def main(args: Array[String]): Unit = {\n    val fruits = List(\"Apple\", \"Banana\", \"Cherry\")\n\n    fruits.foreach(fruit =&gt; println(fruit))\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#map","title":"Map","text":"<pre><code>object MapExample {\n  def main(args: Array[String]): Unit = {\n    val ages = Map(\"Alice\" -&gt; 30, \"Bob\" -&gt; 25)\n\n    ages.foreach { case (name, age) =&gt; println(s\"$name is $age years old.\") }\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#pattern-matching","title":"Pattern Matching","text":""},{"location":"languages/scala/tutorial/basics/#basic-pattern-matching","title":"Basic Pattern Matching","text":"<pre><code>object PatternMatchingExample {\n  def main(args: Array[String]): Unit = {\n    val number: Any = 10\n\n    number match {\n      case 1 =&gt; println(\"One\")\n      case 2 =&gt; println(\"Two\")\n      case _ =&gt; println(\"Other\")\n    }\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#matching-on-type","title":"Matching on Type","text":"<pre><code>object TypeMatchingExample {\n  def process(value: Any): Unit = {\n    value match {\n      case s: String =&gt; println(s\"String: $s\")\n      case i: Int =&gt; println(s\"Integer: $i\")\n      case _ =&gt; println(\"Other type\")\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    process(\"Hello\")\n    process(42)\n    process(3.14)\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#exception-handling","title":"Exception Handling","text":""},{"location":"languages/scala/tutorial/basics/#try-catch-block","title":"Try-Catch Block","text":"<pre><code>object ExceptionHandlingExample {\n  def main(args: Array[String]): Unit = {\n    try {\n      val result = 10 / 0\n    } catch {\n      case e: ArithmeticException =&gt; println(\"Cannot divide by zero\")\n    } finally {\n      println(\"This block is always executed.\")\n    }\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#concurrency","title":"Concurrency","text":""},{"location":"languages/scala/tutorial/basics/#using-futures","title":"Using Futures","text":"<pre><code>import scala.concurrent.{Future, Await}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\n\nobject FutureExample {\n  def main(args: Array[String]): Unit = {\n    val future = Future {\n      Thread.sleep(1000)\n      \"Hello from the future!\"\n    }\n\n    val result = Await.result(future, 2.seconds)\n    println(result)\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#using-actors","title":"Using Actors","text":"<pre><code>import akka.actor.{Actor, ActorSystem, Props}\n\nclass HelloActor extends Actor {\n  def receive: Receive = {\n    case \"Hello\" =&gt; println(\"Hello, World!\")\n    case _ =&gt; println(\"Unknown message\")\n  }\n}\n\nobject ActorExample {\n  def main(args: Array[String]): Unit = {\n    val system = ActorSystem(\"HelloActorSystem\")\n    val helloActor = system.actorOf(Props[HelloActor], \"helloActor\")\n\n    helloActor ! \"Hello\"\n    helloActor ! \"Goodbye\"\n  }\n}\n</code></pre>"},{"location":"languages/scala/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the fundamental concepts and syntax of Scala programming. Scala combines object-oriented and functional programming paradigms, making it a powerful language for a variety of applications. For further learning, refer to the Scala Documentation.</p>"},{"location":"os/","title":"Welcome to Operating Systems Notes","text":"<p>Welcome to the comprehensive guide on Operating Systems. This collection of notes is designed to give you a solid foundation in understanding various operating systems, their components, and their functionalities. Explore the following sections to deepen your knowledge:</p> <ol> <li>Linux: Dive into the world of Linux, an open-source operating system known for its robustness, security, and versatility. This section covers everything from basic commands to advanced system administration and configuration.</li> </ol> <p>Feel free to navigate through the sections to enhance your understanding and proficiency in operating systems!</p>"},{"location":"os/Linux/","title":"Welcome to Linux Notes","text":"<ol> <li>File &amp; Directory - Explore the essentials of file and directory management, including commands for creating, deleting, and navigating the file system.<ul> <li>File and Directory Management - Detailed guide on managing files and directories effectively using various Linux commands.</li> <li>File Permissions - Learn how to manage file permissions to control access and secure your files.</li> <li>File Viewing and Editing - Techniques and tools for viewing and editing files in Linux.</li> </ul> </li> <li>Firewall &amp; Networking - Comprehensive guide on setting up and managing firewalls and network configurations.<ul> <li>Firewalls and Networking - Detailed guide on managing firewalls and network connections.</li> <li>Network Configuration and Monitoring - Understand network configurations and how to monitor network activity and performance.</li> <li>SSH - Secure Shell (SSH) guide for remote login and secure communication over unsecured networks.</li> </ul> </li> <li>System Management - Learn about system monitoring, process management, and performance tuning to maintain a healthy Linux environment.<ul> <li>System Information - Retrieve and interpret various system information and hardware details.</li> <li>Disk Management - Learn about managing disks, partitions, and filesystems in Linux.</li> <li>User and Group Management - Manage users and groups, including creation, deletion, and permission settings.</li> <li>Package Management - Manage software packages, including installation, updates, and removal.</li> <li>Process Management - Learn about monitoring and controlling processes in Linux.</li> </ul> </li> <li>Editors - Get familiar with popular text editors in Linux, their features, and how to use them effectively for various tasks.<ul> <li>Editor - Nano - A beginner-friendly, easy-to-use text editor for quick edits and simple tasks.</li> <li>Editor - Vim - A powerful and highly configurable text editor with a steep learning curve but extensive capabilities.</li> <li>Editor - Gedit - A simple and intuitive graphical text editor, suitable for everyday use.</li> </ul> </li> </ol>"},{"location":"os/Linux/editors/","title":"Editors","text":"<p>Get familiar with popular text editors in Linux, their features, and how to use them effectively for various tasks.</p> <ul> <li>Nano - A beginner-friendly, easy-to-use text editor for quick edits and simple tasks.</li> <li>Vim - A powerful and highly configurable text editor with a steep learning curve but extensive capabilities.</li> <li>Gedit - A simple and intuitive graphical text editor, suitable for everyday use.</li> </ul>"},{"location":"os/Linux/editors/gedit/","title":"Linux <code>gedit</code> Commands","text":""},{"location":"os/Linux/editors/gedit/#overview","title":"Overview","text":"<p><code>gedit</code> is a simple text editor for the GNOME desktop environment. It is known for its ease of use and is suitable for editing text files, programming scripts, and more. This document covers basic <code>gedit</code> commands and operations.</p>"},{"location":"os/Linux/editors/gedit/#opening-files","title":"Opening Files","text":""},{"location":"os/Linux/editors/gedit/#open-a-file","title":"Open a File","text":"<p>To open a file with <code>gedit</code>, use the following command:</p> <pre><code>gedit &lt;file_name&gt;\n</code></pre>"},{"location":"os/Linux/editors/gedit/#example","title":"Example","text":"<pre><code>gedit example.txt\n# Opens 'example.txt' in gedit\n</code></pre>"},{"location":"os/Linux/editors/gedit/#editing-files","title":"Editing Files","text":""},{"location":"os/Linux/editors/gedit/#create-a-new-file","title":"Create a New File","text":"<p>To create a new file, simply open <code>gedit</code> without specifying a file name:</p> <pre><code>gedit\n</code></pre>"},{"location":"os/Linux/editors/gedit/#example_1","title":"Example","text":"<pre><code>gedit\n# Opens a new, untitled document in gedit\n</code></pre>"},{"location":"os/Linux/editors/gedit/#save-changes","title":"Save Changes","text":"<p>To save changes to a file, use the graphical interface:</p> <ol> <li>Click <code>File</code> &gt; <code>Save</code> or press <code>Ctrl + S</code>.</li> <li>Choose the file name and location, then click <code>Save</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#example_2","title":"Example","text":"<ol> <li>Make edits to the document.</li> <li>Press <code>Ctrl + S</code> to save.</li> </ol>"},{"location":"os/Linux/editors/gedit/#save-as","title":"Save As","text":"<p>To save the file with a new name or location:</p> <ol> <li>Click <code>File</code> &gt; <code>Save As...</code> or press <code>Ctrl + Shift + S</code>.</li> <li>Enter the new file name and location, then click <code>Save</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#example_3","title":"Example","text":"<ol> <li>Click <code>File</code> &gt; <code>Save As...</code>.</li> <li>Enter a new name like <code>newfile.txt</code> and select the location.</li> <li>Click <code>Save</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#undo-and-redo","title":"Undo and Redo","text":"<p>To undo or redo changes:</p> <ul> <li>Undo: <code>Ctrl + Z</code></li> <li>Redo: <code>Ctrl + Y</code></li> </ul>"},{"location":"os/Linux/editors/gedit/#example_4","title":"Example","text":"<pre><code># Press Ctrl + Z to undo the last action\n# Press Ctrl + Y to redo the action\n</code></pre>"},{"location":"os/Linux/editors/gedit/#searching-and-replacing","title":"Searching and Replacing","text":""},{"location":"os/Linux/editors/gedit/#search-for-text","title":"Search for Text","text":"<p>To search for text within the file:</p> <ol> <li>Press <code>Ctrl + F</code>.</li> <li>Enter the search term and press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#example_5","title":"Example","text":"<ol> <li>Press <code>Ctrl + F</code>.</li> <li>Type <code>search_term</code> and press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#replace-text","title":"Replace Text","text":"<p>To replace text within the file:</p> <ol> <li>Press <code>Ctrl + H</code>.</li> <li>Enter the search term and the replacement term.</li> <li>Click <code>Replace</code> or <code>Replace All</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#example_6","title":"Example","text":"<ol> <li>Press <code>Ctrl + H</code>.</li> <li>Enter <code>old_term</code> in the search box and <code>new_term</code> in the replace box.</li> <li>Click <code>Replace</code> or <code>Replace All</code>.</li> </ol>"},{"location":"os/Linux/editors/gedit/#other-useful-commands","title":"Other Useful Commands","text":""},{"location":"os/Linux/editors/gedit/#open-multiple-files","title":"Open Multiple Files","text":"<p>To open multiple files at once, list them after the <code>gedit</code> command:</p> <pre><code>gedit file1.txt file2.txt\n</code></pre>"},{"location":"os/Linux/editors/gedit/#example_7","title":"Example","text":"<pre><code>gedit file1.txt file2.txt\n# Opens 'file1.txt' and 'file2.txt' in separate tabs\n</code></pre>"},{"location":"os/Linux/editors/gedit/#open-files-from-a-directory","title":"Open Files from a Directory","text":"<p>To open all text files in a directory:</p> <pre><code>gedit /path/to/directory/*.txt\n</code></pre>"},{"location":"os/Linux/editors/gedit/#example_8","title":"Example","text":"<pre><code>gedit /home/user/documents/*.txt\n# Opens all '.txt' files in the '/home/user/documents' directory\n</code></pre>"},{"location":"os/Linux/editors/gedit/#open-files-with-specific-encoding","title":"Open Files with Specific Encoding","text":"<p>To open a file with a specific encoding, use the <code>--encoding</code> option:</p> <pre><code>gedit --encoding &lt;encoding&gt; &lt;file_name&gt;\n</code></pre>"},{"location":"os/Linux/editors/gedit/#example_9","title":"Example","text":"<pre><code>gedit --encoding utf-8 example.txt\n# Opens 'example.txt' with UTF-8 encoding\n</code></pre>"},{"location":"os/Linux/editors/gedit/#summary","title":"Summary","text":"<p><code>gedit</code> is a versatile text editor with a straightforward graphical interface. It allows for simple text editing tasks such as creating, opening, saving, and searching files. For more detailed information and options, refer to the <code>gedit</code> documentation or the GNOME Help.</p>"},{"location":"os/Linux/editors/nano/","title":"Linux <code>nano</code> Commands","text":""},{"location":"os/Linux/editors/nano/#overview","title":"Overview","text":"<p><code>nano</code> is a simple and user-friendly text editor for the command line. It is often used for editing configuration files and scripting. This document provides a guide to common <code>nano</code> commands and operations.</p>"},{"location":"os/Linux/editors/nano/#basic-commands","title":"Basic Commands","text":""},{"location":"os/Linux/editors/nano/#open-a-file","title":"Open a File","text":"<p>To open a file in <code>nano</code>, simply specify the file name.</p> <pre><code>nano &lt;file_name&gt;\n</code></pre>"},{"location":"os/Linux/editors/nano/#example","title":"Example","text":"<pre><code>nano example.txt\n# Opens 'example.txt' in the nano editor\n</code></pre>"},{"location":"os/Linux/editors/nano/#save-changes","title":"Save Changes","text":"<p>To save changes while editing, press <code>Ctrl + O</code> (Write Out), then press <code>Enter</code> to confirm the file name.</p>"},{"location":"os/Linux/editors/nano/#example_1","title":"Example","text":"<ol> <li>Edit the file.</li> <li>Press <code>Ctrl + O</code>.</li> <li>Press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/nano/#exit-nano","title":"Exit <code>nano</code>","text":"<p>To exit <code>nano</code>, press <code>Ctrl + X</code>. If you have unsaved changes, <code>nano</code> will prompt you to save them.</p>"},{"location":"os/Linux/editors/nano/#example_2","title":"Example","text":"<ol> <li>Press <code>Ctrl + X</code>.</li> <li>If prompted to save changes, press <code>Y</code> (Yes) or <code>N</code> (No).</li> </ol>"},{"location":"os/Linux/editors/nano/#cut-text","title":"Cut Text","text":"<p>To cut text, use <code>Ctrl + K</code>. This will cut the current line or selected text.</p>"},{"location":"os/Linux/editors/nano/#example_3","title":"Example","text":"<ol> <li>Place the cursor on the line you want to cut.</li> <li>Press <code>Ctrl + K</code>.</li> <li>The line will be removed and stored in the clipboard.</li> </ol>"},{"location":"os/Linux/editors/nano/#paste-text","title":"Paste Text","text":"<p>To paste text that was cut or copied, use <code>Ctrl + U</code>.</p>"},{"location":"os/Linux/editors/nano/#example_4","title":"Example","text":"<ol> <li>Move the cursor to the location where you want to paste.</li> <li>Press <code>Ctrl + U</code>.</li> </ol>"},{"location":"os/Linux/editors/nano/#copy-text","title":"Copy Text","text":"<p>To copy text, use <code>Ctrl + ^</code> to set the mark, move the cursor to select the text, and then press <code>Ctrl + K</code> to cut. Paste it using <code>Ctrl + U</code>.</p>"},{"location":"os/Linux/editors/nano/#example_5","title":"Example","text":"<ol> <li>Press <code>Ctrl + ^</code> to set the mark.</li> <li>Move the cursor to select the text.</li> <li>Press <code>Ctrl + K</code> to cut the selected text.</li> <li>Move the cursor to the paste location.</li> <li>Press <code>Ctrl + U</code> to paste.</li> </ol>"},{"location":"os/Linux/editors/nano/#search-for-text","title":"Search for Text","text":"<p>To search for text within the file, press <code>Ctrl + W</code> (Where Is), then enter the search term and press <code>Enter</code>.</p>"},{"location":"os/Linux/editors/nano/#example_6","title":"Example","text":"<ol> <li>Press <code>Ctrl + W</code>.</li> <li>Enter the search term.</li> <li>Press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/nano/#replace-text","title":"Replace Text","text":"<p>To replace text, press <code>Ctrl + \\</code> (Replace), then enter the search term, press <code>Enter</code>, enter the replacement term, and press <code>Enter</code>.</p>"},{"location":"os/Linux/editors/nano/#example_7","title":"Example","text":"<ol> <li>Press <code>Ctrl + \\</code>.</li> <li>Enter the search term.</li> <li>Press <code>Enter</code>.</li> <li>Enter the replacement term.</li> <li>Press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/nano/#go-to-line-number","title":"Go to Line Number","text":"<p>To move the cursor to a specific line number, press <code>Ctrl + _</code> (Underscore), enter the line number, and press <code>Enter</code>.</p>"},{"location":"os/Linux/editors/nano/#example_8","title":"Example","text":"<ol> <li>Press <code>Ctrl + _</code>.</li> <li>Enter the line number (e.g., <code>10</code>).</li> <li>Press <code>Enter</code>.</li> </ol>"},{"location":"os/Linux/editors/nano/#show-line-numbers","title":"Show Line Numbers","text":"<p>To enable line numbers, press <code>Ctrl + C</code> to view the current line number, or check the status bar for line numbers.</p>"},{"location":"os/Linux/editors/nano/#example_9","title":"Example","text":"<ol> <li>Press <code>Ctrl + C</code> to view the current line number.</li> <li>Check the status bar at the bottom of the editor.</li> </ol>"},{"location":"os/Linux/editors/nano/#summary","title":"Summary","text":"<p><code>nano</code> is a powerful yet easy-to-use text editor that allows you to efficiently edit files from the command line. Understanding these basic commands will help you navigate and modify files effectively. For more detailed information, refer to the <code>nano</code> man pages by running <code>man nano</code> in the terminal.</p>"},{"location":"os/Linux/editors/vim/","title":"Linux <code>vim</code> Commands","text":""},{"location":"os/Linux/editors/vim/#overview","title":"Overview","text":"<p><code>vim</code> (Vi IMproved) is a powerful text editor in Linux with extensive features for editing text files. This document covers essential <code>vim</code> commands and operations to help you get started.</p>"},{"location":"os/Linux/editors/vim/#basic-usage","title":"Basic Usage","text":""},{"location":"os/Linux/editors/vim/#opening-a-file","title":"Opening a File","text":"<p>To open a file with <code>vim</code>, use the following command:</p> <pre><code>vim &lt;file_name&gt;\n</code></pre>"},{"location":"os/Linux/editors/vim/#example","title":"Example","text":"<pre><code>vim example.txt\n# Opens 'example.txt' in vim\n</code></pre>"},{"location":"os/Linux/editors/vim/#vim-modes","title":"<code>vim</code> Modes","text":"<p><code>vim</code> operates in different modes, primarily:</p> <ul> <li>Normal Mode: For navigation and command execution (default mode when <code>vim</code> starts).</li> <li>Insert Mode: For text insertion.</li> <li>Visual Mode: For selecting text.</li> <li>Command-Line Mode: For executing commands (entered by pressing <code>:</code> in Normal Mode).</li> </ul>"},{"location":"os/Linux/editors/vim/#normal-mode-commands","title":"Normal Mode Commands","text":""},{"location":"os/Linux/editors/vim/#navigation","title":"Navigation","text":"<ul> <li>Move Cursor: <code>h</code> (left), <code>j</code> (down), <code>k</code> (up), <code>l</code> (right)</li> <li>Move by Words: <code>w</code> (forward), <code>b</code> (backward)</li> <li>Move to Line Start/End: <code>0</code> (start), <code>$</code> (end)</li> <li>Move to Specific Line: <code>:n</code> (where <code>n</code> is the line number)</li> </ul>"},{"location":"os/Linux/editors/vim/#example_1","title":"Example","text":"<pre><code># Move cursor to the 10th line\n:10\n</code></pre>"},{"location":"os/Linux/editors/vim/#deleting-text","title":"Deleting Text","text":"<ul> <li>Delete Character: <code>x</code></li> <li>Delete Line: <code>dd</code></li> <li>Delete Word: <code>dw</code></li> <li>Delete to End of Line: <code>d$</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_2","title":"Example","text":"<pre><code># Delete the current line\ndd\n</code></pre>"},{"location":"os/Linux/editors/vim/#copying-and-pasting","title":"Copying and Pasting","text":"<ul> <li>Copy Line: <code>yy</code></li> <li>Paste: <code>p</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_3","title":"Example","text":"<pre><code># Copy the current line and paste it below\nyy\np\n</code></pre>"},{"location":"os/Linux/editors/vim/#undo-and-redo","title":"Undo and Redo","text":"<ul> <li>Undo: <code>u</code></li> <li>Redo: <code>Ctrl + r</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_4","title":"Example","text":"<pre><code># Undo the last change\nu\n</code></pre>"},{"location":"os/Linux/editors/vim/#insert-mode-commands","title":"Insert Mode Commands","text":""},{"location":"os/Linux/editors/vim/#entering-insert-mode","title":"Entering Insert Mode","text":"<ul> <li>Insert Before Cursor: <code>i</code></li> <li>Insert After Cursor: <code>a</code></li> <li>Append After Line: <code>A</code></li> <li>Insert New Line: <code>o</code> (below), <code>O</code> (above)</li> </ul>"},{"location":"os/Linux/editors/vim/#example_5","title":"Example","text":"<pre><code># Enter Insert Mode and type text\niHello, World!\n</code></pre>"},{"location":"os/Linux/editors/vim/#exiting-insert-mode","title":"Exiting Insert Mode","text":"<ul> <li>Return to Normal Mode: <code>Esc</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_6","title":"Example","text":"<pre><code># Press Esc to return to Normal Mode\n</code></pre>"},{"location":"os/Linux/editors/vim/#visual-mode-commands","title":"Visual Mode Commands","text":""},{"location":"os/Linux/editors/vim/#selecting-text","title":"Selecting Text","text":"<ul> <li>Enter Visual Mode: <code>v</code></li> <li>Select Whole Line: <code>V</code></li> <li>Select Block: <code>Ctrl + v</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_7","title":"Example","text":"<pre><code># Enter Visual Mode and select text\nv\n</code></pre>"},{"location":"os/Linux/editors/vim/#copying-and-pasting-in-visual-mode","title":"Copying and Pasting in Visual Mode","text":"<ul> <li>Copy: <code>y</code> (after selection)</li> <li>Paste: <code>p</code> (after selection)</li> </ul>"},{"location":"os/Linux/editors/vim/#example_8","title":"Example","text":"<pre><code># Select text and copy it\nv\ny\n</code></pre>"},{"location":"os/Linux/editors/vim/#command-line-mode-commands","title":"Command-Line Mode Commands","text":""},{"location":"os/Linux/editors/vim/#saving-and-quitting","title":"Saving and Quitting","text":"<ul> <li>Save and Quit: <code>:wq</code> or <code>:x</code></li> <li>Save: <code>:w</code></li> <li>Quit Without Saving: <code>:q!</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_9","title":"Example","text":"<pre><code># Save changes and exit\n:wq\n</code></pre>"},{"location":"os/Linux/editors/vim/#searching-and-replacing","title":"Searching and Replacing","text":"<ul> <li>Search: <code>/search_term</code></li> <li>Replace: <code>:s/old/new/g</code> (for current line), <code>:%s/old/new/g</code> (for entire file)</li> </ul>"},{"location":"os/Linux/editors/vim/#example_10","title":"Example","text":"<pre><code># Search for 'example' in the file\n/example\n\n# Replace 'foo' with 'bar' in the entire file\n:%s/foo/bar/g\n</code></pre>"},{"location":"os/Linux/editors/vim/#miscellaneous-commands","title":"Miscellaneous Commands","text":""},{"location":"os/Linux/editors/vim/#show-line-numbers","title":"Show Line Numbers","text":"<p>To show line numbers, use:</p> <pre><code>:set number\n</code></pre>"},{"location":"os/Linux/editors/vim/#example_11","title":"Example","text":"<pre><code># Enable line numbers\n:set number\n</code></pre>"},{"location":"os/Linux/editors/vim/#split-windows","title":"Split Windows","text":"<ul> <li>Horizontal Split: <code>:split &lt;file&gt;</code></li> <li>Vertical Split: <code>:vsplit &lt;file&gt;</code></li> <li>Navigate Between Splits: <code>Ctrl + w</code>, then use <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></li> </ul>"},{"location":"os/Linux/editors/vim/#example_12","title":"Example","text":"<pre><code># Split window horizontally and open 'file1.txt'\n:split file1.txt\n</code></pre>"},{"location":"os/Linux/editors/vim/#summary","title":"Summary","text":"<p><code>vim</code> is a versatile text editor with powerful features for efficient text editing. Understanding and mastering the different modes, commands, and shortcuts will enhance your productivity. For more detailed information and advanced features, refer to the Vim Documentation.</p>"},{"location":"os/Linux/file_directory_mgmt/","title":"File &amp; Directory","text":"<p>Explore the essentials of file and directory management, including commands for creating, deleting, and navigating the file system.</p> <ul> <li>File and Directory Management - Detailed guide on managing files and directories effectively using various Linux commands</li> <li>File Permissions - Learn how to manage file permissions to control access and secure your files.</li> <li>File Viewing and Editing - Techniques and tools for viewing and editing files in Linux.</li> </ul>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/","title":"Linux File and Directory Management Commands","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#overview","title":"Overview","text":"<p>Linux provides a set of commands for managing files and directories in the filesystem. These commands allow you to create, delete, move, and manipulate files and directories. This document covers basic and commonly used file and directory management commands.</p>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#display-current-directory","title":"Display Current Directory","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#pwd","title":"<code>pwd</code>","text":"<p>Prints the current working directory.</p> <pre><code>pwd\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example","title":"Example","text":"<pre><code>pwd\n# Output: /home/user\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#list-files-and-directories","title":"List Files and Directories","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#ls","title":"<code>ls</code>","text":"<p>Lists files and directories in the current directory.</p> <pre><code>ls\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_1","title":"Example","text":"<pre><code>ls\n# Output: file1.txt  file2.txt  directory1\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#ls-l","title":"<code>ls -l</code>","text":"<p>Lists files and directories with detailed information, including permissions, ownership, and size.</p> <pre><code>ls -l\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_2","title":"Example","text":"<pre><code>ls -l\n# Output:\n# -rw-r--r-- 1 user user  1234 Aug  3 10:00 file1.txt\n# drwxr-xr-x 2 user user  4096 Aug  3 10:00 directory1\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#ls-a","title":"<code>ls -a</code>","text":"<p>Lists all files, including hidden files (those starting with a dot).</p> <pre><code>ls -a\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_3","title":"Example","text":"<pre><code>ls -a\n# Output: .  ..  .hiddenfile  file1.txt  directory1\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#change-directory","title":"Change Directory","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#cd-directory","title":"<code>cd &lt;directory&gt;</code>","text":"<p>Changes the current working directory to the specified directory.</p> <pre><code>cd &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_4","title":"Example","text":"<pre><code>cd Documents\n# Changes to the 'Documents' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#cd","title":"<code>cd ..</code>","text":"<p>Moves up one directory level.</p> <pre><code>cd ..\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_5","title":"Example","text":"<pre><code>cd ..\n# Moves up one level in the directory structure\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#create-a-directory","title":"Create a Directory","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#mkdir-directory","title":"<code>mkdir &lt;directory&gt;</code>","text":"<p>Creates a new directory.</p> <pre><code>mkdir &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_6","title":"Example","text":"<pre><code>mkdir new_directory\n# Creates a directory named 'new_directory'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#mkdir-p-path","title":"<code>mkdir -p &lt;path&gt;</code>","text":"<p>Creates a directory and any necessary parent directories.</p> <pre><code>mkdir -p /path/to/directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_7","title":"Example","text":"<pre><code>mkdir -p /home/user/new_directory/subdirectory\n# Creates 'new_directory' and 'subdirectory' if they do not exist\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#remove-a-directory","title":"Remove a Directory","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#rmdir-directory","title":"<code>rmdir &lt;directory&gt;</code>","text":"<p>Removes an empty directory.</p> <pre><code>rmdir &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_8","title":"Example","text":"<pre><code>rmdir old_directory\n# Removes the 'old_directory' if it is empty\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#rm-r-directory","title":"<code>rm -r &lt;directory&gt;</code>","text":"<p>Removes a directory and its contents recursively.</p> <pre><code>rm -r &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_9","title":"Example","text":"<pre><code>rm -r old_directory\n# Removes 'old_directory' and all files and subdirectories within it\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#create-an-empty-file","title":"Create an Empty File","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#touch-file","title":"<code>touch &lt;file&gt;</code>","text":"<p>Creates an empty file or updates the timestamp of an existing file.</p> <pre><code>touch &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_10","title":"Example","text":"<pre><code>touch newfile.txt\n# Creates an empty file named 'newfile.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#delete-a-file","title":"Delete a File","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#rm-file","title":"<code>rm &lt;file&gt;</code>","text":"<p>Deletes a specified file.</p> <pre><code>rm &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_11","title":"Example","text":"<pre><code>rm file1.txt\n# Deletes the file named 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#move-or-rename-files-and-directories","title":"Move or Rename Files and Directories","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#mv-source-destination","title":"<code>mv &lt;source&gt; &lt;destination&gt;</code>","text":"<p>Moves or renames a file or directory.</p> <pre><code>mv &lt;source&gt; &lt;destination&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_12","title":"Example","text":"<pre><code>mv file1.txt /home/user/backup/\n# Moves 'file1.txt' to the 'backup' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#mv-oldnametxt-newnametxt","title":"<code>mv oldname.txt newname.txt</code>","text":"<p>Renames a file or directory.</p> <pre><code>mv oldname.txt newname.txt\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_13","title":"Example","text":"<pre><code>mv oldname.txt newname.txt\n# Renames 'oldname.txt' to 'newname.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#copy-files-and-directories","title":"Copy Files and Directories","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#cp-source-destination","title":"<code>cp &lt;source&gt; &lt;destination&gt;</code>","text":"<p>Copies a file or directory to the specified destination.</p> <pre><code>cp &lt;source&gt; &lt;destination&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_14","title":"Example","text":"<pre><code>cp file1.txt /home/user/backup/\n# Copies 'file1.txt' to the 'backup' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#cp-r-source-destination","title":"<code>cp -r &lt;source&gt; &lt;destination&gt;</code>","text":"<p>Copies a directory and its contents recursively.</p> <pre><code>cp -r &lt;source&gt; &lt;destination&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_15","title":"Example","text":"<pre><code>cp -r directory1 /home/user/backup/\n# Copies 'directory1' and all its contents to the 'backup' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#view-file-content","title":"View File Content","text":""},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#cat-file","title":"<code>cat &lt;file&gt;</code>","text":"<p>Displays the content of a file.</p> <pre><code>cat &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_16","title":"Example","text":"<pre><code>cat file1.txt\n# Displays the content of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#less-file","title":"<code>less &lt;file&gt;</code>","text":"<p>Allows you to view file content one page at a time.</p> <pre><code>less &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#example_17","title":"Example","text":"<pre><code>less file1.txt\n# Displays the content of 'file1.txt' one page at a time\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_and_directory_management/#summary","title":"Summary","text":"<p>Linux provides powerful commands for managing files and directories, including creating, deleting, moving, and viewing files. Understanding these commands allows for efficient navigation and manipulation of the filesystem. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/","title":"Linux File Permissions Commands","text":""},{"location":"os/Linux/file_directory_mgmt/file_permissions/#overview","title":"Overview","text":"<p>File permissions in Linux control the access to files and directories. Permissions determine who can read, write, or execute files. This document covers basic commands for viewing and modifying file permissions.</p>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#viewing-permissions","title":"Viewing Permissions","text":""},{"location":"os/Linux/file_directory_mgmt/file_permissions/#ls-l","title":"<code>ls -l</code>","text":"<p>Lists files and directories with detailed information, including permissions.</p> <pre><code>ls -l\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example","title":"Example","text":"<pre><code>ls -l\n# Output: Lists files and directories with permissions, owner, group, size, and modification date\n# Example output:\n# -rwxr-xr-- 1 user group 1234 Aug  3 10:00 example.txt\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#understanding-file-permissions","title":"Understanding File Permissions","text":"<p>File permissions are represented by a string of 10 characters:</p> <pre><code>-rwxr-xr--\n</code></pre> <ul> <li>File Type: <code>-</code> (regular file), <code>d</code> (directory), <code>l</code> (symlink)</li> <li>Owner Permissions: <code>rwx</code> (read, write, execute)</li> <li>Group Permissions: <code>r-x</code> (read, execute)</li> <li>Others Permissions: <code>r--</code> (read)</li> </ul>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#changing-permissions","title":"Changing Permissions","text":""},{"location":"os/Linux/file_directory_mgmt/file_permissions/#chmod","title":"<code>chmod</code>","text":"<p>Changes the permissions of a file or directory.</p> <pre><code>chmod [options] &lt;permissions&gt; &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_1","title":"Example","text":"<pre><code>chmod 755 example.txt\n# Sets the permissions of 'example.txt' to rwxr-xr-x (owner: read, write, execute; group and others: read, execute)\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#numeric-mode","title":"Numeric Mode","text":"<ul> <li>7: rwx (read, write, execute)</li> <li>6: rw- (read, write)</li> <li>5: r-x (read, execute)</li> <li>4: r-- (read)</li> <li>3: wx- (write, execute)</li> <li>2: w-- (write)</li> <li>1: --x (execute)</li> <li>0: --- (no permissions)</li> </ul>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_2","title":"Example","text":"<pre><code>chmod 644 example.txt\n# Sets the permissions of 'example.txt' to rw-r--r-- (owner: read, write; group and others: read)\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#symbolic-mode","title":"Symbolic Mode","text":"<ul> <li>u: user (owner)</li> <li>g: group</li> <li>o: others</li> <li>a: all</li> </ul> <p>Use <code>+</code> to add permissions, <code>-</code> to remove, and <code>=</code> to set exact permissions.</p>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_3","title":"Example","text":"<pre><code>chmod u+x example.txt\n# Adds execute permission for the owner\n</code></pre> <pre><code>chmod go-w example.txt\n# Removes write permission for group and others\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#chown","title":"<code>chown</code>","text":"<p>Changes the owner and/or group of a file or directory.</p> <pre><code>sudo chown [owner][:group] &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_4","title":"Example","text":"<pre><code>sudo chown john:admins example.txt\n# Changes the owner of 'example.txt' to 'john' and the group to 'admins'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#chgrp","title":"<code>chgrp</code>","text":"<p>Changes the group ownership of a file or directory.</p> <pre><code>sudo chgrp &lt;group&gt; &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_5","title":"Example","text":"<pre><code>sudo chgrp admins example.txt\n# Changes the group ownership of 'example.txt' to 'admins'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#special-permissions","title":"Special Permissions","text":""},{"location":"os/Linux/file_directory_mgmt/file_permissions/#setuid-set-user-id","title":"Setuid (Set User ID)","text":"<p>When set on an executable file, the process runs with the permissions of the file's owner.</p> <pre><code>chmod u+s &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_6","title":"Example","text":"<pre><code>chmod u+s /usr/bin/someprogram\n# Sets the setuid bit on 'someprogram'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#setgid-set-group-id","title":"Setgid (Set Group ID)","text":"<p>When set on a directory, new files and directories inherit the group of the directory.</p> <pre><code>chmod g+s &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_7","title":"Example","text":"<pre><code>chmod g+s /var/shared\n# Sets the setgid bit on the '/var/shared' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#sticky-bit","title":"Sticky Bit","text":"<p>When set on a directory, only the file owner can delete files within that directory.</p> <pre><code>chmod +t &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#example_8","title":"Example","text":"<pre><code>chmod +t /tmp\n# Sets the sticky bit on the '/tmp' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_permissions/#summary","title":"Summary","text":"<p>Understanding and managing file permissions is crucial for maintaining security and proper access control in Linux. These commands allow you to view and modify permissions, ownership, and special attributes of files and directories. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/","title":"Linux File Viewing and Editing Commands","text":""},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#overview","title":"Overview","text":"<p>Linux provides several commands for viewing and editing files. These commands allow you to read, search, and modify file content from the command line. This document covers basic and commonly used file viewing and editing commands.</p>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#file-viewing-commands","title":"File Viewing Commands","text":""},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#cat","title":"<code>cat</code>","text":"<p>Displays the entire content of a file.</p> <pre><code>cat &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example","title":"Example","text":"<pre><code>cat file1.txt\n# Output: Displays the content of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#less","title":"<code>less</code>","text":"<p>Displays file content one page at a time. Allows for navigation and searching within the file.</p> <pre><code>less &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_1","title":"Example","text":"<pre><code>less file1.txt\n# Output: Displays the content of 'file1.txt' one page at a time\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#more","title":"<code>more</code>","text":"<p>Displays file content one page at a time, similar to <code>less</code>, but with fewer features.</p> <pre><code>more &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_2","title":"Example","text":"<pre><code>more file1.txt\n# Output: Displays the content of 'file1.txt' one page at a time\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#head","title":"<code>head</code>","text":"<p>Displays the first few lines of a file (default is 10 lines).</p> <pre><code>head &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_3","title":"Example","text":"<pre><code>head file1.txt\n# Output: Displays the first 10 lines of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#head-n-number-file","title":"<code>head -n &lt;number&gt; &lt;file&gt;</code>","text":"<p>Displays the first <code>&lt;number&gt;</code> lines of a file.</p> <pre><code>head -n &lt;number&gt; &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_4","title":"Example","text":"<pre><code>head -n 20 file1.txt\n# Output: Displays the first 20 lines of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#tail","title":"<code>tail</code>","text":"<p>Displays the last few lines of a file (default is 10 lines).</p> <pre><code>tail &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_5","title":"Example","text":"<pre><code>tail file1.txt\n# Output: Displays the last 10 lines of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#tail-n-number-file","title":"<code>tail -n &lt;number&gt; &lt;file&gt;</code>","text":"<p>Displays the last <code>&lt;number&gt;</code> lines of a file.</p> <pre><code>tail -n &lt;number&gt; &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_6","title":"Example","text":"<pre><code>tail -n 20 file1.txt\n# Output: Displays the last 20 lines of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#grep","title":"<code>grep</code>","text":"<p>Searches for a specific pattern within a file.</p> <pre><code>grep \"&lt;pattern&gt;\" &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_7","title":"Example","text":"<pre><code>grep \"error\" log.txt\n# Output: Displays lines containing 'error' in 'log.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#find","title":"<code>find</code>","text":"<p>Searches for files and directories based on criteria.</p> <pre><code>find &lt;path&gt; -name \"&lt;filename&gt;\"\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_8","title":"Example","text":"<pre><code>find /home/user/ -name \"*.txt\"\n# Output: Finds all '.txt' files in '/home/user/' directory\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#file-editing-commands","title":"File Editing Commands","text":""},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#nano","title":"<code>nano</code>","text":"<p>A simple, user-friendly text editor for the command line.</p> <pre><code>nano &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_9","title":"Example","text":"<pre><code>nano file1.txt\n# Opens 'file1.txt' in the nano editor for editing\n# Use 'Ctrl + X' to exit, 'Y' to confirm changes, 'N' to discard changes\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#vim","title":"<code>vim</code>","text":"<p>A powerful text editor with a steep learning curve but extensive capabilities.</p> <pre><code>vim &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_10","title":"Example","text":"<pre><code>vim file1.txt\n# Opens 'file1.txt' in the vim editor for editing\n# Use ':wq' to save and exit, ':q!' to exit without saving\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#vi","title":"<code>vi</code>","text":"<p>An older text editor similar to <code>vim</code>, often available by default.</p> <pre><code>vi &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_11","title":"Example","text":"<pre><code>vi file1.txt\n# Opens 'file1.txt' in the vi editor for editing\n# Use ':wq' to save and exit, ':q!' to exit without saving\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#sed","title":"<code>sed</code>","text":"<p>A stream editor for filtering and transforming text.</p> <pre><code>sed 's/&lt;pattern&gt;/&lt;replacement&gt;/' &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_12","title":"Example","text":"<pre><code>sed 's/oldtext/newtext/' file1.txt\n# Replaces 'oldtext' with 'newtext' in 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#awk","title":"<code>awk</code>","text":"<p>A programming language for pattern scanning and processing.</p> <pre><code>awk '{print $1}' &lt;file&gt;\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#example_13","title":"Example","text":"<pre><code>awk '{print $1}' file1.txt\n# Prints the first column of 'file1.txt'\n</code></pre>"},{"location":"os/Linux/file_directory_mgmt/file_viewing_and_editing/#summary","title":"Summary","text":"<p>Linux provides a range of commands for viewing and editing files, from simple viewers like <code>cat</code> and <code>less</code> to powerful editors like <code>vim</code> and <code>nano</code>. Understanding these commands helps manage and manipulate file content effectively from the command line. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/network_firewalls/","title":"Firewall &amp; Networking","text":"<p>Comprehensive guide on setting up and managing firewalls and network configurations.</p> <ul> <li>Firewalls and Networking - Detailed guide on managing firewalls and network connections.</li> <li>Network Configuration and Monitoring - Understand network configurations and how to monitor network activity and performance.</li> <li>SSH - Secure Shell (SSH) guide for remote login and secure communication over unsecured networks.</li> </ul>"},{"location":"os/Linux/network_firewalls/firewalls_networking/","title":"Linux Firewalls and Networking Commands","text":""},{"location":"os/Linux/network_firewalls/firewalls_networking/#overview","title":"Overview","text":"<p>Linux provides various tools for managing network configurations and firewalls. This document covers basic and commonly used commands for network management and firewall configuration.</p>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#networking-commands","title":"Networking Commands","text":""},{"location":"os/Linux/network_firewalls/firewalls_networking/#ifconfig","title":"<code>ifconfig</code>","text":"<p>Displays or configures network interfaces.</p> <pre><code>ifconfig [interface]\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example","title":"Example","text":"<pre><code>ifconfig eth0\n# Displays the configuration for the 'eth0' network interface\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_1","title":"Example","text":"<pre><code>ifconfig eth0 up\n# Brings up the 'eth0' network interface\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#ip","title":"<code>ip</code>","text":"<p>A more modern tool for managing network interfaces, routes, and addresses.</p>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#show-network-interfaces","title":"Show Network Interfaces","text":"<pre><code>ip addr show\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_2","title":"Example","text":"<pre><code>ip addr show\n# Displays detailed information about all network interfaces\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#assign-an-ip-address","title":"Assign an IP Address","text":"<pre><code>sudo ip addr add &lt;IP_address&gt;/&lt;netmask&gt; dev &lt;interface&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_3","title":"Example","text":"<pre><code>sudo ip addr add 192.168.1.100/24 dev eth0\n# Assigns the IP address 192.168.1.100 to the 'eth0' interface\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#bring-updown-an-interface","title":"Bring Up/Down an Interface","text":"<pre><code>sudo ip link set &lt;interface&gt; up\nsudo ip link set &lt;interface&gt; down\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_4","title":"Example","text":"<pre><code>sudo ip link set eth0 up\n# Brings up the 'eth0' interface\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#netstat","title":"<code>netstat</code>","text":"<p>Displays network connections, routing tables, interface statistics, and more.</p> <pre><code>netstat [options]\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_5","title":"Example","text":"<pre><code>netstat -tuln\n# Displays listening TCP and UDP ports with numeric addresses\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#ss","title":"<code>ss</code>","text":"<p>A utility to investigate sockets and network connections, a modern replacement for <code>netstat</code>.</p> <pre><code>ss [options]\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_6","title":"Example","text":"<pre><code>ss -tuln\n# Displays listening TCP and UDP sockets with numeric addresses\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#ping","title":"<code>ping</code>","text":"<p>Sends ICMP ECHO_REQUEST packets to network hosts.</p> <pre><code>ping [options] &lt;host&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_7","title":"Example","text":"<pre><code>ping google.com\n# Pings 'google.com' to check network connectivity\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#traceroute","title":"<code>traceroute</code>","text":"<p>Displays the route packets take to a network host.</p> <pre><code>traceroute &lt;host&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_8","title":"Example","text":"<pre><code>traceroute google.com\n# Shows the path taken to reach 'google.com'\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#nslookup","title":"<code>nslookup</code>","text":"<p>Queries DNS to obtain domain name or IP address mapping.</p> <pre><code>nslookup &lt;domain&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_9","title":"Example","text":"<pre><code>nslookup google.com\n# Queries DNS for information about 'google.com'\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#route","title":"<code>route</code>","text":"<p>Displays or modifies the IP routing table.</p> <pre><code>route [options]\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_10","title":"Example","text":"<pre><code>route -n\n# Displays the IP routing table with numeric addresses\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#ip-route","title":"<code>ip route</code>","text":"<p>Displays and manages the routing table.</p> <pre><code>ip route [options]\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_11","title":"Example","text":"<pre><code>ip route show\n# Displays the current routing table\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#firewall-commands","title":"Firewall Commands","text":""},{"location":"os/Linux/network_firewalls/firewalls_networking/#iptables","title":"<code>iptables</code>","text":"<p>Configures and manages firewall rules.</p>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#list-rules","title":"List Rules","text":"<pre><code>sudo iptables -L\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_12","title":"Example","text":"<pre><code>sudo iptables -L\n# Lists all current firewall rules\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#add-rule","title":"Add Rule","text":"<pre><code>sudo iptables -A &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j &lt;target&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_13","title":"Example","text":"<pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n# Allows incoming TCP connections on port 22 (SSH)\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#delete-rule","title":"Delete Rule","text":"<pre><code>sudo iptables -D &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j &lt;target&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_14","title":"Example","text":"<pre><code>sudo iptables -D INPUT -p tcp --dport 22 -j ACCEPT\n# Deletes the rule allowing incoming TCP connections on port 22\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#ufw","title":"<code>ufw</code>","text":"<p>Uncomplicated Firewall (UFW) is a user-friendly front-end for managing firewall rules.</p>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#enable-ufw","title":"Enable UFW","text":"<pre><code>sudo ufw enable\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_15","title":"Example","text":"<pre><code>sudo ufw enable\n# Enables the UFW firewall\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#allow-a-port","title":"Allow a Port","text":"<pre><code>sudo ufw allow &lt;port&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_16","title":"Example","text":"<pre><code>sudo ufw allow 22\n# Allows incoming connections on port 22 (SSH)\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#deny-a-port","title":"Deny a Port","text":"<pre><code>sudo ufw deny &lt;port&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_17","title":"Example","text":"<pre><code>sudo ufw deny 80\n# Denies incoming connections on port 80 (HTTP)\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#check-ufw-status","title":"Check UFW Status","text":"<pre><code>sudo ufw status\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#example_18","title":"Example","text":"<pre><code>sudo ufw status\n# Displays the current status and rules of UFW\n</code></pre>"},{"location":"os/Linux/network_firewalls/firewalls_networking/#summary","title":"Summary","text":"<p>Linux provides a robust set of tools for managing network configurations and firewall rules. Mastering these commands helps in monitoring and securing network traffic, configuring network interfaces, and troubleshooting network issues. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/","title":"Linux Network Configuration and Monitoring Commands","text":""},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#overview","title":"Overview","text":"<p>Linux provides a variety of commands for configuring and monitoring network interfaces and connections. These commands are essential for managing network settings, diagnosing network issues, and ensuring proper connectivity. This document covers basic and commonly used network configuration and monitoring commands.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#network-configuration","title":"Network Configuration","text":""},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#ip","title":"<code>ip</code>","text":"<p>A powerful tool for configuring network interfaces, routing, and tunnels.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#display-network-interfaces","title":"Display Network Interfaces","text":"<pre><code>ip addr\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example","title":"Example","text":"<pre><code>ip addr\n# Output: Lists all network interfaces with their IP addresses and other details\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#display-routing-table","title":"Display Routing Table","text":"<pre><code>ip route\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_1","title":"Example","text":"<pre><code>ip route\n# Output: Displays the current routing table\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#add-an-ip-address","title":"Add an IP Address","text":"<pre><code>sudo ip addr add &lt;ip_address&gt;/&lt;subnet&gt; dev &lt;interface&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_2","title":"Example","text":"<pre><code>sudo ip addr add 192.168.1.100/24 dev eth0\n# Adds the IP address 192.168.1.100 with subnet 24 to the interface 'eth0'\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#delete-an-ip-address","title":"Delete an IP Address","text":"<pre><code>sudo ip addr del &lt;ip_address&gt;/&lt;subnet&gt; dev &lt;interface&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_3","title":"Example","text":"<pre><code>sudo ip addr del 192.168.1.100/24 dev eth0\n# Removes the IP address 192.168.1.100 from the interface 'eth0'\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#ifconfig","title":"<code>ifconfig</code>","text":"<p>Displays and configures network interfaces. Note: <code>ifconfig</code> is deprecated in favor of <code>ip</code>.</p> <pre><code>ifconfig\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_4","title":"Example","text":"<pre><code>ifconfig\n# Output: Displays network interface configuration\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#nmcli","title":"<code>nmcli</code>","text":"<p>Command-line interface for NetworkManager, used to manage network connections.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#list-network-connections","title":"List Network Connections","text":"<pre><code>nmcli connection show\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_5","title":"Example","text":"<pre><code>nmcli connection show\n# Output: Lists all network connections managed by NetworkManager\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#connect-to-a-network","title":"Connect to a Network","text":"<pre><code>nmcli connection up &lt;connection_name&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_6","title":"Example","text":"<pre><code>nmcli connection up my-wifi\n# Connects to the network named 'my-wifi'\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#disconnect-from-a-network","title":"Disconnect from a Network","text":"<pre><code>nmcli connection down &lt;connection_name&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_7","title":"Example","text":"<pre><code>nmcli connection down my-wifi\n# Disconnects from the network named 'my-wifi'\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#network-monitoring","title":"Network Monitoring","text":""},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#ping","title":"<code>ping</code>","text":"<p>Sends ICMP ECHO_REQUEST packets to a network host to check connectivity.</p> <pre><code>ping &lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_8","title":"Example","text":"<pre><code>ping google.com\n# Output: Sends packets to 'google.com' to check connectivity\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#traceroute","title":"<code>traceroute</code>","text":"<p>Displays the route packets take to a network host.</p> <pre><code>traceroute &lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_9","title":"Example","text":"<pre><code>traceroute google.com\n# Output: Shows the route taken by packets to reach 'google.com'\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#netstat","title":"<code>netstat</code>","text":"<p>Displays network connections, routing tables, and interface statistics. Note: <code>netstat</code> is deprecated in favor of <code>ss</code>.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#display-all-connections","title":"Display All Connections","text":"<pre><code>netstat -a\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_10","title":"Example","text":"<pre><code>netstat -a\n# Output: Lists all network connections and listening ports\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#ss","title":"<code>ss</code>","text":"<p>Displays detailed information about network sockets.</p>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#display-all-connections_1","title":"Display All Connections","text":"<pre><code>ss -a\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_11","title":"Example","text":"<pre><code>ss -a\n# Output: Lists all network connections and listening ports\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#tcpdump","title":"<code>tcpdump</code>","text":"<p>Captures and analyzes network packets.</p> <pre><code>sudo tcpdump\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_12","title":"Example","text":"<pre><code>sudo tcpdump -i eth0\n# Captures packets on the 'eth0' interface\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#iftop","title":"<code>iftop</code>","text":"<p>Displays bandwidth usage on network interfaces.</p> <pre><code>sudo iftop\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_13","title":"Example","text":"<pre><code>sudo iftop\n# Output: Displays real-time bandwidth usage on all network interfaces\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#nmap","title":"<code>nmap</code>","text":"<p>Network scanning tool used to discover hosts and services on a network.</p> <pre><code>nmap &lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#example_14","title":"Example","text":"<pre><code>nmap 192.168.1.1\n# Scans the IP address 192.168.1.1 for open ports and services\n</code></pre>"},{"location":"os/Linux/network_firewalls/network_configuration_monitoring/#summary","title":"Summary","text":"<p>Linux provides a comprehensive set of commands for configuring and monitoring network interfaces and connections. These commands are essential for managing network settings, diagnosing issues, and ensuring network connectivity. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/network_firewalls/ssh/","title":"Linux SSH Commands","text":""},{"location":"os/Linux/network_firewalls/ssh/#overview","title":"Overview","text":"<p>SSH (Secure Shell) is a protocol used to securely access and manage remote systems over a network. The SSH suite of commands provides a variety of tools for connecting to, configuring, and managing remote systems. This document covers basic and commonly used SSH commands.</p>"},{"location":"os/Linux/network_firewalls/ssh/#basic-ssh-commands","title":"Basic SSH Commands","text":""},{"location":"os/Linux/network_firewalls/ssh/#ssh","title":"<code>ssh</code>","text":"<p>Used to securely connect to a remote machine.</p> <pre><code>ssh &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example","title":"Example","text":"<pre><code>ssh john@192.168.1.100\n# Connects to the remote host 192.168.1.100 as user 'john'\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-keygen","title":"<code>ssh-keygen</code>","text":"<p>Generates a new SSH key pair.</p> <pre><code>ssh-keygen\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_1","title":"Example","text":"<pre><code>ssh-keygen\n# Prompts to generate a new SSH key pair; saves the private key and public key in the default location (~/.ssh/)\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-copy-id","title":"<code>ssh-copy-id</code>","text":"<p>Copies your SSH public key to a remote host's authorized keys.</p> <pre><code>ssh-copy-id &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_2","title":"Example","text":"<pre><code>ssh-copy-id john@192.168.1.100\n# Copies the public key to the remote host to enable passwordless login for user 'john'\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#scp","title":"<code>scp</code>","text":"<p>Securely copies files between hosts over SSH.</p> <pre><code>scp &lt;source&gt; &lt;user&gt;@&lt;hostname_or_ip&gt;:&lt;destination&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_3","title":"Example","text":"<pre><code>scp localfile.txt john@192.168.1.100:/home/john/\n# Copies 'localfile.txt' from the local machine to the '/home/john/' directory on the remote host\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#sftp","title":"<code>sftp</code>","text":"<p>Secure File Transfer Protocol for transferring files over SSH.</p> <pre><code>sftp &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_4","title":"Example","text":"<pre><code>sftp john@192.168.1.100\n# Opens an SFTP session with the remote host\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-add","title":"<code>ssh-add</code>","text":"<p>Adds SSH private keys to the SSH authentication agent.</p> <pre><code>ssh-add &lt;key_file&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_5","title":"Example","text":"<pre><code>ssh-add ~/.ssh/id_rsa\n# Adds the private key 'id_rsa' to the SSH agent for authentication\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-agent","title":"<code>ssh-agent</code>","text":"<p>Manages SSH keys and handles authentication for SSH sessions.</p> <pre><code>eval $(ssh-agent)\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_6","title":"Example","text":"<pre><code>eval $(ssh-agent)\n# Starts the SSH agent and sets environment variables for the current session\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#advanced-ssh-commands","title":"Advanced SSH Commands","text":""},{"location":"os/Linux/network_firewalls/ssh/#ssh-i","title":"<code>ssh -i</code>","text":"<p>Specifies a private key file to use for authentication.</p> <pre><code>ssh -i &lt;private_key_file&gt; &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_7","title":"Example","text":"<pre><code>ssh -i ~/.ssh/id_rsa john@192.168.1.100\n# Connects to the remote host using the specified private key file\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-p","title":"<code>ssh -p</code>","text":"<p>Specifies a port number for the SSH connection.</p> <pre><code>ssh -p &lt;port_number&gt; &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_8","title":"Example","text":"<pre><code>ssh -p 2222 john@192.168.1.100\n# Connects to the remote host on port 2222\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-l","title":"<code>ssh -L</code>","text":"<p>Creates a local port forwarding.</p> <pre><code>ssh -L &lt;local_port&gt;:&lt;remote_host&gt;:&lt;remote_port&gt; &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_9","title":"Example","text":"<pre><code>ssh -L 8080:localhost:80 john@192.168.1.100\n# Forwards local port 8080 to port 80 on the remote host through SSH\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-r","title":"<code>ssh -R</code>","text":"<p>Creates a remote port forwarding.</p> <pre><code>ssh -R &lt;remote_port&gt;:&lt;local_host&gt;:&lt;local_port&gt; &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_10","title":"Example","text":"<pre><code>ssh -R 9090:localhost:80 john@192.168.1.100\n# Forwards remote port 9090 to port 80 on the local machine through SSH\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#ssh-c","title":"<code>ssh -C</code>","text":"<p>Enables compression for the SSH connection.</p> <pre><code>ssh -C &lt;user&gt;@&lt;hostname_or_ip&gt;\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#example_11","title":"Example","text":"<pre><code>ssh -C john@192.168.1.100\n# Connects to the remote host with compression enabled\n</code></pre>"},{"location":"os/Linux/network_firewalls/ssh/#summary","title":"Summary","text":"<p>The SSH suite of commands provides powerful tools for securely managing and transferring data between systems. By mastering these commands, you can effectively perform remote administration and file transfers while maintaining secure connections. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/system_mgmt/","title":"System Management","text":"<p>Learn about system monitoring, process management, and performance tuning to maintain a healthy Linux environment.</p> <ul> <li>System Information - Retrieve and interpret various system information and hardware details.</li> <li>Disk Management - Learn about managing disks, partitions, and filesystems in Linux.</li> <li>User and Group Management - Manage users and groups, including creation, deletion, and permission settings.</li> <li>Package Management - Manage software packages, including installation, updates, and removal.</li> <li>Process Management - Learn about monitoring and controlling processes in Linux.</li> </ul>"},{"location":"os/Linux/system_mgmt/disk_management/","title":"Linux Disk Management Commands","text":""},{"location":"os/Linux/system_mgmt/disk_management/#overview","title":"Overview","text":"<p>Linux provides various commands for managing disks and filesystems. These commands allow you to view disk usage, partition disks, format filesystems, and more. This document covers basic and commonly used disk management commands.</p>"},{"location":"os/Linux/system_mgmt/disk_management/#disk-usage-and-information","title":"Disk Usage and Information","text":""},{"location":"os/Linux/system_mgmt/disk_management/#df","title":"<code>df</code>","text":"<p>Displays information about disk space usage on filesystems.</p> <pre><code>df [options] [file...]\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example","title":"Example","text":"<pre><code>df -h\n# Output: Displays disk space usage in human-readable format (e.g., GB, MB)\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#du","title":"<code>du</code>","text":"<p>Displays disk usage for files and directories.</p> <pre><code>du [options] [directory...]\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_1","title":"Example","text":"<pre><code>du -sh /home/user\n# Output: Shows the total disk usage of the directory '/home/user' in human-readable format\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#lsblk","title":"<code>lsblk</code>","text":"<p>Lists information about all available block devices.</p> <pre><code>lsblk [options]\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_2","title":"Example","text":"<pre><code>lsblk\n# Output: Displays a list of block devices, including partitions and their mount points\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#fdisk","title":"<code>fdisk</code>","text":"<p>Partition table manipulator for creating, deleting, and managing disk partitions.</p> <pre><code>sudo fdisk /dev/sdX\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_3","title":"Example","text":"<pre><code>sudo fdisk /dev/sda\n# Opens fdisk to manage partitions on the /dev/sda disk\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#common-fdisk-commands","title":"Common <code>fdisk</code> Commands","text":"<ul> <li>List partitions: <code>p</code></li> <li>Create a new partition: <code>n</code></li> <li>Delete a partition: <code>d</code></li> <li>Write changes: <code>w</code></li> <li>Quit without saving: <code>q</code></li> </ul>"},{"location":"os/Linux/system_mgmt/disk_management/#parted","title":"<code>parted</code>","text":"<p>A tool for managing disk partitions.</p> <pre><code>sudo parted /dev/sdX\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_4","title":"Example","text":"<pre><code>sudo parted /dev/sda\n# Opens parted to manage partitions on the /dev/sda disk\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#common-parted-commands","title":"Common <code>parted</code> Commands","text":"<ul> <li>Print partition table: <code>print</code></li> <li>Create a new partition: <code>mkpart</code></li> <li>Delete a partition: <code>rm</code></li> <li>Resize a partition: <code>resizepart</code></li> <li>Quit: <code>quit</code></li> </ul>"},{"location":"os/Linux/system_mgmt/disk_management/#filesystem-management","title":"Filesystem Management","text":""},{"location":"os/Linux/system_mgmt/disk_management/#mkfs","title":"<code>mkfs</code>","text":"<p>Creates a filesystem on a disk or partition.</p> <pre><code>sudo mkfs -t &lt;filesystem_type&gt; /dev/sdXn\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_5","title":"Example","text":"<pre><code>sudo mkfs -t ext4 /dev/sda1\n# Creates an ext4 filesystem on the /dev/sda1 partition\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#fsck","title":"<code>fsck</code>","text":"<p>Checks and repairs a filesystem.</p> <pre><code>sudo fsck [options] /dev/sdXn\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_6","title":"Example","text":"<pre><code>sudo fsck /dev/sda1\n# Checks and repairs the filesystem on /dev/sda1\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#mount","title":"<code>mount</code>","text":"<p>Mounts a filesystem to a directory.</p> <pre><code>sudo mount [options] /dev/sdXn &lt;mount_point&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_7","title":"Example","text":"<pre><code>sudo mount /dev/sda1 /mnt\n# Mounts the filesystem on /dev/sda1 to the /mnt directory\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#umount","title":"<code>umount</code>","text":"<p>Unmounts a filesystem from a directory.</p> <pre><code>sudo umount &lt;mount_point&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_8","title":"Example","text":"<pre><code>sudo umount /mnt\n# Unmounts the filesystem from the /mnt directory\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#lsblk-again","title":"<code>lsblk</code> (again)","text":"<p>Lists block devices and their mount points.</p> <pre><code>lsblk -f\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_9","title":"Example","text":"<pre><code>lsblk -f\n# Output: Displays filesystem type and labels along with block device information\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#disk-usage-analysis","title":"Disk Usage Analysis","text":""},{"location":"os/Linux/system_mgmt/disk_management/#ncdu","title":"<code>ncdu</code>","text":"<p>A disk usage analyzer with a text-based user interface.</p> <pre><code>ncdu [directory]\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#example_10","title":"Example","text":"<pre><code>ncdu /home/user\n# Opens ncdu to analyze disk usage in the '/home/user' directory\n</code></pre>"},{"location":"os/Linux/system_mgmt/disk_management/#summary","title":"Summary","text":"<p>Linux offers a comprehensive set of commands for managing disks and filesystems. Understanding these commands helps in monitoring disk usage, partitioning disks, and maintaining filesystems effectively. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/system_mgmt/package_management/","title":"Linux Package Management Commands","text":""},{"location":"os/Linux/system_mgmt/package_management/#overview","title":"Overview","text":"<p>Linux distributions use different package managers to handle software installation, updates, and removal. This document covers basic and commonly used package management commands for various package managers.</p>"},{"location":"os/Linux/system_mgmt/package_management/#debian-based-systems-eg-ubuntu","title":"Debian-Based Systems (e.g., Ubuntu)","text":""},{"location":"os/Linux/system_mgmt/package_management/#apt","title":"<code>apt</code>","text":"<p>The Advanced Package Tool (APT) is used for managing packages in Debian-based distributions.</p>"},{"location":"os/Linux/system_mgmt/package_management/#update-package-list","title":"Update Package List","text":"<pre><code>sudo apt update\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example","title":"Example","text":"<pre><code>sudo apt update\n# Updates the package list from repositories\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#upgrade-installed-packages","title":"Upgrade Installed Packages","text":"<pre><code>sudo apt upgrade\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_1","title":"Example","text":"<pre><code>sudo apt upgrade\n# Upgrades all installed packages to their latest versions\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#install-a-package","title":"Install a Package","text":"<pre><code>sudo apt install &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_2","title":"Example","text":"<pre><code>sudo apt install vim\n# Installs the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#remove-a-package","title":"Remove a Package","text":"<pre><code>sudo apt remove &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_3","title":"Example","text":"<pre><code>sudo apt remove vim\n# Removes the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#search-for-a-package","title":"Search for a Package","text":"<pre><code>apt search &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_4","title":"Example","text":"<pre><code>apt search vim\n# Searches for packages related to 'vim'\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#show-package-details","title":"Show Package Details","text":"<pre><code>apt show &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_5","title":"Example","text":"<pre><code>apt show vim\n# Displays detailed information about the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#red-hat-based-systems-eg-centos-fedora","title":"Red Hat-Based Systems (e.g., CentOS, Fedora)","text":""},{"location":"os/Linux/system_mgmt/package_management/#yum","title":"<code>yum</code>","text":"<p>The Yellowdog Updater, Modified (YUM) is used for managing packages in older Red Hat-based distributions.</p>"},{"location":"os/Linux/system_mgmt/package_management/#update-package-list-and-system","title":"Update Package List and System","text":"<pre><code>sudo yum update\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_6","title":"Example","text":"<pre><code>sudo yum update\n# Updates the package list and upgrades all installed packages\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#install-a-package_1","title":"Install a Package","text":"<pre><code>sudo yum install &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_7","title":"Example","text":"<pre><code>sudo yum install vim\n# Installs the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#remove-a-package_1","title":"Remove a Package","text":"<pre><code>sudo yum remove &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_8","title":"Example","text":"<pre><code>sudo yum remove vim\n# Removes the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#search-for-a-package_1","title":"Search for a Package","text":"<pre><code>yum search &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_9","title":"Example","text":"<pre><code>yum search vim\n# Searches for packages related to 'vim'\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#show-package-details_1","title":"Show Package Details","text":"<pre><code>yum info &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_10","title":"Example","text":"<pre><code>yum info vim\n# Displays detailed information about the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#dnf","title":"<code>dnf</code>","text":"<p>The Dandified YUM (DNF) is used for managing packages in newer Red Hat-based distributions.</p>"},{"location":"os/Linux/system_mgmt/package_management/#update-package-list-and-system_1","title":"Update Package List and System","text":"<pre><code>sudo dnf update\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_11","title":"Example","text":"<pre><code>sudo dnf update\n# Updates the package list and upgrades all installed packages\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#install-a-package_2","title":"Install a Package","text":"<pre><code>sudo dnf install &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_12","title":"Example","text":"<pre><code>sudo dnf install vim\n# Installs the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#remove-a-package_2","title":"Remove a Package","text":"<pre><code>sudo dnf remove &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_13","title":"Example","text":"<pre><code>sudo dnf remove vim\n# Removes the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#search-for-a-package_2","title":"Search for a Package","text":"<pre><code>dnf search &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_14","title":"Example","text":"<pre><code>dnf search vim\n# Searches for packages related to 'vim'\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#show-package-details_2","title":"Show Package Details","text":"<pre><code>dnf info &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_15","title":"Example","text":"<pre><code>dnf info vim\n# Displays detailed information about the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#suse-based-systems","title":"SUSE-Based Systems","text":""},{"location":"os/Linux/system_mgmt/package_management/#zypper","title":"<code>zypper</code>","text":"<p>The command-line interface for managing packages in SUSE-based distributions.</p>"},{"location":"os/Linux/system_mgmt/package_management/#update-package-list-and-system_2","title":"Update Package List and System","text":"<pre><code>sudo zypper refresh\nsudo zypper update\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_16","title":"Example","text":"<pre><code>sudo zypper refresh\nsudo zypper update\n# Refreshes package list and upgrades all installed packages\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#install-a-package_3","title":"Install a Package","text":"<pre><code>sudo zypper install &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_17","title":"Example","text":"<pre><code>sudo zypper install vim\n# Installs the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#remove-a-package_3","title":"Remove a Package","text":"<pre><code>sudo zypper remove &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_18","title":"Example","text":"<pre><code>sudo zypper remove vim\n# Removes the 'vim' text editor\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#search-for-a-package_3","title":"Search for a Package","text":"<pre><code>zypper search &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_19","title":"Example","text":"<pre><code>zypper search vim\n# Searches for packages related to 'vim'\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#show-package-details_3","title":"Show Package Details","text":"<pre><code>zypper info &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_20","title":"Example","text":"<pre><code>zypper info vim\n# Displays detailed information about the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#general-package-management","title":"General Package Management","text":""},{"location":"os/Linux/system_mgmt/package_management/#rpm","title":"<code>rpm</code>","text":"<p>The RPM Package Manager is used for managing packages in RPM-based distributions.</p>"},{"location":"os/Linux/system_mgmt/package_management/#install-a-package_4","title":"Install a Package","text":"<pre><code>sudo rpm -i &lt;package_file.rpm&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_21","title":"Example","text":"<pre><code>sudo rpm -i vim-8.2.0-1.x86_64.rpm\n# Installs the 'vim' package from the RPM file\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#remove-a-package_4","title":"Remove a Package","text":"<pre><code>sudo rpm -e &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_22","title":"Example","text":"<pre><code>sudo rpm -e vim\n# Removes the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#query-package-information","title":"Query Package Information","text":"<pre><code>rpm -q &lt;package_name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#example_23","title":"Example","text":"<pre><code>rpm -q vim\n# Queries information about the 'vim' package\n</code></pre>"},{"location":"os/Linux/system_mgmt/package_management/#summary","title":"Summary","text":"<p>Linux offers various package management tools depending on the distribution used. Understanding these commands helps in efficiently managing software installations, updates, and removals. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/system_mgmt/process_management/","title":"Linux Process Management Commands","text":""},{"location":"os/Linux/system_mgmt/process_management/#overview","title":"Overview","text":"<p>Linux provides several commands for managing processes, which include starting, stopping, and monitoring processes. These commands are essential for controlling and managing the execution of programs and tasks on a Linux system. This document covers basic and commonly used process management commands.</p>"},{"location":"os/Linux/system_mgmt/process_management/#display-processes","title":"Display Processes","text":""},{"location":"os/Linux/system_mgmt/process_management/#ps","title":"<code>ps</code>","text":"<p>Displays information about active processes.</p> <pre><code>ps\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example","title":"Example","text":"<pre><code>ps\n# Output: Lists processes running in the current shell\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#ps-aux","title":"<code>ps aux</code>","text":"<p>Displays a detailed list of all running processes, including those from other users.</p> <pre><code>ps aux\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_1","title":"Example","text":"<pre><code>ps aux\n# Output: Detailed list of all running processes\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#top","title":"<code>top</code>","text":"<p>Displays a dynamic, real-time view of system processes.</p> <pre><code>top\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_2","title":"Example","text":"<pre><code>top\n# Output: Real-time display of active processes and system resource usage\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#htop","title":"<code>htop</code>","text":"<p>An interactive process viewer similar to <code>top</code>, but with a more user-friendly interface.</p> <pre><code>htop\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_3","title":"Example","text":"<pre><code>htop\n# Output: Interactive display of processes with user-friendly interface\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#pgrep","title":"<code>pgrep</code>","text":"<p>Searches for processes by name or other attributes.</p> <pre><code>pgrep &lt;name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_4","title":"Example","text":"<pre><code>pgrep ssh\n# Output: Lists process IDs of processes matching 'ssh'\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#manage-processes","title":"Manage Processes","text":""},{"location":"os/Linux/system_mgmt/process_management/#kill","title":"<code>kill</code>","text":"<p>Sends a signal to a process, commonly used to terminate it.</p> <pre><code>kill &lt;PID&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_5","title":"Example","text":"<pre><code>kill 1234\n# Sends the default SIGTERM signal to the process with PID 1234\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#kill-9","title":"<code>kill -9</code>","text":"<p>Forcibly terminates a process.</p> <pre><code>kill -9 &lt;PID&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_6","title":"Example","text":"<pre><code>kill -9 1234\n# Sends the SIGKILL signal to the process with PID 1234, forcibly terminating it\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#pkill","title":"<code>pkill</code>","text":"<p>Sends a signal to processes by name.</p> <pre><code>pkill &lt;name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_7","title":"Example","text":"<pre><code>pkill firefox\n# Sends the default SIGTERM signal to all processes named 'firefox'\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#killall","title":"<code>killall</code>","text":"<p>Sends a signal to all processes with a specific name.</p> <pre><code>killall &lt;name&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_8","title":"Example","text":"<pre><code>killall firefox\n# Sends the default SIGTERM signal to all processes named 'firefox'\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#process-prioritization","title":"Process Prioritization","text":""},{"location":"os/Linux/system_mgmt/process_management/#nice","title":"<code>nice</code>","text":"<p>Runs a command with a specified priority level.</p> <pre><code>nice -n &lt;priority&gt; &lt;command&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_9","title":"Example","text":"<pre><code>nice -n 10 gzip largefile.txt\n# Runs 'gzip largefile.txt' with a priority level of 10\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#renice","title":"<code>renice</code>","text":"<p>Changes the priority of a running process.</p> <pre><code>renice &lt;priority&gt; -p &lt;PID&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_10","title":"Example","text":"<pre><code>renice 5 -p 1234\n# Changes the priority of the process with PID 1234 to 5\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#background-and-foreground-jobs","title":"Background and Foreground Jobs","text":""},{"location":"os/Linux/system_mgmt/process_management/#_1","title":"<code>&amp;</code>","text":"<p>Runs a command in the background.</p> <pre><code>command &amp;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_11","title":"Example","text":"<pre><code>sleep 60 &amp;\n# Runs the 'sleep 60' command in the background\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#jobs","title":"<code>jobs</code>","text":"<p>Lists all background jobs.</p> <pre><code>jobs\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_12","title":"Example","text":"<pre><code>jobs\n# Output: Lists background jobs and their job numbers\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#fg","title":"<code>fg</code>","text":"<p>Brings a background job to the foreground.</p> <pre><code>fg %&lt;job_number&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_13","title":"Example","text":"<pre><code>fg %1\n# Brings the background job with job number 1 to the foreground\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#bg","title":"<code>bg</code>","text":"<p>Resumes a suspended job in the background.</p> <pre><code>bg %&lt;job_number&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#example_14","title":"Example","text":"<pre><code>bg %1\n# Resumes the suspended job with job number 1 in the background\n</code></pre>"},{"location":"os/Linux/system_mgmt/process_management/#summary","title":"Summary","text":"<p>Linux offers a variety of commands for managing processes, from displaying and monitoring to controlling and prioritizing. Understanding these commands helps effectively manage and troubleshoot processes on a Linux system. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/system_mgmt/system_information/","title":"Linux System Information Commands","text":""},{"location":"os/Linux/system_mgmt/system_information/#overview","title":"Overview","text":"<p>Linux provides a range of commands to gather information about the system's hardware, software, and overall status. These commands are useful for monitoring and troubleshooting system performance and configuration. This document covers basic and commonly used system information commands.</p>"},{"location":"os/Linux/system_mgmt/system_information/#system-information","title":"System Information","text":""},{"location":"os/Linux/system_mgmt/system_information/#uname","title":"<code>uname</code>","text":"<p>Displays system information.</p> <pre><code>uname\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example","title":"Example","text":"<pre><code>uname\n# Output: Displays the kernel name (e.g., Linux)\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#uname-a","title":"<code>uname -a</code>","text":"<p>Displays all available system information, including kernel version and system architecture.</p> <pre><code>uname -a\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_1","title":"Example","text":"<pre><code>uname -a\n# Output: Linux hostname 5.4.0-42-generic #46-Ubuntu SMP Fri Sep 25 13:00:00 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#hostname","title":"<code>hostname</code>","text":"<p>Displays or sets the system's hostname.</p> <pre><code>hostname\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_2","title":"Example","text":"<pre><code>hostname\n# Output: Displays the current hostname of the system\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#hostnamectl","title":"<code>hostnamectl</code>","text":"<p>Displays or changes the system's hostname and other system information.</p> <pre><code>hostnamectl\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_3","title":"Example","text":"<pre><code>hostnamectl\n# Output: Provides detailed information about the system's hostname, operating system, and hardware\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#hardware-information","title":"Hardware Information","text":""},{"location":"os/Linux/system_mgmt/system_information/#lscpu","title":"<code>lscpu</code>","text":"<p>Displays detailed information about the CPU architecture.</p> <pre><code>lscpu\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_4","title":"Example","text":"<pre><code>lscpu\n# Output: Displays CPU architecture information including number of CPUs, model name, and more\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#lsblk","title":"<code>lsblk</code>","text":"<p>Lists information about all available block devices.</p> <pre><code>lsblk\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_5","title":"Example","text":"<pre><code>lsblk\n# Output: Lists block devices and their mount points, sizes, and types\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#lspci","title":"<code>lspci</code>","text":"<p>Lists all PCI devices on the system.</p> <pre><code>lspci\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_6","title":"Example","text":"<pre><code>lspci\n# Output: Lists PCI devices such as graphics cards, network adapters, etc.\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#lsusb","title":"<code>lsusb</code>","text":"<p>Lists all USB devices connected to the system.</p> <pre><code>lsusb\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_7","title":"Example","text":"<pre><code>lsusb\n# Output: Lists USB devices connected to the system along with their vendor and product IDs\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#dmidecode","title":"<code>dmidecode</code>","text":"<p>Displays information about the system's hardware as described in the BIOS.</p> <pre><code>sudo dmidecode\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_8","title":"Example","text":"<pre><code>sudo dmidecode\n# Output: Provides detailed information about hardware components, such as memory, CPU, and motherboard\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#memory-and-disk-usage","title":"Memory and Disk Usage","text":""},{"location":"os/Linux/system_mgmt/system_information/#free","title":"<code>free</code>","text":"<p>Displays information about system memory usage.</p> <pre><code>free\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_9","title":"Example","text":"<pre><code>free\n# Output: Displays memory usage, including total, used, and free memory\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#df","title":"<code>df</code>","text":"<p>Displays information about disk space usage for mounted filesystems.</p> <pre><code>df\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_10","title":"Example","text":"<pre><code>df\n# Output: Displays disk space usage for each mounted filesystem\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#du","title":"<code>du</code>","text":"<p>Displays disk usage of files and directories.</p> <pre><code>du &lt;directory&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_11","title":"Example","text":"<pre><code>du /home/user\n# Output: Displays disk usage for the '/home/user' directory\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#top","title":"<code>top</code>","text":"<p>Displays real-time system performance and process information.</p> <pre><code>top\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_12","title":"Example","text":"<pre><code>top\n# Output: Displays a real-time, interactive view of system processes and resource usage\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#htop","title":"<code>htop</code>","text":"<p>An enhanced version of <code>top</code> with a more user-friendly interface.</p> <pre><code>htop\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_13","title":"Example","text":"<pre><code>htop\n# Output: Provides an interactive, user-friendly view of system processes and resource usage\n# Use 'q' to quit\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#system-uptime","title":"System Uptime","text":""},{"location":"os/Linux/system_mgmt/system_information/#uptime","title":"<code>uptime</code>","text":"<p>Displays how long the system has been running, along with the number of users and load average.</p> <pre><code>uptime\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#example_14","title":"Example","text":"<pre><code>uptime\n# Output: Displays system uptime, number of users, and load averages\n</code></pre>"},{"location":"os/Linux/system_mgmt/system_information/#summary","title":"Summary","text":"<p>Linux provides a variety of commands to gather detailed system information, from hardware details and disk usage to real-time performance metrics. Understanding these commands helps in monitoring and maintaining system health. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"os/Linux/system_mgmt/user_group_management/","title":"Linux User and Group Management Commands","text":""},{"location":"os/Linux/system_mgmt/user_group_management/#overview","title":"Overview","text":"<p>Linux provides a set of commands for managing users and groups. These commands allow you to create, modify, delete, and view users and groups on the system. This document covers basic and commonly used user and group management commands.</p>"},{"location":"os/Linux/system_mgmt/user_group_management/#user-management","title":"User Management","text":""},{"location":"os/Linux/system_mgmt/user_group_management/#adduser-or-useradd","title":"<code>adduser</code> or <code>useradd</code>","text":"<p>Creates a new user.</p> <pre><code>sudo adduser &lt;username&gt;\n# or\nsudo useradd &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example","title":"Example","text":"<pre><code>sudo adduser john\n# Creates a new user named 'john'\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#usermod","title":"<code>usermod</code>","text":"<p>Modifies an existing user's account details.</p> <pre><code>sudo usermod &lt;options&gt; &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_1","title":"Example","text":"<pre><code>sudo usermod -aG sudo john\n# Adds the user 'john' to the 'sudo' group\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#deluser-or-userdel","title":"<code>deluser</code> or <code>userdel</code>","text":"<p>Deletes a user account.</p> <pre><code>sudo deluser &lt;username&gt;\n# or\nsudo userdel &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_2","title":"Example","text":"<pre><code>sudo deluser john\n# Deletes the user 'john' but keeps the home directory\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#passwd","title":"<code>passwd</code>","text":"<p>Changes a user's password.</p> <pre><code>sudo passwd &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_3","title":"Example","text":"<pre><code>sudo passwd john\n# Prompts to change the password for the user 'john'\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#id","title":"<code>id</code>","text":"<p>Displays information about a user.</p> <pre><code>id &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_4","title":"Example","text":"<pre><code>id john\n# Output: Displays user ID (UID), group ID (GID), and group memberships for 'john'\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#whoami","title":"<code>whoami</code>","text":"<p>Displays the username of the current user.</p> <pre><code>whoami\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_5","title":"Example","text":"<pre><code>whoami\n# Output: Displays the current logged-in username\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#group-management","title":"Group Management","text":""},{"location":"os/Linux/system_mgmt/user_group_management/#addgroup-or-groupadd","title":"<code>addgroup</code> or <code>groupadd</code>","text":"<p>Creates a new group.</p> <pre><code>sudo addgroup &lt;groupname&gt;\n# or\nsudo groupadd &lt;groupname&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_6","title":"Example","text":"<pre><code>sudo addgroup developers\n# Creates a new group named 'developers'\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#delgroup-or-groupdel","title":"<code>delgroup</code> or <code>groupdel</code>","text":"<p>Deletes a group.</p> <pre><code>sudo delgroup &lt;groupname&gt;\n# or\nsudo groupdel &lt;groupname&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_7","title":"Example","text":"<pre><code>sudo delgroup developers\n# Deletes the group named 'developers'\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#gpasswd","title":"<code>gpasswd</code>","text":"<p>Modifies group memberships and settings.</p> <pre><code>sudo gpasswd -a &lt;username&gt; &lt;groupname&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_8","title":"Example","text":"<pre><code>sudo gpasswd -a john developers\n# Adds the user 'john' to the 'developers' group\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#groups","title":"<code>groups</code>","text":"<p>Displays the groups that a user belongs to.</p> <pre><code>groups &lt;username&gt;\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_9","title":"Example","text":"<pre><code>groups john\n# Output: Displays the groups that the user 'john' belongs to\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#view-users-and-groups","title":"View Users and Groups","text":""},{"location":"os/Linux/system_mgmt/user_group_management/#getent","title":"<code>getent</code>","text":"<p>Displays entries from databases configured in <code>/etc/nsswitch.conf</code>, including users and groups.</p> <pre><code>getent passwd\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_10","title":"Example","text":"<pre><code>getent passwd\n# Output: Displays all user accounts in the system\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#cat-etcpasswd","title":"<code>cat /etc/passwd</code>","text":"<p>Displays the contents of the user account database file.</p> <pre><code>cat /etc/passwd\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_11","title":"Example","text":"<pre><code>cat /etc/passwd\n# Output: Displays user account information including username, UID, GID, home directory, and shell\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#cat-etcgroup","title":"<code>cat /etc/group</code>","text":"<p>Displays the contents of the group database file.</p> <pre><code>cat /etc/group\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#example_12","title":"Example","text":"<pre><code>cat /etc/group\n# Output: Displays group information including group name, GID, and group members\n</code></pre>"},{"location":"os/Linux/system_mgmt/user_group_management/#summary","title":"Summary","text":"<p>Linux offers a range of commands for managing users and groups, including creating, modifying, and deleting accounts and groups. Understanding these commands helps in effectively managing user and group permissions on a Linux system. For more detailed information on each command, refer to the Linux manual pages.</p>"},{"location":"projects/","title":"Welcome to Mini Projects notes.","text":""},{"location":"projects/#contents","title":"Contents","text":"<ol> <li>Website Builders</li> </ol>"},{"location":"projects/website_builder/","title":"Welcome to website builder notes.","text":""},{"location":"projects/website_builder/#contents","title":"Contents","text":"<ol> <li>Static Pages using HUGO and Github</li> <li>Static Pages using MKDOCS and Github</li> </ol>"},{"location":"projects/website_builder/static%20pages%20-%20hugo%20and%20github/","title":"Static Pages using Hugo and Github (Github Pages)","text":""},{"location":"projects/website_builder/static%20pages%20-%20hugo%20and%20github/#prerequisite","title":"Prerequisite","text":"<ul> <li>Programming Language - Python</li> <li>Static Site Generator Framework - Hugo</li> </ul>"},{"location":"projects/website_builder/static%20pages%20-%20hugo%20and%20github/#hugo","title":"Hugo","text":"<p>Download and install hugo using the following link and your OS: Hugo Once Hugo is installed, browse your preferred theme by visiting: Theme Catalog Download the theme and follow the given instructions provided in theme to modify the website according to you. For demonstration, I am using Hugo Profile</p>"},{"location":"projects/website_builder/static%20pages%20-%20hugo%20and%20github/#deployment","title":"Deployment","text":"<p>create a github repository with a name: .github.io  Push your content to this repository. Go to Settings/Pages of this repository and change the settings under Build and Deployment. Change the Source to Deploy from a branch and select root as a branch. Once this is done, deployment will trigger and can be checked under Actions tab of repository. You will get the link where website is deployed."},{"location":"projects/website_builder/static%20pages%20-%20mkdocs%20and%20github/","title":"Static Pages using MKDOCS and Github (Github Pages)","text":""},{"location":"projects/website_builder/static%20pages%20-%20mkdocs%20and%20github/#prerequisite","title":"Prerequisite","text":"<ul> <li>Programming Language - Python</li> <li>Python Libraries - mkdocs and its dependencies</li> </ul>"},{"location":"projects/website_builder/static%20pages%20-%20mkdocs%20and%20github/#mkdocs-library","title":"MKDOCS Library","text":"<p>Make sure to install the following using pip: <pre><code>- mkdocs                     1.5.3\n- mkdocs-autorefs            1.0.1\n- mkdocs-material            9.5.14\n- mkdocs-material-extensions 1.3.1\n- mkdocstrings               0.24.1\n- mkdocstrings-python        1.9.0\n</code></pre></p>"},{"location":"projects/website_builder/static%20pages%20-%20mkdocs%20and%20github/#steps","title":"Steps","text":"<ul> <li> <p>Navigate to your desired location and run the following command in powershell/commandline: <pre><code>mkdocs new &lt;project name&gt;\n</code></pre> This will create a new folder at your desired location with the provided project name. This folder will contain following content: <pre><code>- &lt;Project Name&gt;\n    - mkdocs.yml\n    - docs\n        - index.md\n</code></pre></p> </li> <li> <p>Modify mkdocs.yml file by adding the following contents: <pre><code>site_name: &lt;site name&gt;\ntheme:\n  name: material\n  features:\n    - navigation.tabs\n    - navigation.sections\n    - toc.integrate\n    - navigation.top\n    - search.suggest\n    - search.highlight\n    - content.tabs.link\n    - content.code.annotation\n    - content.code.copy\n  language: en\n  palette:\n    - scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline \n        name: Switch to dark mode\n      primary: black\n      accent: white \n    - scheme: slate \n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode    \n      primary: black\n      accent: white\n\nplugins:\n  - mkdocstrings\n\nnav:\n  - Home: index.md \n\nextra:\n  social:\n    - icon: fontawesome/brands/github-alt\n      link: &lt;github userid link&gt;\n\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - admonition\n  - pymdownx.arithmatex:\n      generic: true\n  - footnotes\n  - pymdownx.details\n  - pymdownx.superfences\n  - pymdownx.mark\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n\ncopyright: |\n  &amp;copy; 2024 &lt;a href=\"&lt;github userid link&gt;\"  target=\"_blank\" rel=\"noopener\"&gt;&lt;Name&gt;&lt;/a&gt;\n</code></pre></p> </li> <li> <p>Create New Page:</p> <p>All pages should be in markdown language and formatting. For Markdown guidelines, visit: Markdown Guide Create a new file under docs folder with a 'md' extension. These files can be nested and grouped under folders. Once file is created, you can add the link of this file in docs/index.md using <code>[Name](new_page.md)</code> This file can be added in mkdocs.yml under nav to display in navigation bar in website with following structure: <pre><code>Name: new_page.md\n</code></pre></p> </li> <li> <p>View Draft:</p> <p>To check how your website looks, run: <pre><code>mkdocs serve\n</code></pre> This will render your website in runtime, so any changes you do in your pages will get reflect here. This will help in modify/add contents to your website.</p> </li> <li> <p>Build your website:</p> <p>Once you are satisfied on how your website looks, its time to build the website. Run the following command to build: <pre><code>mkdocs build\n</code></pre> This will create a new folder named as 'Site' which will contain details and contents to build a static pages. These content can be used anywhere to build your website.</p> </li> <li> <p>Deployment</p> <p>Once mkdocs build command gets complete, add your contents to github repository. Initialize a git repository within the project folder. Create a gitignore file and add site folder in it. This will avoid having duplicate content in github repository. Now, add all the contents in git and commit it. Create a github repository with the same project name and push your folder contents to it. Now its time to deploy your website using github pages. Run the following command: <pre><code>mkdocs gh-deploy\n</code></pre> This will create a gh_pages branch and push the content of site to it and run the github workflow for deployment. After some time, your website will be deployed at the website link which will be provided when you run the mkdocs deploy command.</p> </li> </ul>"}]}