{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Notes","text":""},{"location":"#programming-languages","title":"Programming Languages","text":"<p>Explore various programming languages, their syntax, features, and applications. This section includes notes on languages such as Python, Java, JavaScript, and more.</p> # Concept # Concept # Concept # Concept 1. Python 2. Scala 3. Bash 4. Java 5. JavaScript 6. C 7. C++ 8. Markdown 9. HTML 10. CSS"},{"location":"languages/","title":"Welcome to Programming Languages notes.","text":"# Concept # Concept # Concept # Concept 1. Python 2. Scala 3. Bash 4. Java 5. JavaScript 6. C 7. C++ 8. Markdown 9. HTML 10. CSS"},{"location":"languages/bash/","title":"Welcome to Shell Scripting notes.","text":""},{"location":"languages/bash/#contents","title":"Contents","text":"<ol> <li>Shell Scripts</li> </ol>"},{"location":"languages/bash/shell_scripting/","title":"Linux Shell Scripting","text":""},{"location":"languages/bash/shell_scripting/#overview","title":"Overview","text":"<p>Shell scripting in Linux allows you to automate tasks and execute commands in a sequence. Shell scripts are written in various shell languages, such as Bash, and can simplify repetitive tasks and system administration.</p>"},{"location":"languages/bash/shell_scripting/#basic-concepts","title":"Basic Concepts","text":""},{"location":"languages/bash/shell_scripting/#shebang","title":"Shebang","text":"<p>The shebang (<code>#!</code>) specifies the interpreter for the script.</p> <pre><code>#!/bin/bash\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example","title":"Example","text":"<pre><code>#!/bin/bash\n# This line tells the system to use the Bash shell to interpret the script\n</code></pre>"},{"location":"languages/bash/shell_scripting/#making-a-script-executable","title":"Making a Script Executable","text":"<p>To make a script executable, use the <code>chmod</code> command:</p> <pre><code>chmod +x &lt;script_name&gt;\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_1","title":"Example","text":"<pre><code>chmod +x myscript.sh\n# Makes 'myscript.sh' executable\n</code></pre>"},{"location":"languages/bash/shell_scripting/#running-a-script","title":"Running a Script","text":"<p>To run a script, specify its path:</p> <pre><code>./&lt;script_name&gt;\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_2","title":"Example","text":"<pre><code>./myscript.sh\n# Executes 'myscript.sh'\n</code></pre>"},{"location":"languages/bash/shell_scripting/#basic-script-elements","title":"Basic Script Elements","text":""},{"location":"languages/bash/shell_scripting/#variables","title":"Variables","text":"<p>Variables store data and can be used throughout the script.</p> <pre><code>variable_name=value\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_3","title":"Example","text":"<pre><code>#!/bin/bash\nname=\"Alice\"\necho \"Hello, $name\"\n# Output: Hello, Alice\n</code></pre>"},{"location":"languages/bash/shell_scripting/#comments","title":"Comments","text":"<p>Comments are added with the <code>#</code> symbol and are ignored by the shell.</p> <pre><code># This is a comment\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_4","title":"Example","text":"<pre><code>#!/bin/bash\n# This script displays a message\necho \"Hello, World!\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#control-structures","title":"Control Structures","text":""},{"location":"languages/bash/shell_scripting/#conditional-statements","title":"Conditional Statements","text":"<p>Use <code>if</code>, <code>then</code>, <code>elif</code>, and <code>else</code> for conditional execution.</p> <pre><code>if [ condition ]; then\n    commands\nelif [ other_condition ]; then\n    other_commands\nelse\n    else_commands\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_5","title":"Example","text":"<pre><code>#!/bin/bash\nif [ -f \"file.txt\" ]; then\n    echo \"file.txt exists.\"\nelse\n    echo \"file.txt does not exist.\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#loops","title":"Loops","text":"<p>Loops iterate over a set of commands.</p>"},{"location":"languages/bash/shell_scripting/#for-loop","title":"<code>for</code> Loop","text":"<pre><code>for variable in list; do\n    commands\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_6","title":"Example","text":"<pre><code>#!/bin/bash\nfor i in 1 2 3 4 5; do\n    echo \"Number $i\"\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#while-loop","title":"<code>while</code> Loop","text":"<pre><code>while [ condition ]; do\n    commands\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_7","title":"Example","text":"<pre><code>#!/bin/bash\ncount=1\nwhile [ $count -le 5 ]; do\n    echo \"Count $count\"\n    ((count++))\ndone\n</code></pre>"},{"location":"languages/bash/shell_scripting/#functions","title":"Functions","text":"<p>Functions group commands and can be called multiple times.</p> <pre><code>function_name() {\n    commands\n}\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_8","title":"Example","text":"<pre><code>#!/bin/bash\ngreet() {\n    echo \"Hello, $1\"\n}\n\ngreet \"Alice\"\n# Output: Hello, Alice\n</code></pre>"},{"location":"languages/bash/shell_scripting/#advanced-topics","title":"Advanced Topics","text":""},{"location":"languages/bash/shell_scripting/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Access arguments passed to the script using <code>$1</code>, <code>$2</code>, etc.</p> <pre><code>#!/bin/bash\necho \"First argument: $1\"\necho \"Second argument: $2\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_9","title":"Example","text":"<pre><code>./myscript.sh arg1 arg2\n# Output:\n# First argument: arg1\n# Second argument: arg2\n</code></pre>"},{"location":"languages/bash/shell_scripting/#redirection-and-pipes","title":"Redirection and Pipes","text":"<ul> <li>Redirection: <code>&gt;</code> to write output to a file, <code>&lt;</code> to read from a file.</li> </ul> <pre><code>echo \"Hello\" &gt; file.txt\ncat &lt; file.txt\n</code></pre> <ul> <li>Pipes: <code>|</code> to pass the output of one command as input to another.</li> </ul> <pre><code>ls | grep \"pattern\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_10","title":"Example","text":"<pre><code>#!/bin/bash\nps aux | grep \"bash\"\n# Lists all processes and filters those with \"bash\"\n</code></pre>"},{"location":"languages/bash/shell_scripting/#error-handling","title":"Error Handling","text":"<p>Check the exit status of commands using <code>$?</code>.</p> <pre><code>command\nif [ $? -ne 0 ]; then\n    echo \"Command failed\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#example_11","title":"Example","text":"<pre><code>#!/bin/bash\nmkdir mydir\nif [ $? -ne 0 ]; then\n    echo \"Failed to create directory\"\nfi\n</code></pre>"},{"location":"languages/bash/shell_scripting/#summary","title":"Summary","text":"<p>Shell scripting is a powerful way to automate tasks and manage system operations. Understanding variables, control structures, loops, functions, and handling input/output will enable you to write effective scripts. For more detailed information, refer to the Bash manual or other shell scripting resources.</p>"},{"location":"languages/c%2B%2B/","title":"Welcome to C++ Programming Language Notes","text":"<p>Welcome to the comprehensive guide for mastering C++, a powerful, high-performance programming language widely used for developing software in domains like game development, real-time simulations, system software, and more. Whether you're a beginner just starting or an experienced developer looking to sharpen your skills, these notes are designed to help you gain a deep understanding of C++ and its core concepts.</p>"},{"location":"languages/c%2B%2B/#contents","title":"Contents","text":"<ol> <li>Tutorial    This section serves as your step-by-step guide to learning C++. It covers everything from basic syntax and data types to advanced topics like memory management, object-oriented programming, and template metaprogramming. Dive into practical examples and exercises that will solidify your knowledge and prepare you for real-world C++ development.</li> </ol>"},{"location":"languages/c%2B%2B/tutorial/","title":"Welcome to C++ Tutorials","text":"<p>Welcome to the C++ Tutorials, your go-to resource for learning the foundational and advanced aspects of C++. Whether you\u2019re a beginner or looking to enhance your C++ knowledge, these tutorials are crafted to guide you through the language's intricacies. You\u2019ll find detailed explanations, practical examples, and best practices to help you grasp the core concepts of C++ programming.</p>"},{"location":"languages/c%2B%2B/tutorial/#contents","title":"Contents","text":"<ol> <li>Basics    Start here to build a strong foundation in C++. This section introduces the fundamental concepts, including variables, data types, control structures, functions, and basic input/output. Perfect for those new to programming or looking for a refresher, these lessons will give you a solid starting point for mastering C++.</li> </ol>"},{"location":"languages/c%2B%2B/tutorial/basics/","title":"C++ Programming Language Tutorial","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#overview","title":"Overview","text":"<p>C++ is a high-level programming language that includes object-oriented, procedural, and generic programming features. It is widely used for system/software development, game development, and performance-critical applications.</p>"},{"location":"languages/c%2B%2B/tutorial/basics/#basic-syntax","title":"Basic Syntax","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#hello-world","title":"Hello World","text":"<p>A simple program to print \"Hello, World!\" to the console.</p> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#comments","title":"Comments","text":"<ul> <li>Single-line comment: <code>// This is a single-line comment</code></li> <li>Multi-line comment: <pre><code>/*\n * This is a multi-line comment\n */\n</code></pre></li> </ul>"},{"location":"languages/c%2B%2B/tutorial/basics/#data-types","title":"Data Types","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#primitive-data-types","title":"Primitive Data Types","text":"<ul> <li>int: Integer type</li> <li>float: Floating-point type</li> <li>double: Double precision floating-point type</li> <li>char: Character type</li> <li>bool: Boolean type</li> </ul>"},{"location":"languages/c%2B%2B/tutorial/basics/#example","title":"Example","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int age = 25;\n    float height = 5.9f;\n    double weight = 70.5;\n    char initial = 'A';\n    bool isStudent = true;\n\n    std::cout &lt;&lt; \"Age: \" &lt;&lt; age &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Height: \" &lt;&lt; height &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Weight: \" &lt;&lt; weight &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Initial: \" &lt;&lt; initial &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Is Student: \" &lt;&lt; isStudent &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#control-flow","title":"Control Flow","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#if-else-statement","title":"If-Else Statement","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int number = 10;\n\n    if (number &gt; 0) {\n        std::cout &lt;&lt; \"The number is positive.\" &lt;&lt; std::endl;\n    } else if (number &lt; 0) {\n        std::cout &lt;&lt; \"The number is negative.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"The number is zero.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#switch-statement","title":"Switch Statement","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int day = 3;\n\n    switch (day) {\n        case 1:\n            std::cout &lt;&lt; \"Monday\" &lt;&lt; std::endl;\n            break;\n        case 2:\n            std::cout &lt;&lt; \"Tuesday\" &lt;&lt; std::endl;\n            break;\n        case 3:\n            std::cout &lt;&lt; \"Wednesday\" &lt;&lt; std::endl;\n            break;\n        default:\n            std::cout &lt;&lt; \"Invalid day\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#functions","title":"Functions","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#function-declaration-and-definition","title":"Function Declaration and Definition","text":"<pre><code>#include &lt;iostream&gt;\n\nvoid greet() {\n    std::cout &lt;&lt; \"Hello, welcome to C++ programming!\" &lt;&lt; std::endl;\n}\n\nint main() {\n    greet();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#function-with-parameters","title":"Function with Parameters","text":"<pre><code>#include &lt;iostream&gt;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(5, 7);\n    std::cout &lt;&lt; \"Sum: \" &lt;&lt; sum &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#defining-a-class","title":"Defining a Class","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    void introduce() {\n        std::cout &lt;&lt; \"Hi, my name is \" &lt;&lt; name &lt;&lt; \" and I am \" &lt;&lt; age &lt;&lt; \" years old.\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Person person1;\n    person1.name = \"Alice\";\n    person1.age = 30;\n\n    person1.introduce();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#inheritance-and-polymorphism","title":"Inheritance and Polymorphism","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#inheritance-example","title":"Inheritance Example","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Animal {\npublic:\n    void speak() {\n        std::cout &lt;&lt; \"Animal makes a sound.\" &lt;&lt; std::endl;\n    }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() {\n        std::cout &lt;&lt; \"Dog barks.\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Dog myDog;\n    myDog.speak();  // Calls the Dog's speak method\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#polymorphism-example","title":"Polymorphism Example","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Base {\npublic:\n    virtual void show() {\n        std::cout &lt;&lt; \"Base class\" &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    void show() override {\n        std::cout &lt;&lt; \"Derived class\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Base* ptr;\n    Derived derivedObj;\n    ptr = &amp;derivedObj;\n\n    ptr-&gt;show();  // Calls Derived's show method\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#templates","title":"Templates","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#function-templates","title":"Function Templates","text":"<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nT max(T a, T b) {\n    return (a &gt; b) ? a : b;\n}\n\nint main() {\n    std::cout &lt;&lt; \"Max of 3 and 7 is \" &lt;&lt; max(3, 7) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Max of 3.5 and 2.1 is \" &lt;&lt; max(3.5, 2.1) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#class-templates","title":"Class Templates","text":"<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nclass MyArray {\nprivate:\n    T* arr;\n    int size;\n\npublic:\n    MyArray(int s) : size(s) {\n        arr = new T[size];\n    }\n\n    void setValue(int index, T value) {\n        if (index &lt; size) {\n            arr[index] = value;\n        }\n    }\n\n    T getValue(int index) {\n        if (index &lt; size) {\n            return arr[index];\n        }\n        return T();\n    }\n\n    ~MyArray() {\n        delete[] arr;\n    }\n};\n\nint main() {\n    MyArray&lt;int&gt; intArray(5);\n    intArray.setValue(0, 10);\n    std::cout &lt;&lt; \"Value at index 0: \" &lt;&lt; intArray.getValue(0) &lt;&lt; std::endl;\n\n    MyArray&lt;std::string&gt; strArray(3);\n    strArray.setValue(0, \"Hello\");\n    std::cout &lt;&lt; \"Value at index 0: \" &lt;&lt; strArray.getValue(0) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#file-io","title":"File I/O","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#reading-from-a-file","title":"Reading from a File","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nint main() {\n    std::ifstream infile(\"example.txt\");\n    std::string line;\n\n    if (!infile) {\n        std::cerr &lt;&lt; \"Error opening file.\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    while (std::getline(infile, line)) {\n        std::cout &lt;&lt; line &lt;&lt; std::endl;\n    }\n\n    infile.close();\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#writing-to-a-file","title":"Writing to a File","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream outfile(\"output.txt\");\n\n    if (!outfile) {\n        std::cerr &lt;&lt; \"Error opening file.\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    outfile &lt;&lt; \"This is a test file.\" &lt;&lt; std::endl;\n    outfile.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#standard-template-library-stl","title":"Standard Template Library (STL)","text":""},{"location":"languages/c%2B%2B/tutorial/basics/#using-vector","title":"Using <code>vector</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n\n    for (int num : numbers) {\n        std::cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#using-map","title":"Using <code>map</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nint main() {\n    std::map&lt;std::string, int&gt; ageMap;\n\n    ageMap[\"Alice\"] = 30;\n    ageMap[\"Bob\"] = 25;\n\n    for (const auto&amp; pair : ageMap) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \" is \" &lt;&lt; pair.second &lt;&lt; \" years old.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"languages/c%2B%2B/tutorial/basics/#summary","title":"Summary","text":"<p>This tutorial covers the basic concepts and syntax of C++ programming. C++ is a versatile language that supports multiple programming paradigms and is widely used in various domains. For further learning, refer to The C++ Programming Language by Bjarne Stroustrup.</p>"}]}